[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "lib/associations/base.js",
    "content": "\"use strict\";\nconst { AssociationError } = require(\"./../errors\");\nclass Association {\n  constructor(source, target, options = {}) {\n    this.source = source;\n    this.target = target;\n    this.options = options;\n    this.scope = options.scope;\n    this.isSelfAssociation = this.source === this.target;\n    this.as = options.as;\n    this.associationType = \"\";\n    if (source.hasAlias(options.as)) {\n      throw new AssociationError(`You have used the alias ${options.as} in two separate associations. Aliased associations must have unique aliases.`);\n    }\n  }\n  toInstanceArray(input) {\n    if (!Array.isArray(input)) {\n      input = [input];\n    }\n    return input.map((element) => {\n      if (element instanceof this.target) {\n        return element;\n      }\n      const tmpInstance = {};\n      tmpInstance[this.target.primaryKeyAttribute] = element;\n      return this.target.build(tmpInstance, { isNewRecord: false });\n    });\n  }\n  [Symbol.for(\"nodejs.util.inspect.custom\")]() {\n    return this.as;\n  }\n}\nmodule.exports = Association;\n//# sourceMappingURL=base.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/associations/base.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "AssociationError",
    "memberof": "lib/associations/base.js",
    "static": true,
    "longname": "lib/associations/base.js~AssociationError",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/associations/base.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "class",
    "name": "Association",
    "memberof": "lib/associations/base.js",
    "static": true,
    "longname": "lib/associations/base.js~Association",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/associations/base.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 51,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/associations/base.js~Association",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/associations/base.js~Association#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "source",
    "memberof": "lib/associations/base.js~Association",
    "static": false,
    "longname": "lib/associations/base.js~Association#source",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "target",
    "memberof": "lib/associations/base.js~Association",
    "static": false,
    "longname": "lib/associations/base.js~Association#target",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "options",
    "memberof": "lib/associations/base.js~Association",
    "static": false,
    "longname": "lib/associations/base.js~Association#options",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "scope",
    "memberof": "lib/associations/base.js~Association",
    "static": false,
    "longname": "lib/associations/base.js~Association#scope",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 56,
    "kind": "member",
    "name": "isSelfAssociation",
    "memberof": "lib/associations/base.js~Association",
    "static": false,
    "longname": "lib/associations/base.js~Association#isSelfAssociation",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 57,
    "kind": "member",
    "name": "as",
    "memberof": "lib/associations/base.js~Association",
    "static": false,
    "longname": "lib/associations/base.js~Association#as",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 58,
    "kind": "member",
    "name": "associationType",
    "memberof": "lib/associations/base.js~Association",
    "static": false,
    "longname": "lib/associations/base.js~Association#associationType",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "toInstanceArray",
    "memberof": "lib/associations/base.js~Association",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/associations/base.js~Association#toInstanceArray",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "input",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "[Symbol.for(\"nodejs.util.inspect.custom\")]",
    "memberof": "lib/associations/base.js~Association",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/associations/base.js~Association#[Symbol.for(\"nodejs.util.inspect.custom\")]",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 61,
    "kind": "file",
    "name": "lib/associations/belongs-to-many.js",
    "content": "\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nconst Utils = require(\"./../utils\");\nconst Helpers = require(\"./helpers\");\nconst _ = require(\"lodash\");\nconst Association = require(\"./base\");\nconst BelongsTo = require(\"./belongs-to\");\nconst HasMany = require(\"./has-many\");\nconst HasOne = require(\"./has-one\");\nconst AssociationError = require(\"../errors\").AssociationError;\nconst EmptyResultError = require(\"../errors\").EmptyResultError;\nconst { Op } = require(\"../operators\");\nclass BelongsToMany extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n    if (this.options.through === void 0 || this.options.through === true || this.options.through === null) {\n      throw new AssociationError(`${source.name}.belongsToMany(${target.name}) requires through option, pass either a string or a model`);\n    }\n    if (!this.options.through.model) {\n      this.options.through = {\n        model: options.through\n      };\n    }\n    this.associationType = \"BelongsToMany\";\n    this.targetAssociation = null;\n    this.sequelize = source.sequelize;\n    this.through = __spreadValues({}, this.options.through);\n    this.isMultiAssociation = true;\n    this.doubleLinked = false;\n    if (!this.as && this.isSelfAssociation) {\n      throw new AssociationError(\"'as' must be defined for many-to-many self-associations\");\n    }\n    if (this.as) {\n      this.isAliased = true;\n      if (_.isPlainObject(this.as)) {\n        this.options.name = this.as;\n        this.as = this.as.plural;\n      } else {\n        this.options.name = {\n          plural: this.as,\n          singular: Utils.singularize(this.as)\n        };\n      }\n    } else {\n      this.as = this.target.options.name.plural;\n      this.options.name = this.target.options.name;\n    }\n    this.combinedTableName = Utils.combineTableNames(this.source.tableName, this.isSelfAssociation ? this.as || this.target.tableName : this.target.tableName);\n    if (this.isSelfAssociation) {\n      this.targetAssociation = this;\n    }\n    _.each(this.target.associations, (association) => {\n      if (association.associationType !== \"BelongsToMany\") {\n        return;\n      }\n      if (association.target !== this.source) {\n        return;\n      }\n      if (this.options.through.model === association.options.through.model) {\n        this.paired = association;\n        association.paired = this;\n      }\n    });\n    this.sourceKey = this.options.sourceKey || this.source.primaryKeyAttribute;\n    this.sourceKeyField = this.source.rawAttributes[this.sourceKey].field || this.sourceKey;\n    if (this.options.targetKey) {\n      this.targetKey = this.options.targetKey;\n      this.targetKeyField = this.target.rawAttributes[this.targetKey].field || this.targetKey;\n    } else {\n      this.targetKeyDefault = true;\n      this.targetKey = this.target.primaryKeyAttribute;\n      this.targetKeyField = this.target.rawAttributes[this.targetKey].field || this.targetKey;\n    }\n    this._createForeignAndOtherKeys();\n    if (typeof this.through.model === \"string\") {\n      if (!this.sequelize.isDefined(this.through.model)) {\n        this.through.model = this.sequelize.define(this.through.model, {}, Object.assign(this.options, {\n          tableName: this.through.model,\n          indexes: [],\n          paranoid: this.through.paranoid ? this.through.paranoid : false,\n          validate: {}\n        }));\n      } else {\n        this.through.model = this.sequelize.model(this.through.model);\n      }\n    }\n    Object.assign(this.options, _.pick(this.through.model.options, [\n      \"timestamps\",\n      \"createdAt\",\n      \"updatedAt\",\n      \"deletedAt\",\n      \"paranoid\"\n    ]));\n    if (this.paired) {\n      let needInjectPaired = false;\n      if (this.targetKeyDefault) {\n        this.targetKey = this.paired.sourceKey;\n        this.targetKeyField = this.paired.sourceKeyField;\n        this._createForeignAndOtherKeys();\n      }\n      if (this.paired.targetKeyDefault && this.paired.targetKey !== this.sourceKey) {\n        delete this.through.model.rawAttributes[this.paired.otherKey];\n        this.paired.targetKey = this.sourceKey;\n        this.paired.targetKeyField = this.sourceKeyField;\n        this.paired._createForeignAndOtherKeys();\n        needInjectPaired = true;\n      }\n      if (this.otherKeyDefault) {\n        this.otherKey = this.paired.foreignKey;\n      }\n      if (this.paired.otherKeyDefault && this.paired.otherKey !== this.foreignKey) {\n        delete this.through.model.rawAttributes[this.paired.otherKey];\n        this.paired.otherKey = this.foreignKey;\n        needInjectPaired = true;\n      }\n      if (needInjectPaired) {\n        this.paired._injectAttributes();\n      }\n    }\n    if (this.through) {\n      this.throughModel = this.through.model;\n    }\n    this.options.tableName = this.combinedName = this.through.model === Object(this.through.model) ? this.through.model.tableName : this.through.model;\n    this.associationAccessor = this.as;\n    const plural = _.upperFirst(this.options.name.plural);\n    const singular = _.upperFirst(this.options.name.singular);\n    this.accessors = {\n      get: `get${plural}`,\n      set: `set${plural}`,\n      addMultiple: `add${plural}`,\n      add: `add${singular}`,\n      create: `create${singular}`,\n      remove: `remove${singular}`,\n      removeMultiple: `remove${plural}`,\n      hasSingle: `has${singular}`,\n      hasAll: `has${plural}`,\n      count: `count${plural}`\n    };\n  }\n  _createForeignAndOtherKeys() {\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else {\n      this.foreignKeyAttribute = {};\n      this.foreignKey = this.options.foreignKey || Utils.camelize([\n        this.source.options.name.singular,\n        this.sourceKey\n      ].join(\"_\"));\n    }\n    if (_.isObject(this.options.otherKey)) {\n      this.otherKeyAttribute = this.options.otherKey;\n      this.otherKey = this.otherKeyAttribute.name || this.otherKeyAttribute.fieldName;\n    } else {\n      if (!this.options.otherKey) {\n        this.otherKeyDefault = true;\n      }\n      this.otherKeyAttribute = {};\n      this.otherKey = this.options.otherKey || Utils.camelize([\n        this.isSelfAssociation ? Utils.singularize(this.as) : this.target.options.name.singular,\n        this.targetKey\n      ].join(\"_\"));\n    }\n  }\n  _injectAttributes() {\n    this.identifier = this.foreignKey;\n    this.foreignIdentifier = this.otherKey;\n    _.each(this.through.model.rawAttributes, (attribute, attributeName) => {\n      if (attribute.primaryKey === true && attribute._autoGenerated === true) {\n        if ([this.foreignKey, this.otherKey].includes(attributeName)) {\n          attribute.primaryKey = false;\n        } else {\n          delete this.through.model.rawAttributes[attributeName];\n        }\n        this.primaryKeyDeleted = true;\n      }\n    });\n    const sourceKey = this.source.rawAttributes[this.sourceKey];\n    const sourceKeyType = sourceKey.type;\n    const sourceKeyField = this.sourceKeyField;\n    const targetKey = this.target.rawAttributes[this.targetKey];\n    const targetKeyType = targetKey.type;\n    const targetKeyField = this.targetKeyField;\n    const sourceAttribute = __spreadValues({ type: sourceKeyType }, this.foreignKeyAttribute);\n    const targetAttribute = __spreadValues({ type: targetKeyType }, this.otherKeyAttribute);\n    if (this.primaryKeyDeleted === true) {\n      targetAttribute.primaryKey = sourceAttribute.primaryKey = true;\n    } else if (this.through.unique !== false) {\n      let uniqueKey;\n      if (typeof this.options.uniqueKey === \"string\" && this.options.uniqueKey !== \"\") {\n        uniqueKey = this.options.uniqueKey;\n      } else {\n        uniqueKey = [this.through.model.tableName, this.foreignKey, this.otherKey, \"unique\"].join(\"_\");\n      }\n      targetAttribute.unique = sourceAttribute.unique = uniqueKey;\n    }\n    if (!this.through.model.rawAttributes[this.foreignKey]) {\n      this.through.model.rawAttributes[this.foreignKey] = {\n        _autoGenerated: true\n      };\n    }\n    if (!this.through.model.rawAttributes[this.otherKey]) {\n      this.through.model.rawAttributes[this.otherKey] = {\n        _autoGenerated: true\n      };\n    }\n    if (this.options.constraints !== false) {\n      sourceAttribute.references = {\n        model: this.source.getTableName(),\n        key: sourceKeyField\n      };\n      sourceAttribute.onDelete = this.options.onDelete || this.through.model.rawAttributes[this.foreignKey].onDelete;\n      sourceAttribute.onUpdate = this.options.onUpdate || this.through.model.rawAttributes[this.foreignKey].onUpdate;\n      if (!sourceAttribute.onDelete) {\n        sourceAttribute.onDelete = \"CASCADE\";\n      }\n      if (!sourceAttribute.onUpdate) {\n        sourceAttribute.onUpdate = \"CASCADE\";\n      }\n      targetAttribute.references = {\n        model: this.target.getTableName(),\n        key: targetKeyField\n      };\n      targetAttribute.onDelete = this.through.model.rawAttributes[this.otherKey].onDelete || this.options.onDelete;\n      targetAttribute.onUpdate = this.through.model.rawAttributes[this.otherKey].onUpdate || this.options.onUpdate;\n      if (!targetAttribute.onDelete) {\n        targetAttribute.onDelete = \"CASCADE\";\n      }\n      if (!targetAttribute.onUpdate) {\n        targetAttribute.onUpdate = \"CASCADE\";\n      }\n    }\n    Object.assign(this.through.model.rawAttributes[this.foreignKey], sourceAttribute);\n    Object.assign(this.through.model.rawAttributes[this.otherKey], targetAttribute);\n    this.through.model.refreshAttributes();\n    this.identifierField = this.through.model.rawAttributes[this.foreignKey].field || this.foreignKey;\n    this.foreignIdentifierField = this.through.model.rawAttributes[this.otherKey].field || this.otherKey;\n    if (this.options.sequelize.options.dialect === \"db2\" && this.source.rawAttributes[this.sourceKey].primaryKey !== true) {\n      this.source.rawAttributes[this.sourceKey].unique = true;\n    }\n    if (this.paired && !this.paired.foreignIdentifierField) {\n      this.paired.foreignIdentifierField = this.through.model.rawAttributes[this.paired.otherKey].field || this.paired.otherKey;\n    }\n    this.toSource = new BelongsTo(this.through.model, this.source, {\n      foreignKey: this.foreignKey\n    });\n    this.manyFromSource = new HasMany(this.source, this.through.model, {\n      foreignKey: this.foreignKey\n    });\n    this.oneFromSource = new HasOne(this.source, this.through.model, {\n      foreignKey: this.foreignKey,\n      sourceKey: this.sourceKey,\n      as: this.through.model.name\n    });\n    this.toTarget = new BelongsTo(this.through.model, this.target, {\n      foreignKey: this.otherKey\n    });\n    this.manyFromTarget = new HasMany(this.target, this.through.model, {\n      foreignKey: this.otherKey\n    });\n    this.oneFromTarget = new HasOne(this.target, this.through.model, {\n      foreignKey: this.otherKey,\n      sourceKey: this.targetKey,\n      as: this.through.model.name\n    });\n    if (this.paired && this.paired.otherKeyDefault) {\n      this.paired.toTarget = new BelongsTo(this.paired.through.model, this.paired.target, {\n        foreignKey: this.paired.otherKey\n      });\n      this.paired.oneFromTarget = new HasOne(this.paired.target, this.paired.through.model, {\n        foreignKey: this.paired.otherKey,\n        sourceKey: this.paired.targetKey,\n        as: this.paired.through.model.name\n      });\n    }\n    Helpers.checkNamingCollision(this);\n    return this;\n  }\n  mixin(obj) {\n    const methods = [\"get\", \"count\", \"hasSingle\", \"hasAll\", \"set\", \"add\", \"addMultiple\", \"remove\", \"removeMultiple\", \"create\"];\n    const aliases = {\n      hasSingle: \"has\",\n      hasAll: \"has\",\n      addMultiple: \"add\",\n      removeMultiple: \"remove\"\n    };\n    Helpers.mixinMethods(this, obj, methods, aliases);\n  }\n  async get(instance, options) {\n    options = Utils.cloneDeep(options) || {};\n    const through = this.through;\n    let scopeWhere;\n    let throughWhere;\n    if (this.scope) {\n      scopeWhere = __spreadValues({}, this.scope);\n    }\n    options.where = {\n      [Op.and]: [\n        scopeWhere,\n        options.where\n      ]\n    };\n    if (Object(through.model) === through.model) {\n      throughWhere = {};\n      throughWhere[this.foreignKey] = instance.get(this.sourceKey);\n      if (through.scope) {\n        Object.assign(throughWhere, through.scope);\n      }\n      if (options.through && options.through.where) {\n        throughWhere = {\n          [Op.and]: [throughWhere, options.through.where]\n        };\n      }\n      options.include = options.include || [];\n      options.include.push({\n        association: this.oneFromTarget,\n        attributes: options.joinTableAttributes,\n        required: true,\n        paranoid: _.get(options.through, \"paranoid\", true),\n        where: throughWhere\n      });\n    }\n    let model = this.target;\n    if (Object.prototype.hasOwnProperty.call(options, \"scope\")) {\n      if (!options.scope) {\n        model = model.unscoped();\n      } else {\n        model = model.scope(options.scope);\n      }\n    }\n    if (Object.prototype.hasOwnProperty.call(options, \"schema\")) {\n      model = model.schema(options.schema, options.schemaDelimiter);\n    }\n    return model.findAll(options);\n  }\n  async count(instance, options) {\n    const sequelize = this.target.sequelize;\n    options = Utils.cloneDeep(options);\n    options.attributes = [\n      [sequelize.fn(\"COUNT\", sequelize.col([this.target.name, this.targetKeyField].join(\".\"))), \"count\"]\n    ];\n    options.joinTableAttributes = [];\n    options.raw = true;\n    options.plain = true;\n    const result = await this.get(instance, options);\n    return Number.parseInt(result.count, 10);\n  }\n  async has(sourceInstance, instances, options) {\n    if (!Array.isArray(instances)) {\n      instances = [instances];\n    }\n    options = __spreadProps(__spreadValues({\n      raw: true\n    }, options), {\n      scope: false,\n      attributes: [this.targetKey],\n      joinTableAttributes: []\n    });\n    const instancePrimaryKeys = instances.map((instance) => {\n      if (instance instanceof this.target) {\n        return instance.where();\n      }\n      return {\n        [this.targetKey]: instance\n      };\n    });\n    options.where = {\n      [Op.and]: [\n        { [Op.or]: instancePrimaryKeys },\n        options.where\n      ]\n    };\n    const associatedObjects = await this.get(sourceInstance, options);\n    return _.differenceWith(instancePrimaryKeys, associatedObjects, (a, b) => _.isEqual(a[this.targetKey], b[this.targetKey])).length === 0;\n  }\n  async set(sourceInstance, newAssociatedObjects, options) {\n    options = options || {};\n    const sourceKey = this.sourceKey;\n    const targetKey = this.targetKey;\n    const identifier = this.identifier;\n    const foreignIdentifier = this.foreignIdentifier;\n    if (newAssociatedObjects === null) {\n      newAssociatedObjects = [];\n    } else {\n      newAssociatedObjects = this.toInstanceArray(newAssociatedObjects);\n    }\n    const where = __spreadValues({\n      [identifier]: sourceInstance.get(sourceKey)\n    }, this.through.scope);\n    const updateAssociations = (currentRows) => {\n      const obsoleteAssociations = [];\n      const promises = [];\n      const defaultAttributes = options.through || {};\n      const unassociatedObjects = newAssociatedObjects.filter((obj) => !currentRows.some((currentRow) => currentRow[foreignIdentifier] === obj.get(targetKey)));\n      for (const currentRow of currentRows) {\n        const newObj = newAssociatedObjects.find((obj) => currentRow[foreignIdentifier] === obj.get(targetKey));\n        if (!newObj) {\n          obsoleteAssociations.push(currentRow);\n        } else {\n          let throughAttributes = newObj[this.through.model.name];\n          if (throughAttributes instanceof this.through.model) {\n            throughAttributes = {};\n          }\n          const attributes = __spreadValues(__spreadValues({}, defaultAttributes), throughAttributes);\n          if (Object.keys(attributes).length > 0) {\n            promises.push(this.through.model.update(attributes, Object.assign(options, {\n              where: {\n                [identifier]: sourceInstance.get(sourceKey),\n                [foreignIdentifier]: newObj.get(targetKey)\n              }\n            })));\n          }\n        }\n      }\n      if (obsoleteAssociations.length > 0) {\n        promises.push(this.through.model.destroy(__spreadProps(__spreadValues({}, options), {\n          where: __spreadValues({\n            [identifier]: sourceInstance.get(sourceKey),\n            [foreignIdentifier]: obsoleteAssociations.map((obsoleteAssociation) => obsoleteAssociation[foreignIdentifier])\n          }, this.through.scope)\n        })));\n      }\n      if (unassociatedObjects.length > 0) {\n        const bulk = unassociatedObjects.map((unassociatedObject) => {\n          return __spreadValues(__spreadProps(__spreadValues(__spreadValues({}, defaultAttributes), unassociatedObject[this.through.model.name]), {\n            [identifier]: sourceInstance.get(sourceKey),\n            [foreignIdentifier]: unassociatedObject.get(targetKey)\n          }), this.through.scope);\n        });\n        promises.push(this.through.model.bulkCreate(bulk, __spreadValues({ validate: true }, options)));\n      }\n      return Promise.all(promises);\n    };\n    try {\n      const currentRows = await this.through.model.findAll(__spreadProps(__spreadValues({}, options), { where, raw: true }));\n      return await updateAssociations(currentRows);\n    } catch (error) {\n      if (error instanceof EmptyResultError) {\n        return updateAssociations([]);\n      }\n      throw error;\n    }\n  }\n  async add(sourceInstance, newInstances, options) {\n    if (!newInstances) {\n      return;\n    }\n    options = __spreadValues({}, options);\n    const association = this;\n    const sourceKey = association.sourceKey;\n    const targetKey = association.targetKey;\n    const identifier = association.identifier;\n    const foreignIdentifier = association.foreignIdentifier;\n    const defaultAttributes = options.through || {};\n    newInstances = association.toInstanceArray(newInstances);\n    const where = __spreadValues({\n      [identifier]: sourceInstance.get(sourceKey),\n      [foreignIdentifier]: newInstances.map((newInstance) => newInstance.get(targetKey))\n    }, association.through.scope);\n    const updateAssociations = (currentRows) => {\n      const promises = [];\n      const unassociatedObjects = [];\n      const changedAssociations = [];\n      for (const obj of newInstances) {\n        const existingAssociation = currentRows && currentRows.find((current) => current[foreignIdentifier] === obj.get(targetKey));\n        if (!existingAssociation) {\n          unassociatedObjects.push(obj);\n        } else {\n          const throughAttributes = obj[association.through.model.name];\n          const attributes = __spreadValues(__spreadValues({}, defaultAttributes), throughAttributes);\n          if (Object.keys(attributes).some((attribute) => attributes[attribute] !== existingAssociation[attribute])) {\n            changedAssociations.push(obj);\n          }\n        }\n      }\n      if (unassociatedObjects.length > 0) {\n        const bulk = unassociatedObjects.map((unassociatedObject) => {\n          const throughAttributes = unassociatedObject[association.through.model.name];\n          const attributes = __spreadValues(__spreadValues({}, defaultAttributes), throughAttributes);\n          attributes[identifier] = sourceInstance.get(sourceKey);\n          attributes[foreignIdentifier] = unassociatedObject.get(targetKey);\n          Object.assign(attributes, association.through.scope);\n          return attributes;\n        });\n        promises.push(association.through.model.bulkCreate(bulk, __spreadValues({ validate: true }, options)));\n      }\n      for (const assoc of changedAssociations) {\n        let throughAttributes = assoc[association.through.model.name];\n        const attributes = __spreadValues(__spreadValues({}, defaultAttributes), throughAttributes);\n        if (throughAttributes instanceof association.through.model) {\n          throughAttributes = {};\n        }\n        promises.push(association.through.model.update(attributes, Object.assign(options, {\n          where: {\n            [identifier]: sourceInstance.get(sourceKey),\n            [foreignIdentifier]: assoc.get(targetKey)\n          }\n        })));\n      }\n      return Promise.all(promises);\n    };\n    try {\n      const currentRows = await association.through.model.findAll(__spreadProps(__spreadValues({}, options), { where, raw: true }));\n      const [associations] = await updateAssociations(currentRows);\n      return associations;\n    } catch (error) {\n      if (error instanceof EmptyResultError) {\n        return updateAssociations();\n      }\n      throw error;\n    }\n  }\n  remove(sourceInstance, oldAssociatedObjects, options) {\n    const association = this;\n    options = options || {};\n    oldAssociatedObjects = association.toInstanceArray(oldAssociatedObjects);\n    const where = {\n      [association.identifier]: sourceInstance.get(association.sourceKey),\n      [association.foreignIdentifier]: oldAssociatedObjects.map((newInstance) => newInstance.get(association.targetKey))\n    };\n    return association.through.model.destroy(__spreadProps(__spreadValues({}, options), { where }));\n  }\n  async create(sourceInstance, values, options) {\n    const association = this;\n    options = options || {};\n    values = values || {};\n    if (Array.isArray(options)) {\n      options = {\n        fields: options\n      };\n    }\n    if (association.scope) {\n      Object.assign(values, association.scope);\n      if (options.fields) {\n        options.fields = [...options.fields, ...Object.keys(association.scope)];\n      }\n    }\n    const newAssociatedObject = await association.target.create(values, options);\n    await sourceInstance[association.accessors.add](newAssociatedObject, _.omit(options, [\"fields\"]));\n    return newAssociatedObject;\n  }\n  verifyAssociationAlias(alias) {\n    if (typeof alias === \"string\") {\n      return this.as === alias;\n    }\n    if (alias && alias.plural) {\n      return this.as === alias.plural;\n    }\n    return !this.isAliased;\n  }\n}\nmodule.exports = BelongsToMany;\nmodule.exports.BelongsToMany = BelongsToMany;\nmodule.exports.default = BelongsToMany;\n//# sourceMappingURL=belongs-to-many.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/associations/belongs-to-many.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 62,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/associations/belongs-to-many.js",
    "static": true,
    "longname": "lib/associations/belongs-to-many.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/associations/belongs-to-many.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "variable",
    "name": "__defProps",
    "memberof": "lib/associations/belongs-to-many.js",
    "static": true,
    "longname": "lib/associations/belongs-to-many.js~__defProps",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/associations/belongs-to-many.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "variable",
    "name": "__getOwnPropDescs",
    "memberof": "lib/associations/belongs-to-many.js",
    "static": true,
    "longname": "lib/associations/belongs-to-many.js~__getOwnPropDescs",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/associations/belongs-to-many.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "variable",
    "name": "__getOwnPropSymbols",
    "memberof": "lib/associations/belongs-to-many.js",
    "static": true,
    "longname": "lib/associations/belongs-to-many.js~__getOwnPropSymbols",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/associations/belongs-to-many.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/associations/belongs-to-many.js",
    "static": true,
    "longname": "lib/associations/belongs-to-many.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/associations/belongs-to-many.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "variable",
    "name": "__propIsEnum",
    "memberof": "lib/associations/belongs-to-many.js",
    "static": true,
    "longname": "lib/associations/belongs-to-many.js~__propIsEnum",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/associations/belongs-to-many.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "function",
    "name": "__defNormalProp",
    "memberof": "lib/associations/belongs-to-many.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/associations/belongs-to-many.js~__defNormalProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/associations/belongs-to-many.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 69,
    "kind": "function",
    "name": "__spreadValues",
    "memberof": "lib/associations/belongs-to-many.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/associations/belongs-to-many.js~__spreadValues",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/associations/belongs-to-many.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "function",
    "name": "__spreadProps",
    "memberof": "lib/associations/belongs-to-many.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/associations/belongs-to-many.js~__spreadProps",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/associations/belongs-to-many.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 71,
    "kind": "variable",
    "name": "Utils",
    "memberof": "lib/associations/belongs-to-many.js",
    "static": true,
    "longname": "lib/associations/belongs-to-many.js~Utils",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/associations/belongs-to-many.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 72,
    "kind": "variable",
    "name": "Helpers",
    "memberof": "lib/associations/belongs-to-many.js",
    "static": true,
    "longname": "lib/associations/belongs-to-many.js~Helpers",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/associations/belongs-to-many.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 73,
    "kind": "variable",
    "name": "_",
    "memberof": "lib/associations/belongs-to-many.js",
    "static": true,
    "longname": "lib/associations/belongs-to-many.js~_",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/associations/belongs-to-many.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 74,
    "kind": "variable",
    "name": "Association",
    "memberof": "lib/associations/belongs-to-many.js",
    "static": true,
    "longname": "lib/associations/belongs-to-many.js~Association",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/associations/belongs-to-many.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 75,
    "kind": "variable",
    "name": "BelongsTo",
    "memberof": "lib/associations/belongs-to-many.js",
    "static": true,
    "longname": "lib/associations/belongs-to-many.js~BelongsTo",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/associations/belongs-to-many.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 76,
    "kind": "variable",
    "name": "HasMany",
    "memberof": "lib/associations/belongs-to-many.js",
    "static": true,
    "longname": "lib/associations/belongs-to-many.js~HasMany",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/associations/belongs-to-many.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 77,
    "kind": "variable",
    "name": "HasOne",
    "memberof": "lib/associations/belongs-to-many.js",
    "static": true,
    "longname": "lib/associations/belongs-to-many.js~HasOne",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/associations/belongs-to-many.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 78,
    "kind": "variable",
    "name": "AssociationError",
    "memberof": "lib/associations/belongs-to-many.js",
    "static": true,
    "longname": "lib/associations/belongs-to-many.js~AssociationError",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/associations/belongs-to-many.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 79,
    "kind": "variable",
    "name": "EmptyResultError",
    "memberof": "lib/associations/belongs-to-many.js",
    "static": true,
    "longname": "lib/associations/belongs-to-many.js~EmptyResultError",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/associations/belongs-to-many.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 80,
    "kind": "variable",
    "name": "Op",
    "memberof": "lib/associations/belongs-to-many.js",
    "static": true,
    "longname": "lib/associations/belongs-to-many.js~Op",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/associations/belongs-to-many.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 81,
    "kind": "class",
    "name": "BelongsToMany",
    "memberof": "lib/associations/belongs-to-many.js",
    "static": true,
    "longname": "lib/associations/belongs-to-many.js~BelongsToMany",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/associations/belongs-to-many.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "interface": false,
    "extends": [
      "Association"
    ],
    "ignore": true
  },
  {
    "__docId__": 82,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/associations/belongs-to-many.js~BelongsToMany",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/associations/belongs-to-many.js~BelongsToMany#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 83,
    "kind": "member",
    "name": "associationType",
    "memberof": "lib/associations/belongs-to-many.js~BelongsToMany",
    "static": false,
    "longname": "lib/associations/belongs-to-many.js~BelongsToMany#associationType",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 84,
    "kind": "member",
    "name": "targetAssociation",
    "memberof": "lib/associations/belongs-to-many.js~BelongsToMany",
    "static": false,
    "longname": "lib/associations/belongs-to-many.js~BelongsToMany#targetAssociation",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 85,
    "kind": "member",
    "name": "sequelize",
    "memberof": "lib/associations/belongs-to-many.js~BelongsToMany",
    "static": false,
    "longname": "lib/associations/belongs-to-many.js~BelongsToMany#sequelize",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 86,
    "kind": "member",
    "name": "through",
    "memberof": "lib/associations/belongs-to-many.js~BelongsToMany",
    "static": false,
    "longname": "lib/associations/belongs-to-many.js~BelongsToMany#through",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 87,
    "kind": "member",
    "name": "isMultiAssociation",
    "memberof": "lib/associations/belongs-to-many.js~BelongsToMany",
    "static": false,
    "longname": "lib/associations/belongs-to-many.js~BelongsToMany#isMultiAssociation",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 88,
    "kind": "member",
    "name": "doubleLinked",
    "memberof": "lib/associations/belongs-to-many.js~BelongsToMany",
    "static": false,
    "longname": "lib/associations/belongs-to-many.js~BelongsToMany#doubleLinked",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 89,
    "kind": "member",
    "name": "isAliased",
    "memberof": "lib/associations/belongs-to-many.js~BelongsToMany",
    "static": false,
    "longname": "lib/associations/belongs-to-many.js~BelongsToMany#isAliased",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 90,
    "kind": "member",
    "name": "as",
    "memberof": "lib/associations/belongs-to-many.js~BelongsToMany",
    "static": false,
    "longname": "lib/associations/belongs-to-many.js~BelongsToMany#as",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 92,
    "kind": "member",
    "name": "combinedTableName",
    "memberof": "lib/associations/belongs-to-many.js~BelongsToMany",
    "static": false,
    "longname": "lib/associations/belongs-to-many.js~BelongsToMany#combinedTableName",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 94,
    "kind": "member",
    "name": "paired",
    "memberof": "lib/associations/belongs-to-many.js~BelongsToMany",
    "static": false,
    "longname": "lib/associations/belongs-to-many.js~BelongsToMany#paired",
    "access": "public",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 95,
    "kind": "member",
    "name": "sourceKey",
    "memberof": "lib/associations/belongs-to-many.js~BelongsToMany",
    "static": false,
    "longname": "lib/associations/belongs-to-many.js~BelongsToMany#sourceKey",
    "access": "public",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 96,
    "kind": "member",
    "name": "sourceKeyField",
    "memberof": "lib/associations/belongs-to-many.js~BelongsToMany",
    "static": false,
    "longname": "lib/associations/belongs-to-many.js~BelongsToMany#sourceKeyField",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 97,
    "kind": "member",
    "name": "targetKey",
    "memberof": "lib/associations/belongs-to-many.js~BelongsToMany",
    "static": false,
    "longname": "lib/associations/belongs-to-many.js~BelongsToMany#targetKey",
    "access": "public",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 98,
    "kind": "member",
    "name": "targetKeyField",
    "memberof": "lib/associations/belongs-to-many.js~BelongsToMany",
    "static": false,
    "longname": "lib/associations/belongs-to-many.js~BelongsToMany#targetKeyField",
    "access": "public",
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 99,
    "kind": "member",
    "name": "targetKeyDefault",
    "memberof": "lib/associations/belongs-to-many.js~BelongsToMany",
    "static": false,
    "longname": "lib/associations/belongs-to-many.js~BelongsToMany#targetKeyDefault",
    "access": "public",
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 104,
    "kind": "member",
    "name": "otherKey",
    "memberof": "lib/associations/belongs-to-many.js~BelongsToMany",
    "static": false,
    "longname": "lib/associations/belongs-to-many.js~BelongsToMany#otherKey",
    "access": "public",
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 105,
    "kind": "member",
    "name": "throughModel",
    "memberof": "lib/associations/belongs-to-many.js~BelongsToMany",
    "static": false,
    "longname": "lib/associations/belongs-to-many.js~BelongsToMany#throughModel",
    "access": "public",
    "description": null,
    "lineNumber": 139,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 106,
    "kind": "member",
    "name": "associationAccessor",
    "memberof": "lib/associations/belongs-to-many.js~BelongsToMany",
    "static": false,
    "longname": "lib/associations/belongs-to-many.js~BelongsToMany#associationAccessor",
    "access": "public",
    "description": null,
    "lineNumber": 142,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 107,
    "kind": "member",
    "name": "accessors",
    "memberof": "lib/associations/belongs-to-many.js~BelongsToMany",
    "static": false,
    "longname": "lib/associations/belongs-to-many.js~BelongsToMany#accessors",
    "access": "public",
    "description": null,
    "lineNumber": 145,
    "undocument": true,
    "type": {
      "types": [
        "{\"get\": *, \"set\": *, \"addMultiple\": *, \"add\": *, \"create\": *, \"remove\": *, \"removeMultiple\": *, \"hasSingle\": *, \"hasAll\": *, \"count\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "_createForeignAndOtherKeys",
    "memberof": "lib/associations/belongs-to-many.js~BelongsToMany",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/associations/belongs-to-many.js~BelongsToMany#_createForeignAndOtherKeys",
    "access": "private",
    "description": null,
    "lineNumber": 158,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 109,
    "kind": "member",
    "name": "foreignKeyAttribute",
    "memberof": "lib/associations/belongs-to-many.js~BelongsToMany",
    "static": false,
    "longname": "lib/associations/belongs-to-many.js~BelongsToMany#foreignKeyAttribute",
    "access": "public",
    "description": null,
    "lineNumber": 160,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 110,
    "kind": "member",
    "name": "foreignKey",
    "memberof": "lib/associations/belongs-to-many.js~BelongsToMany",
    "static": false,
    "longname": "lib/associations/belongs-to-many.js~BelongsToMany#foreignKey",
    "access": "public",
    "description": null,
    "lineNumber": 161,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 113,
    "kind": "member",
    "name": "otherKeyAttribute",
    "memberof": "lib/associations/belongs-to-many.js~BelongsToMany",
    "static": false,
    "longname": "lib/associations/belongs-to-many.js~BelongsToMany#otherKeyAttribute",
    "access": "public",
    "description": null,
    "lineNumber": 170,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 115,
    "kind": "member",
    "name": "otherKeyDefault",
    "memberof": "lib/associations/belongs-to-many.js~BelongsToMany",
    "static": false,
    "longname": "lib/associations/belongs-to-many.js~BelongsToMany#otherKeyDefault",
    "access": "public",
    "description": null,
    "lineNumber": 174,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "_injectAttributes",
    "memberof": "lib/associations/belongs-to-many.js~BelongsToMany",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/associations/belongs-to-many.js~BelongsToMany#_injectAttributes",
    "access": "private",
    "description": null,
    "lineNumber": 183,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 119,
    "kind": "member",
    "name": "identifier",
    "memberof": "lib/associations/belongs-to-many.js~BelongsToMany",
    "static": false,
    "longname": "lib/associations/belongs-to-many.js~BelongsToMany#identifier",
    "access": "public",
    "description": null,
    "lineNumber": 184,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 120,
    "kind": "member",
    "name": "foreignIdentifier",
    "memberof": "lib/associations/belongs-to-many.js~BelongsToMany",
    "static": false,
    "longname": "lib/associations/belongs-to-many.js~BelongsToMany#foreignIdentifier",
    "access": "public",
    "description": null,
    "lineNumber": 185,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 121,
    "kind": "member",
    "name": "primaryKeyDeleted",
    "memberof": "lib/associations/belongs-to-many.js~BelongsToMany",
    "static": false,
    "longname": "lib/associations/belongs-to-many.js~BelongsToMany#primaryKeyDeleted",
    "access": "public",
    "description": null,
    "lineNumber": 193,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 122,
    "kind": "member",
    "name": "identifierField",
    "memberof": "lib/associations/belongs-to-many.js~BelongsToMany",
    "static": false,
    "longname": "lib/associations/belongs-to-many.js~BelongsToMany#identifierField",
    "access": "public",
    "description": null,
    "lineNumber": 254,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 123,
    "kind": "member",
    "name": "foreignIdentifierField",
    "memberof": "lib/associations/belongs-to-many.js~BelongsToMany",
    "static": false,
    "longname": "lib/associations/belongs-to-many.js~BelongsToMany#foreignIdentifierField",
    "access": "public",
    "description": null,
    "lineNumber": 255,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 124,
    "kind": "member",
    "name": "toSource",
    "memberof": "lib/associations/belongs-to-many.js~BelongsToMany",
    "static": false,
    "longname": "lib/associations/belongs-to-many.js~BelongsToMany#toSource",
    "access": "public",
    "description": null,
    "lineNumber": 262,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 125,
    "kind": "member",
    "name": "manyFromSource",
    "memberof": "lib/associations/belongs-to-many.js~BelongsToMany",
    "static": false,
    "longname": "lib/associations/belongs-to-many.js~BelongsToMany#manyFromSource",
    "access": "public",
    "description": null,
    "lineNumber": 265,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 126,
    "kind": "member",
    "name": "oneFromSource",
    "memberof": "lib/associations/belongs-to-many.js~BelongsToMany",
    "static": false,
    "longname": "lib/associations/belongs-to-many.js~BelongsToMany#oneFromSource",
    "access": "public",
    "description": null,
    "lineNumber": 268,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 127,
    "kind": "member",
    "name": "toTarget",
    "memberof": "lib/associations/belongs-to-many.js~BelongsToMany",
    "static": false,
    "longname": "lib/associations/belongs-to-many.js~BelongsToMany#toTarget",
    "access": "public",
    "description": null,
    "lineNumber": 273,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 128,
    "kind": "member",
    "name": "manyFromTarget",
    "memberof": "lib/associations/belongs-to-many.js~BelongsToMany",
    "static": false,
    "longname": "lib/associations/belongs-to-many.js~BelongsToMany#manyFromTarget",
    "access": "public",
    "description": null,
    "lineNumber": 276,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 129,
    "kind": "member",
    "name": "oneFromTarget",
    "memberof": "lib/associations/belongs-to-many.js~BelongsToMany",
    "static": false,
    "longname": "lib/associations/belongs-to-many.js~BelongsToMany#oneFromTarget",
    "access": "public",
    "description": null,
    "lineNumber": 279,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 130,
    "kind": "method",
    "name": "mixin",
    "memberof": "lib/associations/belongs-to-many.js~BelongsToMany",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/associations/belongs-to-many.js~BelongsToMany#mixin",
    "access": "public",
    "description": null,
    "lineNumber": 297,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 131,
    "kind": "method",
    "name": "get",
    "memberof": "lib/associations/belongs-to-many.js~BelongsToMany",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/associations/belongs-to-many.js~BelongsToMany#get",
    "access": "public",
    "description": null,
    "lineNumber": 307,
    "undocument": true,
    "params": [
      {
        "name": "instance",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 132,
    "kind": "method",
    "name": "count",
    "memberof": "lib/associations/belongs-to-many.js~BelongsToMany",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/associations/belongs-to-many.js~BelongsToMany#count",
    "access": "public",
    "description": null,
    "lineNumber": 354,
    "undocument": true,
    "params": [
      {
        "name": "instance",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "has",
    "memberof": "lib/associations/belongs-to-many.js~BelongsToMany",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/associations/belongs-to-many.js~BelongsToMany#has",
    "access": "public",
    "description": null,
    "lineNumber": 366,
    "undocument": true,
    "params": [
      {
        "name": "sourceInstance",
        "types": [
          "*"
        ]
      },
      {
        "name": "instances",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "set",
    "memberof": "lib/associations/belongs-to-many.js~BelongsToMany",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/associations/belongs-to-many.js~BelongsToMany#set",
    "access": "public",
    "description": null,
    "lineNumber": 394,
    "undocument": true,
    "params": [
      {
        "name": "sourceInstance",
        "types": [
          "*"
        ]
      },
      {
        "name": "newAssociatedObjects",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "add",
    "memberof": "lib/associations/belongs-to-many.js~BelongsToMany",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/associations/belongs-to-many.js~BelongsToMany#add",
    "access": "public",
    "description": null,
    "lineNumber": 462,
    "undocument": true,
    "params": [
      {
        "name": "sourceInstance",
        "types": [
          "*"
        ]
      },
      {
        "name": "newInstances",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "remove",
    "memberof": "lib/associations/belongs-to-many.js~BelongsToMany",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/associations/belongs-to-many.js~BelongsToMany#remove",
    "access": "public",
    "description": null,
    "lineNumber": 531,
    "undocument": true,
    "params": [
      {
        "name": "sourceInstance",
        "types": [
          "*"
        ]
      },
      {
        "name": "oldAssociatedObjects",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "create",
    "memberof": "lib/associations/belongs-to-many.js~BelongsToMany",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/associations/belongs-to-many.js~BelongsToMany#create",
    "access": "public",
    "description": null,
    "lineNumber": 541,
    "undocument": true,
    "params": [
      {
        "name": "sourceInstance",
        "types": [
          "*"
        ]
      },
      {
        "name": "values",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "verifyAssociationAlias",
    "memberof": "lib/associations/belongs-to-many.js~BelongsToMany",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/associations/belongs-to-many.js~BelongsToMany#verifyAssociationAlias",
    "access": "public",
    "description": null,
    "lineNumber": 560,
    "undocument": true,
    "params": [
      {
        "name": "alias",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 139,
    "kind": "file",
    "name": "lib/associations/belongs-to.js",
    "content": "\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nconst Utils = require(\"./../utils\");\nconst Helpers = require(\"./helpers\");\nconst _ = require(\"lodash\");\nconst Association = require(\"./base\");\nconst { Op } = require(\"../operators\");\nclass BelongsTo extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n    this.associationType = \"BelongsTo\";\n    this.isSingleAssociation = true;\n    this.foreignKeyAttribute = {};\n    if (this.as) {\n      this.isAliased = true;\n      this.options.name = {\n        singular: this.as\n      };\n    } else {\n      this.as = this.target.options.name.singular;\n      this.options.name = this.target.options.name;\n    }\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else if (this.options.foreignKey) {\n      this.foreignKey = this.options.foreignKey;\n    }\n    if (!this.foreignKey) {\n      this.foreignKey = Utils.camelize([\n        this.as,\n        this.target.primaryKeyAttribute\n      ].join(\"_\"));\n    }\n    this.identifier = this.foreignKey;\n    if (this.source.rawAttributes[this.identifier]) {\n      this.identifierField = this.source.rawAttributes[this.identifier].field || this.identifier;\n    }\n    if (this.options.targetKey && !this.target.rawAttributes[this.options.targetKey]) {\n      throw new Error(`Unknown attribute \"${this.options.targetKey}\" passed as targetKey, define this attribute on model \"${this.target.name}\" first`);\n    }\n    this.targetKey = this.options.targetKey || this.target.primaryKeyAttribute;\n    this.targetKeyField = this.target.rawAttributes[this.targetKey].field || this.targetKey;\n    this.targetKeyIsPrimary = this.targetKey === this.target.primaryKeyAttribute;\n    this.targetIdentifier = this.targetKey;\n    this.associationAccessor = this.as;\n    this.options.useHooks = options.useHooks;\n    const singular = _.upperFirst(this.options.name.singular);\n    this.accessors = {\n      get: `get${singular}`,\n      set: `set${singular}`,\n      create: `create${singular}`\n    };\n  }\n  _injectAttributes() {\n    const newAttributes = {\n      [this.foreignKey]: __spreadValues({\n        type: this.options.keyType || this.target.rawAttributes[this.targetKey].type,\n        allowNull: true\n      }, this.foreignKeyAttribute)\n    };\n    if (this.options.constraints !== false) {\n      const source = this.source.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];\n      this.options.onDelete = this.options.onDelete || (source.allowNull ? \"SET NULL\" : \"NO ACTION\");\n      this.options.onUpdate = this.options.onUpdate || \"CASCADE\";\n    }\n    Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.target, this.source, this.options, this.targetKeyField);\n    Utils.mergeDefaults(this.source.rawAttributes, newAttributes);\n    this.source.refreshAttributes();\n    this.identifierField = this.source.rawAttributes[this.foreignKey].field || this.foreignKey;\n    Helpers.checkNamingCollision(this);\n    return this;\n  }\n  mixin(obj) {\n    const methods = [\"get\", \"set\", \"create\"];\n    Helpers.mixinMethods(this, obj, methods);\n  }\n  async get(instances, options) {\n    const where = {};\n    let Target = this.target;\n    let instance;\n    options = Utils.cloneDeep(options);\n    if (Object.prototype.hasOwnProperty.call(options, \"scope\")) {\n      if (!options.scope) {\n        Target = Target.unscoped();\n      } else {\n        Target = Target.scope(options.scope);\n      }\n    }\n    if (Object.prototype.hasOwnProperty.call(options, \"schema\")) {\n      Target = Target.schema(options.schema, options.schemaDelimiter);\n    }\n    if (!Array.isArray(instances)) {\n      instance = instances;\n      instances = void 0;\n    }\n    if (instances) {\n      where[this.targetKey] = {\n        [Op.in]: instances.map((_instance) => _instance.get(this.foreignKey))\n      };\n    } else {\n      if (this.targetKeyIsPrimary && !options.where) {\n        return Target.findByPk(instance.get(this.foreignKey), options);\n      }\n      where[this.targetKey] = instance.get(this.foreignKey);\n      options.limit = null;\n    }\n    options.where = options.where ? { [Op.and]: [where, options.where] } : where;\n    if (instances) {\n      const results = await Target.findAll(options);\n      const result = {};\n      for (const _instance of instances) {\n        result[_instance.get(this.foreignKey, { raw: true })] = null;\n      }\n      for (const _instance of results) {\n        result[_instance.get(this.targetKey, { raw: true })] = _instance;\n      }\n      return result;\n    }\n    return Target.findOne(options);\n  }\n  async set(sourceInstance, associatedInstance, options = {}) {\n    let value = associatedInstance;\n    if (associatedInstance instanceof this.target) {\n      value = associatedInstance[this.targetKey];\n    }\n    sourceInstance.set(this.foreignKey, value);\n    if (options.save === false) {\n      return;\n    }\n    options = __spreadValues({\n      fields: [this.foreignKey],\n      allowNull: [this.foreignKey],\n      association: true\n    }, options);\n    return await sourceInstance.save(options);\n  }\n  async create(sourceInstance, values, options) {\n    values = values || {};\n    options = options || {};\n    const newAssociatedObject = await this.target.create(values, options);\n    await sourceInstance[this.accessors.set](newAssociatedObject, options);\n    return newAssociatedObject;\n  }\n  verifyAssociationAlias(alias) {\n    if (typeof alias === \"string\") {\n      return this.as === alias;\n    }\n    if (alias && alias.singular) {\n      return this.as === alias.singular;\n    }\n    return !this.isAliased;\n  }\n}\nmodule.exports = BelongsTo;\nmodule.exports.BelongsTo = BelongsTo;\nmodule.exports.default = BelongsTo;\n//# sourceMappingURL=belongs-to.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/associations/belongs-to.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 140,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/associations/belongs-to.js",
    "static": true,
    "longname": "lib/associations/belongs-to.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/associations/belongs-to.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 141,
    "kind": "variable",
    "name": "__getOwnPropSymbols",
    "memberof": "lib/associations/belongs-to.js",
    "static": true,
    "longname": "lib/associations/belongs-to.js~__getOwnPropSymbols",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/associations/belongs-to.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/associations/belongs-to.js",
    "static": true,
    "longname": "lib/associations/belongs-to.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/associations/belongs-to.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 143,
    "kind": "variable",
    "name": "__propIsEnum",
    "memberof": "lib/associations/belongs-to.js",
    "static": true,
    "longname": "lib/associations/belongs-to.js~__propIsEnum",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/associations/belongs-to.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 144,
    "kind": "function",
    "name": "__defNormalProp",
    "memberof": "lib/associations/belongs-to.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/associations/belongs-to.js~__defNormalProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/associations/belongs-to.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 145,
    "kind": "function",
    "name": "__spreadValues",
    "memberof": "lib/associations/belongs-to.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/associations/belongs-to.js~__spreadValues",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/associations/belongs-to.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 146,
    "kind": "variable",
    "name": "Utils",
    "memberof": "lib/associations/belongs-to.js",
    "static": true,
    "longname": "lib/associations/belongs-to.js~Utils",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/associations/belongs-to.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 147,
    "kind": "variable",
    "name": "Helpers",
    "memberof": "lib/associations/belongs-to.js",
    "static": true,
    "longname": "lib/associations/belongs-to.js~Helpers",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/associations/belongs-to.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 148,
    "kind": "variable",
    "name": "_",
    "memberof": "lib/associations/belongs-to.js",
    "static": true,
    "longname": "lib/associations/belongs-to.js~_",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/associations/belongs-to.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 149,
    "kind": "variable",
    "name": "Association",
    "memberof": "lib/associations/belongs-to.js",
    "static": true,
    "longname": "lib/associations/belongs-to.js~Association",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/associations/belongs-to.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 150,
    "kind": "variable",
    "name": "Op",
    "memberof": "lib/associations/belongs-to.js",
    "static": true,
    "longname": "lib/associations/belongs-to.js~Op",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/associations/belongs-to.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 151,
    "kind": "class",
    "name": "BelongsTo",
    "memberof": "lib/associations/belongs-to.js",
    "static": true,
    "longname": "lib/associations/belongs-to.js~BelongsTo",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/associations/belongs-to.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "interface": false,
    "extends": [
      "Association"
    ],
    "ignore": true
  },
  {
    "__docId__": 152,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/associations/belongs-to.js~BelongsTo",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/associations/belongs-to.js~BelongsTo#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 153,
    "kind": "member",
    "name": "associationType",
    "memberof": "lib/associations/belongs-to.js~BelongsTo",
    "static": false,
    "longname": "lib/associations/belongs-to.js~BelongsTo#associationType",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 154,
    "kind": "member",
    "name": "isSingleAssociation",
    "memberof": "lib/associations/belongs-to.js~BelongsTo",
    "static": false,
    "longname": "lib/associations/belongs-to.js~BelongsTo#isSingleAssociation",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 155,
    "kind": "member",
    "name": "foreignKeyAttribute",
    "memberof": "lib/associations/belongs-to.js~BelongsTo",
    "static": false,
    "longname": "lib/associations/belongs-to.js~BelongsTo#foreignKeyAttribute",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 156,
    "kind": "member",
    "name": "isAliased",
    "memberof": "lib/associations/belongs-to.js~BelongsTo",
    "static": false,
    "longname": "lib/associations/belongs-to.js~BelongsTo#isAliased",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 157,
    "kind": "member",
    "name": "as",
    "memberof": "lib/associations/belongs-to.js~BelongsTo",
    "static": false,
    "longname": "lib/associations/belongs-to.js~BelongsTo#as",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 159,
    "kind": "member",
    "name": "foreignKey",
    "memberof": "lib/associations/belongs-to.js~BelongsTo",
    "static": false,
    "longname": "lib/associations/belongs-to.js~BelongsTo#foreignKey",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 162,
    "kind": "member",
    "name": "identifier",
    "memberof": "lib/associations/belongs-to.js~BelongsTo",
    "static": false,
    "longname": "lib/associations/belongs-to.js~BelongsTo#identifier",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 163,
    "kind": "member",
    "name": "identifierField",
    "memberof": "lib/associations/belongs-to.js~BelongsTo",
    "static": false,
    "longname": "lib/associations/belongs-to.js~BelongsTo#identifierField",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 164,
    "kind": "member",
    "name": "targetKey",
    "memberof": "lib/associations/belongs-to.js~BelongsTo",
    "static": false,
    "longname": "lib/associations/belongs-to.js~BelongsTo#targetKey",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 165,
    "kind": "member",
    "name": "targetKeyField",
    "memberof": "lib/associations/belongs-to.js~BelongsTo",
    "static": false,
    "longname": "lib/associations/belongs-to.js~BelongsTo#targetKeyField",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 166,
    "kind": "member",
    "name": "targetKeyIsPrimary",
    "memberof": "lib/associations/belongs-to.js~BelongsTo",
    "static": false,
    "longname": "lib/associations/belongs-to.js~BelongsTo#targetKeyIsPrimary",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 167,
    "kind": "member",
    "name": "targetIdentifier",
    "memberof": "lib/associations/belongs-to.js~BelongsTo",
    "static": false,
    "longname": "lib/associations/belongs-to.js~BelongsTo#targetIdentifier",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 168,
    "kind": "member",
    "name": "associationAccessor",
    "memberof": "lib/associations/belongs-to.js~BelongsTo",
    "static": false,
    "longname": "lib/associations/belongs-to.js~BelongsTo#associationAccessor",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 169,
    "kind": "member",
    "name": "accessors",
    "memberof": "lib/associations/belongs-to.js~BelongsTo",
    "static": false,
    "longname": "lib/associations/belongs-to.js~BelongsTo#accessors",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "{\"get\": *, \"set\": *, \"create\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 170,
    "kind": "method",
    "name": "_injectAttributes",
    "memberof": "lib/associations/belongs-to.js~BelongsTo",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/associations/belongs-to.js~BelongsTo#_injectAttributes",
    "access": "private",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 172,
    "kind": "method",
    "name": "mixin",
    "memberof": "lib/associations/belongs-to.js~BelongsTo",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/associations/belongs-to.js~BelongsTo#mixin",
    "access": "public",
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 173,
    "kind": "method",
    "name": "get",
    "memberof": "lib/associations/belongs-to.js~BelongsTo",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/associations/belongs-to.js~BelongsTo#get",
    "access": "public",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "params": [
      {
        "name": "instances",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 174,
    "kind": "method",
    "name": "set",
    "memberof": "lib/associations/belongs-to.js~BelongsTo",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/associations/belongs-to.js~BelongsTo#set",
    "access": "public",
    "description": null,
    "lineNumber": 137,
    "undocument": true,
    "params": [
      {
        "name": "sourceInstance",
        "types": [
          "*"
        ]
      },
      {
        "name": "associatedInstance",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 175,
    "kind": "method",
    "name": "create",
    "memberof": "lib/associations/belongs-to.js~BelongsTo",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/associations/belongs-to.js~BelongsTo#create",
    "access": "public",
    "description": null,
    "lineNumber": 153,
    "undocument": true,
    "params": [
      {
        "name": "sourceInstance",
        "types": [
          "*"
        ]
      },
      {
        "name": "values",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 176,
    "kind": "method",
    "name": "verifyAssociationAlias",
    "memberof": "lib/associations/belongs-to.js~BelongsTo",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/associations/belongs-to.js~BelongsTo#verifyAssociationAlias",
    "access": "public",
    "description": null,
    "lineNumber": 160,
    "undocument": true,
    "params": [
      {
        "name": "alias",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 177,
    "kind": "file",
    "name": "lib/associations/has-many.js",
    "content": "\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nconst Utils = require(\"./../utils\");\nconst Helpers = require(\"./helpers\");\nconst _ = require(\"lodash\");\nconst Association = require(\"./base\");\nconst { Op } = require(\"../operators\");\nclass HasMany extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n    this.associationType = \"HasMany\";\n    this.targetAssociation = null;\n    this.sequelize = source.sequelize;\n    this.isMultiAssociation = true;\n    this.foreignKeyAttribute = {};\n    if (this.options.through) {\n      throw new Error(\"N:M associations are not supported with hasMany. Use belongsToMany instead\");\n    }\n    if (this.isSelfAssociation) {\n      this.targetAssociation = this;\n    }\n    if (this.as) {\n      this.isAliased = true;\n      if (_.isPlainObject(this.as)) {\n        this.options.name = this.as;\n        this.as = this.as.plural;\n      } else {\n        this.options.name = {\n          plural: this.as,\n          singular: Utils.singularize(this.as)\n        };\n      }\n    } else {\n      this.as = this.target.options.name.plural;\n      this.options.name = this.target.options.name;\n    }\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else if (this.options.foreignKey) {\n      this.foreignKey = this.options.foreignKey;\n    }\n    if (!this.foreignKey) {\n      this.foreignKey = Utils.camelize([\n        this.source.options.name.singular,\n        this.source.primaryKeyAttribute\n      ].join(\"_\"));\n    }\n    if (this.target.rawAttributes[this.foreignKey]) {\n      this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n      this.foreignKeyField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n    }\n    this.sourceKey = this.options.sourceKey || this.source.primaryKeyAttribute;\n    if (this.source.rawAttributes[this.sourceKey]) {\n      this.sourceKeyAttribute = this.sourceKey;\n      this.sourceKeyField = this.source.rawAttributes[this.sourceKey].field || this.sourceKey;\n    } else {\n      this.sourceKeyAttribute = this.source.primaryKeyAttribute;\n      this.sourceKeyField = this.source.primaryKeyField;\n    }\n    const plural = _.upperFirst(this.options.name.plural);\n    const singular = _.upperFirst(this.options.name.singular);\n    this.associationAccessor = this.as;\n    this.accessors = {\n      get: `get${plural}`,\n      set: `set${plural}`,\n      addMultiple: `add${plural}`,\n      add: `add${singular}`,\n      create: `create${singular}`,\n      remove: `remove${singular}`,\n      removeMultiple: `remove${plural}`,\n      hasSingle: `has${singular}`,\n      hasAll: `has${plural}`,\n      count: `count${plural}`\n    };\n  }\n  _injectAttributes() {\n    const newAttributes = {\n      [this.foreignKey]: __spreadValues({\n        type: this.options.keyType || this.source.rawAttributes[this.sourceKeyAttribute].type,\n        allowNull: true\n      }, this.foreignKeyAttribute)\n    };\n    const constraintOptions = __spreadValues({}, this.options);\n    if (this.options.constraints !== false) {\n      const target = this.target.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];\n      constraintOptions.onDelete = constraintOptions.onDelete || (target.allowNull ? \"SET NULL\" : \"CASCADE\");\n      constraintOptions.onUpdate = constraintOptions.onUpdate || \"CASCADE\";\n    }\n    Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.source, this.target, constraintOptions, this.sourceKeyField);\n    Utils.mergeDefaults(this.target.rawAttributes, newAttributes);\n    this.target.refreshAttributes();\n    this.source.refreshAttributes();\n    this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n    this.foreignKeyField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n    this.sourceKeyField = this.source.rawAttributes[this.sourceKey].field || this.sourceKey;\n    Helpers.checkNamingCollision(this);\n    return this;\n  }\n  mixin(obj) {\n    const methods = [\"get\", \"count\", \"hasSingle\", \"hasAll\", \"set\", \"add\", \"addMultiple\", \"remove\", \"removeMultiple\", \"create\"];\n    const aliases = {\n      hasSingle: \"has\",\n      hasAll: \"has\",\n      addMultiple: \"add\",\n      removeMultiple: \"remove\"\n    };\n    Helpers.mixinMethods(this, obj, methods, aliases);\n  }\n  async get(instances, options = {}) {\n    const where = {};\n    let Model = this.target;\n    let instance;\n    let values;\n    if (!Array.isArray(instances)) {\n      instance = instances;\n      instances = void 0;\n    }\n    options = __spreadValues({}, options);\n    if (this.scope) {\n      Object.assign(where, this.scope);\n    }\n    if (instances) {\n      values = instances.map((_instance) => _instance.get(this.sourceKey, { raw: true }));\n      if (options.limit && instances.length > 1) {\n        options.groupedLimit = {\n          limit: options.limit,\n          on: this,\n          values\n        };\n        delete options.limit;\n      } else {\n        where[this.foreignKey] = {\n          [Op.in]: values\n        };\n        delete options.groupedLimit;\n      }\n    } else {\n      where[this.foreignKey] = instance.get(this.sourceKey, { raw: true });\n    }\n    options.where = options.where ? { [Op.and]: [where, options.where] } : where;\n    if (Object.prototype.hasOwnProperty.call(options, \"scope\")) {\n      if (!options.scope) {\n        Model = Model.unscoped();\n      } else {\n        Model = Model.scope(options.scope);\n      }\n    }\n    if (Object.prototype.hasOwnProperty.call(options, \"schema\")) {\n      Model = Model.schema(options.schema, options.schemaDelimiter);\n    }\n    const results = await Model.findAll(options);\n    if (instance) {\n      return results;\n    }\n    const result = {};\n    for (const _instance of instances) {\n      result[_instance.get(this.sourceKey, { raw: true })] = [];\n    }\n    for (const _instance of results) {\n      result[_instance.get(this.foreignKey, { raw: true })].push(_instance);\n    }\n    return result;\n  }\n  async count(instance, options) {\n    options = Utils.cloneDeep(options);\n    options.attributes = [\n      [\n        this.sequelize.fn(\"COUNT\", this.sequelize.col(`${this.target.name}.${this.target.primaryKeyField}`)),\n        \"count\"\n      ]\n    ];\n    options.raw = true;\n    options.plain = true;\n    const result = await this.get(instance, options);\n    return Number.parseInt(result.count, 10);\n  }\n  async has(sourceInstance, targetInstances, options) {\n    const where = {};\n    if (!Array.isArray(targetInstances)) {\n      targetInstances = [targetInstances];\n    }\n    options = __spreadProps(__spreadValues({}, options), {\n      scope: false,\n      attributes: [this.target.primaryKeyAttribute],\n      raw: true\n    });\n    where[Op.or] = targetInstances.map((instance) => {\n      if (instance instanceof this.target) {\n        return instance.where();\n      }\n      return {\n        [this.target.primaryKeyAttribute]: instance\n      };\n    });\n    options.where = {\n      [Op.and]: [\n        where,\n        options.where\n      ]\n    };\n    const associatedObjects = await this.get(sourceInstance, options);\n    return associatedObjects.length === targetInstances.length;\n  }\n  async set(sourceInstance, targetInstances, options) {\n    if (targetInstances === null) {\n      targetInstances = [];\n    } else {\n      targetInstances = this.toInstanceArray(targetInstances);\n    }\n    const oldAssociations = await this.get(sourceInstance, __spreadProps(__spreadValues({}, options), { scope: false, raw: true }));\n    const promises = [];\n    const obsoleteAssociations = oldAssociations.filter((old) => !targetInstances.some((obj) => obj[this.target.primaryKeyAttribute] === old[this.target.primaryKeyAttribute]));\n    const unassociatedObjects = targetInstances.filter((obj) => !oldAssociations.some((old) => obj[this.target.primaryKeyAttribute] === old[this.target.primaryKeyAttribute]));\n    let updateWhere;\n    let update;\n    if (obsoleteAssociations.length > 0) {\n      update = {};\n      update[this.foreignKey] = null;\n      updateWhere = {\n        [this.target.primaryKeyAttribute]: obsoleteAssociations.map((associatedObject) => associatedObject[this.target.primaryKeyAttribute])\n      };\n      promises.push(this.target.unscoped().update(update, __spreadProps(__spreadValues({}, options), {\n        where: updateWhere\n      })));\n    }\n    if (unassociatedObjects.length > 0) {\n      updateWhere = {};\n      update = {};\n      update[this.foreignKey] = sourceInstance.get(this.sourceKey);\n      Object.assign(update, this.scope);\n      updateWhere[this.target.primaryKeyAttribute] = unassociatedObjects.map((unassociatedObject) => unassociatedObject[this.target.primaryKeyAttribute]);\n      promises.push(this.target.unscoped().update(update, __spreadProps(__spreadValues({}, options), {\n        where: updateWhere\n      })));\n    }\n    await Promise.all(promises);\n    return sourceInstance;\n  }\n  async add(sourceInstance, targetInstances, options = {}) {\n    if (!targetInstances) {\n      return;\n    }\n    targetInstances = this.toInstanceArray(targetInstances);\n    const update = __spreadValues({\n      [this.foreignKey]: sourceInstance.get(this.sourceKey)\n    }, this.scope);\n    const where = {\n      [this.target.primaryKeyAttribute]: targetInstances.map((unassociatedObject) => unassociatedObject.get(this.target.primaryKeyAttribute))\n    };\n    await this.target.unscoped().update(update, __spreadProps(__spreadValues({}, options), { where }));\n    return sourceInstance;\n  }\n  async remove(sourceInstance, targetInstances, options = {}) {\n    const update = {\n      [this.foreignKey]: null\n    };\n    targetInstances = this.toInstanceArray(targetInstances);\n    const where = {\n      [this.foreignKey]: sourceInstance.get(this.sourceKey),\n      [this.target.primaryKeyAttribute]: targetInstances.map((targetInstance) => targetInstance.get(this.target.primaryKeyAttribute))\n    };\n    await this.target.unscoped().update(update, __spreadProps(__spreadValues({}, options), { where }));\n    return this;\n  }\n  async create(sourceInstance, values, options = {}) {\n    if (Array.isArray(options)) {\n      options = {\n        fields: options\n      };\n    }\n    if (values === void 0) {\n      values = {};\n    }\n    if (this.scope) {\n      for (const attribute of Object.keys(this.scope)) {\n        values[attribute] = this.scope[attribute];\n        if (options.fields) {\n          options.fields.push(attribute);\n        }\n      }\n    }\n    values[this.foreignKey] = sourceInstance.get(this.sourceKey);\n    if (options.fields) {\n      options.fields.push(this.foreignKey);\n    }\n    return await this.target.create(values, options);\n  }\n  verifyAssociationAlias(alias) {\n    if (typeof alias === \"string\") {\n      return this.as === alias;\n    }\n    if (alias && alias.plural) {\n      return this.as === alias.plural;\n    }\n    return !this.isAliased;\n  }\n}\nmodule.exports = HasMany;\nmodule.exports.HasMany = HasMany;\nmodule.exports.default = HasMany;\n//# sourceMappingURL=has-many.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/associations/has-many.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 178,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/associations/has-many.js",
    "static": true,
    "longname": "lib/associations/has-many.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/associations/has-many.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 179,
    "kind": "variable",
    "name": "__defProps",
    "memberof": "lib/associations/has-many.js",
    "static": true,
    "longname": "lib/associations/has-many.js~__defProps",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/associations/has-many.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 180,
    "kind": "variable",
    "name": "__getOwnPropDescs",
    "memberof": "lib/associations/has-many.js",
    "static": true,
    "longname": "lib/associations/has-many.js~__getOwnPropDescs",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/associations/has-many.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 181,
    "kind": "variable",
    "name": "__getOwnPropSymbols",
    "memberof": "lib/associations/has-many.js",
    "static": true,
    "longname": "lib/associations/has-many.js~__getOwnPropSymbols",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/associations/has-many.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 182,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/associations/has-many.js",
    "static": true,
    "longname": "lib/associations/has-many.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/associations/has-many.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 183,
    "kind": "variable",
    "name": "__propIsEnum",
    "memberof": "lib/associations/has-many.js",
    "static": true,
    "longname": "lib/associations/has-many.js~__propIsEnum",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/associations/has-many.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 184,
    "kind": "function",
    "name": "__defNormalProp",
    "memberof": "lib/associations/has-many.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/associations/has-many.js~__defNormalProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/associations/has-many.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 185,
    "kind": "function",
    "name": "__spreadValues",
    "memberof": "lib/associations/has-many.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/associations/has-many.js~__spreadValues",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/associations/has-many.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 186,
    "kind": "function",
    "name": "__spreadProps",
    "memberof": "lib/associations/has-many.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/associations/has-many.js~__spreadProps",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/associations/has-many.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 187,
    "kind": "variable",
    "name": "Utils",
    "memberof": "lib/associations/has-many.js",
    "static": true,
    "longname": "lib/associations/has-many.js~Utils",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/associations/has-many.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 188,
    "kind": "variable",
    "name": "Helpers",
    "memberof": "lib/associations/has-many.js",
    "static": true,
    "longname": "lib/associations/has-many.js~Helpers",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/associations/has-many.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 189,
    "kind": "variable",
    "name": "_",
    "memberof": "lib/associations/has-many.js",
    "static": true,
    "longname": "lib/associations/has-many.js~_",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/associations/has-many.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 190,
    "kind": "variable",
    "name": "Association",
    "memberof": "lib/associations/has-many.js",
    "static": true,
    "longname": "lib/associations/has-many.js~Association",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/associations/has-many.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 191,
    "kind": "variable",
    "name": "Op",
    "memberof": "lib/associations/has-many.js",
    "static": true,
    "longname": "lib/associations/has-many.js~Op",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/associations/has-many.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 192,
    "kind": "class",
    "name": "HasMany",
    "memberof": "lib/associations/has-many.js",
    "static": true,
    "longname": "lib/associations/has-many.js~HasMany",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/associations/has-many.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "interface": false,
    "extends": [
      "Association"
    ],
    "ignore": true
  },
  {
    "__docId__": 193,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/associations/has-many.js~HasMany",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/associations/has-many.js~HasMany#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 194,
    "kind": "member",
    "name": "associationType",
    "memberof": "lib/associations/has-many.js~HasMany",
    "static": false,
    "longname": "lib/associations/has-many.js~HasMany#associationType",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 195,
    "kind": "member",
    "name": "targetAssociation",
    "memberof": "lib/associations/has-many.js~HasMany",
    "static": false,
    "longname": "lib/associations/has-many.js~HasMany#targetAssociation",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 196,
    "kind": "member",
    "name": "sequelize",
    "memberof": "lib/associations/has-many.js~HasMany",
    "static": false,
    "longname": "lib/associations/has-many.js~HasMany#sequelize",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 197,
    "kind": "member",
    "name": "isMultiAssociation",
    "memberof": "lib/associations/has-many.js~HasMany",
    "static": false,
    "longname": "lib/associations/has-many.js~HasMany#isMultiAssociation",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 198,
    "kind": "member",
    "name": "foreignKeyAttribute",
    "memberof": "lib/associations/has-many.js~HasMany",
    "static": false,
    "longname": "lib/associations/has-many.js~HasMany#foreignKeyAttribute",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 200,
    "kind": "member",
    "name": "isAliased",
    "memberof": "lib/associations/has-many.js~HasMany",
    "static": false,
    "longname": "lib/associations/has-many.js~HasMany#isAliased",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 201,
    "kind": "member",
    "name": "as",
    "memberof": "lib/associations/has-many.js~HasMany",
    "static": false,
    "longname": "lib/associations/has-many.js~HasMany#as",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 204,
    "kind": "member",
    "name": "foreignKey",
    "memberof": "lib/associations/has-many.js~HasMany",
    "static": false,
    "longname": "lib/associations/has-many.js~HasMany#foreignKey",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 207,
    "kind": "member",
    "name": "identifierField",
    "memberof": "lib/associations/has-many.js~HasMany",
    "static": false,
    "longname": "lib/associations/has-many.js~HasMany#identifierField",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 208,
    "kind": "member",
    "name": "foreignKeyField",
    "memberof": "lib/associations/has-many.js~HasMany",
    "static": false,
    "longname": "lib/associations/has-many.js~HasMany#foreignKeyField",
    "access": "public",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 209,
    "kind": "member",
    "name": "sourceKey",
    "memberof": "lib/associations/has-many.js~HasMany",
    "static": false,
    "longname": "lib/associations/has-many.js~HasMany#sourceKey",
    "access": "public",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 210,
    "kind": "member",
    "name": "sourceKeyAttribute",
    "memberof": "lib/associations/has-many.js~HasMany",
    "static": false,
    "longname": "lib/associations/has-many.js~HasMany#sourceKeyAttribute",
    "access": "public",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 211,
    "kind": "member",
    "name": "sourceKeyField",
    "memberof": "lib/associations/has-many.js~HasMany",
    "static": false,
    "longname": "lib/associations/has-many.js~HasMany#sourceKeyField",
    "access": "public",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 214,
    "kind": "member",
    "name": "associationAccessor",
    "memberof": "lib/associations/has-many.js~HasMany",
    "static": false,
    "longname": "lib/associations/has-many.js~HasMany#associationAccessor",
    "access": "public",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 215,
    "kind": "member",
    "name": "accessors",
    "memberof": "lib/associations/has-many.js~HasMany",
    "static": false,
    "longname": "lib/associations/has-many.js~HasMany#accessors",
    "access": "public",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "type": {
      "types": [
        "{\"get\": *, \"set\": *, \"addMultiple\": *, \"add\": *, \"create\": *, \"remove\": *, \"removeMultiple\": *, \"hasSingle\": *, \"hasAll\": *, \"count\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 216,
    "kind": "method",
    "name": "_injectAttributes",
    "memberof": "lib/associations/has-many.js~HasMany",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/associations/has-many.js~HasMany#_injectAttributes",
    "access": "private",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 220,
    "kind": "method",
    "name": "mixin",
    "memberof": "lib/associations/has-many.js~HasMany",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/associations/has-many.js~HasMany#mixin",
    "access": "public",
    "description": null,
    "lineNumber": 118,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 221,
    "kind": "method",
    "name": "get",
    "memberof": "lib/associations/has-many.js~HasMany",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/associations/has-many.js~HasMany#get",
    "access": "public",
    "description": null,
    "lineNumber": 128,
    "undocument": true,
    "params": [
      {
        "name": "instances",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 222,
    "kind": "method",
    "name": "count",
    "memberof": "lib/associations/has-many.js~HasMany",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/associations/has-many.js~HasMany#count",
    "access": "public",
    "description": null,
    "lineNumber": 183,
    "undocument": true,
    "params": [
      {
        "name": "instance",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 223,
    "kind": "method",
    "name": "has",
    "memberof": "lib/associations/has-many.js~HasMany",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/associations/has-many.js~HasMany#has",
    "access": "public",
    "description": null,
    "lineNumber": 196,
    "undocument": true,
    "params": [
      {
        "name": "sourceInstance",
        "types": [
          "*"
        ]
      },
      {
        "name": "targetInstances",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 224,
    "kind": "method",
    "name": "set",
    "memberof": "lib/associations/has-many.js~HasMany",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/associations/has-many.js~HasMany#set",
    "access": "public",
    "description": null,
    "lineNumber": 223,
    "undocument": true,
    "params": [
      {
        "name": "sourceInstance",
        "types": [
          "*"
        ]
      },
      {
        "name": "targetInstances",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 225,
    "kind": "method",
    "name": "add",
    "memberof": "lib/associations/has-many.js~HasMany",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/associations/has-many.js~HasMany#add",
    "access": "public",
    "description": null,
    "lineNumber": 258,
    "undocument": true,
    "params": [
      {
        "name": "sourceInstance",
        "types": [
          "*"
        ]
      },
      {
        "name": "targetInstances",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 226,
    "kind": "method",
    "name": "remove",
    "memberof": "lib/associations/has-many.js~HasMany",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/associations/has-many.js~HasMany#remove",
    "access": "public",
    "description": null,
    "lineNumber": 272,
    "undocument": true,
    "params": [
      {
        "name": "sourceInstance",
        "types": [
          "*"
        ]
      },
      {
        "name": "targetInstances",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 227,
    "kind": "method",
    "name": "create",
    "memberof": "lib/associations/has-many.js~HasMany",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/associations/has-many.js~HasMany#create",
    "access": "public",
    "description": null,
    "lineNumber": 284,
    "undocument": true,
    "params": [
      {
        "name": "sourceInstance",
        "types": [
          "*"
        ]
      },
      {
        "name": "values",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 228,
    "kind": "method",
    "name": "verifyAssociationAlias",
    "memberof": "lib/associations/has-many.js~HasMany",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/associations/has-many.js~HasMany#verifyAssociationAlias",
    "access": "public",
    "description": null,
    "lineNumber": 307,
    "undocument": true,
    "params": [
      {
        "name": "alias",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 229,
    "kind": "file",
    "name": "lib/associations/has-one.js",
    "content": "\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nconst Utils = require(\"./../utils\");\nconst Helpers = require(\"./helpers\");\nconst _ = require(\"lodash\");\nconst Association = require(\"./base\");\nconst { Op } = require(\"../operators\");\nclass HasOne extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n    this.associationType = \"HasOne\";\n    this.isSingleAssociation = true;\n    this.foreignKeyAttribute = {};\n    if (this.as) {\n      this.isAliased = true;\n      this.options.name = {\n        singular: this.as\n      };\n    } else {\n      this.as = this.target.options.name.singular;\n      this.options.name = this.target.options.name;\n    }\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else if (this.options.foreignKey) {\n      this.foreignKey = this.options.foreignKey;\n    }\n    if (!this.foreignKey) {\n      this.foreignKey = Utils.camelize([\n        Utils.singularize(this.options.as || this.source.name),\n        this.source.primaryKeyAttribute\n      ].join(\"_\"));\n    }\n    if (this.options.sourceKey && !this.source.rawAttributes[this.options.sourceKey]) {\n      throw new Error(`Unknown attribute \"${this.options.sourceKey}\" passed as sourceKey, define this attribute on model \"${this.source.name}\" first`);\n    }\n    this.sourceKey = this.sourceKeyAttribute = this.options.sourceKey || this.source.primaryKeyAttribute;\n    this.sourceKeyField = this.source.rawAttributes[this.sourceKey].field || this.sourceKey;\n    this.sourceKeyIsPrimary = this.sourceKey === this.source.primaryKeyAttribute;\n    this.associationAccessor = this.as;\n    this.options.useHooks = options.useHooks;\n    if (this.target.rawAttributes[this.foreignKey]) {\n      this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n    }\n    const singular = _.upperFirst(this.options.name.singular);\n    this.accessors = {\n      get: `get${singular}`,\n      set: `set${singular}`,\n      create: `create${singular}`\n    };\n  }\n  _injectAttributes() {\n    const newAttributes = {\n      [this.foreignKey]: __spreadValues({\n        type: this.options.keyType || this.source.rawAttributes[this.sourceKey].type,\n        allowNull: true\n      }, this.foreignKeyAttribute)\n    };\n    if (this.options.constraints !== false) {\n      const target = this.target.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];\n      this.options.onDelete = this.options.onDelete || (target.allowNull ? \"SET NULL\" : \"CASCADE\");\n      this.options.onUpdate = this.options.onUpdate || \"CASCADE\";\n    }\n    Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.source, this.target, this.options, this.sourceKeyField);\n    Utils.mergeDefaults(this.target.rawAttributes, newAttributes);\n    this.target.refreshAttributes();\n    this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n    Helpers.checkNamingCollision(this);\n    return this;\n  }\n  mixin(obj) {\n    const methods = [\"get\", \"set\", \"create\"];\n    Helpers.mixinMethods(this, obj, methods);\n  }\n  async get(instances, options) {\n    const where = {};\n    let Target = this.target;\n    let instance;\n    options = Utils.cloneDeep(options);\n    if (Object.prototype.hasOwnProperty.call(options, \"scope\")) {\n      if (!options.scope) {\n        Target = Target.unscoped();\n      } else {\n        Target = Target.scope(options.scope);\n      }\n    }\n    if (Object.prototype.hasOwnProperty.call(options, \"schema\")) {\n      Target = Target.schema(options.schema, options.schemaDelimiter);\n    }\n    if (!Array.isArray(instances)) {\n      instance = instances;\n      instances = void 0;\n    }\n    if (instances) {\n      where[this.foreignKey] = {\n        [Op.in]: instances.map((_instance) => _instance.get(this.sourceKey))\n      };\n    } else {\n      where[this.foreignKey] = instance.get(this.sourceKey);\n    }\n    if (this.scope) {\n      Object.assign(where, this.scope);\n    }\n    options.where = options.where ? { [Op.and]: [where, options.where] } : where;\n    if (instances) {\n      const results = await Target.findAll(options);\n      const result = {};\n      for (const _instance of instances) {\n        result[_instance.get(this.sourceKey, { raw: true })] = null;\n      }\n      for (const _instance of results) {\n        result[_instance.get(this.foreignKey, { raw: true })] = _instance;\n      }\n      return result;\n    }\n    return Target.findOne(options);\n  }\n  async set(sourceInstance, associatedInstance, options) {\n    options = __spreadProps(__spreadValues({}, options), { scope: false });\n    const oldInstance = await sourceInstance[this.accessors.get](options);\n    const alreadyAssociated = oldInstance && associatedInstance && this.target.primaryKeyAttributes.every((attribute) => oldInstance.get(attribute, { raw: true }) === (associatedInstance.get ? associatedInstance.get(attribute, { raw: true }) : associatedInstance));\n    if (oldInstance && !alreadyAssociated) {\n      oldInstance[this.foreignKey] = null;\n      await oldInstance.save(__spreadProps(__spreadValues({}, options), {\n        fields: [this.foreignKey],\n        allowNull: [this.foreignKey],\n        association: true\n      }));\n    }\n    if (associatedInstance && !alreadyAssociated) {\n      if (!(associatedInstance instanceof this.target)) {\n        const tmpInstance = {};\n        tmpInstance[this.target.primaryKeyAttribute] = associatedInstance;\n        associatedInstance = this.target.build(tmpInstance, {\n          isNewRecord: false\n        });\n      }\n      Object.assign(associatedInstance, this.scope);\n      associatedInstance.set(this.foreignKey, sourceInstance.get(this.sourceKeyAttribute));\n      return associatedInstance.save(options);\n    }\n    return null;\n  }\n  async create(sourceInstance, values, options) {\n    values = values || {};\n    options = options || {};\n    if (this.scope) {\n      for (const attribute of Object.keys(this.scope)) {\n        values[attribute] = this.scope[attribute];\n        if (options.fields) {\n          options.fields.push(attribute);\n        }\n      }\n    }\n    values[this.foreignKey] = sourceInstance.get(this.sourceKeyAttribute);\n    if (options.fields) {\n      options.fields.push(this.foreignKey);\n    }\n    return await this.target.create(values, options);\n  }\n  verifyAssociationAlias(alias) {\n    if (typeof alias === \"string\") {\n      return this.as === alias;\n    }\n    if (alias && alias.singular) {\n      return this.as === alias.singular;\n    }\n    return !this.isAliased;\n  }\n}\nmodule.exports = HasOne;\n//# sourceMappingURL=has-one.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/associations/has-one.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 230,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/associations/has-one.js",
    "static": true,
    "longname": "lib/associations/has-one.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/associations/has-one.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 231,
    "kind": "variable",
    "name": "__defProps",
    "memberof": "lib/associations/has-one.js",
    "static": true,
    "longname": "lib/associations/has-one.js~__defProps",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/associations/has-one.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 232,
    "kind": "variable",
    "name": "__getOwnPropDescs",
    "memberof": "lib/associations/has-one.js",
    "static": true,
    "longname": "lib/associations/has-one.js~__getOwnPropDescs",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/associations/has-one.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 233,
    "kind": "variable",
    "name": "__getOwnPropSymbols",
    "memberof": "lib/associations/has-one.js",
    "static": true,
    "longname": "lib/associations/has-one.js~__getOwnPropSymbols",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/associations/has-one.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 234,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/associations/has-one.js",
    "static": true,
    "longname": "lib/associations/has-one.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/associations/has-one.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 235,
    "kind": "variable",
    "name": "__propIsEnum",
    "memberof": "lib/associations/has-one.js",
    "static": true,
    "longname": "lib/associations/has-one.js~__propIsEnum",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/associations/has-one.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 236,
    "kind": "function",
    "name": "__defNormalProp",
    "memberof": "lib/associations/has-one.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/associations/has-one.js~__defNormalProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/associations/has-one.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 237,
    "kind": "function",
    "name": "__spreadValues",
    "memberof": "lib/associations/has-one.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/associations/has-one.js~__spreadValues",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/associations/has-one.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "function",
    "name": "__spreadProps",
    "memberof": "lib/associations/has-one.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/associations/has-one.js~__spreadProps",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/associations/has-one.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 239,
    "kind": "variable",
    "name": "Utils",
    "memberof": "lib/associations/has-one.js",
    "static": true,
    "longname": "lib/associations/has-one.js~Utils",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/associations/has-one.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 240,
    "kind": "variable",
    "name": "Helpers",
    "memberof": "lib/associations/has-one.js",
    "static": true,
    "longname": "lib/associations/has-one.js~Helpers",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/associations/has-one.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 241,
    "kind": "variable",
    "name": "_",
    "memberof": "lib/associations/has-one.js",
    "static": true,
    "longname": "lib/associations/has-one.js~_",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/associations/has-one.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 242,
    "kind": "variable",
    "name": "Association",
    "memberof": "lib/associations/has-one.js",
    "static": true,
    "longname": "lib/associations/has-one.js~Association",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/associations/has-one.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 243,
    "kind": "variable",
    "name": "Op",
    "memberof": "lib/associations/has-one.js",
    "static": true,
    "longname": "lib/associations/has-one.js~Op",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/associations/has-one.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 244,
    "kind": "class",
    "name": "HasOne",
    "memberof": "lib/associations/has-one.js",
    "static": true,
    "longname": "lib/associations/has-one.js~HasOne",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/associations/has-one.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "interface": false,
    "extends": [
      "Association"
    ],
    "ignore": true
  },
  {
    "__docId__": 245,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/associations/has-one.js~HasOne",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/associations/has-one.js~HasOne#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 246,
    "kind": "member",
    "name": "associationType",
    "memberof": "lib/associations/has-one.js~HasOne",
    "static": false,
    "longname": "lib/associations/has-one.js~HasOne#associationType",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 247,
    "kind": "member",
    "name": "isSingleAssociation",
    "memberof": "lib/associations/has-one.js~HasOne",
    "static": false,
    "longname": "lib/associations/has-one.js~HasOne#isSingleAssociation",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 248,
    "kind": "member",
    "name": "foreignKeyAttribute",
    "memberof": "lib/associations/has-one.js~HasOne",
    "static": false,
    "longname": "lib/associations/has-one.js~HasOne#foreignKeyAttribute",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 249,
    "kind": "member",
    "name": "isAliased",
    "memberof": "lib/associations/has-one.js~HasOne",
    "static": false,
    "longname": "lib/associations/has-one.js~HasOne#isAliased",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 250,
    "kind": "member",
    "name": "as",
    "memberof": "lib/associations/has-one.js~HasOne",
    "static": false,
    "longname": "lib/associations/has-one.js~HasOne#as",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 252,
    "kind": "member",
    "name": "foreignKey",
    "memberof": "lib/associations/has-one.js~HasOne",
    "static": false,
    "longname": "lib/associations/has-one.js~HasOne#foreignKey",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 255,
    "kind": "member",
    "name": "sourceKey",
    "memberof": "lib/associations/has-one.js~HasOne",
    "static": false,
    "longname": "lib/associations/has-one.js~HasOne#sourceKey",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 256,
    "kind": "member",
    "name": "sourceKeyField",
    "memberof": "lib/associations/has-one.js~HasOne",
    "static": false,
    "longname": "lib/associations/has-one.js~HasOne#sourceKeyField",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 257,
    "kind": "member",
    "name": "sourceKeyIsPrimary",
    "memberof": "lib/associations/has-one.js~HasOne",
    "static": false,
    "longname": "lib/associations/has-one.js~HasOne#sourceKeyIsPrimary",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 258,
    "kind": "member",
    "name": "associationAccessor",
    "memberof": "lib/associations/has-one.js~HasOne",
    "static": false,
    "longname": "lib/associations/has-one.js~HasOne#associationAccessor",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 259,
    "kind": "member",
    "name": "identifierField",
    "memberof": "lib/associations/has-one.js~HasOne",
    "static": false,
    "longname": "lib/associations/has-one.js~HasOne#identifierField",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 260,
    "kind": "member",
    "name": "accessors",
    "memberof": "lib/associations/has-one.js~HasOne",
    "static": false,
    "longname": "lib/associations/has-one.js~HasOne#accessors",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "{\"get\": *, \"set\": *, \"create\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 261,
    "kind": "method",
    "name": "_injectAttributes",
    "memberof": "lib/associations/has-one.js~HasOne",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/associations/has-one.js~HasOne#_injectAttributes",
    "access": "private",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 263,
    "kind": "method",
    "name": "mixin",
    "memberof": "lib/associations/has-one.js~HasOne",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/associations/has-one.js~HasOne#mixin",
    "access": "public",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 264,
    "kind": "method",
    "name": "get",
    "memberof": "lib/associations/has-one.js~HasOne",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/associations/has-one.js~HasOne#get",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "params": [
      {
        "name": "instances",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 265,
    "kind": "method",
    "name": "set",
    "memberof": "lib/associations/has-one.js~HasOne",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/associations/has-one.js~HasOne#set",
    "access": "public",
    "description": null,
    "lineNumber": 137,
    "undocument": true,
    "params": [
      {
        "name": "sourceInstance",
        "types": [
          "*"
        ]
      },
      {
        "name": "associatedInstance",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 266,
    "kind": "method",
    "name": "create",
    "memberof": "lib/associations/has-one.js~HasOne",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/associations/has-one.js~HasOne#create",
    "access": "public",
    "description": null,
    "lineNumber": 163,
    "undocument": true,
    "params": [
      {
        "name": "sourceInstance",
        "types": [
          "*"
        ]
      },
      {
        "name": "values",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 267,
    "kind": "method",
    "name": "verifyAssociationAlias",
    "memberof": "lib/associations/has-one.js~HasOne",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/associations/has-one.js~HasOne#verifyAssociationAlias",
    "access": "public",
    "description": null,
    "lineNumber": 180,
    "undocument": true,
    "params": [
      {
        "name": "alias",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 268,
    "kind": "file",
    "name": "lib/associations/helpers.js",
    "content": "\"use strict\";\nfunction checkNamingCollision(association) {\n  if (Object.prototype.hasOwnProperty.call(association.source.rawAttributes, association.as)) {\n    throw new Error(`Naming collision between attribute '${association.as}' and association '${association.as}' on model ${association.source.name}. To remedy this, change either foreignKey or as in your association definition`);\n  }\n}\nexports.checkNamingCollision = checkNamingCollision;\nfunction addForeignKeyConstraints(newAttribute, source, target, options, key) {\n  if (options.foreignKeyConstraint || options.onDelete || options.onUpdate) {\n    const primaryKeys = Object.keys(source.primaryKeys).map((primaryKeyAttribute) => source.rawAttributes[primaryKeyAttribute].field || primaryKeyAttribute);\n    if (primaryKeys.length === 1 || !primaryKeys.includes(key)) {\n      newAttribute.references = {\n        model: source.getTableName(),\n        key: key || primaryKeys[0]\n      };\n      newAttribute.onDelete = options.onDelete;\n      newAttribute.onUpdate = options.onUpdate;\n    }\n  }\n}\nexports.addForeignKeyConstraints = addForeignKeyConstraints;\nfunction mixinMethods(association, obj, methods, aliases) {\n  aliases = aliases || {};\n  for (const method of methods) {\n    if (!Object.prototype.hasOwnProperty.call(obj, association.accessors[method])) {\n      const realMethod = aliases[method] || method;\n      obj[association.accessors[method]] = function(...params) {\n        return association[realMethod](this, ...params);\n      };\n    }\n  }\n}\nexports.mixinMethods = mixinMethods;\n//# sourceMappingURL=helpers.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/associations/helpers.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 269,
    "kind": "function",
    "name": "checkNamingCollision",
    "memberof": "lib/associations/helpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/associations/helpers.js~checkNamingCollision",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/associations/helpers.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [
      {
        "name": "association",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 270,
    "kind": "function",
    "name": "addForeignKeyConstraints",
    "memberof": "lib/associations/helpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/associations/helpers.js~addForeignKeyConstraints",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/associations/helpers.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "newAttribute",
        "types": [
          "*"
        ]
      },
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 271,
    "kind": "function",
    "name": "mixinMethods",
    "memberof": "lib/associations/helpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/associations/helpers.js~mixinMethods",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/associations/helpers.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "association",
        "types": [
          "*"
        ]
      },
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "methods",
        "types": [
          "*"
        ]
      },
      {
        "name": "aliases",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 272,
    "kind": "file",
    "name": "lib/associations/index.js",
    "content": "\"use strict\";\nconst Association = require(\"./base\");\nAssociation.BelongsTo = require(\"./belongs-to\");\nAssociation.HasOne = require(\"./has-one\");\nAssociation.HasMany = require(\"./has-many\");\nAssociation.BelongsToMany = require(\"./belongs-to-many\");\nmodule.exports = Association;\nmodule.exports.default = Association;\nmodule.exports.Association = Association;\n//# sourceMappingURL=index.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/associations/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 273,
    "kind": "variable",
    "name": "Association",
    "memberof": "lib/associations/index.js",
    "static": true,
    "longname": "lib/associations/index.js~Association",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/associations/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 274,
    "kind": "file",
    "name": "lib/associations/mixin.js",
    "content": "\"use strict\";\nconst _ = require(\"lodash\");\nconst HasOne = require(\"./has-one\");\nconst HasMany = require(\"./has-many\");\nconst BelongsToMany = require(\"./belongs-to-many\");\nconst BelongsTo = require(\"./belongs-to\");\nfunction isModel(model, sequelize) {\n  return model && model.prototype && model.prototype instanceof sequelize.Sequelize.Model;\n}\nconst Mixin = {\n  hasMany(target, options = {}) {\n    if (!isModel(target, this.sequelize)) {\n      throw new Error(`${this.name}.hasMany called with something that's not a subclass of Sequelize.Model`);\n    }\n    const source = this;\n    options.hooks = options.hooks === void 0 ? false : Boolean(options.hooks);\n    options.useHooks = options.hooks;\n    Object.assign(options, _.omit(source.options, [\"hooks\"]));\n    if (options.useHooks) {\n      this.runHooks(\"beforeAssociate\", { source, target, type: HasMany }, options);\n    }\n    const association = new HasMany(source, target, options);\n    source.associations[association.associationAccessor] = association;\n    association._injectAttributes();\n    association.mixin(source.prototype);\n    if (options.useHooks) {\n      this.runHooks(\"afterAssociate\", { source, target, type: HasMany, association }, options);\n    }\n    return association;\n  },\n  belongsToMany(target, options = {}) {\n    if (!isModel(target, this.sequelize)) {\n      throw new Error(`${this.name}.belongsToMany called with something that's not a subclass of Sequelize.Model`);\n    }\n    const source = this;\n    options.hooks = options.hooks === void 0 ? false : Boolean(options.hooks);\n    options.useHooks = options.hooks;\n    options.timestamps = options.timestamps === void 0 ? this.sequelize.options.timestamps : options.timestamps;\n    Object.assign(options, _.omit(source.options, [\"hooks\", \"timestamps\", \"scopes\", \"defaultScope\"]));\n    if (options.useHooks) {\n      this.runHooks(\"beforeAssociate\", { source, target, type: BelongsToMany }, options);\n    }\n    const association = new BelongsToMany(source, target, options);\n    source.associations[association.associationAccessor] = association;\n    association._injectAttributes();\n    association.mixin(source.prototype);\n    if (options.useHooks) {\n      this.runHooks(\"afterAssociate\", { source, target, type: BelongsToMany, association }, options);\n    }\n    return association;\n  },\n  getAssociations(target) {\n    return Object.values(this.associations).filter((association) => association.target.name === target.name);\n  },\n  getAssociationForAlias(target, alias) {\n    return this.getAssociations(target).find((association) => association.verifyAssociationAlias(alias)) || null;\n  }\n};\nfunction singleLinked(Type) {\n  return function declareAssociation(target, options = {}) {\n    const source = this;\n    if (!isModel(target, source.sequelize)) {\n      throw new Error(`${source.name}.${_.lowerFirst(Type.name)} called with something that's not a subclass of Sequelize.Model`);\n    }\n    options.hooks = options.hooks === void 0 ? false : Boolean(options.hooks);\n    options.useHooks = options.hooks;\n    if (options.useHooks) {\n      source.runHooks(\"beforeAssociate\", { source, target, type: Type }, options);\n    }\n    const association = new Type(source, target, Object.assign(options, source.options));\n    source.associations[association.associationAccessor] = association;\n    association._injectAttributes();\n    association.mixin(source.prototype);\n    if (options.useHooks) {\n      source.runHooks(\"afterAssociate\", { source, target, type: Type, association }, options);\n    }\n    return association;\n  };\n}\nMixin.hasOne = singleLinked(HasOne);\nMixin.belongsTo = singleLinked(BelongsTo);\nmodule.exports = Mixin;\nmodule.exports.Mixin = Mixin;\nmodule.exports.default = Mixin;\n//# sourceMappingURL=mixin.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/associations/mixin.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 275,
    "kind": "variable",
    "name": "_",
    "memberof": "lib/associations/mixin.js",
    "static": true,
    "longname": "lib/associations/mixin.js~_",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/associations/mixin.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 276,
    "kind": "variable",
    "name": "HasOne",
    "memberof": "lib/associations/mixin.js",
    "static": true,
    "longname": "lib/associations/mixin.js~HasOne",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/associations/mixin.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 277,
    "kind": "variable",
    "name": "HasMany",
    "memberof": "lib/associations/mixin.js",
    "static": true,
    "longname": "lib/associations/mixin.js~HasMany",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/associations/mixin.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 278,
    "kind": "variable",
    "name": "BelongsToMany",
    "memberof": "lib/associations/mixin.js",
    "static": true,
    "longname": "lib/associations/mixin.js~BelongsToMany",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/associations/mixin.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 279,
    "kind": "variable",
    "name": "BelongsTo",
    "memberof": "lib/associations/mixin.js",
    "static": true,
    "longname": "lib/associations/mixin.js~BelongsTo",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/associations/mixin.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 280,
    "kind": "function",
    "name": "isModel",
    "memberof": "lib/associations/mixin.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/associations/mixin.js~isModel",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/associations/mixin.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "model",
        "types": [
          "*"
        ]
      },
      {
        "name": "sequelize",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 281,
    "kind": "variable",
    "name": "Mixin",
    "memberof": "lib/associations/mixin.js",
    "static": true,
    "longname": "lib/associations/mixin.js~Mixin",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/associations/mixin.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "{\"hasMany\": function, \"belongsToMany\": function, \"getAssociations\": function, \"getAssociationForAlias\": function}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 282,
    "kind": "function",
    "name": "singleLinked",
    "memberof": "lib/associations/mixin.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/associations/mixin.js~singleLinked",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/associations/mixin.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [
      {
        "name": "Type",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 283,
    "kind": "file",
    "name": "lib/data-types.js",
    "content": "\"use strict\";\nconst util = require(\"util\");\nconst _ = require(\"lodash\");\nconst wkx = require(\"wkx\");\nconst sequelizeErrors = require(\"./errors\");\nconst Validator = require(\"./utils/validator-extras\").validator;\nconst momentTz = require(\"moment-timezone\");\nconst moment = require(\"moment\");\nconst { logger } = require(\"./utils/logger\");\nconst warnings = {};\nconst { classToInvokable } = require(\"./utils/class-to-invokable\");\nconst { joinSQLFragments } = require(\"./utils/join-sql-fragments\");\nclass ABSTRACT {\n  toString(options) {\n    return this.toSql(options);\n  }\n  toSql() {\n    return this.key;\n  }\n  stringify(value, options) {\n    if (this._stringify) {\n      return this._stringify(value, options);\n    }\n    return value;\n  }\n  bindParam(value, options) {\n    if (this._bindParam) {\n      return this._bindParam(value, options);\n    }\n    return options.bindParam(this.stringify(value, options));\n  }\n  static toString() {\n    return this.name;\n  }\n  static warn(link, text) {\n    if (!warnings[text]) {\n      warnings[text] = true;\n      logger.warn(`${text} \n>> Check: ${link}`);\n    }\n  }\n  static extend(oldType) {\n    return new this(oldType.options);\n  }\n}\nABSTRACT.prototype.dialectTypes = \"\";\nclass STRING extends ABSTRACT {\n  constructor(length, binary) {\n    super();\n    const options = typeof length === \"object\" && length || { length, binary };\n    this.options = options;\n    this._binary = options.binary;\n    this._length = options.length || 255;\n  }\n  toSql() {\n    return joinSQLFragments([\n      `VARCHAR(${this._length})`,\n      this._binary && \"BINARY\"\n    ]);\n  }\n  validate(value) {\n    if (Object.prototype.toString.call(value) !== \"[object String]\") {\n      if (this.options.binary && Buffer.isBuffer(value) || typeof value === \"number\") {\n        return true;\n      }\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid string\", value));\n    }\n    return true;\n  }\n  get BINARY() {\n    this._binary = true;\n    this.options.binary = true;\n    return this;\n  }\n  static get BINARY() {\n    return new this().BINARY;\n  }\n}\nclass CHAR extends STRING {\n  constructor(length, binary) {\n    super(typeof length === \"object\" && length || { length, binary });\n  }\n  toSql() {\n    return joinSQLFragments([\n      `CHAR(${this._length})`,\n      this._binary && \"BINARY\"\n    ]);\n  }\n}\nclass TEXT extends ABSTRACT {\n  constructor(length) {\n    super();\n    const options = typeof length === \"object\" && length || { length };\n    this.options = options;\n    this._length = options.length || \"\";\n  }\n  toSql() {\n    switch (this._length.toLowerCase()) {\n      case \"tiny\":\n        return \"TINYTEXT\";\n      case \"medium\":\n        return \"MEDIUMTEXT\";\n      case \"long\":\n        return \"LONGTEXT\";\n      default:\n        return this.key;\n    }\n  }\n  validate(value) {\n    if (typeof value !== \"string\") {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid string\", value));\n    }\n    return true;\n  }\n}\nclass CITEXT extends ABSTRACT {\n  toSql() {\n    return \"CITEXT\";\n  }\n  validate(value) {\n    if (typeof value !== \"string\") {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid string\", value));\n    }\n    return true;\n  }\n}\nclass NUMBER extends ABSTRACT {\n  constructor(options = {}) {\n    super();\n    if (typeof options === \"number\") {\n      options = {\n        length: options\n      };\n    }\n    this.options = options;\n    this._length = options.length;\n    this._zerofill = options.zerofill;\n    this._decimals = options.decimals;\n    this._precision = options.precision;\n    this._scale = options.scale;\n    this._unsigned = options.unsigned;\n  }\n  toSql() {\n    let result = this.key;\n    if (this._length) {\n      result += `(${this._length}`;\n      if (typeof this._decimals === \"number\") {\n        result += `,${this._decimals}`;\n      }\n      result += \")\";\n    }\n    if (this._unsigned) {\n      result += \" UNSIGNED\";\n    }\n    if (this._zerofill) {\n      result += \" ZEROFILL\";\n    }\n    return result;\n  }\n  validate(value) {\n    if (!Validator.isFloat(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format(`%j is not a valid ${this.key.toLowerCase()}`, value));\n    }\n    return true;\n  }\n  _stringify(number) {\n    if (typeof number === \"number\" || typeof number === \"boolean\" || number === null || number === void 0) {\n      return number;\n    }\n    if (typeof number.toString === \"function\") {\n      return number.toString();\n    }\n    return number;\n  }\n  get UNSIGNED() {\n    this._unsigned = true;\n    this.options.unsigned = true;\n    return this;\n  }\n  get ZEROFILL() {\n    this._zerofill = true;\n    this.options.zerofill = true;\n    return this;\n  }\n  static get UNSIGNED() {\n    return new this().UNSIGNED;\n  }\n  static get ZEROFILL() {\n    return new this().ZEROFILL;\n  }\n}\nclass INTEGER extends NUMBER {\n  validate(value) {\n    if (!Validator.isInt(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format(`%j is not a valid ${this.key.toLowerCase()}`, value));\n    }\n    return true;\n  }\n}\nclass TINYINT extends INTEGER {\n}\nclass SMALLINT extends INTEGER {\n}\nclass MEDIUMINT extends INTEGER {\n}\nclass BIGINT extends INTEGER {\n}\nclass FLOAT extends NUMBER {\n  constructor(length, decimals) {\n    super(typeof length === \"object\" && length || { length, decimals });\n  }\n  validate(value) {\n    if (!Validator.isFloat(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid float\", value));\n    }\n    return true;\n  }\n}\nclass REAL extends NUMBER {\n  constructor(length, decimals) {\n    super(typeof length === \"object\" && length || { length, decimals });\n  }\n}\nclass DOUBLE extends NUMBER {\n  constructor(length, decimals) {\n    super(typeof length === \"object\" && length || { length, decimals });\n  }\n}\nclass DECIMAL extends NUMBER {\n  constructor(precision, scale) {\n    super(typeof precision === \"object\" && precision || { precision, scale });\n  }\n  toSql() {\n    if (this._precision || this._scale) {\n      return `DECIMAL(${[this._precision, this._scale].filter(_.identity).join(\",\")})`;\n    }\n    return \"DECIMAL\";\n  }\n  validate(value) {\n    if (!Validator.isDecimal(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid decimal\", value));\n    }\n    return true;\n  }\n}\nconst protoExtensions = {\n  escape: false,\n  _value(value) {\n    if (Number.isNaN(value)) {\n      return \"NaN\";\n    }\n    if (!Number.isFinite(value)) {\n      const sign = value < 0 ? \"-\" : \"\";\n      return `${sign}Infinity`;\n    }\n    return value;\n  },\n  _stringify(value) {\n    return `'${this._value(value)}'`;\n  },\n  _bindParam(value, options) {\n    return options.bindParam(this._value(value));\n  }\n};\nfor (const floating of [FLOAT, DOUBLE, REAL]) {\n  Object.assign(floating.prototype, protoExtensions);\n}\nclass BOOLEAN extends ABSTRACT {\n  toSql() {\n    return \"TINYINT(1)\";\n  }\n  validate(value) {\n    if (!Validator.isBoolean(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid boolean\", value));\n    }\n    return true;\n  }\n  _sanitize(value) {\n    if (value !== null && value !== void 0) {\n      if (Buffer.isBuffer(value) && value.length === 1) {\n        value = value[0];\n      }\n      const type = typeof value;\n      if (type === \"string\") {\n        return value === \"true\" ? true : value === \"false\" ? false : value;\n      }\n      if (type === \"number\") {\n        return value === 1 ? true : value === 0 ? false : value;\n      }\n    }\n    return value;\n  }\n}\nBOOLEAN.parse = BOOLEAN.prototype._sanitize;\nclass TIME extends ABSTRACT {\n  toSql() {\n    return \"TIME\";\n  }\n}\nclass DATE extends ABSTRACT {\n  constructor(length) {\n    super();\n    const options = typeof length === \"object\" && length || { length };\n    this.options = options;\n    this._length = options.length || \"\";\n  }\n  toSql() {\n    return \"DATETIME\";\n  }\n  validate(value) {\n    if (!Validator.isDate(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid date\", value));\n    }\n    return true;\n  }\n  _sanitize(value, options) {\n    if ((!options || options && !options.raw) && !(value instanceof Date) && Boolean(value)) {\n      return new Date(value);\n    }\n    return value;\n  }\n  _isChanged(value, originalValue) {\n    if (originalValue && Boolean(value) && (value === originalValue || value instanceof Date && originalValue instanceof Date && value.getTime() === originalValue.getTime())) {\n      return false;\n    }\n    if (!originalValue && !value && originalValue === value) {\n      return false;\n    }\n    return true;\n  }\n  _applyTimezone(date, options) {\n    if (options.timezone) {\n      if (momentTz.tz.zone(options.timezone)) {\n        return momentTz(date).tz(options.timezone);\n      }\n      return moment(date).utcOffset(options.timezone);\n    }\n    return momentTz(date);\n  }\n  _stringify(date, options) {\n    if (!moment.isMoment(date)) {\n      date = this._applyTimezone(date, options);\n    }\n    return date.format(\"YYYY-MM-DD HH:mm:ss.SSS Z\");\n  }\n}\nclass DATEONLY extends ABSTRACT {\n  toSql() {\n    return \"DATE\";\n  }\n  _stringify(date) {\n    return moment(date).format(\"YYYY-MM-DD\");\n  }\n  _sanitize(value, options) {\n    if ((!options || options && !options.raw) && Boolean(value)) {\n      return moment(value).format(\"YYYY-MM-DD\");\n    }\n    return value;\n  }\n  _isChanged(value, originalValue) {\n    if (originalValue && Boolean(value) && originalValue === value) {\n      return false;\n    }\n    if (!originalValue && !value && originalValue === value) {\n      return false;\n    }\n    return true;\n  }\n}\nclass HSTORE extends ABSTRACT {\n  validate(value) {\n    if (!_.isPlainObject(value)) {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid hstore\", value));\n    }\n    return true;\n  }\n}\nclass JSONTYPE extends ABSTRACT {\n  validate() {\n    return true;\n  }\n  _stringify(value) {\n    return JSON.stringify(value);\n  }\n}\nclass JSONB extends JSONTYPE {\n}\nclass NOW extends ABSTRACT {\n}\nclass BLOB extends ABSTRACT {\n  constructor(length) {\n    super();\n    const options = typeof length === \"object\" && length || { length };\n    this.options = options;\n    this._length = options.length || \"\";\n  }\n  toSql() {\n    switch (this._length.toLowerCase()) {\n      case \"tiny\":\n        return \"TINYBLOB\";\n      case \"medium\":\n        return \"MEDIUMBLOB\";\n      case \"long\":\n        return \"LONGBLOB\";\n      default:\n        return this.key;\n    }\n  }\n  validate(value) {\n    if (typeof value !== \"string\" && !Buffer.isBuffer(value)) {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid blob\", value));\n    }\n    return true;\n  }\n  _stringify(value) {\n    if (!Buffer.isBuffer(value)) {\n      if (Array.isArray(value)) {\n        value = Buffer.from(value);\n      } else {\n        value = Buffer.from(value.toString());\n      }\n    }\n    const hex = value.toString(\"hex\");\n    return this._hexify(hex);\n  }\n  _hexify(hex) {\n    return `X'${hex}'`;\n  }\n  _bindParam(value, options) {\n    if (!Buffer.isBuffer(value)) {\n      if (Array.isArray(value)) {\n        value = Buffer.from(value);\n      } else {\n        value = Buffer.from(value.toString());\n      }\n    }\n    return options.bindParam(value);\n  }\n}\nBLOB.prototype.escape = false;\nclass RANGE extends ABSTRACT {\n  constructor(subtype) {\n    super();\n    const options = _.isPlainObject(subtype) ? subtype : { subtype };\n    if (!options.subtype) {\n      options.subtype = new INTEGER();\n    }\n    if (typeof options.subtype === \"function\") {\n      options.subtype = new options.subtype();\n    }\n    this._subtype = options.subtype.key;\n    this.options = options;\n  }\n  validate(value) {\n    if (!Array.isArray(value)) {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid range\", value));\n    }\n    if (value.length !== 2) {\n      throw new sequelizeErrors.ValidationError(\"A range must be an array with two elements\");\n    }\n    return true;\n  }\n}\nclass UUID extends ABSTRACT {\n  validate(value, options) {\n    if (typeof value !== \"string\" || !Validator.isUUID(value) && (!options || !options.acceptStrings)) {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid uuid\", value));\n    }\n    return true;\n  }\n}\nclass UUIDV1 extends ABSTRACT {\n  validate(value, options) {\n    if (typeof value !== \"string\" || !Validator.isUUID(value) && (!options || !options.acceptStrings)) {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid uuid\", value));\n    }\n    return true;\n  }\n}\nclass UUIDV4 extends ABSTRACT {\n  validate(value, options) {\n    if (typeof value !== \"string\" || !Validator.isUUID(value, 4) && (!options || !options.acceptStrings)) {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid uuidv4\", value));\n    }\n    return true;\n  }\n}\nclass VIRTUAL extends ABSTRACT {\n  constructor(ReturnType, fields) {\n    super();\n    if (typeof ReturnType === \"function\") {\n      ReturnType = new ReturnType();\n    }\n    this.returnType = ReturnType;\n    this.fields = fields;\n  }\n}\nclass ENUM extends ABSTRACT {\n  constructor(...args) {\n    super();\n    const value = args[0];\n    const options = typeof value === \"object\" && !Array.isArray(value) && value || {\n      values: args.reduce((result, element) => {\n        return result.concat(Array.isArray(element) ? element : [element]);\n      }, [])\n    };\n    this.values = options.values;\n    this.options = options;\n  }\n  validate(value) {\n    if (!this.values.includes(value)) {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid choice in %j\", value, this.values));\n    }\n    return true;\n  }\n}\nclass ARRAY extends ABSTRACT {\n  constructor(type) {\n    super();\n    const options = _.isPlainObject(type) ? type : { type };\n    this.options = options;\n    this.type = typeof options.type === \"function\" ? new options.type() : options.type;\n  }\n  toSql() {\n    return `${this.type.toSql()}[]`;\n  }\n  validate(value) {\n    if (!Array.isArray(value)) {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid array\", value));\n    }\n    return true;\n  }\n  static is(obj, type) {\n    return obj instanceof ARRAY && obj.type instanceof type;\n  }\n}\nclass GEOMETRY extends ABSTRACT {\n  constructor(type, srid) {\n    super();\n    const options = _.isPlainObject(type) ? type : { type, srid };\n    this.options = options;\n    this.type = options.type;\n    this.srid = options.srid;\n  }\n  _stringify(value, options) {\n    return `ST_GeomFromText(${options.escape(wkx.Geometry.parseGeoJSON(value).toWkt())})`;\n  }\n  _bindParam(value, options) {\n    return `ST_GeomFromText(${options.bindParam(wkx.Geometry.parseGeoJSON(value).toWkt())})`;\n  }\n}\nGEOMETRY.prototype.escape = false;\nclass GEOGRAPHY extends ABSTRACT {\n  constructor(type, srid) {\n    super();\n    const options = _.isPlainObject(type) ? type : { type, srid };\n    this.options = options;\n    this.type = options.type;\n    this.srid = options.srid;\n  }\n  _stringify(value, options) {\n    return `ST_GeomFromText(${options.escape(wkx.Geometry.parseGeoJSON(value).toWkt())})`;\n  }\n  _bindParam(value, options) {\n    return `ST_GeomFromText(${options.bindParam(wkx.Geometry.parseGeoJSON(value).toWkt())})`;\n  }\n}\nGEOGRAPHY.prototype.escape = false;\nclass CIDR extends ABSTRACT {\n  validate(value) {\n    if (typeof value !== \"string\" || !Validator.isIPRange(value)) {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid CIDR\", value));\n    }\n    return true;\n  }\n}\nclass INET extends ABSTRACT {\n  validate(value) {\n    if (typeof value !== \"string\" || !Validator.isIP(value)) {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid INET\", value));\n    }\n    return true;\n  }\n}\nclass MACADDR extends ABSTRACT {\n  validate(value) {\n    if (typeof value !== \"string\" || !Validator.isMACAddress(value)) {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid MACADDR\", value));\n    }\n    return true;\n  }\n}\nclass TSVECTOR extends ABSTRACT {\n  validate(value) {\n    if (typeof value !== \"string\") {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid string\", value));\n    }\n    return true;\n  }\n}\nconst DataTypes = module.exports = {\n  ABSTRACT,\n  STRING,\n  CHAR,\n  TEXT,\n  NUMBER,\n  TINYINT,\n  SMALLINT,\n  MEDIUMINT,\n  INTEGER,\n  BIGINT,\n  FLOAT,\n  TIME,\n  DATE,\n  DATEONLY,\n  BOOLEAN,\n  NOW,\n  BLOB,\n  DECIMAL,\n  NUMERIC: DECIMAL,\n  UUID,\n  UUIDV1,\n  UUIDV4,\n  HSTORE,\n  JSON: JSONTYPE,\n  JSONB,\n  VIRTUAL,\n  ARRAY,\n  ENUM,\n  RANGE,\n  REAL,\n  \"DOUBLE PRECISION\": DOUBLE,\n  DOUBLE,\n  GEOMETRY,\n  GEOGRAPHY,\n  CIDR,\n  INET,\n  MACADDR,\n  CITEXT,\n  TSVECTOR\n};\n_.each(DataTypes, (dataType, name) => {\n  if (!Object.prototype.hasOwnProperty.call(dataType, \"key\")) {\n    dataType.types = {};\n    dataType.key = dataType.prototype.key = name;\n  }\n});\nconst dialectMap = {};\ndialectMap.postgres = require(\"./dialects/postgres/data-types\")(DataTypes);\ndialectMap.mysql = require(\"./dialects/mysql/data-types\")(DataTypes);\ndialectMap.mariadb = require(\"./dialects/mariadb/data-types\")(DataTypes);\ndialectMap.sqlite = require(\"./dialects/sqlite/data-types\")(DataTypes);\ndialectMap.mssql = require(\"./dialects/mssql/data-types\")(DataTypes);\ndialectMap.db2 = require(\"./dialects/db2/data-types\")(DataTypes);\ndialectMap.snowflake = require(\"./dialects/snowflake/data-types\")(DataTypes);\nconst dialectList = Object.values(dialectMap);\nfor (const dataTypes of dialectList) {\n  _.each(dataTypes, (DataType, key) => {\n    if (!DataType.key) {\n      DataType.key = DataType.prototype.key = key;\n    }\n  });\n}\nfor (const dataTypes of [DataTypes, ...dialectList]) {\n  _.each(dataTypes, (DataType, key) => {\n    dataTypes[key] = classToInvokable(DataType);\n  });\n}\nObject.assign(DataTypes, dialectMap);\n//# sourceMappingURL=data-types.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/data-types.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 284,
    "kind": "variable",
    "name": "util",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~util",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 285,
    "kind": "variable",
    "name": "_",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~_",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 286,
    "kind": "variable",
    "name": "wkx",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~wkx",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 287,
    "kind": "variable",
    "name": "sequelizeErrors",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~sequelizeErrors",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 288,
    "kind": "variable",
    "name": "Validator",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~Validator",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 289,
    "kind": "variable",
    "name": "momentTz",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~momentTz",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 290,
    "kind": "variable",
    "name": "moment",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~moment",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 291,
    "kind": "variable",
    "name": "logger",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~logger",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 292,
    "kind": "variable",
    "name": "warnings",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~warnings",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 293,
    "kind": "variable",
    "name": "classToInvokable",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~classToInvokable",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 294,
    "kind": "variable",
    "name": "joinSQLFragments",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~joinSQLFragments",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 295,
    "kind": "class",
    "name": "ABSTRACT",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~ABSTRACT",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 296,
    "kind": "method",
    "name": "toString",
    "memberof": "lib/data-types.js~ABSTRACT",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~ABSTRACT#toString",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 297,
    "kind": "method",
    "name": "toSql",
    "memberof": "lib/data-types.js~ABSTRACT",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~ABSTRACT#toSql",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 298,
    "kind": "method",
    "name": "stringify",
    "memberof": "lib/data-types.js~ABSTRACT",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~ABSTRACT#stringify",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 299,
    "kind": "method",
    "name": "bindParam",
    "memberof": "lib/data-types.js~ABSTRACT",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~ABSTRACT#bindParam",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 300,
    "kind": "method",
    "name": "toString",
    "memberof": "lib/data-types.js~ABSTRACT",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/data-types.js~ABSTRACT.toString",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 301,
    "kind": "method",
    "name": "warn",
    "memberof": "lib/data-types.js~ABSTRACT",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/data-types.js~ABSTRACT.warn",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [
      {
        "name": "link",
        "types": [
          "*"
        ]
      },
      {
        "name": "text",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 302,
    "kind": "method",
    "name": "extend",
    "memberof": "lib/data-types.js~ABSTRACT",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/data-types.js~ABSTRACT.extend",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "params": [
      {
        "name": "oldType",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 303,
    "kind": "class",
    "name": "STRING",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~STRING",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "interface": false,
    "extends": [
      "ABSTRACT"
    ],
    "ignore": true
  },
  {
    "__docId__": 304,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/data-types.js~STRING",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~STRING#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 305,
    "kind": "member",
    "name": "options",
    "memberof": "lib/data-types.js~STRING",
    "static": false,
    "longname": "lib/data-types.js~STRING#options",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 306,
    "kind": "member",
    "name": "_binary",
    "memberof": "lib/data-types.js~STRING",
    "static": false,
    "longname": "lib/data-types.js~STRING#_binary",
    "access": "private",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 307,
    "kind": "member",
    "name": "_length",
    "memberof": "lib/data-types.js~STRING",
    "static": false,
    "longname": "lib/data-types.js~STRING#_length",
    "access": "private",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 308,
    "kind": "method",
    "name": "toSql",
    "memberof": "lib/data-types.js~STRING",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~STRING#toSql",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 309,
    "kind": "method",
    "name": "validate",
    "memberof": "lib/data-types.js~STRING",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~STRING#validate",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 310,
    "kind": "get",
    "name": "BINARY",
    "memberof": "lib/data-types.js~STRING",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~STRING#BINARY",
    "access": "public",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 312,
    "kind": "get",
    "name": "BINARY",
    "memberof": "lib/data-types.js~STRING",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/data-types.js~STRING.BINARY",
    "access": "public",
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 313,
    "kind": "class",
    "name": "CHAR",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~CHAR",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "interface": false,
    "extends": [
      "STRING"
    ],
    "ignore": true
  },
  {
    "__docId__": 314,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/data-types.js~CHAR",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~CHAR#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 315,
    "kind": "method",
    "name": "toSql",
    "memberof": "lib/data-types.js~CHAR",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~CHAR#toSql",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 316,
    "kind": "class",
    "name": "TEXT",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~TEXT",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "interface": false,
    "extends": [
      "ABSTRACT"
    ],
    "ignore": true
  },
  {
    "__docId__": 317,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/data-types.js~TEXT",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~TEXT#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 318,
    "kind": "member",
    "name": "options",
    "memberof": "lib/data-types.js~TEXT",
    "static": false,
    "longname": "lib/data-types.js~TEXT#options",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 319,
    "kind": "member",
    "name": "_length",
    "memberof": "lib/data-types.js~TEXT",
    "static": false,
    "longname": "lib/data-types.js~TEXT#_length",
    "access": "private",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 320,
    "kind": "method",
    "name": "toSql",
    "memberof": "lib/data-types.js~TEXT",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~TEXT#toSql",
    "access": "public",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 321,
    "kind": "method",
    "name": "validate",
    "memberof": "lib/data-types.js~TEXT",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~TEXT#validate",
    "access": "public",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 322,
    "kind": "class",
    "name": "CITEXT",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~CITEXT",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 116,
    "undocument": true,
    "interface": false,
    "extends": [
      "ABSTRACT"
    ],
    "ignore": true
  },
  {
    "__docId__": 323,
    "kind": "method",
    "name": "toSql",
    "memberof": "lib/data-types.js~CITEXT",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~CITEXT#toSql",
    "access": "public",
    "description": null,
    "lineNumber": 117,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 324,
    "kind": "method",
    "name": "validate",
    "memberof": "lib/data-types.js~CITEXT",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~CITEXT#validate",
    "access": "public",
    "description": null,
    "lineNumber": 120,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 325,
    "kind": "class",
    "name": "NUMBER",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~NUMBER",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "interface": false,
    "extends": [
      "ABSTRACT"
    ],
    "ignore": true
  },
  {
    "__docId__": 326,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/data-types.js~NUMBER",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~NUMBER#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 128,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 327,
    "kind": "member",
    "name": "options",
    "memberof": "lib/data-types.js~NUMBER",
    "static": false,
    "longname": "lib/data-types.js~NUMBER#options",
    "access": "public",
    "description": null,
    "lineNumber": 135,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 328,
    "kind": "member",
    "name": "_length",
    "memberof": "lib/data-types.js~NUMBER",
    "static": false,
    "longname": "lib/data-types.js~NUMBER#_length",
    "access": "private",
    "description": null,
    "lineNumber": 136,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 329,
    "kind": "member",
    "name": "_zerofill",
    "memberof": "lib/data-types.js~NUMBER",
    "static": false,
    "longname": "lib/data-types.js~NUMBER#_zerofill",
    "access": "private",
    "description": null,
    "lineNumber": 137,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 330,
    "kind": "member",
    "name": "_decimals",
    "memberof": "lib/data-types.js~NUMBER",
    "static": false,
    "longname": "lib/data-types.js~NUMBER#_decimals",
    "access": "private",
    "description": null,
    "lineNumber": 138,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 331,
    "kind": "member",
    "name": "_precision",
    "memberof": "lib/data-types.js~NUMBER",
    "static": false,
    "longname": "lib/data-types.js~NUMBER#_precision",
    "access": "private",
    "description": null,
    "lineNumber": 139,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 332,
    "kind": "member",
    "name": "_scale",
    "memberof": "lib/data-types.js~NUMBER",
    "static": false,
    "longname": "lib/data-types.js~NUMBER#_scale",
    "access": "private",
    "description": null,
    "lineNumber": 140,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 333,
    "kind": "member",
    "name": "_unsigned",
    "memberof": "lib/data-types.js~NUMBER",
    "static": false,
    "longname": "lib/data-types.js~NUMBER#_unsigned",
    "access": "private",
    "description": null,
    "lineNumber": 141,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 334,
    "kind": "method",
    "name": "toSql",
    "memberof": "lib/data-types.js~NUMBER",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~NUMBER#toSql",
    "access": "public",
    "description": null,
    "lineNumber": 143,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 335,
    "kind": "method",
    "name": "validate",
    "memberof": "lib/data-types.js~NUMBER",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~NUMBER#validate",
    "access": "public",
    "description": null,
    "lineNumber": 160,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 336,
    "kind": "method",
    "name": "_stringify",
    "memberof": "lib/data-types.js~NUMBER",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~NUMBER#_stringify",
    "access": "private",
    "description": null,
    "lineNumber": 166,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "number",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 337,
    "kind": "get",
    "name": "UNSIGNED",
    "memberof": "lib/data-types.js~NUMBER",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~NUMBER#UNSIGNED",
    "access": "public",
    "description": null,
    "lineNumber": 175,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 339,
    "kind": "get",
    "name": "ZEROFILL",
    "memberof": "lib/data-types.js~NUMBER",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~NUMBER#ZEROFILL",
    "access": "public",
    "description": null,
    "lineNumber": 180,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 341,
    "kind": "get",
    "name": "UNSIGNED",
    "memberof": "lib/data-types.js~NUMBER",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/data-types.js~NUMBER.UNSIGNED",
    "access": "public",
    "description": null,
    "lineNumber": 185,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 342,
    "kind": "get",
    "name": "ZEROFILL",
    "memberof": "lib/data-types.js~NUMBER",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/data-types.js~NUMBER.ZEROFILL",
    "access": "public",
    "description": null,
    "lineNumber": 188,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 343,
    "kind": "class",
    "name": "INTEGER",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~INTEGER",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 192,
    "undocument": true,
    "interface": false,
    "extends": [
      "NUMBER"
    ],
    "ignore": true
  },
  {
    "__docId__": 344,
    "kind": "method",
    "name": "validate",
    "memberof": "lib/data-types.js~INTEGER",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~INTEGER#validate",
    "access": "public",
    "description": null,
    "lineNumber": 193,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 345,
    "kind": "class",
    "name": "TINYINT",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~TINYINT",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 200,
    "undocument": true,
    "interface": false,
    "extends": [
      "INTEGER"
    ],
    "ignore": true
  },
  {
    "__docId__": 346,
    "kind": "class",
    "name": "SMALLINT",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~SMALLINT",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 202,
    "undocument": true,
    "interface": false,
    "extends": [
      "INTEGER"
    ],
    "ignore": true
  },
  {
    "__docId__": 347,
    "kind": "class",
    "name": "MEDIUMINT",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~MEDIUMINT",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 204,
    "undocument": true,
    "interface": false,
    "extends": [
      "INTEGER"
    ],
    "ignore": true
  },
  {
    "__docId__": 348,
    "kind": "class",
    "name": "BIGINT",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~BIGINT",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 206,
    "undocument": true,
    "interface": false,
    "extends": [
      "INTEGER"
    ],
    "ignore": true
  },
  {
    "__docId__": 349,
    "kind": "class",
    "name": "FLOAT",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~FLOAT",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 208,
    "undocument": true,
    "interface": false,
    "extends": [
      "NUMBER"
    ],
    "ignore": true
  },
  {
    "__docId__": 350,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/data-types.js~FLOAT",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~FLOAT#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 209,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 351,
    "kind": "method",
    "name": "validate",
    "memberof": "lib/data-types.js~FLOAT",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~FLOAT#validate",
    "access": "public",
    "description": null,
    "lineNumber": 212,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 352,
    "kind": "class",
    "name": "REAL",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~REAL",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 219,
    "undocument": true,
    "interface": false,
    "extends": [
      "NUMBER"
    ],
    "ignore": true
  },
  {
    "__docId__": 353,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/data-types.js~REAL",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~REAL#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 220,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 354,
    "kind": "class",
    "name": "DOUBLE",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~DOUBLE",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 224,
    "undocument": true,
    "interface": false,
    "extends": [
      "NUMBER"
    ],
    "ignore": true
  },
  {
    "__docId__": 355,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/data-types.js~DOUBLE",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~DOUBLE#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 225,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 356,
    "kind": "class",
    "name": "DECIMAL",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~DECIMAL",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 229,
    "undocument": true,
    "interface": false,
    "extends": [
      "NUMBER"
    ],
    "ignore": true
  },
  {
    "__docId__": 357,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/data-types.js~DECIMAL",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~DECIMAL#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 230,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 358,
    "kind": "method",
    "name": "toSql",
    "memberof": "lib/data-types.js~DECIMAL",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~DECIMAL#toSql",
    "access": "public",
    "description": null,
    "lineNumber": 233,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 359,
    "kind": "method",
    "name": "validate",
    "memberof": "lib/data-types.js~DECIMAL",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~DECIMAL#validate",
    "access": "public",
    "description": null,
    "lineNumber": 239,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 360,
    "kind": "variable",
    "name": "protoExtensions",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~protoExtensions",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 246,
    "undocument": true,
    "type": {
      "types": [
        "{\"escape\": *, \"_value\": function, \"_stringify\": function, \"_bindParam\": function}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 361,
    "kind": "class",
    "name": "BOOLEAN",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~BOOLEAN",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 268,
    "undocument": true,
    "interface": false,
    "extends": [
      "ABSTRACT"
    ],
    "ignore": true
  },
  {
    "__docId__": 362,
    "kind": "method",
    "name": "toSql",
    "memberof": "lib/data-types.js~BOOLEAN",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~BOOLEAN#toSql",
    "access": "public",
    "description": null,
    "lineNumber": 269,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 363,
    "kind": "method",
    "name": "validate",
    "memberof": "lib/data-types.js~BOOLEAN",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~BOOLEAN#validate",
    "access": "public",
    "description": null,
    "lineNumber": 272,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 364,
    "kind": "method",
    "name": "_sanitize",
    "memberof": "lib/data-types.js~BOOLEAN",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~BOOLEAN#_sanitize",
    "access": "private",
    "description": null,
    "lineNumber": 278,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 365,
    "kind": "class",
    "name": "TIME",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~TIME",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 295,
    "undocument": true,
    "interface": false,
    "extends": [
      "ABSTRACT"
    ],
    "ignore": true
  },
  {
    "__docId__": 366,
    "kind": "method",
    "name": "toSql",
    "memberof": "lib/data-types.js~TIME",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~TIME#toSql",
    "access": "public",
    "description": null,
    "lineNumber": 296,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 367,
    "kind": "class",
    "name": "DATE",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~DATE",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 300,
    "undocument": true,
    "interface": false,
    "extends": [
      "ABSTRACT"
    ],
    "ignore": true
  },
  {
    "__docId__": 368,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/data-types.js~DATE",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~DATE#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 301,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 369,
    "kind": "member",
    "name": "options",
    "memberof": "lib/data-types.js~DATE",
    "static": false,
    "longname": "lib/data-types.js~DATE#options",
    "access": "public",
    "description": null,
    "lineNumber": 304,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 370,
    "kind": "member",
    "name": "_length",
    "memberof": "lib/data-types.js~DATE",
    "static": false,
    "longname": "lib/data-types.js~DATE#_length",
    "access": "private",
    "description": null,
    "lineNumber": 305,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 371,
    "kind": "method",
    "name": "toSql",
    "memberof": "lib/data-types.js~DATE",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~DATE#toSql",
    "access": "public",
    "description": null,
    "lineNumber": 307,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 372,
    "kind": "method",
    "name": "validate",
    "memberof": "lib/data-types.js~DATE",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~DATE#validate",
    "access": "public",
    "description": null,
    "lineNumber": 310,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 373,
    "kind": "method",
    "name": "_sanitize",
    "memberof": "lib/data-types.js~DATE",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~DATE#_sanitize",
    "access": "private",
    "description": null,
    "lineNumber": 316,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 374,
    "kind": "method",
    "name": "_isChanged",
    "memberof": "lib/data-types.js~DATE",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~DATE#_isChanged",
    "access": "private",
    "description": null,
    "lineNumber": 322,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "originalValue",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 375,
    "kind": "method",
    "name": "_applyTimezone",
    "memberof": "lib/data-types.js~DATE",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~DATE#_applyTimezone",
    "access": "private",
    "description": null,
    "lineNumber": 331,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "date",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 376,
    "kind": "method",
    "name": "_stringify",
    "memberof": "lib/data-types.js~DATE",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~DATE#_stringify",
    "access": "private",
    "description": null,
    "lineNumber": 340,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "date",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 377,
    "kind": "class",
    "name": "DATEONLY",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~DATEONLY",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 347,
    "undocument": true,
    "interface": false,
    "extends": [
      "ABSTRACT"
    ],
    "ignore": true
  },
  {
    "__docId__": 378,
    "kind": "method",
    "name": "toSql",
    "memberof": "lib/data-types.js~DATEONLY",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~DATEONLY#toSql",
    "access": "public",
    "description": null,
    "lineNumber": 348,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 379,
    "kind": "method",
    "name": "_stringify",
    "memberof": "lib/data-types.js~DATEONLY",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~DATEONLY#_stringify",
    "access": "private",
    "description": null,
    "lineNumber": 351,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "date",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 380,
    "kind": "method",
    "name": "_sanitize",
    "memberof": "lib/data-types.js~DATEONLY",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~DATEONLY#_sanitize",
    "access": "private",
    "description": null,
    "lineNumber": 354,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 381,
    "kind": "method",
    "name": "_isChanged",
    "memberof": "lib/data-types.js~DATEONLY",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~DATEONLY#_isChanged",
    "access": "private",
    "description": null,
    "lineNumber": 360,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "originalValue",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 382,
    "kind": "class",
    "name": "HSTORE",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~HSTORE",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 370,
    "undocument": true,
    "interface": false,
    "extends": [
      "ABSTRACT"
    ],
    "ignore": true
  },
  {
    "__docId__": 383,
    "kind": "method",
    "name": "validate",
    "memberof": "lib/data-types.js~HSTORE",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~HSTORE#validate",
    "access": "public",
    "description": null,
    "lineNumber": 371,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 384,
    "kind": "class",
    "name": "JSONTYPE",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~JSONTYPE",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 378,
    "undocument": true,
    "interface": false,
    "extends": [
      "ABSTRACT"
    ],
    "ignore": true
  },
  {
    "__docId__": 385,
    "kind": "method",
    "name": "validate",
    "memberof": "lib/data-types.js~JSONTYPE",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~JSONTYPE#validate",
    "access": "public",
    "description": null,
    "lineNumber": 379,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 386,
    "kind": "method",
    "name": "_stringify",
    "memberof": "lib/data-types.js~JSONTYPE",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~JSONTYPE#_stringify",
    "access": "private",
    "description": null,
    "lineNumber": 382,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 387,
    "kind": "class",
    "name": "JSONB",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~JSONB",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 386,
    "undocument": true,
    "interface": false,
    "extends": [
      "JSONTYPE"
    ],
    "ignore": true
  },
  {
    "__docId__": 388,
    "kind": "class",
    "name": "NOW",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~NOW",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 388,
    "undocument": true,
    "interface": false,
    "extends": [
      "ABSTRACT"
    ],
    "ignore": true
  },
  {
    "__docId__": 389,
    "kind": "class",
    "name": "BLOB",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~BLOB",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 390,
    "undocument": true,
    "interface": false,
    "extends": [
      "ABSTRACT"
    ],
    "ignore": true
  },
  {
    "__docId__": 390,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/data-types.js~BLOB",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~BLOB#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 391,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 391,
    "kind": "member",
    "name": "options",
    "memberof": "lib/data-types.js~BLOB",
    "static": false,
    "longname": "lib/data-types.js~BLOB#options",
    "access": "public",
    "description": null,
    "lineNumber": 394,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 392,
    "kind": "member",
    "name": "_length",
    "memberof": "lib/data-types.js~BLOB",
    "static": false,
    "longname": "lib/data-types.js~BLOB#_length",
    "access": "private",
    "description": null,
    "lineNumber": 395,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 393,
    "kind": "method",
    "name": "toSql",
    "memberof": "lib/data-types.js~BLOB",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~BLOB#toSql",
    "access": "public",
    "description": null,
    "lineNumber": 397,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 394,
    "kind": "method",
    "name": "validate",
    "memberof": "lib/data-types.js~BLOB",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~BLOB#validate",
    "access": "public",
    "description": null,
    "lineNumber": 409,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 395,
    "kind": "method",
    "name": "_stringify",
    "memberof": "lib/data-types.js~BLOB",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~BLOB#_stringify",
    "access": "private",
    "description": null,
    "lineNumber": 415,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 396,
    "kind": "method",
    "name": "_hexify",
    "memberof": "lib/data-types.js~BLOB",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~BLOB#_hexify",
    "access": "private",
    "description": null,
    "lineNumber": 426,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "hex",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 397,
    "kind": "method",
    "name": "_bindParam",
    "memberof": "lib/data-types.js~BLOB",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~BLOB#_bindParam",
    "access": "private",
    "description": null,
    "lineNumber": 429,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 398,
    "kind": "class",
    "name": "RANGE",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~RANGE",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 441,
    "undocument": true,
    "interface": false,
    "extends": [
      "ABSTRACT"
    ],
    "ignore": true
  },
  {
    "__docId__": 399,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/data-types.js~RANGE",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~RANGE#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 442,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 400,
    "kind": "member",
    "name": "_subtype",
    "memberof": "lib/data-types.js~RANGE",
    "static": false,
    "longname": "lib/data-types.js~RANGE#_subtype",
    "access": "private",
    "description": null,
    "lineNumber": 451,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 401,
    "kind": "member",
    "name": "options",
    "memberof": "lib/data-types.js~RANGE",
    "static": false,
    "longname": "lib/data-types.js~RANGE#options",
    "access": "public",
    "description": null,
    "lineNumber": 452,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 402,
    "kind": "method",
    "name": "validate",
    "memberof": "lib/data-types.js~RANGE",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~RANGE#validate",
    "access": "public",
    "description": null,
    "lineNumber": 454,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 403,
    "kind": "class",
    "name": "UUID",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~UUID",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 464,
    "undocument": true,
    "interface": false,
    "extends": [
      "ABSTRACT"
    ],
    "ignore": true
  },
  {
    "__docId__": 404,
    "kind": "method",
    "name": "validate",
    "memberof": "lib/data-types.js~UUID",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~UUID#validate",
    "access": "public",
    "description": null,
    "lineNumber": 465,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 405,
    "kind": "class",
    "name": "UUIDV1",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~UUIDV1",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 472,
    "undocument": true,
    "interface": false,
    "extends": [
      "ABSTRACT"
    ],
    "ignore": true
  },
  {
    "__docId__": 406,
    "kind": "method",
    "name": "validate",
    "memberof": "lib/data-types.js~UUIDV1",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~UUIDV1#validate",
    "access": "public",
    "description": null,
    "lineNumber": 473,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 407,
    "kind": "class",
    "name": "UUIDV4",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~UUIDV4",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 480,
    "undocument": true,
    "interface": false,
    "extends": [
      "ABSTRACT"
    ],
    "ignore": true
  },
  {
    "__docId__": 408,
    "kind": "method",
    "name": "validate",
    "memberof": "lib/data-types.js~UUIDV4",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~UUIDV4#validate",
    "access": "public",
    "description": null,
    "lineNumber": 481,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 409,
    "kind": "class",
    "name": "VIRTUAL",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~VIRTUAL",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 488,
    "undocument": true,
    "interface": false,
    "extends": [
      "ABSTRACT"
    ],
    "ignore": true
  },
  {
    "__docId__": 410,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/data-types.js~VIRTUAL",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~VIRTUAL#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 489,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 411,
    "kind": "member",
    "name": "returnType",
    "memberof": "lib/data-types.js~VIRTUAL",
    "static": false,
    "longname": "lib/data-types.js~VIRTUAL#returnType",
    "access": "public",
    "description": null,
    "lineNumber": 494,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 412,
    "kind": "member",
    "name": "fields",
    "memberof": "lib/data-types.js~VIRTUAL",
    "static": false,
    "longname": "lib/data-types.js~VIRTUAL#fields",
    "access": "public",
    "description": null,
    "lineNumber": 495,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 413,
    "kind": "class",
    "name": "ENUM",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~ENUM",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 498,
    "undocument": true,
    "interface": false,
    "extends": [
      "ABSTRACT"
    ],
    "ignore": true
  },
  {
    "__docId__": 414,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/data-types.js~ENUM",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~ENUM#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 499,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 415,
    "kind": "member",
    "name": "values",
    "memberof": "lib/data-types.js~ENUM",
    "static": false,
    "longname": "lib/data-types.js~ENUM#values",
    "access": "public",
    "description": null,
    "lineNumber": 507,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 416,
    "kind": "member",
    "name": "options",
    "memberof": "lib/data-types.js~ENUM",
    "static": false,
    "longname": "lib/data-types.js~ENUM#options",
    "access": "public",
    "description": null,
    "lineNumber": 508,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 417,
    "kind": "method",
    "name": "validate",
    "memberof": "lib/data-types.js~ENUM",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~ENUM#validate",
    "access": "public",
    "description": null,
    "lineNumber": 510,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 418,
    "kind": "class",
    "name": "ARRAY",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~ARRAY",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 517,
    "undocument": true,
    "interface": false,
    "extends": [
      "ABSTRACT"
    ],
    "ignore": true
  },
  {
    "__docId__": 419,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/data-types.js~ARRAY",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~ARRAY#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 518,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 420,
    "kind": "member",
    "name": "options",
    "memberof": "lib/data-types.js~ARRAY",
    "static": false,
    "longname": "lib/data-types.js~ARRAY#options",
    "access": "public",
    "description": null,
    "lineNumber": 521,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 421,
    "kind": "member",
    "name": "type",
    "memberof": "lib/data-types.js~ARRAY",
    "static": false,
    "longname": "lib/data-types.js~ARRAY#type",
    "access": "public",
    "description": null,
    "lineNumber": 522,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 422,
    "kind": "method",
    "name": "toSql",
    "memberof": "lib/data-types.js~ARRAY",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~ARRAY#toSql",
    "access": "public",
    "description": null,
    "lineNumber": 524,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 423,
    "kind": "method",
    "name": "validate",
    "memberof": "lib/data-types.js~ARRAY",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~ARRAY#validate",
    "access": "public",
    "description": null,
    "lineNumber": 527,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 424,
    "kind": "method",
    "name": "is",
    "memberof": "lib/data-types.js~ARRAY",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/data-types.js~ARRAY.is",
    "access": "public",
    "description": null,
    "lineNumber": 533,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "type",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 425,
    "kind": "class",
    "name": "GEOMETRY",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~GEOMETRY",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 537,
    "undocument": true,
    "interface": false,
    "extends": [
      "ABSTRACT"
    ],
    "ignore": true
  },
  {
    "__docId__": 426,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/data-types.js~GEOMETRY",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~GEOMETRY#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 538,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 427,
    "kind": "member",
    "name": "options",
    "memberof": "lib/data-types.js~GEOMETRY",
    "static": false,
    "longname": "lib/data-types.js~GEOMETRY#options",
    "access": "public",
    "description": null,
    "lineNumber": 541,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 428,
    "kind": "member",
    "name": "type",
    "memberof": "lib/data-types.js~GEOMETRY",
    "static": false,
    "longname": "lib/data-types.js~GEOMETRY#type",
    "access": "public",
    "description": null,
    "lineNumber": 542,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 429,
    "kind": "member",
    "name": "srid",
    "memberof": "lib/data-types.js~GEOMETRY",
    "static": false,
    "longname": "lib/data-types.js~GEOMETRY#srid",
    "access": "public",
    "description": null,
    "lineNumber": 543,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 430,
    "kind": "method",
    "name": "_stringify",
    "memberof": "lib/data-types.js~GEOMETRY",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~GEOMETRY#_stringify",
    "access": "private",
    "description": null,
    "lineNumber": 545,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 431,
    "kind": "method",
    "name": "_bindParam",
    "memberof": "lib/data-types.js~GEOMETRY",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~GEOMETRY#_bindParam",
    "access": "private",
    "description": null,
    "lineNumber": 548,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 432,
    "kind": "class",
    "name": "GEOGRAPHY",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~GEOGRAPHY",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 553,
    "undocument": true,
    "interface": false,
    "extends": [
      "ABSTRACT"
    ],
    "ignore": true
  },
  {
    "__docId__": 433,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/data-types.js~GEOGRAPHY",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~GEOGRAPHY#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 554,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 434,
    "kind": "member",
    "name": "options",
    "memberof": "lib/data-types.js~GEOGRAPHY",
    "static": false,
    "longname": "lib/data-types.js~GEOGRAPHY#options",
    "access": "public",
    "description": null,
    "lineNumber": 557,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 435,
    "kind": "member",
    "name": "type",
    "memberof": "lib/data-types.js~GEOGRAPHY",
    "static": false,
    "longname": "lib/data-types.js~GEOGRAPHY#type",
    "access": "public",
    "description": null,
    "lineNumber": 558,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 436,
    "kind": "member",
    "name": "srid",
    "memberof": "lib/data-types.js~GEOGRAPHY",
    "static": false,
    "longname": "lib/data-types.js~GEOGRAPHY#srid",
    "access": "public",
    "description": null,
    "lineNumber": 559,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 437,
    "kind": "method",
    "name": "_stringify",
    "memberof": "lib/data-types.js~GEOGRAPHY",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~GEOGRAPHY#_stringify",
    "access": "private",
    "description": null,
    "lineNumber": 561,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 438,
    "kind": "method",
    "name": "_bindParam",
    "memberof": "lib/data-types.js~GEOGRAPHY",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~GEOGRAPHY#_bindParam",
    "access": "private",
    "description": null,
    "lineNumber": 564,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 439,
    "kind": "class",
    "name": "CIDR",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~CIDR",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 569,
    "undocument": true,
    "interface": false,
    "extends": [
      "ABSTRACT"
    ],
    "ignore": true
  },
  {
    "__docId__": 440,
    "kind": "method",
    "name": "validate",
    "memberof": "lib/data-types.js~CIDR",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~CIDR#validate",
    "access": "public",
    "description": null,
    "lineNumber": 570,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 441,
    "kind": "class",
    "name": "INET",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~INET",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 577,
    "undocument": true,
    "interface": false,
    "extends": [
      "ABSTRACT"
    ],
    "ignore": true
  },
  {
    "__docId__": 442,
    "kind": "method",
    "name": "validate",
    "memberof": "lib/data-types.js~INET",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~INET#validate",
    "access": "public",
    "description": null,
    "lineNumber": 578,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 443,
    "kind": "class",
    "name": "MACADDR",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~MACADDR",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 585,
    "undocument": true,
    "interface": false,
    "extends": [
      "ABSTRACT"
    ],
    "ignore": true
  },
  {
    "__docId__": 444,
    "kind": "method",
    "name": "validate",
    "memberof": "lib/data-types.js~MACADDR",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~MACADDR#validate",
    "access": "public",
    "description": null,
    "lineNumber": 586,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 445,
    "kind": "class",
    "name": "TSVECTOR",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~TSVECTOR",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 593,
    "undocument": true,
    "interface": false,
    "extends": [
      "ABSTRACT"
    ],
    "ignore": true
  },
  {
    "__docId__": 446,
    "kind": "method",
    "name": "validate",
    "memberof": "lib/data-types.js~TSVECTOR",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/data-types.js~TSVECTOR#validate",
    "access": "public",
    "description": null,
    "lineNumber": 594,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 447,
    "kind": "variable",
    "name": "DataTypes",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~DataTypes",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 601,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 448,
    "kind": "variable",
    "name": "dialectMap",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~dialectMap",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 648,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 449,
    "kind": "variable",
    "name": "dialectList",
    "memberof": "lib/data-types.js",
    "static": true,
    "longname": "lib/data-types.js~dialectList",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 656,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 450,
    "kind": "file",
    "name": "lib/deferrable.js",
    "content": "\"use strict\";\nconst { classToInvokable } = require(\"./utils\");\nclass ABSTRACT {\n  static toString(...args) {\n    return new this().toString(...args);\n  }\n  toString(...args) {\n    return this.toSql(...args);\n  }\n  toSql() {\n    throw new Error(\"toSql implementation missing\");\n  }\n}\nclass INITIALLY_DEFERRED extends ABSTRACT {\n  toSql() {\n    return \"DEFERRABLE INITIALLY DEFERRED\";\n  }\n}\nclass INITIALLY_IMMEDIATE extends ABSTRACT {\n  toSql() {\n    return \"DEFERRABLE INITIALLY IMMEDIATE\";\n  }\n}\nclass NOT extends ABSTRACT {\n  toSql() {\n    return \"NOT DEFERRABLE\";\n  }\n}\nclass SET_DEFERRED extends ABSTRACT {\n  constructor(constraints) {\n    super();\n    this.constraints = constraints;\n  }\n  toSql(queryGenerator) {\n    return queryGenerator.setDeferredQuery(this.constraints);\n  }\n}\nclass SET_IMMEDIATE extends ABSTRACT {\n  constructor(constraints) {\n    super();\n    this.constraints = constraints;\n  }\n  toSql(queryGenerator) {\n    return queryGenerator.setImmediateQuery(this.constraints);\n  }\n}\nconst Deferrable = {\n  INITIALLY_DEFERRED: classToInvokable(INITIALLY_DEFERRED),\n  INITIALLY_IMMEDIATE: classToInvokable(INITIALLY_IMMEDIATE),\n  NOT: classToInvokable(NOT),\n  SET_DEFERRED: classToInvokable(SET_DEFERRED),\n  SET_IMMEDIATE: classToInvokable(SET_IMMEDIATE)\n};\nmodule.exports = Deferrable;\n//# sourceMappingURL=deferrable.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/deferrable.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 451,
    "kind": "variable",
    "name": "classToInvokable",
    "memberof": "lib/deferrable.js",
    "static": true,
    "longname": "lib/deferrable.js~classToInvokable",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/deferrable.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 452,
    "kind": "class",
    "name": "ABSTRACT",
    "memberof": "lib/deferrable.js",
    "static": true,
    "longname": "lib/deferrable.js~ABSTRACT",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/deferrable.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 453,
    "kind": "method",
    "name": "toString",
    "memberof": "lib/deferrable.js~ABSTRACT",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/deferrable.js~ABSTRACT.toString",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 454,
    "kind": "method",
    "name": "toString",
    "memberof": "lib/deferrable.js~ABSTRACT",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/deferrable.js~ABSTRACT#toString",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 455,
    "kind": "method",
    "name": "toSql",
    "memberof": "lib/deferrable.js~ABSTRACT",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/deferrable.js~ABSTRACT#toSql",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 456,
    "kind": "class",
    "name": "INITIALLY_DEFERRED",
    "memberof": "lib/deferrable.js",
    "static": true,
    "longname": "lib/deferrable.js~INITIALLY_DEFERRED",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/deferrable.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "interface": false,
    "extends": [
      "ABSTRACT"
    ],
    "ignore": true
  },
  {
    "__docId__": 457,
    "kind": "method",
    "name": "toSql",
    "memberof": "lib/deferrable.js~INITIALLY_DEFERRED",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/deferrable.js~INITIALLY_DEFERRED#toSql",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 458,
    "kind": "class",
    "name": "INITIALLY_IMMEDIATE",
    "memberof": "lib/deferrable.js",
    "static": true,
    "longname": "lib/deferrable.js~INITIALLY_IMMEDIATE",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/deferrable.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "interface": false,
    "extends": [
      "ABSTRACT"
    ],
    "ignore": true
  },
  {
    "__docId__": 459,
    "kind": "method",
    "name": "toSql",
    "memberof": "lib/deferrable.js~INITIALLY_IMMEDIATE",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/deferrable.js~INITIALLY_IMMEDIATE#toSql",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 460,
    "kind": "class",
    "name": "NOT",
    "memberof": "lib/deferrable.js",
    "static": true,
    "longname": "lib/deferrable.js~NOT",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/deferrable.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "interface": false,
    "extends": [
      "ABSTRACT"
    ],
    "ignore": true
  },
  {
    "__docId__": 461,
    "kind": "method",
    "name": "toSql",
    "memberof": "lib/deferrable.js~NOT",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/deferrable.js~NOT#toSql",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 462,
    "kind": "class",
    "name": "SET_DEFERRED",
    "memberof": "lib/deferrable.js",
    "static": true,
    "longname": "lib/deferrable.js~SET_DEFERRED",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/deferrable.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "interface": false,
    "extends": [
      "ABSTRACT"
    ],
    "ignore": true
  },
  {
    "__docId__": 463,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/deferrable.js~SET_DEFERRED",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/deferrable.js~SET_DEFERRED#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 464,
    "kind": "member",
    "name": "constraints",
    "memberof": "lib/deferrable.js~SET_DEFERRED",
    "static": false,
    "longname": "lib/deferrable.js~SET_DEFERRED#constraints",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 465,
    "kind": "method",
    "name": "toSql",
    "memberof": "lib/deferrable.js~SET_DEFERRED",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/deferrable.js~SET_DEFERRED#toSql",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [
      {
        "name": "queryGenerator",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 466,
    "kind": "class",
    "name": "SET_IMMEDIATE",
    "memberof": "lib/deferrable.js",
    "static": true,
    "longname": "lib/deferrable.js~SET_IMMEDIATE",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/deferrable.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "interface": false,
    "extends": [
      "ABSTRACT"
    ],
    "ignore": true
  },
  {
    "__docId__": 467,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/deferrable.js~SET_IMMEDIATE",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/deferrable.js~SET_IMMEDIATE#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 468,
    "kind": "member",
    "name": "constraints",
    "memberof": "lib/deferrable.js~SET_IMMEDIATE",
    "static": false,
    "longname": "lib/deferrable.js~SET_IMMEDIATE#constraints",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 469,
    "kind": "method",
    "name": "toSql",
    "memberof": "lib/deferrable.js~SET_IMMEDIATE",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/deferrable.js~SET_IMMEDIATE#toSql",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [
      {
        "name": "queryGenerator",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 470,
    "kind": "variable",
    "name": "Deferrable",
    "memberof": "lib/deferrable.js",
    "static": true,
    "longname": "lib/deferrable.js~Deferrable",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/deferrable.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "{\"INITIALLY_DEFERRED\": *, \"INITIALLY_IMMEDIATE\": *, \"NOT\": *, \"SET_DEFERRED\": *, \"SET_IMMEDIATE\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 471,
    "kind": "file",
    "name": "lib/dialects/abstract/connection-manager.js",
    "content": "\"use strict\";\nconst { Pool, TimeoutError } = require(\"sequelize-pool\");\nconst _ = require(\"lodash\");\nconst semver = require(\"semver\");\nconst errors = require(\"../../errors\");\nconst { logger } = require(\"../../utils/logger\");\nconst deprecations = require(\"../../utils/deprecations\");\nconst debug = logger.debugContext(\"pool\");\nclass ConnectionManager {\n  constructor(dialect, sequelize) {\n    const config = _.cloneDeep(sequelize.config);\n    this.sequelize = sequelize;\n    this.config = config;\n    this.dialect = dialect;\n    this.versionPromise = null;\n    this.dialectName = this.sequelize.options.dialect;\n    if (config.pool === false) {\n      throw new Error(\"Support for pool:false was removed in v4.0\");\n    }\n    config.pool = _.defaults(config.pool || {}, {\n      max: 5,\n      min: 0,\n      idle: 1e4,\n      acquire: 6e4,\n      evict: 1e3,\n      validate: this._validate.bind(this)\n    });\n    this.initPools();\n  }\n  refreshTypeParser(dataTypes) {\n    _.each(dataTypes, (dataType) => {\n      if (Object.prototype.hasOwnProperty.call(dataType, \"parse\")) {\n        if (dataType.types[this.dialectName]) {\n          this._refreshTypeParser(dataType);\n        } else {\n          throw new Error(`Parse function not supported for type ${dataType.key} in dialect ${this.dialectName}`);\n        }\n      }\n    });\n  }\n  _loadDialectModule(moduleName) {\n    try {\n      if (this.sequelize.config.dialectModulePath) {\n        return require(this.sequelize.config.dialectModulePath);\n      }\n      if (this.sequelize.config.dialectModule) {\n        return this.sequelize.config.dialectModule;\n      }\n      return require(moduleName);\n    } catch (error) {\n      if (error.code === \"MODULE_NOT_FOUND\") {\n        if (this.sequelize.config.dialectModulePath) {\n          throw new Error(`Unable to find dialect at ${this.sequelize.config.dialectModulePath}`);\n        }\n        throw new Error(`Please install ${moduleName} package manually`);\n      }\n      throw error;\n    }\n  }\n  async _onProcessExit() {\n    if (!this.pool) {\n      return;\n    }\n    await this.pool.drain();\n    debug(\"connection drain due to process exit\");\n    return await this.pool.destroyAllNow();\n  }\n  async close() {\n    this.getConnection = async function getConnection() {\n      throw new Error(\"ConnectionManager.getConnection was called after the connection manager was closed!\");\n    };\n    return await this._onProcessExit();\n  }\n  initPools() {\n    const config = this.config;\n    if (!config.replication) {\n      this.pool = new Pool({\n        name: \"sequelize\",\n        create: () => this._connect(config),\n        destroy: async (connection) => {\n          const result = await this._disconnect(connection);\n          debug(\"connection destroy\");\n          return result;\n        },\n        validate: config.pool.validate,\n        max: config.pool.max,\n        min: config.pool.min,\n        acquireTimeoutMillis: config.pool.acquire,\n        idleTimeoutMillis: config.pool.idle,\n        reapIntervalMillis: config.pool.evict,\n        maxUses: config.pool.maxUses\n      });\n      debug(`pool created with max/min: ${config.pool.max}/${config.pool.min}, no replication`);\n      return;\n    }\n    if (!Array.isArray(config.replication.read)) {\n      config.replication.read = [config.replication.read];\n    }\n    config.replication.write = _.defaults(config.replication.write, _.omit(config, \"replication\"));\n    config.replication.read = config.replication.read.map((readConfig) => _.defaults(readConfig, _.omit(this.config, \"replication\")));\n    let reads = 0;\n    this.pool = {\n      release: (client) => {\n        if (client.queryType === \"read\") {\n          this.pool.read.release(client);\n        } else {\n          this.pool.write.release(client);\n        }\n      },\n      acquire: (queryType = \"write\", useMaster = false) => {\n        if (queryType !== \"read\" && queryType !== \"write\") {\n          throw new Error(`Expected queryType to be either read or write. Received ${queryType}`);\n        }\n        if (queryType === \"read\" && !useMaster) {\n          return this.pool.read.acquire();\n        }\n        return this.pool.write.acquire();\n      },\n      destroy: (connection) => {\n        this.pool[connection.queryType].destroy(connection);\n        debug(\"connection destroy\");\n      },\n      destroyAllNow: async () => {\n        await Promise.all([\n          this.pool.read.destroyAllNow(),\n          this.pool.write.destroyAllNow()\n        ]);\n        debug(\"all connections destroyed\");\n      },\n      drain: async () => Promise.all([\n        this.pool.write.drain(),\n        this.pool.read.drain()\n      ]),\n      read: new Pool({\n        name: \"sequelize:read\",\n        create: async () => {\n          const nextRead = reads++ % config.replication.read.length;\n          const connection = await this._connect(config.replication.read[nextRead]);\n          connection.queryType = \"read\";\n          return connection;\n        },\n        destroy: (connection) => this._disconnect(connection),\n        validate: config.pool.validate,\n        max: config.pool.max,\n        min: config.pool.min,\n        acquireTimeoutMillis: config.pool.acquire,\n        idleTimeoutMillis: config.pool.idle,\n        reapIntervalMillis: config.pool.evict,\n        maxUses: config.pool.maxUses\n      }),\n      write: new Pool({\n        name: \"sequelize:write\",\n        create: async () => {\n          const connection = await this._connect(config.replication.write);\n          connection.queryType = \"write\";\n          return connection;\n        },\n        destroy: (connection) => this._disconnect(connection),\n        validate: config.pool.validate,\n        max: config.pool.max,\n        min: config.pool.min,\n        acquireTimeoutMillis: config.pool.acquire,\n        idleTimeoutMillis: config.pool.idle,\n        reapIntervalMillis: config.pool.evict,\n        maxUses: config.pool.maxUses\n      })\n    };\n    debug(`pool created with max/min: ${config.pool.max}/${config.pool.min}, with replication`);\n  }\n  async getConnection(options) {\n    options = options || {};\n    if (this.sequelize.options.databaseVersion === 0) {\n      if (!this.versionPromise) {\n        this.versionPromise = (async () => {\n          try {\n            const connection = await this._connect(this.config.replication.write || this.config);\n            const _options = {};\n            _options.transaction = { connection };\n            _options.logging = () => {\n            };\n            _options.logging.__testLoggingFn = true;\n            if (this.sequelize.options.databaseVersion === 0) {\n              const version = await this.sequelize.databaseVersion(_options);\n              const parsedVersion = _.get(semver.coerce(version), \"version\") || version;\n              this.sequelize.options.databaseVersion = semver.valid(parsedVersion) ? parsedVersion : this.dialect.defaultVersion;\n            }\n            if (semver.lt(this.sequelize.options.databaseVersion, this.dialect.defaultVersion)) {\n              deprecations.unsupportedEngine();\n              debug(`Unsupported database engine version ${this.sequelize.options.databaseVersion}`);\n            }\n            this.versionPromise = null;\n            return await this._disconnect(connection);\n          } catch (error) {\n            this.versionPromise = null;\n            throw error;\n          }\n        })();\n      }\n      await this.versionPromise;\n    }\n    let result;\n    try {\n      result = await this.pool.acquire(options.type, options.useMaster);\n    } catch (error) {\n      if (error instanceof TimeoutError) {\n        throw new errors.ConnectionAcquireTimeoutError(error);\n      }\n      throw error;\n    }\n    debug(\"connection acquired\");\n    return result;\n  }\n  async releaseConnection(connection) {\n    this.pool.release(connection);\n    debug(\"connection released\");\n  }\n  async _connect(config) {\n    await this.sequelize.runHooks(\"beforeConnect\", config);\n    const connection = await this.dialect.connectionManager.connect(config);\n    await this.sequelize.runHooks(\"afterConnect\", connection, config);\n    return connection;\n  }\n  async _disconnect(connection) {\n    await this.sequelize.runHooks(\"beforeDisconnect\", connection);\n    await this.dialect.connectionManager.disconnect(connection);\n    return this.sequelize.runHooks(\"afterDisconnect\", connection);\n  }\n  _validate(connection) {\n    if (!this.dialect.connectionManager.validate) {\n      return true;\n    }\n    return this.dialect.connectionManager.validate(connection);\n  }\n}\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n//# sourceMappingURL=connection-manager.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/dialects/abstract/connection-manager.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 472,
    "kind": "variable",
    "name": "Pool",
    "memberof": "lib/dialects/abstract/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/abstract/connection-manager.js~Pool",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 473,
    "kind": "variable",
    "name": "_",
    "memberof": "lib/dialects/abstract/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/abstract/connection-manager.js~_",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 474,
    "kind": "variable",
    "name": "semver",
    "memberof": "lib/dialects/abstract/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/abstract/connection-manager.js~semver",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 475,
    "kind": "variable",
    "name": "errors",
    "memberof": "lib/dialects/abstract/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/abstract/connection-manager.js~errors",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 476,
    "kind": "variable",
    "name": "logger",
    "memberof": "lib/dialects/abstract/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/abstract/connection-manager.js~logger",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 477,
    "kind": "variable",
    "name": "deprecations",
    "memberof": "lib/dialects/abstract/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/abstract/connection-manager.js~deprecations",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 478,
    "kind": "variable",
    "name": "debug",
    "memberof": "lib/dialects/abstract/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/abstract/connection-manager.js~debug",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 479,
    "kind": "class",
    "name": "ConnectionManager",
    "memberof": "lib/dialects/abstract/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/abstract/connection-manager.js~ConnectionManager",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 480,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/dialects/abstract/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/abstract/connection-manager.js~ConnectionManager#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 481,
    "kind": "member",
    "name": "sequelize",
    "memberof": "lib/dialects/abstract/connection-manager.js~ConnectionManager",
    "static": false,
    "longname": "lib/dialects/abstract/connection-manager.js~ConnectionManager#sequelize",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 482,
    "kind": "member",
    "name": "config",
    "memberof": "lib/dialects/abstract/connection-manager.js~ConnectionManager",
    "static": false,
    "longname": "lib/dialects/abstract/connection-manager.js~ConnectionManager#config",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 483,
    "kind": "member",
    "name": "dialect",
    "memberof": "lib/dialects/abstract/connection-manager.js~ConnectionManager",
    "static": false,
    "longname": "lib/dialects/abstract/connection-manager.js~ConnectionManager#dialect",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 484,
    "kind": "member",
    "name": "versionPromise",
    "memberof": "lib/dialects/abstract/connection-manager.js~ConnectionManager",
    "static": false,
    "longname": "lib/dialects/abstract/connection-manager.js~ConnectionManager#versionPromise",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 485,
    "kind": "member",
    "name": "dialectName",
    "memberof": "lib/dialects/abstract/connection-manager.js~ConnectionManager",
    "static": false,
    "longname": "lib/dialects/abstract/connection-manager.js~ConnectionManager#dialectName",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 486,
    "kind": "method",
    "name": "refreshTypeParser",
    "memberof": "lib/dialects/abstract/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/abstract/connection-manager.js~ConnectionManager#refreshTypeParser",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [
      {
        "name": "dataTypes",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 487,
    "kind": "method",
    "name": "_loadDialectModule",
    "memberof": "lib/dialects/abstract/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/abstract/connection-manager.js~ConnectionManager#_loadDialectModule",
    "access": "private",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "moduleName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 488,
    "kind": "method",
    "name": "_onProcessExit",
    "memberof": "lib/dialects/abstract/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/connection-manager.js~ConnectionManager#_onProcessExit",
    "access": "private",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 489,
    "kind": "method",
    "name": "close",
    "memberof": "lib/dialects/abstract/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/connection-manager.js~ConnectionManager#close",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 490,
    "kind": "method",
    "name": "initPools",
    "memberof": "lib/dialects/abstract/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/abstract/connection-manager.js~ConnectionManager#initPools",
    "access": "public",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 491,
    "kind": "member",
    "name": "pool",
    "memberof": "lib/dialects/abstract/connection-manager.js~ConnectionManager",
    "static": false,
    "longname": "lib/dialects/abstract/connection-manager.js~ConnectionManager#pool",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 493,
    "kind": "method",
    "name": "getConnection",
    "memberof": "lib/dialects/abstract/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/connection-manager.js~ConnectionManager#getConnection",
    "access": "public",
    "description": null,
    "lineNumber": 170,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 497,
    "kind": "method",
    "name": "releaseConnection",
    "memberof": "lib/dialects/abstract/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/connection-manager.js~ConnectionManager#releaseConnection",
    "access": "public",
    "description": null,
    "lineNumber": 213,
    "undocument": true,
    "params": [
      {
        "name": "connection",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 498,
    "kind": "method",
    "name": "_connect",
    "memberof": "lib/dialects/abstract/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/connection-manager.js~ConnectionManager#_connect",
    "access": "private",
    "description": null,
    "lineNumber": 217,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 499,
    "kind": "method",
    "name": "_disconnect",
    "memberof": "lib/dialects/abstract/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/connection-manager.js~ConnectionManager#_disconnect",
    "access": "private",
    "description": null,
    "lineNumber": 223,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "connection",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 500,
    "kind": "method",
    "name": "_validate",
    "memberof": "lib/dialects/abstract/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/abstract/connection-manager.js~ConnectionManager#_validate",
    "access": "private",
    "description": null,
    "lineNumber": 228,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "connection",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 501,
    "kind": "file",
    "name": "lib/dialects/abstract/index.js",
    "content": "var __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __markAsModule = (target) => __defProp(target, \"__esModule\", { value: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __reExport = (target, module2, copyDefault, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2))\n      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== \"default\"))\n        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });\n  }\n  return target;\n};\nvar __toCommonJS = /* @__PURE__ */ ((cache) => {\n  return (module2, temp) => {\n    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);\n  };\n})(typeof WeakMap !== \"undefined\" ? /* @__PURE__ */ new WeakMap() : 0);\nvar abstract_exports = {};\n__export(abstract_exports, {\n  AbstractDialect: () => AbstractDialect\n});\nclass AbstractDialect {\n  static supports = {\n    DEFAULT: true,\n    \"DEFAULT VALUES\": false,\n    \"VALUES ()\": false,\n    \"LIMIT ON UPDATE\": false,\n    \"ON DUPLICATE KEY\": true,\n    \"ORDER NULLS\": false,\n    UNION: true,\n    \"UNION ALL\": true,\n    \"RIGHT JOIN\": true,\n    EXCEPTION: false,\n    lock: false,\n    lockOf: false,\n    lockKey: false,\n    lockOuterJoinFailure: false,\n    skipLocked: false,\n    finalTable: false,\n    returnValues: false,\n    autoIncrement: {\n      identityInsert: false,\n      defaultValue: true,\n      update: true\n    },\n    bulkDefault: false,\n    schemas: false,\n    transactions: true,\n    settingIsolationLevelDuringTransaction: true,\n    transactionOptions: {\n      type: false\n    },\n    migrations: true,\n    upserts: true,\n    inserts: {\n      ignoreDuplicates: \"\",\n      updateOnDuplicate: false,\n      onConflictDoNothing: \"\",\n      conflictFields: false\n    },\n    constraints: {\n      restrict: true,\n      addConstraint: true,\n      dropConstraint: true,\n      unique: true,\n      default: false,\n      check: true,\n      foreignKey: true,\n      primaryKey: true\n    },\n    index: {\n      collate: true,\n      length: false,\n      parser: false,\n      concurrently: false,\n      type: false,\n      using: true,\n      functionBased: false,\n      operator: false,\n      where: false\n    },\n    groupedLimit: true,\n    indexViaAlter: false,\n    JSON: false,\n    JSONB: false,\n    NUMERIC: false,\n    ARRAY: false,\n    RANGE: false,\n    GEOMETRY: false,\n    REGEXP: false,\n    GEOGRAPHY: false,\n    HSTORE: false,\n    TSVECTOR: false,\n    deferrableConstraints: false,\n    tmpTableTrigger: false,\n    indexHints: false,\n    searchPath: false\n  };\n  get supports() {\n    const Dialect = this.constructor;\n    return Dialect.supports;\n  }\n}\nmodule.exports = __toCommonJS(abstract_exports);\n//# sourceMappingURL=index.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/dialects/abstract/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 502,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/dialects/abstract/index.js",
    "static": true,
    "longname": "lib/dialects/abstract/index.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 503,
    "kind": "variable",
    "name": "__getOwnPropDesc",
    "memberof": "lib/dialects/abstract/index.js",
    "static": true,
    "longname": "lib/dialects/abstract/index.js~__getOwnPropDesc",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 504,
    "kind": "variable",
    "name": "__getOwnPropNames",
    "memberof": "lib/dialects/abstract/index.js",
    "static": true,
    "longname": "lib/dialects/abstract/index.js~__getOwnPropNames",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 505,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/dialects/abstract/index.js",
    "static": true,
    "longname": "lib/dialects/abstract/index.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 506,
    "kind": "function",
    "name": "__markAsModule",
    "memberof": "lib/dialects/abstract/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/abstract/index.js~__markAsModule",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 507,
    "kind": "function",
    "name": "__export",
    "memberof": "lib/dialects/abstract/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/abstract/index.js~__export",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "all",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 508,
    "kind": "function",
    "name": "__reExport",
    "memberof": "lib/dialects/abstract/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/abstract/index.js~__reExport",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "copyDefault",
        "types": [
          "*"
        ]
      },
      {
        "name": "desc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 509,
    "kind": "variable",
    "name": "__toCommonJS",
    "memberof": "lib/dialects/abstract/index.js",
    "static": true,
    "longname": "lib/dialects/abstract/index.js~__toCommonJS",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 510,
    "kind": "variable",
    "name": "abstract_exports",
    "memberof": "lib/dialects/abstract/index.js",
    "static": true,
    "longname": "lib/dialects/abstract/index.js~abstract_exports",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 511,
    "kind": "class",
    "name": "AbstractDialect",
    "memberof": "lib/dialects/abstract/index.js",
    "static": true,
    "longname": "lib/dialects/abstract/index.js~AbstractDialect",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 512,
    "kind": "member",
    "name": "supports",
    "memberof": "lib/dialects/abstract/index.js~AbstractDialect",
    "static": true,
    "longname": "lib/dialects/abstract/index.js~AbstractDialect.supports",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 513,
    "kind": "get",
    "name": "supports",
    "memberof": "lib/dialects/abstract/index.js~AbstractDialect",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/abstract/index.js~AbstractDialect#supports",
    "access": "public",
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 514,
    "kind": "file",
    "name": "lib/dialects/abstract/query-generator/operators.js",
    "content": "\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nconst _ = require(\"lodash\");\nconst { Op } = require(\"../../../operators\");\nconst Utils = require(\"../../../utils\");\nconst OperatorHelpers = {\n  OperatorMap: {\n    [Op.eq]: \"=\",\n    [Op.ne]: \"!=\",\n    [Op.gte]: \">=\",\n    [Op.gt]: \">\",\n    [Op.lte]: \"<=\",\n    [Op.lt]: \"<\",\n    [Op.not]: \"IS NOT\",\n    [Op.is]: \"IS\",\n    [Op.in]: \"IN\",\n    [Op.notIn]: \"NOT IN\",\n    [Op.like]: \"LIKE\",\n    [Op.notLike]: \"NOT LIKE\",\n    [Op.iLike]: \"ILIKE\",\n    [Op.notILike]: \"NOT ILIKE\",\n    [Op.startsWith]: \"LIKE\",\n    [Op.endsWith]: \"LIKE\",\n    [Op.substring]: \"LIKE\",\n    [Op.regexp]: \"~\",\n    [Op.notRegexp]: \"!~\",\n    [Op.iRegexp]: \"~*\",\n    [Op.notIRegexp]: \"!~*\",\n    [Op.between]: \"BETWEEN\",\n    [Op.notBetween]: \"NOT BETWEEN\",\n    [Op.overlap]: \"&&\",\n    [Op.contains]: \"@>\",\n    [Op.contained]: \"<@\",\n    [Op.adjacent]: \"-|-\",\n    [Op.strictLeft]: \"<<\",\n    [Op.strictRight]: \">>\",\n    [Op.noExtendRight]: \"&<\",\n    [Op.noExtendLeft]: \"&>\",\n    [Op.any]: \"ANY\",\n    [Op.all]: \"ALL\",\n    [Op.and]: \" AND \",\n    [Op.or]: \" OR \",\n    [Op.col]: \"COL\",\n    [Op.placeholder]: \"$$PLACEHOLDER$$\",\n    [Op.match]: \"@@\"\n  },\n  OperatorsAliasMap: {},\n  setOperatorsAliases(aliases) {\n    if (!aliases || _.isEmpty(aliases)) {\n      this.OperatorsAliasMap = false;\n    } else {\n      this.OperatorsAliasMap = __spreadValues({}, aliases);\n    }\n  },\n  _replaceAliases(orig) {\n    const obj = {};\n    if (!this.OperatorsAliasMap) {\n      return orig;\n    }\n    for (const op of Utils.getOperators(orig)) {\n      const item = orig[op];\n      if (_.isPlainObject(item)) {\n        obj[op] = this._replaceAliases(item);\n      } else {\n        obj[op] = item;\n      }\n    }\n    _.forOwn(orig, (item, prop) => {\n      prop = this.OperatorsAliasMap[prop] || prop;\n      if (_.isPlainObject(item)) {\n        item = this._replaceAliases(item);\n      }\n      obj[prop] = item;\n    });\n    return obj;\n  }\n};\nmodule.exports = OperatorHelpers;\n//# sourceMappingURL=operators.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/dialects/abstract/query-generator/operators.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 515,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/dialects/abstract/query-generator/operators.js",
    "static": true,
    "longname": "lib/dialects/abstract/query-generator/operators.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/query-generator/operators.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 516,
    "kind": "variable",
    "name": "__getOwnPropSymbols",
    "memberof": "lib/dialects/abstract/query-generator/operators.js",
    "static": true,
    "longname": "lib/dialects/abstract/query-generator/operators.js~__getOwnPropSymbols",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/query-generator/operators.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 517,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/dialects/abstract/query-generator/operators.js",
    "static": true,
    "longname": "lib/dialects/abstract/query-generator/operators.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/query-generator/operators.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 518,
    "kind": "variable",
    "name": "__propIsEnum",
    "memberof": "lib/dialects/abstract/query-generator/operators.js",
    "static": true,
    "longname": "lib/dialects/abstract/query-generator/operators.js~__propIsEnum",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/query-generator/operators.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 519,
    "kind": "function",
    "name": "__defNormalProp",
    "memberof": "lib/dialects/abstract/query-generator/operators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/abstract/query-generator/operators.js~__defNormalProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/query-generator/operators.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 520,
    "kind": "function",
    "name": "__spreadValues",
    "memberof": "lib/dialects/abstract/query-generator/operators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/abstract/query-generator/operators.js~__spreadValues",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/query-generator/operators.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 521,
    "kind": "variable",
    "name": "_",
    "memberof": "lib/dialects/abstract/query-generator/operators.js",
    "static": true,
    "longname": "lib/dialects/abstract/query-generator/operators.js~_",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/query-generator/operators.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 522,
    "kind": "variable",
    "name": "Op",
    "memberof": "lib/dialects/abstract/query-generator/operators.js",
    "static": true,
    "longname": "lib/dialects/abstract/query-generator/operators.js~Op",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/query-generator/operators.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 523,
    "kind": "variable",
    "name": "Utils",
    "memberof": "lib/dialects/abstract/query-generator/operators.js",
    "static": true,
    "longname": "lib/dialects/abstract/query-generator/operators.js~Utils",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/query-generator/operators.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 524,
    "kind": "variable",
    "name": "OperatorHelpers",
    "memberof": "lib/dialects/abstract/query-generator/operators.js",
    "static": true,
    "longname": "lib/dialects/abstract/query-generator/operators.js~OperatorHelpers",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/query-generator/operators.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "{\"OperatorMap\": *, \"OperatorsAliasMap\": *, \"setOperatorsAliases\": function, \"_replaceAliases\": function}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 525,
    "kind": "file",
    "name": "lib/dialects/abstract/query-generator/transaction.js",
    "content": "\"use strict\";\nconst uuidv4 = require(\"uuid\").v4;\nconst TransactionQueries = {\n  setIsolationLevelQuery(value, options) {\n    if (options.parent) {\n      return;\n    }\n    return `SET TRANSACTION ISOLATION LEVEL ${value};`;\n  },\n  generateTransactionId() {\n    return uuidv4();\n  },\n  startTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return `SAVEPOINT ${this.quoteIdentifier(transaction.name, true)};`;\n    }\n    return \"START TRANSACTION;\";\n  },\n  deferConstraintsQuery() {\n  },\n  setConstraintQuery() {\n  },\n  setDeferredQuery() {\n  },\n  setImmediateQuery() {\n  },\n  commitTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return;\n    }\n    return \"COMMIT;\";\n  },\n  rollbackTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return `ROLLBACK TO SAVEPOINT ${this.quoteIdentifier(transaction.name, true)};`;\n    }\n    return \"ROLLBACK;\";\n  }\n};\nmodule.exports = TransactionQueries;\n//# sourceMappingURL=transaction.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/dialects/abstract/query-generator/transaction.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 526,
    "kind": "variable",
    "name": "uuidv4",
    "memberof": "lib/dialects/abstract/query-generator/transaction.js",
    "static": true,
    "longname": "lib/dialects/abstract/query-generator/transaction.js~uuidv4",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/query-generator/transaction.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 527,
    "kind": "variable",
    "name": "TransactionQueries",
    "memberof": "lib/dialects/abstract/query-generator/transaction.js",
    "static": true,
    "longname": "lib/dialects/abstract/query-generator/transaction.js~TransactionQueries",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/query-generator/transaction.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "{\"setIsolationLevelQuery\": function, \"generateTransactionId\": function, \"startTransactionQuery\": function, \"deferConstraintsQuery\": function, \"setConstraintQuery\": function, \"setDeferredQuery\": function, \"setImmediateQuery\": function, \"commitTransactionQuery\": function, \"rollbackTransactionQuery\": function}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 528,
    "kind": "file",
    "name": "lib/dialects/abstract/query-interface.js",
    "content": "\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nconst _ = require(\"lodash\");\nconst Utils = require(\"../../utils\");\nconst DataTypes = require(\"../../data-types\");\nconst { Transaction } = require(\"../../transaction\");\nconst { QueryTypes } = require(\"../../query-types\");\nclass QueryInterface {\n  constructor(sequelize, queryGenerator) {\n    this.sequelize = sequelize;\n    this.queryGenerator = queryGenerator;\n  }\n  async createDatabase(database, options) {\n    options = options || {};\n    const sql = this.queryGenerator.createDatabaseQuery(database, options);\n    return await this.sequelize.query(sql, options);\n  }\n  async dropDatabase(database, options) {\n    options = options || {};\n    const sql = this.queryGenerator.dropDatabaseQuery(database);\n    return await this.sequelize.query(sql, options);\n  }\n  async createSchema(schema, options) {\n    options = options || {};\n    const sql = this.queryGenerator.createSchema(schema);\n    return await this.sequelize.query(sql, options);\n  }\n  async dropSchema(schema, options) {\n    options = options || {};\n    const sql = this.queryGenerator.dropSchema(schema);\n    return await this.sequelize.query(sql, options);\n  }\n  async dropAllSchemas(options) {\n    options = options || {};\n    if (!this.queryGenerator._dialect.supports.schemas) {\n      return this.sequelize.drop(options);\n    }\n    const schemas = await this.showAllSchemas(options);\n    return Promise.all(schemas.map((schemaName) => this.dropSchema(schemaName, options)));\n  }\n  async showAllSchemas(options) {\n    options = __spreadProps(__spreadValues({}, options), {\n      raw: true,\n      type: this.sequelize.QueryTypes.SELECT\n    });\n    const showSchemasSql = this.queryGenerator.showSchemasQuery(options);\n    const schemaNames = await this.sequelize.query(showSchemasSql, options);\n    return schemaNames.flatMap((value) => value.schema_name ? value.schema_name : value);\n  }\n  async databaseVersion(options) {\n    return await this.sequelize.query(this.queryGenerator.versionQuery(), __spreadProps(__spreadValues({}, options), { type: QueryTypes.VERSION }));\n  }\n  async createTable(tableName, attributes, options, model) {\n    let sql = \"\";\n    options = __spreadValues({}, options);\n    if (options && options.uniqueKeys) {\n      _.forOwn(options.uniqueKeys, (uniqueKey) => {\n        if (uniqueKey.customIndex === void 0) {\n          uniqueKey.customIndex = true;\n        }\n      });\n    }\n    if (model) {\n      options.uniqueKeys = options.uniqueKeys || model.uniqueKeys;\n    }\n    attributes = _.mapValues(attributes, (attribute) => this.sequelize.normalizeAttribute(attribute));\n    await this.ensureEnums(tableName, attributes, options, model);\n    if (!tableName.schema && (options.schema || Boolean(model) && model._schema)) {\n      tableName = this.queryGenerator.addSchema({\n        tableName,\n        _schema: Boolean(model) && model._schema || options.schema\n      });\n    }\n    attributes = this.queryGenerator.attributesToSQL(attributes, { table: tableName, context: \"createTable\" });\n    sql = this.queryGenerator.createTableQuery(tableName, attributes, options);\n    return await this.sequelize.query(sql, options);\n  }\n  async dropTable(tableName, options) {\n    options = __spreadValues({}, options);\n    options.cascade = options.cascade || options.force || false;\n    const sql = this.queryGenerator.dropTableQuery(tableName, options);\n    await this.sequelize.query(sql, options);\n  }\n  async _dropAllTables(tableNames, skip, options) {\n    for (const tableName of tableNames) {\n      if (!skip.includes(tableName.tableName || tableName)) {\n        await this.dropTable(tableName, __spreadProps(__spreadValues({}, options), { cascade: true }));\n      }\n    }\n  }\n  async dropAllTables(options) {\n    options = options || {};\n    const skip = options.skip || [];\n    const tableNames = await this.showAllTables(options);\n    const foreignKeys = await this.getForeignKeysForTables(tableNames, options);\n    for (const tableName of tableNames) {\n      let normalizedTableName = tableName;\n      if (_.isObject(tableName)) {\n        normalizedTableName = `${tableName.schema}.${tableName.tableName}`;\n      }\n      for (const foreignKey of foreignKeys[normalizedTableName]) {\n        await this.sequelize.query(this.queryGenerator.dropForeignKeyQuery(tableName, foreignKey));\n      }\n    }\n    await this._dropAllTables(tableNames, skip, options);\n  }\n  async renameTable(before, after, options) {\n    options = options || {};\n    const sql = this.queryGenerator.renameTableQuery(before, after);\n    return await this.sequelize.query(sql, options);\n  }\n  async showAllTables(options) {\n    options = __spreadProps(__spreadValues({}, options), {\n      raw: true,\n      type: QueryTypes.SHOWTABLES\n    });\n    const showTablesSql = this.queryGenerator.showTablesQuery(this.sequelize.config.database);\n    const tableNames = await this.sequelize.query(showTablesSql, options);\n    return tableNames.flat();\n  }\n  async describeTable(tableName, options) {\n    let schema = null;\n    let schemaDelimiter = null;\n    if (typeof options === \"string\") {\n      schema = options;\n    } else if (typeof options === \"object\" && options !== null) {\n      schema = options.schema || null;\n      schemaDelimiter = options.schemaDelimiter || null;\n    }\n    if (typeof tableName === \"object\" && tableName !== null) {\n      schema = tableName.schema;\n      tableName = tableName.tableName;\n    }\n    const sql = this.queryGenerator.describeTableQuery(tableName, schema, schemaDelimiter);\n    options = __spreadProps(__spreadValues({}, options), { type: QueryTypes.DESCRIBE });\n    try {\n      const data = await this.sequelize.query(sql, options);\n      if (_.isEmpty(data)) {\n        throw new Error(`No description found for \"${tableName}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n      return data;\n    } catch (error) {\n      if (error.original && error.original.code === \"ER_NO_SUCH_TABLE\") {\n        throw new Error(`No description found for \"${tableName}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n      throw error;\n    }\n  }\n  async addColumn(table, key, attribute, options) {\n    if (!table || !key || !attribute) {\n      throw new Error(\"addColumn takes at least 3 arguments (table, attribute name, attribute definition)\");\n    }\n    options = options || {};\n    attribute = this.sequelize.normalizeAttribute(attribute);\n    return await this.sequelize.query(this.queryGenerator.addColumnQuery(table, key, attribute), options);\n  }\n  async removeColumn(tableName, attributeName, options) {\n    return this.sequelize.query(this.queryGenerator.removeColumnQuery(tableName, attributeName), options);\n  }\n  normalizeAttribute(dataTypeOrOptions) {\n    let attribute;\n    if (Object.values(DataTypes).includes(dataTypeOrOptions)) {\n      attribute = { type: dataTypeOrOptions, allowNull: true };\n    } else {\n      attribute = dataTypeOrOptions;\n    }\n    return this.sequelize.normalizeAttribute(attribute);\n  }\n  quoteIdentifier(identifier2, force) {\n    return this.queryGenerator.quoteIdentifier(identifier2, force);\n  }\n  quoteIdentifiers(identifiers) {\n    return this.queryGenerator.quoteIdentifiers(identifiers);\n  }\n  async changeColumn(tableName, attributeName, dataTypeOrOptions, options) {\n    options = options || {};\n    const query = this.queryGenerator.attributesToSQL({\n      [attributeName]: this.normalizeAttribute(dataTypeOrOptions)\n    }, {\n      context: \"changeColumn\",\n      table: tableName\n    });\n    const sql = this.queryGenerator.changeColumnQuery(tableName, query);\n    return this.sequelize.query(sql, options);\n  }\n  async assertTableHasColumn(tableName, columnName, options) {\n    const description = await this.describeTable(tableName, options);\n    if (description[columnName]) {\n      return description;\n    }\n    throw new Error(`Table ${tableName} doesn't have the column ${columnName}`);\n  }\n  async renameColumn(tableName, attrNameBefore, attrNameAfter, options) {\n    options = options || {};\n    const data = (await this.assertTableHasColumn(tableName, attrNameBefore, options))[attrNameBefore];\n    const _options = {};\n    _options[attrNameAfter] = {\n      attribute: attrNameAfter,\n      type: data.type,\n      allowNull: data.allowNull,\n      defaultValue: data.defaultValue\n    };\n    if (data.defaultValue === null && !data.allowNull) {\n      delete _options[attrNameAfter].defaultValue;\n    }\n    const sql = this.queryGenerator.renameColumnQuery(tableName, attrNameBefore, this.queryGenerator.attributesToSQL(_options));\n    return await this.sequelize.query(sql, options);\n  }\n  async addIndex(tableName, attributes, options, rawTablename) {\n    if (!Array.isArray(attributes)) {\n      rawTablename = options;\n      options = attributes;\n      attributes = options.fields;\n    }\n    if (!rawTablename) {\n      rawTablename = tableName;\n    }\n    options = Utils.cloneDeep(options);\n    options.fields = attributes;\n    const sql = this.queryGenerator.addIndexQuery(tableName, options, rawTablename);\n    return await this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), { supportsSearchPath: false }));\n  }\n  async showIndex(tableName, options) {\n    const sql = this.queryGenerator.showIndexesQuery(tableName, options);\n    return await this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), { type: QueryTypes.SHOWINDEXES }));\n  }\n  async getForeignKeysForTables(tableNames, options) {\n    if (tableNames.length === 0) {\n      return {};\n    }\n    options = __spreadProps(__spreadValues({}, options), { type: QueryTypes.FOREIGNKEYS });\n    const results = await Promise.all(tableNames.map((tableName) => this.sequelize.query(this.queryGenerator.getForeignKeysQuery(tableName, this.sequelize.config.database), options)));\n    const result = {};\n    for (let [i, tableName] of tableNames.entries()) {\n      if (_.isObject(tableName)) {\n        tableName = `${tableName.schema}.${tableName.tableName}`;\n      }\n      result[tableName] = Array.isArray(results[i]) ? results[i].map((r) => r.constraint_name) : [results[i] && results[i].constraint_name];\n      result[tableName] = result[tableName].filter(_.identity);\n    }\n    return result;\n  }\n  async getForeignKeyReferencesForTable(tableName, options) {\n    const queryOptions = __spreadProps(__spreadValues({}, options), {\n      type: QueryTypes.FOREIGNKEYS\n    });\n    const query = this.queryGenerator.getForeignKeysQuery(tableName, this.sequelize.config.database);\n    return this.sequelize.query(query, queryOptions);\n  }\n  async removeIndex(tableName, indexNameOrAttributes, options) {\n    options = options || {};\n    const sql = this.queryGenerator.removeIndexQuery(tableName, indexNameOrAttributes, options);\n    return await this.sequelize.query(sql, options);\n  }\n  async addConstraint(tableName, options) {\n    if (!options.fields) {\n      throw new Error(\"Fields must be specified through options.fields\");\n    }\n    if (!options.type) {\n      throw new Error(\"Constraint type must be specified through options.type\");\n    }\n    options = Utils.cloneDeep(options);\n    const sql = this.queryGenerator.addConstraintQuery(tableName, options);\n    return await this.sequelize.query(sql, options);\n  }\n  async showConstraint(tableName, constraintName, options) {\n    const sql = this.queryGenerator.showConstraintsQuery(tableName, constraintName);\n    return await this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), { type: QueryTypes.SHOWCONSTRAINTS }));\n  }\n  async removeConstraint(tableName, constraintName, options) {\n    return this.sequelize.query(this.queryGenerator.removeConstraintQuery(tableName, constraintName), options);\n  }\n  async insert(instance, tableName, values, options) {\n    options = Utils.cloneDeep(options);\n    options.hasTrigger = instance && instance.constructor.options.hasTrigger;\n    const sql = this.queryGenerator.insertQuery(tableName, values, instance && instance.constructor.rawAttributes, options);\n    options.type = QueryTypes.INSERT;\n    options.instance = instance;\n    const results = await this.sequelize.query(sql, options);\n    if (instance) {\n      results[0].isNewRecord = false;\n    }\n    return results;\n  }\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    options = __spreadValues({}, options);\n    const model = options.model;\n    options.type = QueryTypes.UPSERT;\n    options.updateOnDuplicate = Object.keys(updateValues);\n    options.upsertKeys = options.conflictFields || [];\n    if (options.upsertKeys.length === 0) {\n      const primaryKeys = Object.values(model.primaryKeys).map((item) => item.field);\n      const uniqueKeys = Object.values(model.uniqueKeys).filter((c) => c.fields.length > 0).map((c) => c.fields);\n      const indexKeys = Object.values(model._indexes).filter((c) => c.unique && c.fields.length > 0).map((c) => c.fields);\n      for (const field of options.updateOnDuplicate) {\n        const uniqueKey = uniqueKeys.find((fields) => fields.includes(field));\n        if (uniqueKey) {\n          options.upsertKeys = uniqueKey;\n          break;\n        }\n        const indexKey = indexKeys.find((fields) => fields.includes(field));\n        if (indexKey) {\n          options.upsertKeys = indexKey;\n          break;\n        }\n      }\n      if (options.upsertKeys.length === 0 || _.intersection(options.updateOnDuplicate, primaryKeys).length > 0) {\n        options.upsertKeys = primaryKeys;\n      }\n      options.upsertKeys = _.uniq(options.upsertKeys);\n    }\n    const sql = this.queryGenerator.insertQuery(tableName, insertValues, model.rawAttributes, options);\n    return await this.sequelize.query(sql, options);\n  }\n  async bulkInsert(tableName, records, options, attributes) {\n    options = __spreadValues({}, options);\n    options.type = QueryTypes.INSERT;\n    const results = await this.sequelize.query(this.queryGenerator.bulkInsertQuery(tableName, records, options, attributes), options);\n    return results[0];\n  }\n  async update(instance, tableName, values, identifier2, options) {\n    options = __spreadValues({}, options);\n    options.hasTrigger = instance && instance.constructor.options.hasTrigger;\n    const sql = this.queryGenerator.updateQuery(tableName, values, identifier2, options, instance.constructor.rawAttributes);\n    options.type = QueryTypes.UPDATE;\n    options.instance = instance;\n    return await this.sequelize.query(sql, options);\n  }\n  async bulkUpdate(tableName, values, identifier2, options, attributes) {\n    options = Utils.cloneDeep(options);\n    if (typeof identifier2 === \"object\") {\n      identifier2 = Utils.cloneDeep(identifier2);\n    }\n    const sql = this.queryGenerator.updateQuery(tableName, values, identifier2, options, attributes);\n    const table = _.isObject(tableName) ? tableName : { tableName };\n    const model = _.find(this.sequelize.modelManager.models, { tableName: table.tableName });\n    options.type = QueryTypes.BULKUPDATE;\n    options.model = model;\n    return await this.sequelize.query(sql, options);\n  }\n  async delete(instance, tableName, identifier2, options) {\n    const cascades = [];\n    const sql = this.queryGenerator.deleteQuery(tableName, identifier2, {}, instance.constructor);\n    options = __spreadValues({}, options);\n    if (Boolean(instance.constructor) && Boolean(instance.constructor.associations)) {\n      const keys = Object.keys(instance.constructor.associations);\n      const length = keys.length;\n      let association;\n      for (let i = 0; i < length; i++) {\n        association = instance.constructor.associations[keys[i]];\n        if (association.options && association.options.onDelete && association.options.onDelete.toLowerCase() === \"cascade\" && association.options.useHooks === true) {\n          cascades.push(association.accessors.get);\n        }\n      }\n    }\n    for (const cascade of cascades) {\n      let instances = await instance[cascade](options);\n      if (!instances) {\n        continue;\n      }\n      if (!Array.isArray(instances)) {\n        instances = [instances];\n      }\n      for (const _instance of instances) {\n        await _instance.destroy(options);\n      }\n    }\n    options.instance = instance;\n    return await this.sequelize.query(sql, options);\n  }\n  async bulkDelete(tableName, where, options, model) {\n    options = Utils.cloneDeep(options);\n    options = _.defaults(options, { limit: null });\n    if (options.truncate === true) {\n      return this.sequelize.query(this.queryGenerator.truncateTableQuery(tableName, options), options);\n    }\n    if (typeof identifier === \"object\") {\n      where = Utils.cloneDeep(where);\n    }\n    return await this.sequelize.query(this.queryGenerator.deleteQuery(tableName, where, options, model), options);\n  }\n  async select(model, tableName, optionsArg) {\n    const options = __spreadProps(__spreadValues({}, optionsArg), { type: QueryTypes.SELECT, model });\n    return await this.sequelize.query(this.queryGenerator.selectQuery(tableName, options, model), options);\n  }\n  async increment(model, tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options) {\n    options = Utils.cloneDeep(options);\n    const sql = this.queryGenerator.arithmeticQuery(\"+\", tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options);\n    options.type = QueryTypes.UPDATE;\n    options.model = model;\n    return await this.sequelize.query(sql, options);\n  }\n  async decrement(model, tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options) {\n    options = Utils.cloneDeep(options);\n    const sql = this.queryGenerator.arithmeticQuery(\"-\", tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options);\n    options.type = QueryTypes.UPDATE;\n    options.model = model;\n    return await this.sequelize.query(sql, options);\n  }\n  async rawSelect(tableName, options, attributeSelector, Model) {\n    options = Utils.cloneDeep(options);\n    options = _.defaults(options, {\n      raw: true,\n      plain: true,\n      type: QueryTypes.SELECT\n    });\n    const sql = this.queryGenerator.selectQuery(tableName, options, Model);\n    if (attributeSelector === void 0) {\n      throw new Error(\"Please pass an attribute selector!\");\n    }\n    const data = await this.sequelize.query(sql, options);\n    if (!options.plain) {\n      return data;\n    }\n    const result = data ? data[attributeSelector] : null;\n    if (!options || !options.dataType) {\n      return result;\n    }\n    const dataType = options.dataType;\n    if ((dataType instanceof DataTypes.DECIMAL || dataType instanceof DataTypes.FLOAT) && result !== null) {\n      return Number.parseFloat(result);\n    }\n    if ((dataType instanceof DataTypes.INTEGER || dataType instanceof DataTypes.BIGINT) && result !== null) {\n      return Number.parseInt(result, 10);\n    }\n    if (dataType instanceof DataTypes.DATE && result !== null && !(result instanceof Date)) {\n      return new Date(result);\n    }\n    return result;\n  }\n  async createTrigger(tableName, triggerName, timingType, fireOnArray, functionName, functionParams, optionsArray, options) {\n    const sql = this.queryGenerator.createTrigger(tableName, triggerName, timingType, fireOnArray, functionName, functionParams, optionsArray);\n    options = options || {};\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n  async dropTrigger(tableName, triggerName, options) {\n    const sql = this.queryGenerator.dropTrigger(tableName, triggerName);\n    options = options || {};\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n  async renameTrigger(tableName, oldTriggerName, newTriggerName, options) {\n    const sql = this.queryGenerator.renameTrigger(tableName, oldTriggerName, newTriggerName);\n    options = options || {};\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n  async createFunction(functionName, params, returnType, language, body, optionsArray, options) {\n    const sql = this.queryGenerator.createFunction(functionName, params, returnType, language, body, optionsArray, options);\n    options = options || {};\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n  async dropFunction(functionName, params, options) {\n    const sql = this.queryGenerator.dropFunction(functionName, params);\n    options = options || {};\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n  async renameFunction(oldFunctionName, params, newFunctionName, options) {\n    const sql = this.queryGenerator.renameFunction(oldFunctionName, params, newFunctionName);\n    options = options || {};\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n  ensureEnums() {\n  }\n  async setIsolationLevel(transaction, value, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error(\"Unable to set isolation level for a transaction without transaction object!\");\n    }\n    if (transaction.parent || !value) {\n      return;\n    }\n    options = __spreadProps(__spreadValues({}, options), { transaction: transaction.parent || transaction });\n    const sql = this.queryGenerator.setIsolationLevelQuery(value, {\n      parent: transaction.parent\n    });\n    if (!sql) {\n      return;\n    }\n    return await this.sequelize.query(sql, options);\n  }\n  async startTransaction(transaction, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error(\"Unable to start a transaction without transaction object!\");\n    }\n    options = __spreadProps(__spreadValues({}, options), { transaction: transaction.parent || transaction });\n    options.transaction.name = transaction.parent ? transaction.name : void 0;\n    const sql = this.queryGenerator.startTransactionQuery(transaction);\n    return await this.sequelize.query(sql, options);\n  }\n  async deferConstraints(transaction, options) {\n    options = __spreadProps(__spreadValues({}, options), { transaction: transaction.parent || transaction });\n    const sql = this.queryGenerator.deferConstraintsQuery(options);\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n  async commitTransaction(transaction, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error(\"Unable to commit a transaction without transaction object!\");\n    }\n    if (transaction.parent) {\n      return;\n    }\n    options = __spreadProps(__spreadValues({}, options), {\n      transaction: transaction.parent || transaction,\n      supportsSearchPath: false,\n      completesTransaction: true\n    });\n    const sql = this.queryGenerator.commitTransactionQuery(transaction);\n    const promise = this.sequelize.query(sql, options);\n    transaction.finished = \"commit\";\n    return await promise;\n  }\n  async rollbackTransaction(transaction, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error(\"Unable to rollback a transaction without transaction object!\");\n    }\n    options = __spreadProps(__spreadValues({}, options), {\n      transaction: transaction.parent || transaction,\n      supportsSearchPath: false,\n      completesTransaction: true\n    });\n    options.transaction.name = transaction.parent ? transaction.name : void 0;\n    const sql = this.queryGenerator.rollbackTransactionQuery(transaction);\n    const promise = this.sequelize.query(sql, options);\n    transaction.finished = \"rollback\";\n    return await promise;\n  }\n}\nexports.QueryInterface = QueryInterface;\n//# sourceMappingURL=query-interface.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/dialects/abstract/query-interface.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 529,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/dialects/abstract/query-interface.js",
    "static": true,
    "longname": "lib/dialects/abstract/query-interface.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 530,
    "kind": "variable",
    "name": "__defProps",
    "memberof": "lib/dialects/abstract/query-interface.js",
    "static": true,
    "longname": "lib/dialects/abstract/query-interface.js~__defProps",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 531,
    "kind": "variable",
    "name": "__getOwnPropDescs",
    "memberof": "lib/dialects/abstract/query-interface.js",
    "static": true,
    "longname": "lib/dialects/abstract/query-interface.js~__getOwnPropDescs",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 532,
    "kind": "variable",
    "name": "__getOwnPropSymbols",
    "memberof": "lib/dialects/abstract/query-interface.js",
    "static": true,
    "longname": "lib/dialects/abstract/query-interface.js~__getOwnPropSymbols",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 533,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/dialects/abstract/query-interface.js",
    "static": true,
    "longname": "lib/dialects/abstract/query-interface.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 534,
    "kind": "variable",
    "name": "__propIsEnum",
    "memberof": "lib/dialects/abstract/query-interface.js",
    "static": true,
    "longname": "lib/dialects/abstract/query-interface.js~__propIsEnum",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 535,
    "kind": "function",
    "name": "__defNormalProp",
    "memberof": "lib/dialects/abstract/query-interface.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/abstract/query-interface.js~__defNormalProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 536,
    "kind": "function",
    "name": "__spreadValues",
    "memberof": "lib/dialects/abstract/query-interface.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/abstract/query-interface.js~__spreadValues",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 537,
    "kind": "function",
    "name": "__spreadProps",
    "memberof": "lib/dialects/abstract/query-interface.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/abstract/query-interface.js~__spreadProps",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 538,
    "kind": "variable",
    "name": "_",
    "memberof": "lib/dialects/abstract/query-interface.js",
    "static": true,
    "longname": "lib/dialects/abstract/query-interface.js~_",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 539,
    "kind": "variable",
    "name": "Utils",
    "memberof": "lib/dialects/abstract/query-interface.js",
    "static": true,
    "longname": "lib/dialects/abstract/query-interface.js~Utils",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 540,
    "kind": "variable",
    "name": "DataTypes",
    "memberof": "lib/dialects/abstract/query-interface.js",
    "static": true,
    "longname": "lib/dialects/abstract/query-interface.js~DataTypes",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 541,
    "kind": "variable",
    "name": "Transaction",
    "memberof": "lib/dialects/abstract/query-interface.js",
    "static": true,
    "longname": "lib/dialects/abstract/query-interface.js~Transaction",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 542,
    "kind": "variable",
    "name": "QueryTypes",
    "memberof": "lib/dialects/abstract/query-interface.js",
    "static": true,
    "longname": "lib/dialects/abstract/query-interface.js~QueryTypes",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 543,
    "kind": "class",
    "name": "QueryInterface",
    "memberof": "lib/dialects/abstract/query-interface.js",
    "static": true,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 544,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 545,
    "kind": "member",
    "name": "sequelize",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#sequelize",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 546,
    "kind": "member",
    "name": "queryGenerator",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#queryGenerator",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 547,
    "kind": "method",
    "name": "createDatabase",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#createDatabase",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "database",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 548,
    "kind": "method",
    "name": "dropDatabase",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#dropDatabase",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [
      {
        "name": "database",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 549,
    "kind": "method",
    "name": "createSchema",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#createSchema",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [
      {
        "name": "schema",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 550,
    "kind": "method",
    "name": "dropSchema",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#dropSchema",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [
      {
        "name": "schema",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 551,
    "kind": "method",
    "name": "dropAllSchemas",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#dropAllSchemas",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 552,
    "kind": "method",
    "name": "showAllSchemas",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#showAllSchemas",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 553,
    "kind": "method",
    "name": "databaseVersion",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#databaseVersion",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 554,
    "kind": "method",
    "name": "createTable",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#createTable",
    "access": "public",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributes",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      },
      {
        "name": "model",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 555,
    "kind": "method",
    "name": "dropTable",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#dropTable",
    "access": "public",
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 556,
    "kind": "method",
    "name": "_dropAllTables",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#_dropAllTables",
    "access": "private",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "tableNames",
        "types": [
          "*"
        ]
      },
      {
        "name": "skip",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 557,
    "kind": "method",
    "name": "dropAllTables",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#dropAllTables",
    "access": "public",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 558,
    "kind": "method",
    "name": "renameTable",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#renameTable",
    "access": "public",
    "description": null,
    "lineNumber": 125,
    "undocument": true,
    "params": [
      {
        "name": "before",
        "types": [
          "*"
        ]
      },
      {
        "name": "after",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 559,
    "kind": "method",
    "name": "showAllTables",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#showAllTables",
    "access": "public",
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 560,
    "kind": "method",
    "name": "describeTable",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#describeTable",
    "access": "public",
    "description": null,
    "lineNumber": 139,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 561,
    "kind": "method",
    "name": "addColumn",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#addColumn",
    "access": "public",
    "description": null,
    "lineNumber": 167,
    "undocument": true,
    "params": [
      {
        "name": "table",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "attribute",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 562,
    "kind": "method",
    "name": "removeColumn",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#removeColumn",
    "access": "public",
    "description": null,
    "lineNumber": 175,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributeName",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 563,
    "kind": "method",
    "name": "normalizeAttribute",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#normalizeAttribute",
    "access": "public",
    "description": null,
    "lineNumber": 178,
    "undocument": true,
    "params": [
      {
        "name": "dataTypeOrOptions",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 564,
    "kind": "method",
    "name": "quoteIdentifier",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#quoteIdentifier",
    "access": "public",
    "description": null,
    "lineNumber": 187,
    "undocument": true,
    "params": [
      {
        "name": "identifier2",
        "types": [
          "*"
        ]
      },
      {
        "name": "force",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 565,
    "kind": "method",
    "name": "quoteIdentifiers",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#quoteIdentifiers",
    "access": "public",
    "description": null,
    "lineNumber": 190,
    "undocument": true,
    "params": [
      {
        "name": "identifiers",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 566,
    "kind": "method",
    "name": "changeColumn",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#changeColumn",
    "access": "public",
    "description": null,
    "lineNumber": 193,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributeName",
        "types": [
          "*"
        ]
      },
      {
        "name": "dataTypeOrOptions",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 567,
    "kind": "method",
    "name": "assertTableHasColumn",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#assertTableHasColumn",
    "access": "public",
    "description": null,
    "lineNumber": 204,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "columnName",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 568,
    "kind": "method",
    "name": "renameColumn",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#renameColumn",
    "access": "public",
    "description": null,
    "lineNumber": 211,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attrNameBefore",
        "types": [
          "*"
        ]
      },
      {
        "name": "attrNameAfter",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 569,
    "kind": "method",
    "name": "addIndex",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#addIndex",
    "access": "public",
    "description": null,
    "lineNumber": 227,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributes",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      },
      {
        "name": "rawTablename",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 570,
    "kind": "method",
    "name": "showIndex",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#showIndex",
    "access": "public",
    "description": null,
    "lineNumber": 241,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 571,
    "kind": "method",
    "name": "getForeignKeysForTables",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#getForeignKeysForTables",
    "access": "public",
    "description": null,
    "lineNumber": 245,
    "undocument": true,
    "params": [
      {
        "name": "tableNames",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 572,
    "kind": "method",
    "name": "getForeignKeyReferencesForTable",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#getForeignKeyReferencesForTable",
    "access": "public",
    "description": null,
    "lineNumber": 261,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 573,
    "kind": "method",
    "name": "removeIndex",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#removeIndex",
    "access": "public",
    "description": null,
    "lineNumber": 268,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "indexNameOrAttributes",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 574,
    "kind": "method",
    "name": "addConstraint",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#addConstraint",
    "access": "public",
    "description": null,
    "lineNumber": 273,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 575,
    "kind": "method",
    "name": "showConstraint",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#showConstraint",
    "access": "public",
    "description": null,
    "lineNumber": 284,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "constraintName",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 576,
    "kind": "method",
    "name": "removeConstraint",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#removeConstraint",
    "access": "public",
    "description": null,
    "lineNumber": 288,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "constraintName",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 577,
    "kind": "method",
    "name": "insert",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#insert",
    "access": "public",
    "description": null,
    "lineNumber": 291,
    "undocument": true,
    "params": [
      {
        "name": "instance",
        "types": [
          "*"
        ]
      },
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "values",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 578,
    "kind": "method",
    "name": "upsert",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#upsert",
    "access": "public",
    "description": null,
    "lineNumber": 303,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "insertValues",
        "types": [
          "*"
        ]
      },
      {
        "name": "updateValues",
        "types": [
          "*"
        ]
      },
      {
        "name": "where",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 579,
    "kind": "method",
    "name": "bulkInsert",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#bulkInsert",
    "access": "public",
    "description": null,
    "lineNumber": 333,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "records",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 580,
    "kind": "method",
    "name": "update",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#update",
    "access": "public",
    "description": null,
    "lineNumber": 339,
    "undocument": true,
    "params": [
      {
        "name": "instance",
        "types": [
          "*"
        ]
      },
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "values",
        "types": [
          "*"
        ]
      },
      {
        "name": "identifier2",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 581,
    "kind": "method",
    "name": "bulkUpdate",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#bulkUpdate",
    "access": "public",
    "description": null,
    "lineNumber": 347,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "values",
        "types": [
          "*"
        ]
      },
      {
        "name": "identifier2",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 582,
    "kind": "method",
    "name": "delete",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#delete",
    "access": "public",
    "description": null,
    "lineNumber": 359,
    "undocument": true,
    "params": [
      {
        "name": "instance",
        "types": [
          "*"
        ]
      },
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "identifier2",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 583,
    "kind": "method",
    "name": "bulkDelete",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#bulkDelete",
    "access": "public",
    "description": null,
    "lineNumber": 389,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "where",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      },
      {
        "name": "model",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 584,
    "kind": "method",
    "name": "select",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#select",
    "access": "public",
    "description": null,
    "lineNumber": 400,
    "undocument": true,
    "params": [
      {
        "name": "model",
        "types": [
          "*"
        ]
      },
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "optionsArg",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 585,
    "kind": "method",
    "name": "increment",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#increment",
    "access": "public",
    "description": null,
    "lineNumber": 404,
    "undocument": true,
    "params": [
      {
        "name": "model",
        "types": [
          "*"
        ]
      },
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "where",
        "types": [
          "*"
        ]
      },
      {
        "name": "incrementAmountsByField",
        "types": [
          "*"
        ]
      },
      {
        "name": "extraAttributesToBeUpdated",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 586,
    "kind": "method",
    "name": "decrement",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#decrement",
    "access": "public",
    "description": null,
    "lineNumber": 411,
    "undocument": true,
    "params": [
      {
        "name": "model",
        "types": [
          "*"
        ]
      },
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "where",
        "types": [
          "*"
        ]
      },
      {
        "name": "incrementAmountsByField",
        "types": [
          "*"
        ]
      },
      {
        "name": "extraAttributesToBeUpdated",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 587,
    "kind": "method",
    "name": "rawSelect",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#rawSelect",
    "access": "public",
    "description": null,
    "lineNumber": 418,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributeSelector",
        "types": [
          "*"
        ]
      },
      {
        "name": "Model",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 588,
    "kind": "method",
    "name": "createTrigger",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#createTrigger",
    "access": "public",
    "description": null,
    "lineNumber": 449,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "triggerName",
        "types": [
          "*"
        ]
      },
      {
        "name": "timingType",
        "types": [
          "*"
        ]
      },
      {
        "name": "fireOnArray",
        "types": [
          "*"
        ]
      },
      {
        "name": "functionName",
        "types": [
          "*"
        ]
      },
      {
        "name": "functionParams",
        "types": [
          "*"
        ]
      },
      {
        "name": "optionsArray",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 589,
    "kind": "method",
    "name": "dropTrigger",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#dropTrigger",
    "access": "public",
    "description": null,
    "lineNumber": 456,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "triggerName",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 590,
    "kind": "method",
    "name": "renameTrigger",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#renameTrigger",
    "access": "public",
    "description": null,
    "lineNumber": 463,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "oldTriggerName",
        "types": [
          "*"
        ]
      },
      {
        "name": "newTriggerName",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 591,
    "kind": "method",
    "name": "createFunction",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#createFunction",
    "access": "public",
    "description": null,
    "lineNumber": 470,
    "undocument": true,
    "params": [
      {
        "name": "functionName",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "*"
        ]
      },
      {
        "name": "returnType",
        "types": [
          "*"
        ]
      },
      {
        "name": "language",
        "types": [
          "*"
        ]
      },
      {
        "name": "body",
        "types": [
          "*"
        ]
      },
      {
        "name": "optionsArray",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 592,
    "kind": "method",
    "name": "dropFunction",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#dropFunction",
    "access": "public",
    "description": null,
    "lineNumber": 477,
    "undocument": true,
    "params": [
      {
        "name": "functionName",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 593,
    "kind": "method",
    "name": "renameFunction",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#renameFunction",
    "access": "public",
    "description": null,
    "lineNumber": 484,
    "undocument": true,
    "params": [
      {
        "name": "oldFunctionName",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "*"
        ]
      },
      {
        "name": "newFunctionName",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 594,
    "kind": "method",
    "name": "ensureEnums",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#ensureEnums",
    "access": "public",
    "description": null,
    "lineNumber": 491,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 595,
    "kind": "method",
    "name": "setIsolationLevel",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#setIsolationLevel",
    "access": "public",
    "description": null,
    "lineNumber": 493,
    "undocument": true,
    "params": [
      {
        "name": "transaction",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 596,
    "kind": "method",
    "name": "startTransaction",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#startTransaction",
    "access": "public",
    "description": null,
    "lineNumber": 509,
    "undocument": true,
    "params": [
      {
        "name": "transaction",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 597,
    "kind": "method",
    "name": "deferConstraints",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#deferConstraints",
    "access": "public",
    "description": null,
    "lineNumber": 518,
    "undocument": true,
    "params": [
      {
        "name": "transaction",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 598,
    "kind": "method",
    "name": "commitTransaction",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#commitTransaction",
    "access": "public",
    "description": null,
    "lineNumber": 525,
    "undocument": true,
    "params": [
      {
        "name": "transaction",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 599,
    "kind": "method",
    "name": "rollbackTransaction",
    "memberof": "lib/dialects/abstract/query-interface.js~QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/abstract/query-interface.js~QueryInterface#rollbackTransaction",
    "access": "public",
    "description": null,
    "lineNumber": 542,
    "undocument": true,
    "params": [
      {
        "name": "transaction",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 600,
    "kind": "file",
    "name": "lib/dialects/abstract/query.js",
    "content": "\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nconst _ = require(\"lodash\");\nconst SqlString = require(\"../../sql-string\");\nconst { QueryTypes } = require(\"../../query-types\");\nconst Dot = require(\"dottie\");\nconst deprecations = require(\"../../utils/deprecations\");\nconst uuid = require(\"uuid\").v4;\nconst { safeStringifyJson } = require(\"../../utils.js\");\nclass AbstractQuery {\n  constructor(connection, sequelize, options) {\n    this.uuid = uuid();\n    this.connection = connection;\n    this.instance = options.instance;\n    this.model = options.model;\n    this.sequelize = sequelize;\n    this.options = __spreadValues({\n      plain: false,\n      raw: false,\n      logging: console.debug\n    }, options);\n    this.checkLoggingOption();\n    if (options.rawErrors) {\n      this.formatError = AbstractQuery.prototype.formatError;\n    }\n  }\n  static formatBindParameters(sql, values, dialect, replacementFunc, options) {\n    if (!values) {\n      return [sql, []];\n    }\n    options = options || {};\n    if (typeof replacementFunc !== \"function\") {\n      options = replacementFunc || {};\n      replacementFunc = void 0;\n    }\n    if (!replacementFunc) {\n      if (options.skipValueReplace) {\n        replacementFunc = (match, key, values2) => {\n          if (values2[key] !== void 0) {\n            return match;\n          }\n        };\n      } else {\n        replacementFunc = (match, key, values2, timeZone2, dialect2) => {\n          if (values2[key] !== void 0) {\n            return SqlString.escape(values2[key], timeZone2, dialect2);\n          }\n        };\n      }\n    } else if (options.skipValueReplace) {\n      const origReplacementFunc = replacementFunc;\n      replacementFunc = (match, key, values2, timeZone2, dialect2, options2) => {\n        if (origReplacementFunc(match, key, values2, timeZone2, dialect2, options2) !== void 0) {\n          return match;\n        }\n      };\n    }\n    const timeZone = null;\n    const list = Array.isArray(values);\n    sql = sql.replace(/\\B\\$(\\$|\\w+)/g, (match, key) => {\n      if (key === \"$\") {\n        return options.skipUnescape ? match : key;\n      }\n      let replVal;\n      if (list) {\n        if (/^[1-9]\\d*$/.test(key)) {\n          key = key - 1;\n          replVal = replacementFunc(match, key, values, timeZone, dialect, options);\n        }\n      } else if (!/^\\d*$/.test(key)) {\n        replVal = replacementFunc(match, key, values, timeZone, dialect, options);\n      }\n      if (replVal === void 0) {\n        throw new Error(`Named bind parameter \"${match}\" has no value in the given object.`);\n      }\n      return replVal;\n    });\n    return [sql, []];\n  }\n  formatError(error, errStack) {\n    error.stack = errStack;\n    return error;\n  }\n  run() {\n    throw new Error(\"The run method wasn't overwritten!\");\n  }\n  checkLoggingOption() {\n    if (this.options.logging === true) {\n      deprecations.noTrueLogging();\n      this.options.logging = console.debug;\n    }\n  }\n  getInsertIdField() {\n    return \"insertId\";\n  }\n  getUniqueConstraintErrorMessage(field) {\n    let message = field ? `${field} must be unique` : \"Must be unique\";\n    if (field && this.model) {\n      for (const key of Object.keys(this.model.uniqueKeys)) {\n        if (this.model.uniqueKeys[key].fields.includes(field.replace(/\"/g, \"\")) && this.model.uniqueKeys[key].msg) {\n          message = this.model.uniqueKeys[key].msg;\n        }\n      }\n    }\n    return message;\n  }\n  isRawQuery() {\n    return this.options.type === QueryTypes.RAW;\n  }\n  isVersionQuery() {\n    return this.options.type === QueryTypes.VERSION;\n  }\n  isUpsertQuery() {\n    return this.options.type === QueryTypes.UPSERT;\n  }\n  isInsertQuery(results, metaData) {\n    let result = true;\n    if (this.options.type === QueryTypes.INSERT) {\n      return true;\n    }\n    result = result && this.sql.toLowerCase().startsWith(\"insert into\");\n    result = result && (!results || Object.prototype.hasOwnProperty.call(results, this.getInsertIdField()));\n    result = result && (!metaData || Object.prototype.hasOwnProperty.call(metaData, this.getInsertIdField()));\n    return result;\n  }\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n      id = id || results && results[this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n      this.instance[autoIncrementAttribute] = id;\n    }\n  }\n  isShowTablesQuery() {\n    return this.options.type === QueryTypes.SHOWTABLES;\n  }\n  handleShowTablesQuery(results) {\n    return results.flatMap((resultSet) => Object.values(resultSet));\n  }\n  isShowIndexesQuery() {\n    return this.options.type === QueryTypes.SHOWINDEXES;\n  }\n  isShowConstraintsQuery() {\n    return this.options.type === QueryTypes.SHOWCONSTRAINTS;\n  }\n  isDescribeQuery() {\n    return this.options.type === QueryTypes.DESCRIBE;\n  }\n  isSelectQuery() {\n    return this.options.type === QueryTypes.SELECT;\n  }\n  isBulkUpdateQuery() {\n    return this.options.type === QueryTypes.BULKUPDATE;\n  }\n  isBulkDeleteQuery() {\n    return this.options.type === QueryTypes.BULKDELETE;\n  }\n  isForeignKeysQuery() {\n    return this.options.type === QueryTypes.FOREIGNKEYS;\n  }\n  isUpdateQuery() {\n    return this.options.type === QueryTypes.UPDATE;\n  }\n  handleSelectQuery(results) {\n    let result = null;\n    if (this.options.fieldMap) {\n      const fieldMap = this.options.fieldMap;\n      results = results.map((result2) => _.reduce(fieldMap, (result3, name, field) => {\n        if (result3[field] !== void 0 && name !== field) {\n          result3[name] = result3[field];\n          delete result3[field];\n        }\n        return result3;\n      }, result2));\n    }\n    if (this.options.raw) {\n      result = results.map((result2) => {\n        let o = {};\n        for (const key in result2) {\n          if (Object.prototype.hasOwnProperty.call(result2, key)) {\n            o[key] = result2[key];\n          }\n        }\n        if (this.options.nest) {\n          o = Dot.transform(o);\n        }\n        return o;\n      });\n    } else if (this.options.hasJoin === true) {\n      results = AbstractQuery._groupJoinData(results, {\n        model: this.model,\n        includeMap: this.options.includeMap,\n        includeNames: this.options.includeNames\n      }, {\n        checkExisting: this.options.hasMultiAssociation\n      });\n      result = this.model.bulkBuild(results, {\n        isNewRecord: false,\n        include: this.options.include,\n        includeNames: this.options.includeNames,\n        includeMap: this.options.includeMap,\n        includeValidated: true,\n        attributes: this.options.originalAttributes || this.options.attributes,\n        raw: true\n      });\n    } else {\n      result = this.model.bulkBuild(results, {\n        isNewRecord: false,\n        raw: true,\n        attributes: this.options.originalAttributes || this.options.attributes\n      });\n    }\n    if (this.options.plain) {\n      result = result.length === 0 ? null : result[0];\n    }\n    return result;\n  }\n  isShowOrDescribeQuery() {\n    let result = false;\n    result = result || this.sql.toLowerCase().startsWith(\"show\");\n    result = result || this.sql.toLowerCase().startsWith(\"describe\");\n    return result;\n  }\n  isCallQuery() {\n    return this.sql.toLowerCase().startsWith(\"call\");\n  }\n  _logQuery(sql, debugContext, parameters) {\n    const { connection, options } = this;\n    const benchmark = this.sequelize.options.benchmark || options.benchmark;\n    const logQueryParameters = this.sequelize.options.logQueryParameters || options.logQueryParameters;\n    const startTime = Date.now();\n    let logParameter = \"\";\n    if (logQueryParameters && parameters) {\n      const delimiter = sql.endsWith(\";\") ? \"\" : \";\";\n      let paramStr;\n      if (Array.isArray(parameters)) {\n        paramStr = parameters.map((p) => safeStringifyJson(p)).join(\", \");\n      } else {\n        paramStr = safeStringifyJson(parameters);\n      }\n      logParameter = `${delimiter} ${paramStr}`;\n    }\n    const fmt = `(${connection.uuid || \"default\"}): ${sql}${logParameter}`;\n    const msg = `Executing ${fmt}`;\n    debugContext(msg);\n    if (!benchmark) {\n      this.sequelize.log(`Executing ${fmt}`, options);\n    }\n    return () => {\n      const afterMsg = `Executed ${fmt}`;\n      debugContext(afterMsg);\n      if (benchmark) {\n        this.sequelize.log(afterMsg, Date.now() - startTime, options);\n      }\n    };\n  }\n  static _groupJoinData(rows, includeOptions, options) {\n    if (rows.length === 0) {\n      return [];\n    }\n    let i;\n    let length;\n    let $i;\n    let $length;\n    let rowsI;\n    let row;\n    const rowsLength = rows.length;\n    let keys;\n    let key;\n    let keyI;\n    let keyLength;\n    let prevKey;\n    let values;\n    let topValues;\n    let topExists;\n    const checkExisting = options.checkExisting;\n    let itemHash;\n    let parentHash;\n    let topHash;\n    const results = checkExisting ? [] : new Array(rowsLength);\n    const resultMap = {};\n    const includeMap = {};\n    let $keyPrefix;\n    let $keyPrefixString;\n    let $prevKeyPrefixString;\n    let $prevKeyPrefix;\n    let $lastKeyPrefix;\n    let $current;\n    let $parent;\n    let previousPiece;\n    const buildIncludeMap = (piece) => {\n      if (Object.prototype.hasOwnProperty.call($current.includeMap, piece)) {\n        includeMap[key] = $current = $current.includeMap[piece];\n        if (previousPiece) {\n          previousPiece = `${previousPiece}.${piece}`;\n        } else {\n          previousPiece = piece;\n        }\n        includeMap[previousPiece] = $current;\n      }\n    };\n    const keyPrefixStringMemo = {};\n    const keyPrefixString = (key2, memo) => {\n      if (!Object.prototype.hasOwnProperty.call(memo, key2)) {\n        memo[key2] = key2.slice(0, Math.max(0, key2.lastIndexOf(\".\")));\n      }\n      return memo[key2];\n    };\n    const removeKeyPrefixMemo = {};\n    const removeKeyPrefix = (key2) => {\n      if (!Object.prototype.hasOwnProperty.call(removeKeyPrefixMemo, key2)) {\n        const index = key2.lastIndexOf(\".\");\n        removeKeyPrefixMemo[key2] = key2.slice(index === -1 ? 0 : index + 1);\n      }\n      return removeKeyPrefixMemo[key2];\n    };\n    const keyPrefixMemo = {};\n    const keyPrefix = (key2) => {\n      if (!Object.prototype.hasOwnProperty.call(keyPrefixMemo, key2)) {\n        const prefixString = keyPrefixString(key2, keyPrefixStringMemo);\n        if (!Object.prototype.hasOwnProperty.call(keyPrefixMemo, prefixString)) {\n          keyPrefixMemo[prefixString] = prefixString ? prefixString.split(\".\") : [];\n        }\n        keyPrefixMemo[key2] = keyPrefixMemo[prefixString];\n      }\n      return keyPrefixMemo[key2];\n    };\n    const lastKeyPrefixMemo = {};\n    const lastKeyPrefix = (key2) => {\n      if (!Object.prototype.hasOwnProperty.call(lastKeyPrefixMemo, key2)) {\n        const prefix2 = keyPrefix(key2);\n        const length2 = prefix2.length;\n        lastKeyPrefixMemo[key2] = !length2 ? \"\" : prefix2[length2 - 1];\n      }\n      return lastKeyPrefixMemo[key2];\n    };\n    const getUniqueKeyAttributes = (model) => {\n      let uniqueKeyAttributes2 = _.chain(model.uniqueKeys);\n      uniqueKeyAttributes2 = uniqueKeyAttributes2.result(`${uniqueKeyAttributes2.findKey()}.fields`).map((field) => _.findKey(model.attributes, (chr) => chr.field === field)).value();\n      return uniqueKeyAttributes2;\n    };\n    const stringify = (obj) => obj instanceof Buffer ? obj.toString(\"hex\") : obj;\n    let primaryKeyAttributes;\n    let uniqueKeyAttributes;\n    let prefix;\n    for (rowsI = 0; rowsI < rowsLength; rowsI++) {\n      row = rows[rowsI];\n      if (rowsI === 0) {\n        keys = Object.keys(row);\n        keyLength = keys.length;\n      }\n      if (checkExisting) {\n        topExists = false;\n        $length = includeOptions.model.primaryKeyAttributes.length;\n        topHash = \"\";\n        if ($length === 1) {\n          topHash = stringify(row[includeOptions.model.primaryKeyAttributes[0]]);\n        } else if ($length > 1) {\n          for ($i = 0; $i < $length; $i++) {\n            topHash += stringify(row[includeOptions.model.primaryKeyAttributes[$i]]);\n          }\n        } else if (!_.isEmpty(includeOptions.model.uniqueKeys)) {\n          uniqueKeyAttributes = getUniqueKeyAttributes(includeOptions.model);\n          for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n            topHash += row[uniqueKeyAttributes[$i]];\n          }\n        }\n      }\n      topValues = values = {};\n      $prevKeyPrefix = void 0;\n      for (keyI = 0; keyI < keyLength; keyI++) {\n        key = keys[keyI];\n        $keyPrefixString = keyPrefixString(key, keyPrefixStringMemo);\n        $keyPrefix = keyPrefix(key);\n        if (rowsI === 0 && !Object.prototype.hasOwnProperty.call(includeMap, key)) {\n          if ($keyPrefix.length === 0) {\n            includeMap[key] = includeMap[\"\"] = includeOptions;\n          } else {\n            $current = includeOptions;\n            previousPiece = void 0;\n            $keyPrefix.forEach(buildIncludeMap);\n          }\n        }\n        if ($prevKeyPrefix !== void 0 && $prevKeyPrefix !== $keyPrefix) {\n          if (checkExisting) {\n            length = $prevKeyPrefix.length;\n            $parent = null;\n            parentHash = null;\n            if (length) {\n              for (i = 0; i < length; i++) {\n                prefix = $parent ? `${$parent}.${$prevKeyPrefix[i]}` : $prevKeyPrefix[i];\n                primaryKeyAttributes = includeMap[prefix].model.primaryKeyAttributes;\n                $length = primaryKeyAttributes.length;\n                itemHash = prefix;\n                if ($length === 1) {\n                  itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[0]}`]);\n                } else if ($length > 1) {\n                  for ($i = 0; $i < $length; $i++) {\n                    itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[$i]}`]);\n                  }\n                } else if (!_.isEmpty(includeMap[prefix].model.uniqueKeys)) {\n                  uniqueKeyAttributes = getUniqueKeyAttributes(includeMap[prefix].model);\n                  for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n                    itemHash += row[`${prefix}.${uniqueKeyAttributes[$i]}`];\n                  }\n                }\n                if (!parentHash) {\n                  parentHash = topHash;\n                }\n                itemHash = parentHash + itemHash;\n                $parent = prefix;\n                if (i < length - 1) {\n                  parentHash = itemHash;\n                }\n              }\n            } else {\n              itemHash = topHash;\n            }\n            if (itemHash === topHash) {\n              if (!resultMap[itemHash]) {\n                resultMap[itemHash] = values;\n              } else {\n                topExists = true;\n              }\n            } else if (!resultMap[itemHash]) {\n              $parent = resultMap[parentHash];\n              $lastKeyPrefix = lastKeyPrefix(prevKey);\n              if (includeMap[prevKey].association.isSingleAssociation) {\n                if ($parent) {\n                  $parent[$lastKeyPrefix] = resultMap[itemHash] = values;\n                }\n              } else {\n                if (!$parent[$lastKeyPrefix]) {\n                  $parent[$lastKeyPrefix] = [];\n                }\n                $parent[$lastKeyPrefix].push(resultMap[itemHash] = values);\n              }\n            }\n            values = {};\n          } else {\n            $current = topValues;\n            length = $keyPrefix.length;\n            if (length) {\n              for (i = 0; i < length; i++) {\n                if (i === length - 1) {\n                  values = $current[$keyPrefix[i]] = {};\n                }\n                $current = $current[$keyPrefix[i]] || {};\n              }\n            }\n          }\n        }\n        values[removeKeyPrefix(key)] = row[key];\n        prevKey = key;\n        $prevKeyPrefix = $keyPrefix;\n        $prevKeyPrefixString = $keyPrefixString;\n      }\n      if (checkExisting) {\n        length = $prevKeyPrefix.length;\n        $parent = null;\n        parentHash = null;\n        if (length) {\n          for (i = 0; i < length; i++) {\n            prefix = $parent ? `${$parent}.${$prevKeyPrefix[i]}` : $prevKeyPrefix[i];\n            primaryKeyAttributes = includeMap[prefix].model.primaryKeyAttributes;\n            $length = primaryKeyAttributes.length;\n            itemHash = prefix;\n            if ($length === 1) {\n              itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[0]}`]);\n            } else if ($length > 0) {\n              for ($i = 0; $i < $length; $i++) {\n                itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[$i]}`]);\n              }\n            } else if (!_.isEmpty(includeMap[prefix].model.uniqueKeys)) {\n              uniqueKeyAttributes = getUniqueKeyAttributes(includeMap[prefix].model);\n              for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n                itemHash += row[`${prefix}.${uniqueKeyAttributes[$i]}`];\n              }\n            }\n            if (!parentHash) {\n              parentHash = topHash;\n            }\n            itemHash = parentHash + itemHash;\n            $parent = prefix;\n            if (i < length - 1) {\n              parentHash = itemHash;\n            }\n          }\n        } else {\n          itemHash = topHash;\n        }\n        if (itemHash === topHash) {\n          if (!resultMap[itemHash]) {\n            resultMap[itemHash] = values;\n          } else {\n            topExists = true;\n          }\n        } else if (!resultMap[itemHash]) {\n          $parent = resultMap[parentHash];\n          $lastKeyPrefix = lastKeyPrefix(prevKey);\n          if (includeMap[prevKey].association.isSingleAssociation) {\n            if ($parent) {\n              $parent[$lastKeyPrefix] = resultMap[itemHash] = values;\n            }\n          } else {\n            if (!$parent[$lastKeyPrefix]) {\n              $parent[$lastKeyPrefix] = [];\n            }\n            $parent[$lastKeyPrefix].push(resultMap[itemHash] = values);\n          }\n        }\n        if (!topExists) {\n          results.push(topValues);\n        }\n      } else {\n        results[rowsI] = topValues;\n      }\n    }\n    return results;\n  }\n}\nmodule.exports = AbstractQuery;\nmodule.exports.AbstractQuery = AbstractQuery;\nmodule.exports.default = AbstractQuery;\n//# sourceMappingURL=query.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/dialects/abstract/query.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 601,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/dialects/abstract/query.js",
    "static": true,
    "longname": "lib/dialects/abstract/query.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 602,
    "kind": "variable",
    "name": "__getOwnPropSymbols",
    "memberof": "lib/dialects/abstract/query.js",
    "static": true,
    "longname": "lib/dialects/abstract/query.js~__getOwnPropSymbols",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 603,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/dialects/abstract/query.js",
    "static": true,
    "longname": "lib/dialects/abstract/query.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 604,
    "kind": "variable",
    "name": "__propIsEnum",
    "memberof": "lib/dialects/abstract/query.js",
    "static": true,
    "longname": "lib/dialects/abstract/query.js~__propIsEnum",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 605,
    "kind": "function",
    "name": "__defNormalProp",
    "memberof": "lib/dialects/abstract/query.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/abstract/query.js~__defNormalProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 606,
    "kind": "function",
    "name": "__spreadValues",
    "memberof": "lib/dialects/abstract/query.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/abstract/query.js~__spreadValues",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 607,
    "kind": "variable",
    "name": "_",
    "memberof": "lib/dialects/abstract/query.js",
    "static": true,
    "longname": "lib/dialects/abstract/query.js~_",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 608,
    "kind": "variable",
    "name": "SqlString",
    "memberof": "lib/dialects/abstract/query.js",
    "static": true,
    "longname": "lib/dialects/abstract/query.js~SqlString",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 609,
    "kind": "variable",
    "name": "QueryTypes",
    "memberof": "lib/dialects/abstract/query.js",
    "static": true,
    "longname": "lib/dialects/abstract/query.js~QueryTypes",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 610,
    "kind": "variable",
    "name": "Dot",
    "memberof": "lib/dialects/abstract/query.js",
    "static": true,
    "longname": "lib/dialects/abstract/query.js~Dot",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 611,
    "kind": "variable",
    "name": "deprecations",
    "memberof": "lib/dialects/abstract/query.js",
    "static": true,
    "longname": "lib/dialects/abstract/query.js~deprecations",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 612,
    "kind": "variable",
    "name": "uuid",
    "memberof": "lib/dialects/abstract/query.js",
    "static": true,
    "longname": "lib/dialects/abstract/query.js~uuid",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 613,
    "kind": "variable",
    "name": "safeStringifyJson",
    "memberof": "lib/dialects/abstract/query.js",
    "static": true,
    "longname": "lib/dialects/abstract/query.js~safeStringifyJson",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 614,
    "kind": "class",
    "name": "AbstractQuery",
    "memberof": "lib/dialects/abstract/query.js",
    "static": true,
    "longname": "lib/dialects/abstract/query.js~AbstractQuery",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/abstract/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 615,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/dialects/abstract/query.js~AbstractQuery",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/abstract/query.js~AbstractQuery#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 616,
    "kind": "member",
    "name": "uuid",
    "memberof": "lib/dialects/abstract/query.js~AbstractQuery",
    "static": false,
    "longname": "lib/dialects/abstract/query.js~AbstractQuery#uuid",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 617,
    "kind": "member",
    "name": "connection",
    "memberof": "lib/dialects/abstract/query.js~AbstractQuery",
    "static": false,
    "longname": "lib/dialects/abstract/query.js~AbstractQuery#connection",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 618,
    "kind": "member",
    "name": "instance",
    "memberof": "lib/dialects/abstract/query.js~AbstractQuery",
    "static": false,
    "longname": "lib/dialects/abstract/query.js~AbstractQuery#instance",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 619,
    "kind": "member",
    "name": "model",
    "memberof": "lib/dialects/abstract/query.js~AbstractQuery",
    "static": false,
    "longname": "lib/dialects/abstract/query.js~AbstractQuery#model",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 620,
    "kind": "member",
    "name": "sequelize",
    "memberof": "lib/dialects/abstract/query.js~AbstractQuery",
    "static": false,
    "longname": "lib/dialects/abstract/query.js~AbstractQuery#sequelize",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 621,
    "kind": "member",
    "name": "options",
    "memberof": "lib/dialects/abstract/query.js~AbstractQuery",
    "static": false,
    "longname": "lib/dialects/abstract/query.js~AbstractQuery#options",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 623,
    "kind": "method",
    "name": "formatBindParameters",
    "memberof": "lib/dialects/abstract/query.js~AbstractQuery",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/abstract/query.js~AbstractQuery.formatBindParameters",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "params": [
      {
        "name": "sql",
        "types": [
          "*"
        ]
      },
      {
        "name": "values",
        "types": [
          "*"
        ]
      },
      {
        "name": "dialect",
        "types": [
          "*"
        ]
      },
      {
        "name": "replacementFunc",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 624,
    "kind": "method",
    "name": "formatError",
    "memberof": "lib/dialects/abstract/query.js~AbstractQuery",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/abstract/query.js~AbstractQuery#formatError",
    "access": "public",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "params": [
      {
        "name": "error",
        "types": [
          "*"
        ]
      },
      {
        "name": "errStack",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 625,
    "kind": "method",
    "name": "run",
    "memberof": "lib/dialects/abstract/query.js~AbstractQuery",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/abstract/query.js~AbstractQuery#run",
    "access": "public",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 626,
    "kind": "method",
    "name": "checkLoggingOption",
    "memberof": "lib/dialects/abstract/query.js~AbstractQuery",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/abstract/query.js~AbstractQuery#checkLoggingOption",
    "access": "public",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 627,
    "kind": "method",
    "name": "getInsertIdField",
    "memberof": "lib/dialects/abstract/query.js~AbstractQuery",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/abstract/query.js~AbstractQuery#getInsertIdField",
    "access": "public",
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 628,
    "kind": "method",
    "name": "getUniqueConstraintErrorMessage",
    "memberof": "lib/dialects/abstract/query.js~AbstractQuery",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/abstract/query.js~AbstractQuery#getUniqueConstraintErrorMessage",
    "access": "public",
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "params": [
      {
        "name": "field",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 629,
    "kind": "method",
    "name": "isRawQuery",
    "memberof": "lib/dialects/abstract/query.js~AbstractQuery",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/abstract/query.js~AbstractQuery#isRawQuery",
    "access": "public",
    "description": null,
    "lineNumber": 122,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 630,
    "kind": "method",
    "name": "isVersionQuery",
    "memberof": "lib/dialects/abstract/query.js~AbstractQuery",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/abstract/query.js~AbstractQuery#isVersionQuery",
    "access": "public",
    "description": null,
    "lineNumber": 125,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 631,
    "kind": "method",
    "name": "isUpsertQuery",
    "memberof": "lib/dialects/abstract/query.js~AbstractQuery",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/abstract/query.js~AbstractQuery#isUpsertQuery",
    "access": "public",
    "description": null,
    "lineNumber": 128,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 632,
    "kind": "method",
    "name": "isInsertQuery",
    "memberof": "lib/dialects/abstract/query.js~AbstractQuery",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/abstract/query.js~AbstractQuery#isInsertQuery",
    "access": "public",
    "description": null,
    "lineNumber": 131,
    "undocument": true,
    "params": [
      {
        "name": "results",
        "types": [
          "*"
        ]
      },
      {
        "name": "metaData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 633,
    "kind": "method",
    "name": "handleInsertQuery",
    "memberof": "lib/dialects/abstract/query.js~AbstractQuery",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/abstract/query.js~AbstractQuery#handleInsertQuery",
    "access": "public",
    "description": null,
    "lineNumber": 141,
    "undocument": true,
    "params": [
      {
        "name": "results",
        "types": [
          "*"
        ]
      },
      {
        "name": "metaData",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 634,
    "kind": "method",
    "name": "isShowTablesQuery",
    "memberof": "lib/dialects/abstract/query.js~AbstractQuery",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/abstract/query.js~AbstractQuery#isShowTablesQuery",
    "access": "public",
    "description": null,
    "lineNumber": 150,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 635,
    "kind": "method",
    "name": "handleShowTablesQuery",
    "memberof": "lib/dialects/abstract/query.js~AbstractQuery",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/abstract/query.js~AbstractQuery#handleShowTablesQuery",
    "access": "public",
    "description": null,
    "lineNumber": 153,
    "undocument": true,
    "params": [
      {
        "name": "results",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 636,
    "kind": "method",
    "name": "isShowIndexesQuery",
    "memberof": "lib/dialects/abstract/query.js~AbstractQuery",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/abstract/query.js~AbstractQuery#isShowIndexesQuery",
    "access": "public",
    "description": null,
    "lineNumber": 156,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 637,
    "kind": "method",
    "name": "isShowConstraintsQuery",
    "memberof": "lib/dialects/abstract/query.js~AbstractQuery",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/abstract/query.js~AbstractQuery#isShowConstraintsQuery",
    "access": "public",
    "description": null,
    "lineNumber": 159,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 638,
    "kind": "method",
    "name": "isDescribeQuery",
    "memberof": "lib/dialects/abstract/query.js~AbstractQuery",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/abstract/query.js~AbstractQuery#isDescribeQuery",
    "access": "public",
    "description": null,
    "lineNumber": 162,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 639,
    "kind": "method",
    "name": "isSelectQuery",
    "memberof": "lib/dialects/abstract/query.js~AbstractQuery",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/abstract/query.js~AbstractQuery#isSelectQuery",
    "access": "public",
    "description": null,
    "lineNumber": 165,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 640,
    "kind": "method",
    "name": "isBulkUpdateQuery",
    "memberof": "lib/dialects/abstract/query.js~AbstractQuery",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/abstract/query.js~AbstractQuery#isBulkUpdateQuery",
    "access": "public",
    "description": null,
    "lineNumber": 168,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 641,
    "kind": "method",
    "name": "isBulkDeleteQuery",
    "memberof": "lib/dialects/abstract/query.js~AbstractQuery",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/abstract/query.js~AbstractQuery#isBulkDeleteQuery",
    "access": "public",
    "description": null,
    "lineNumber": 171,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 642,
    "kind": "method",
    "name": "isForeignKeysQuery",
    "memberof": "lib/dialects/abstract/query.js~AbstractQuery",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/abstract/query.js~AbstractQuery#isForeignKeysQuery",
    "access": "public",
    "description": null,
    "lineNumber": 174,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 643,
    "kind": "method",
    "name": "isUpdateQuery",
    "memberof": "lib/dialects/abstract/query.js~AbstractQuery",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/abstract/query.js~AbstractQuery#isUpdateQuery",
    "access": "public",
    "description": null,
    "lineNumber": 177,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 644,
    "kind": "method",
    "name": "handleSelectQuery",
    "memberof": "lib/dialects/abstract/query.js~AbstractQuery",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/abstract/query.js~AbstractQuery#handleSelectQuery",
    "access": "public",
    "description": null,
    "lineNumber": 180,
    "undocument": true,
    "params": [
      {
        "name": "results",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 645,
    "kind": "method",
    "name": "isShowOrDescribeQuery",
    "memberof": "lib/dialects/abstract/query.js~AbstractQuery",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/abstract/query.js~AbstractQuery#isShowOrDescribeQuery",
    "access": "public",
    "description": null,
    "lineNumber": 234,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 646,
    "kind": "method",
    "name": "isCallQuery",
    "memberof": "lib/dialects/abstract/query.js~AbstractQuery",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/abstract/query.js~AbstractQuery#isCallQuery",
    "access": "public",
    "description": null,
    "lineNumber": 240,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 647,
    "kind": "method",
    "name": "_logQuery",
    "memberof": "lib/dialects/abstract/query.js~AbstractQuery",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/abstract/query.js~AbstractQuery#_logQuery",
    "access": "private",
    "description": null,
    "lineNumber": 243,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "sql",
        "types": [
          "*"
        ]
      },
      {
        "name": "debugContext",
        "types": [
          "*"
        ]
      },
      {
        "name": "parameters",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 648,
    "kind": "method",
    "name": "_groupJoinData",
    "memberof": "lib/dialects/abstract/query.js~AbstractQuery",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/abstract/query.js~AbstractQuery._groupJoinData",
    "access": "private",
    "description": null,
    "lineNumber": 273,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "rows",
        "types": [
          "*"
        ]
      },
      {
        "name": "includeOptions",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 649,
    "kind": "file",
    "name": "lib/dialects/db2/connection-manager.js",
    "content": "\"use strict\";\nconst AbstractConnectionManager = require(\"../abstract/connection-manager\");\nconst sequelizeErrors = require(\"../../errors\");\nconst { logger } = require(\"../../utils/logger\");\nconst DataTypes = require(\"../../data-types\").db2;\nconst debug = logger.debugContext(\"connection:db2\");\nconst parserStore = require(\"../parserStore\")(\"db2\");\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 3306;\n    super(dialect, sequelize);\n    this.lib = this._loadDialectModule(\"ibm_db\");\n    this.refreshTypeParser(DataTypes);\n  }\n  static _typecast(field, next) {\n    if (parserStore.get(field.type)) {\n      return parserStore.get(field.type)(field, this.sequelize.options, next);\n    }\n    return next();\n  }\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n  async connect(config) {\n    const connectionConfig = {\n      database: config.database,\n      hostname: config.host,\n      port: config.port,\n      uid: config.username,\n      pwd: config.password\n    };\n    if (config.ssl) {\n      connectionConfig.security = config.ssl;\n    }\n    if (config.sslcertificate) {\n      connectionConfig.SSLServerCertificate = config.sslcertificate;\n    }\n    if (config.dialectOptions) {\n      for (const key of Object.keys(config.dialectOptions)) {\n        connectionConfig[key] = config.dialectOptions[key];\n      }\n    }\n    try {\n      return await new Promise((resolve, reject) => {\n        const connection = new this.lib.Database();\n        connection.lib = this.lib;\n        connection.open(connectionConfig, (error) => {\n          if (error) {\n            if (error.message && error.message.includes(\"SQL30081N\")) {\n              return reject(new sequelizeErrors.ConnectionRefusedError(error));\n            }\n            return reject(new sequelizeErrors.ConnectionError(error));\n          }\n          return resolve(connection);\n        });\n      });\n    } catch (error) {\n      throw new sequelizeErrors.ConnectionError(error);\n    }\n  }\n  disconnect(connection) {\n    if (connection.connected) {\n      connection.close((error) => {\n        if (error) {\n          debug(error);\n        } else {\n          debug(\"connection closed\");\n        }\n      });\n    }\n    return Promise.resolve();\n  }\n  validate(connection) {\n    return connection && connection.connected;\n  }\n  _disconnect(connection) {\n    return this.dialect.connectionManager.disconnect(connection);\n  }\n}\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n//# sourceMappingURL=connection-manager.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/dialects/db2/connection-manager.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 650,
    "kind": "variable",
    "name": "AbstractConnectionManager",
    "memberof": "lib/dialects/db2/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/db2/connection-manager.js~AbstractConnectionManager",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 651,
    "kind": "variable",
    "name": "sequelizeErrors",
    "memberof": "lib/dialects/db2/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/db2/connection-manager.js~sequelizeErrors",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 652,
    "kind": "variable",
    "name": "logger",
    "memberof": "lib/dialects/db2/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/db2/connection-manager.js~logger",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 653,
    "kind": "variable",
    "name": "DataTypes",
    "memberof": "lib/dialects/db2/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/db2/connection-manager.js~DataTypes",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 654,
    "kind": "variable",
    "name": "debug",
    "memberof": "lib/dialects/db2/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/db2/connection-manager.js~debug",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 655,
    "kind": "variable",
    "name": "parserStore",
    "memberof": "lib/dialects/db2/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/db2/connection-manager.js~parserStore",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 656,
    "kind": "class",
    "name": "ConnectionManager",
    "memberof": "lib/dialects/db2/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/db2/connection-manager.js~ConnectionManager",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false,
    "extends": [
      "AbstractConnectionManager"
    ],
    "ignore": true
  },
  {
    "__docId__": 657,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/dialects/db2/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/connection-manager.js~ConnectionManager#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 658,
    "kind": "member",
    "name": "lib",
    "memberof": "lib/dialects/db2/connection-manager.js~ConnectionManager",
    "static": false,
    "longname": "lib/dialects/db2/connection-manager.js~ConnectionManager#lib",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 659,
    "kind": "method",
    "name": "_typecast",
    "memberof": "lib/dialects/db2/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/db2/connection-manager.js~ConnectionManager._typecast",
    "access": "private",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "field",
        "types": [
          "*"
        ]
      },
      {
        "name": "next",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 660,
    "kind": "method",
    "name": "_refreshTypeParser",
    "memberof": "lib/dialects/db2/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/connection-manager.js~ConnectionManager#_refreshTypeParser",
    "access": "private",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "dataType",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 661,
    "kind": "method",
    "name": "_clearTypeParser",
    "memberof": "lib/dialects/db2/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/connection-manager.js~ConnectionManager#_clearTypeParser",
    "access": "private",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 662,
    "kind": "method",
    "name": "connect",
    "memberof": "lib/dialects/db2/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/db2/connection-manager.js~ConnectionManager#connect",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 663,
    "kind": "method",
    "name": "disconnect",
    "memberof": "lib/dialects/db2/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/connection-manager.js~ConnectionManager#disconnect",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "params": [
      {
        "name": "connection",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 664,
    "kind": "method",
    "name": "validate",
    "memberof": "lib/dialects/db2/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/connection-manager.js~ConnectionManager#validate",
    "access": "public",
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "params": [
      {
        "name": "connection",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 665,
    "kind": "method",
    "name": "_disconnect",
    "memberof": "lib/dialects/db2/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/connection-manager.js~ConnectionManager#_disconnect",
    "access": "private",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "connection",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 666,
    "kind": "file",
    "name": "lib/dialects/db2/data-types.js",
    "content": "\"use strict\";\nconst momentTz = require(\"moment-timezone\");\nconst moment = require(\"moment\");\nmodule.exports = (BaseTypes) => {\n  const warn = BaseTypes.ABSTRACT.warn.bind(void 0, \"https://www.ibm.com/support/knowledgecenter/SSEPGG_11.1.0/com.ibm.db2.luw.sql.ref.doc/doc/r0008478.html\");\n  function removeUnsupportedIntegerOptions(dataType) {\n    if (dataType._length || dataType.options.length > 0 || dataType._unsigned || dataType._zerofill) {\n      warn(`Db2 does not support '${dataType.key}' with options. Plain '${dataType.key}' will be used instead.`);\n      dataType._length = void 0;\n      dataType.options.length = void 0;\n      dataType._unsigned = void 0;\n      dataType._zerofill = void 0;\n    }\n  }\n  BaseTypes.DATE.types.db2 = [\"TIMESTAMP\"];\n  BaseTypes.STRING.types.db2 = [\"VARCHAR\"];\n  BaseTypes.CHAR.types.db2 = [\"CHAR\"];\n  BaseTypes.TEXT.types.db2 = [\"VARCHAR\", \"CLOB\"];\n  BaseTypes.TINYINT.types.db2 = [\"SMALLINT\"];\n  BaseTypes.SMALLINT.types.db2 = [\"SMALLINT\"];\n  BaseTypes.MEDIUMINT.types.db2 = [\"INTEGER\"];\n  BaseTypes.INTEGER.types.db2 = [\"INTEGER\"];\n  BaseTypes.BIGINT.types.db2 = [\"BIGINT\"];\n  BaseTypes.FLOAT.types.db2 = [\"DOUBLE\", \"REAL\", \"FLOAT\"];\n  BaseTypes.TIME.types.db2 = [\"TIME\"];\n  BaseTypes.DATEONLY.types.db2 = [\"DATE\"];\n  BaseTypes.BOOLEAN.types.db2 = [\"BOOLEAN\", \"BOOL\", \"SMALLINT\", \"BIT\"];\n  BaseTypes.BLOB.types.db2 = [\"BLOB\"];\n  BaseTypes.DECIMAL.types.db2 = [\"DECIMAL\"];\n  BaseTypes.UUID.types.db2 = [\"CHAR () FOR BIT DATA\"];\n  BaseTypes.ENUM.types.db2 = [\"VARCHAR\"];\n  BaseTypes.REAL.types.db2 = [\"REAL\"];\n  BaseTypes.DOUBLE.types.db2 = [\"DOUBLE\"];\n  BaseTypes.GEOMETRY.types.db2 = false;\n  class BLOB extends BaseTypes.BLOB {\n    toSql() {\n      if (this._length) {\n        if (this._length.toLowerCase() === \"tiny\") {\n          return \"BLOB(255)\";\n        }\n        if (this._length.toLowerCase() === \"medium\") {\n          return \"BLOB(16M)\";\n        }\n        if (this._length.toLowerCase() === \"long\") {\n          return \"BLOB(2G)\";\n        }\n        return `BLOB(${this._length})`;\n      }\n      return \"BLOB\";\n    }\n    escape(blob) {\n      return `BLOB('${blob.toString().replace(/'/g, \"''\")}')`;\n    }\n    _stringify(value) {\n      if (Buffer.isBuffer(value)) {\n        return `BLOB('${value.toString().replace(/'/g, \"''\")}')`;\n      }\n      if (Array.isArray(value)) {\n        value = Buffer.from(value);\n      } else {\n        value = Buffer.from(value.toString());\n      }\n      const hex = value.toString(\"hex\");\n      return this._hexify(hex);\n    }\n    _hexify(hex) {\n      return `x'${hex}'`;\n    }\n  }\n  class STRING extends BaseTypes.STRING {\n    toSql() {\n      if (!this._binary) {\n        if (this._length <= 4e3) {\n          return `VARCHAR(${this._length})`;\n        }\n        return `CLOB(${this._length})`;\n      }\n      if (this._length < 255) {\n        return `CHAR(${this._length}) FOR BIT DATA`;\n      }\n      if (this._length <= 4e3) {\n        return `VARCHAR(${this._length}) FOR BIT DATA`;\n      }\n      return `BLOB(${this._length})`;\n    }\n    _stringify(value, options) {\n      if (this._binary) {\n        return BLOB.prototype._hexify(value.toString(\"hex\"));\n      }\n      return options.escape(value);\n    }\n    _bindParam(value, options) {\n      return options.bindParam(this._binary ? Buffer.from(value) : value);\n    }\n  }\n  STRING.prototype.escape = false;\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      let len = 0;\n      if (this._length) {\n        switch (this._length.toLowerCase()) {\n          case \"tiny\":\n            len = 256;\n            break;\n          case \"medium\":\n            len = 8192;\n            break;\n          case \"long\":\n            len = 65536;\n            break;\n        }\n        if (isNaN(this._length)) {\n          this._length = 32672;\n        }\n        if (len > 0) {\n          this._length = len;\n        }\n      } else {\n        this._length = 32672;\n      }\n      if (this._length > 32672) {\n        len = `CLOB(${this._length})`;\n      } else {\n        len = `VARCHAR(${this._length})`;\n      }\n      warn(`Db2 does not support TEXT datatype. ${len} will be used instead.`);\n      return len;\n    }\n  }\n  class BOOLEAN extends BaseTypes.BOOLEAN {\n    toSql() {\n      return \"BOOLEAN\";\n    }\n    _sanitize(value) {\n      if (value !== null && value !== void 0) {\n        if (Buffer.isBuffer(value) && value.length === 1) {\n          value = value[0];\n        }\n        if (typeof value === \"string\") {\n          value = value === \"true\" ? true : value === \"false\" ? false : value;\n          value = value === \"\u0001\" ? true : value === \"\\0\" ? false : value;\n        } else if (typeof value === \"number\") {\n          value = value === 1 ? true : value === 0 ? false : value;\n        }\n      }\n      return value;\n    }\n  }\n  BOOLEAN.parse = BOOLEAN.prototype._sanitize;\n  class UUID extends BaseTypes.UUID {\n    toSql() {\n      return \"CHAR(36) FOR BIT DATA\";\n    }\n  }\n  class NOW extends BaseTypes.NOW {\n    toSql() {\n      return \"CURRENT TIME\";\n    }\n  }\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      if (this._length < 0) {\n        this._length = 0;\n      }\n      if (this._length > 6) {\n        this._length = 6;\n      }\n      return `TIMESTAMP${this._length ? `(${this._length})` : \"\"}`;\n    }\n    _stringify(date, options) {\n      if (!moment.isMoment(date)) {\n        date = this._applyTimezone(date, options);\n      }\n      if (this._length > 0) {\n        let msec = \".\";\n        for (let i = 0; i < this._length && i < 6; i++) {\n          msec += \"S\";\n        }\n        return date.format(`YYYY-MM-DD HH:mm:ss${msec}`);\n      }\n      return date.format(\"YYYY-MM-DD HH:mm:ss\");\n    }\n    static parse(value) {\n      if (typeof value !== \"string\") {\n        value = value.string();\n      }\n      if (value === null) {\n        return value;\n      }\n      value = new Date(momentTz.utc(value));\n      return value;\n    }\n  }\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(value) {\n      return momentTz(value).format(\"YYYY-MM-DD\");\n    }\n  }\n  class INTEGER extends BaseTypes.INTEGER {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class TINYINT extends BaseTypes.TINYINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class SMALLINT extends BaseTypes.SMALLINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class BIGINT extends BaseTypes.BIGINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class REAL extends BaseTypes.REAL {\n    constructor(length, decimals) {\n      super(length, decimals);\n      if (this._length || this.options.length > 0 || this._unsigned || this._zerofill) {\n        warn(\"Db2 does not support REAL with options. Plain `REAL` will be used instead.\");\n        this._length = void 0;\n        this.options.length = void 0;\n        this._unsigned = void 0;\n        this._zerofill = void 0;\n      }\n    }\n  }\n  class FLOAT extends BaseTypes.FLOAT {\n    constructor(length, decimals) {\n      super(length, decimals);\n      if (this._decimals) {\n        warn(\"Db2 does not support Float with decimals. Plain `FLOAT` will be used instead.\");\n        this._length = void 0;\n        this.options.length = void 0;\n      }\n      if (this._unsigned) {\n        warn(\"Db2 does not support Float unsigned. `UNSIGNED` was removed.\");\n        this._unsigned = void 0;\n      }\n      if (this._zerofill) {\n        warn(\"Db2 does not support Float zerofill. `ZEROFILL` was removed.\");\n        this._zerofill = void 0;\n      }\n    }\n  }\n  class ENUM extends BaseTypes.ENUM {\n    toSql() {\n      return \"VARCHAR(255)\";\n    }\n  }\n  class DOUBLE extends BaseTypes.DOUBLE {\n    constructor(length, decimals) {\n      super(length, decimals);\n      if (this._length || this.options.length > 0 || this._unsigned || this._zerofill) {\n        warn(\"db2 does not support DOUBLE with options. Plain DOUBLE will be used instead.\");\n        this._length = void 0;\n        this.options.length = void 0;\n        this._unsigned = void 0;\n        this._zerofill = void 0;\n      }\n    }\n    toSql() {\n      return \"DOUBLE\";\n    }\n  }\n  DOUBLE.prototype.key = DOUBLE.key = \"DOUBLE\";\n  return {\n    BLOB,\n    BOOLEAN,\n    ENUM,\n    STRING,\n    UUID,\n    DATE,\n    DATEONLY,\n    NOW,\n    TINYINT,\n    SMALLINT,\n    INTEGER,\n    DOUBLE,\n    \"DOUBLE PRECISION\": DOUBLE,\n    BIGINT,\n    REAL,\n    FLOAT,\n    TEXT\n  };\n};\n//# sourceMappingURL=data-types.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/dialects/db2/data-types.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 667,
    "kind": "variable",
    "name": "momentTz",
    "memberof": "lib/dialects/db2/data-types.js",
    "static": true,
    "longname": "lib/dialects/db2/data-types.js~momentTz",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 668,
    "kind": "variable",
    "name": "moment",
    "memberof": "lib/dialects/db2/data-types.js",
    "static": true,
    "longname": "lib/dialects/db2/data-types.js~moment",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 669,
    "kind": "file",
    "name": "lib/dialects/db2/index.js",
    "content": "\"use strict\";\nconst _ = require(\"lodash\");\nconst { AbstractDialect } = require(\"../abstract\");\nconst ConnectionManager = require(\"./connection-manager\");\nconst Query = require(\"./query\");\nconst QueryGenerator = require(\"./query-generator\");\nconst DataTypes = require(\"../../data-types\").db2;\nconst { Db2QueryInterface } = require(\"./query-interface\");\nclass Db2Dialect extends AbstractDialect {\n  static supports = _.merge(_.cloneDeep(AbstractDialect.supports), {\n    migrations: false,\n    schemas: true,\n    finalTable: true,\n    autoIncrement: {\n      defaultValue: false\n    },\n    index: {\n      collate: false,\n      using: false,\n      where: true\n    },\n    NUMERIC: true,\n    tmpTableTrigger: true\n  });\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new Db2QueryInterface(sequelize, this.queryGenerator);\n  }\n}\nDb2Dialect.prototype.defaultVersion = \"1.0.0\";\nDb2Dialect.prototype.Query = Query;\nDb2Dialect.prototype.name = \"db2\";\nDb2Dialect.prototype.TICK_CHAR = '\"';\nDb2Dialect.prototype.TICK_CHAR_LEFT = '\"';\nDb2Dialect.prototype.TICK_CHAR_RIGHT = '\"';\nDb2Dialect.prototype.DataTypes = DataTypes;\nmodule.exports = Db2Dialect;\n//# sourceMappingURL=index.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/dialects/db2/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 670,
    "kind": "variable",
    "name": "_",
    "memberof": "lib/dialects/db2/index.js",
    "static": true,
    "longname": "lib/dialects/db2/index.js~_",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 671,
    "kind": "variable",
    "name": "AbstractDialect",
    "memberof": "lib/dialects/db2/index.js",
    "static": true,
    "longname": "lib/dialects/db2/index.js~AbstractDialect",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 672,
    "kind": "variable",
    "name": "ConnectionManager",
    "memberof": "lib/dialects/db2/index.js",
    "static": true,
    "longname": "lib/dialects/db2/index.js~ConnectionManager",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 673,
    "kind": "variable",
    "name": "Query",
    "memberof": "lib/dialects/db2/index.js",
    "static": true,
    "longname": "lib/dialects/db2/index.js~Query",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 674,
    "kind": "variable",
    "name": "QueryGenerator",
    "memberof": "lib/dialects/db2/index.js",
    "static": true,
    "longname": "lib/dialects/db2/index.js~QueryGenerator",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 675,
    "kind": "variable",
    "name": "DataTypes",
    "memberof": "lib/dialects/db2/index.js",
    "static": true,
    "longname": "lib/dialects/db2/index.js~DataTypes",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 676,
    "kind": "variable",
    "name": "Db2QueryInterface",
    "memberof": "lib/dialects/db2/index.js",
    "static": true,
    "longname": "lib/dialects/db2/index.js~Db2QueryInterface",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 677,
    "kind": "class",
    "name": "Db2Dialect",
    "memberof": "lib/dialects/db2/index.js",
    "static": true,
    "longname": "lib/dialects/db2/index.js~Db2Dialect",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false,
    "extends": [
      "AbstractDialect"
    ],
    "ignore": true
  },
  {
    "__docId__": 678,
    "kind": "member",
    "name": "supports",
    "memberof": "lib/dialects/db2/index.js~Db2Dialect",
    "static": true,
    "longname": "lib/dialects/db2/index.js~Db2Dialect.supports",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 679,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/dialects/db2/index.js~Db2Dialect",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/index.js~Db2Dialect#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 680,
    "kind": "member",
    "name": "sequelize",
    "memberof": "lib/dialects/db2/index.js~Db2Dialect",
    "static": false,
    "longname": "lib/dialects/db2/index.js~Db2Dialect#sequelize",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 681,
    "kind": "member",
    "name": "connectionManager",
    "memberof": "lib/dialects/db2/index.js~Db2Dialect",
    "static": false,
    "longname": "lib/dialects/db2/index.js~Db2Dialect#connectionManager",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 682,
    "kind": "member",
    "name": "queryGenerator",
    "memberof": "lib/dialects/db2/index.js~Db2Dialect",
    "static": false,
    "longname": "lib/dialects/db2/index.js~Db2Dialect#queryGenerator",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 683,
    "kind": "member",
    "name": "queryInterface",
    "memberof": "lib/dialects/db2/index.js~Db2Dialect",
    "static": false,
    "longname": "lib/dialects/db2/index.js~Db2Dialect#queryInterface",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 684,
    "kind": "file",
    "name": "lib/dialects/db2/query-generator.js",
    "content": "\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nconst _ = require(\"lodash\");\nconst Utils = require(\"../../utils\");\nconst DataTypes = require(\"../../data-types\");\nconst AbstractQueryGenerator = require(\"../abstract/query-generator\");\nconst randomBytes = require(\"crypto\").randomBytes;\nconst { Op } = require(\"../../operators\");\nfunction throwMethodUndefined(methodName) {\n  throw new Error(`The method \"${methodName}\" is not defined! Please add it to your sql dialect.`);\n}\nclass Db2QueryGenerator extends AbstractQueryGenerator {\n  constructor(options) {\n    super(options);\n    this.OperatorMap = __spreadProps(__spreadValues({}, this.OperatorMap), {\n      [Op.regexp]: \"REGEXP_LIKE\",\n      [Op.notRegexp]: \"NOT REGEXP_LIKE\"\n    });\n    this.autoGenValue = 1;\n  }\n  createSchema(schema) {\n    return [\n      \"CREATE SCHEMA\",\n      this.quoteIdentifier(schema),\n      \";\"\n    ].join(\" \");\n  }\n  dropSchema(schema) {\n    const query = `CALL SYSPROC.ADMIN_DROP_SCHEMA(${wrapSingleQuote(schema.trim())}, NULL, ? , ?)`;\n    const sql = { query };\n    sql.bind = [\n      { ParamType: \"INOUT\", Data: \"ERRORSCHEMA\" },\n      { ParamType: \"INOUT\", Data: \"ERRORTABLE\" }\n    ];\n    return sql;\n  }\n  showSchemasQuery() {\n    return `SELECT SCHEMANAME AS \"schema_name\" FROM SYSCAT.SCHEMATA WHERE (SCHEMANAME NOT LIKE 'SYS%') AND SCHEMANAME NOT IN ('NULLID', 'SQLJ', 'ERRORSCHEMA')`;\n  }\n  versionQuery() {\n    return \"select service_level as VERSION from TABLE (sysproc.env_get_inst_info()) as A\";\n  }\n  createTableQuery(tableName, attributes, options) {\n    const query = \"CREATE TABLE <%= table %> (<%= attributes %>)\";\n    const primaryKeys = [];\n    const foreignKeys = {};\n    const attrStr = [];\n    const commentTemplate = \" -- <%= comment %>, TableName = <%= table %>, ColumnName = <%= column %>;\";\n    let commentStr = \"\";\n    for (const attr in attributes) {\n      if (Object.prototype.hasOwnProperty.call(attributes, attr)) {\n        let dataType = attributes[attr];\n        let match;\n        if (dataType.includes(\"COMMENT \")) {\n          const commentMatch = dataType.match(/^(.+) (COMMENT.*)$/);\n          if (commentMatch && commentMatch.length > 2) {\n            const commentText = commentMatch[2].replace(/COMMENT/, \"\").trim();\n            commentStr += _.template(commentTemplate, this._templateSettings)({\n              table: this.quoteIdentifier(tableName),\n              comment: this.escape(commentText),\n              column: this.quoteIdentifier(attr)\n            });\n            dataType = commentMatch[1];\n          }\n        }\n        if (_.includes(dataType, \"PRIMARY KEY\")) {\n          primaryKeys.push(attr);\n          if (_.includes(dataType, \"REFERENCES\")) {\n            match = dataType.match(/^(.+) (REFERENCES.*)$/);\n            attrStr.push(`${this.quoteIdentifier(attr)} ${match[1].replace(/PRIMARY KEY/, \"\")}`);\n            foreignKeys[attr] = match[2];\n          } else {\n            attrStr.push(`${this.quoteIdentifier(attr)} ${dataType.replace(/PRIMARY KEY/, \"\")}`);\n          }\n        } else if (_.includes(dataType, \"REFERENCES\")) {\n          match = dataType.match(/^(.+) (REFERENCES.*)$/);\n          attrStr.push(`${this.quoteIdentifier(attr)} ${match[1]}`);\n          foreignKeys[attr] = match[2];\n        } else {\n          if (options && options.uniqueKeys) {\n            for (const ukey in options.uniqueKeys) {\n              if (options.uniqueKeys[ukey].fields.includes(attr) && !_.includes(dataType, \"NOT NULL\")) {\n                dataType += \" NOT NULL\";\n                break;\n              }\n            }\n          }\n          attrStr.push(`${this.quoteIdentifier(attr)} ${dataType}`);\n        }\n      }\n    }\n    const values = {\n      table: this.quoteTable(tableName),\n      attributes: attrStr.join(\", \")\n    };\n    const pkString = primaryKeys.map((pk) => {\n      return this.quoteIdentifier(pk);\n    }).join(\", \");\n    if (options && options.uniqueKeys) {\n      _.each(options.uniqueKeys, (columns, indexName) => {\n        if (columns.customIndex) {\n          if (!_.isString(indexName)) {\n            indexName = `uniq_${tableName}_${columns.fields.join(\"_\")}`;\n          }\n          values.attributes += `, CONSTRAINT ${this.quoteIdentifier(indexName)} UNIQUE (${columns.fields.map((field) => this.quoteIdentifier(field)).join(\", \")})`;\n        }\n      });\n    }\n    if (pkString.length > 0) {\n      values.attributes += `, PRIMARY KEY (${pkString})`;\n    }\n    for (const fkey in foreignKeys) {\n      if (Object.prototype.hasOwnProperty.call(foreignKeys, fkey)) {\n        values.attributes += `, FOREIGN KEY (${this.quoteIdentifier(fkey)}) ${foreignKeys[fkey]}`;\n      }\n    }\n    return `${_.template(query, this._templateSettings)(values).trim()};${commentStr}`;\n  }\n  describeTableQuery(tableName, schema) {\n    let sql = [\n      'SELECT NAME AS \"Name\", TBNAME AS \"Table\", TBCREATOR AS \"Schema\",',\n      'TRIM(COLTYPE) AS \"Type\", LENGTH AS \"Length\", SCALE AS \"Scale\",',\n      'NULLS AS \"IsNull\", DEFAULT AS \"Default\", COLNO AS \"Colno\",',\n      'IDENTITY AS \"IsIdentity\", KEYSEQ AS \"KeySeq\", REMARKS AS \"Comment\"',\n      \"FROM\",\n      \"SYSIBM.SYSCOLUMNS\",\n      \"WHERE TBNAME =\",\n      wrapSingleQuote(tableName)\n    ].join(\" \");\n    if (schema) {\n      sql += ` AND TBCREATOR =${wrapSingleQuote(schema)}`;\n    } else {\n      sql += \" AND TBCREATOR = USER\";\n    }\n    return `${sql};`;\n  }\n  renameTableQuery(before, after) {\n    const query = \"RENAME TABLE <%= before %> TO <%= after %>;\";\n    return _.template(query, this._templateSettings)({\n      before: this.quoteTable(before),\n      after: this.quoteTable(after)\n    });\n  }\n  showTablesQuery() {\n    return `SELECT TABNAME AS \"tableName\", TRIM(TABSCHEMA) AS \"tableSchema\" FROM SYSCAT.TABLES WHERE TABSCHEMA = USER AND TYPE = 'T' ORDER BY TABSCHEMA, TABNAME`;\n  }\n  dropTableQuery(tableName) {\n    const query = \"DROP TABLE <%= table %>\";\n    const values = {\n      table: this.quoteTable(tableName)\n    };\n    return `${_.template(query, this._templateSettings)(values).trim()};`;\n  }\n  addColumnQuery(table, key, dataType) {\n    dataType.field = key;\n    const query = \"ALTER TABLE <%= table %> ADD <%= attribute %>;\";\n    const attribute = _.template(\"<%= key %> <%= definition %>\", this._templateSettings)({\n      key: this.quoteIdentifier(key),\n      definition: this.attributeToSQL(dataType, {\n        context: \"addColumn\"\n      })\n    });\n    return _.template(query, this._templateSettings)({\n      table: this.quoteTable(table),\n      attribute\n    });\n  }\n  removeColumnQuery(tableName, attributeName) {\n    const query = \"ALTER TABLE <%= tableName %> DROP COLUMN <%= attributeName %>;\";\n    return _.template(query, this._templateSettings)({\n      tableName: this.quoteTable(tableName),\n      attributeName: this.quoteIdentifier(attributeName)\n    });\n  }\n  changeColumnQuery(tableName, attributes) {\n    const query = \"ALTER TABLE <%= tableName %> <%= query %>;\";\n    const attrString = [];\n    const constraintString = [];\n    for (const attributeName in attributes) {\n      const attrValue = attributes[attributeName];\n      let defs = [attrValue];\n      if (Array.isArray(attrValue)) {\n        defs = attrValue;\n      }\n      for (const definition of defs) {\n        if (/REFERENCES/.test(definition)) {\n          constraintString.push(_.template(\"<%= fkName %> FOREIGN KEY (<%= attrName %>) <%= definition %>\", this._templateSettings)({\n            fkName: this.quoteIdentifier(`${attributeName}_foreign_idx`),\n            attrName: this.quoteIdentifier(attributeName),\n            definition: definition.replace(/.+?(?=REFERENCES)/, \"\")\n          }));\n        } else if (_.startsWith(definition, \"DROP \")) {\n          attrString.push(_.template(\"<%= attrName %> <%= definition %>\", this._templateSettings)({\n            attrName: this.quoteIdentifier(attributeName),\n            definition\n          }));\n        } else {\n          attrString.push(_.template(\"<%= attrName %> SET <%= definition %>\", this._templateSettings)({\n            attrName: this.quoteIdentifier(attributeName),\n            definition\n          }));\n        }\n      }\n    }\n    let finalQuery = \"\";\n    if (attrString.length > 0) {\n      finalQuery += `ALTER COLUMN ${attrString.join(\" ALTER COLUMN \")}`;\n      finalQuery += constraintString.length > 0 ? \" \" : \"\";\n    }\n    if (constraintString.length > 0) {\n      finalQuery += `ADD CONSTRAINT ${constraintString.join(\" ADD CONSTRAINT \")}`;\n    }\n    return _.template(query, this._templateSettings)({\n      tableName: this.quoteTable(tableName),\n      query: finalQuery\n    });\n  }\n  renameColumnQuery(tableName, attrBefore, attributes) {\n    const query = \"ALTER TABLE <%= tableName %> RENAME COLUMN <%= before %> TO <%= after %>;\";\n    const newName = Object.keys(attributes)[0];\n    return _.template(query, this._templateSettings)({\n      tableName: this.quoteTable(tableName),\n      before: this.quoteIdentifier(attrBefore),\n      after: this.quoteIdentifier(newName)\n    });\n  }\n  addConstraintQuery(tableName, options) {\n    options = options || {};\n    if (options.onUpdate && options.onUpdate.toUpperCase() === \"CASCADE\") {\n      delete options.onUpdate;\n    }\n    const constraintSnippet = this.getConstraintSnippet(tableName, options);\n    if (typeof tableName === \"string\") {\n      tableName = this.quoteIdentifiers(tableName);\n    } else {\n      tableName = this.quoteTable(tableName);\n    }\n    return `ALTER TABLE ${tableName} ADD ${constraintSnippet};`;\n  }\n  bulkInsertQuery(tableName, attrValueHashes, options, attributes) {\n    options = options || {};\n    attributes = attributes || {};\n    let query = \"INSERT INTO <%= table %> (<%= attributes %>)<%= output %> VALUES <%= tuples %>;\";\n    if (options.returning) {\n      query = \"SELECT * FROM FINAL TABLE( INSERT INTO <%= table %> (<%= attributes %>)<%= output %> VALUES <%= tuples %>);\";\n    }\n    const emptyQuery = \"INSERT INTO <%= table %>\";\n    const tuples = [];\n    const allAttributes = [];\n    const allQueries = [];\n    let outputFragment;\n    const valuesForEmptyQuery = [];\n    if (options.returning) {\n      outputFragment = \"\";\n    }\n    _.forEach(attrValueHashes, (attrValueHash) => {\n      const fields = Object.keys(attrValueHash);\n      const firstAttr = attributes[fields[0]];\n      if (fields.length === 1 && firstAttr && firstAttr.autoIncrement && attrValueHash[fields[0]] === null) {\n        valuesForEmptyQuery.push(`(${this.autoGenValue++})`);\n        return;\n      }\n      _.forOwn(attrValueHash, (value, key) => {\n        if (!allAttributes.includes(key)) {\n          if (value === null && attributes[key] && attributes[key].autoIncrement) {\n            return;\n          }\n          allAttributes.push(key);\n        }\n      });\n    });\n    if (valuesForEmptyQuery.length > 0) {\n      allQueries.push(`${emptyQuery} VALUES ${valuesForEmptyQuery.join(\",\")}`);\n    }\n    if (allAttributes.length > 0) {\n      _.forEach(attrValueHashes, (attrValueHash) => {\n        tuples.push(`(${allAttributes.map((key) => this.escape(attrValueHash[key]), void 0, { context: \"INSERT\" }).join(\",\")})`);\n      });\n      allQueries.push(query);\n    }\n    const replacements = {\n      table: this.quoteTable(tableName),\n      attributes: allAttributes.map((attr) => this.quoteIdentifier(attr)).join(\",\"),\n      tuples,\n      output: outputFragment\n    };\n    const generatedQuery = _.template(allQueries.join(\";\"), this._templateSettings)(replacements);\n    return generatedQuery;\n  }\n  updateQuery(tableName, attrValueHash, where, options, attributes) {\n    const sql = super.updateQuery(tableName, attrValueHash, where, options, attributes);\n    options = options || {};\n    _.defaults(options, this.options);\n    if (!options.limit) {\n      sql.query = `SELECT * FROM FINAL TABLE (${sql.query});`;\n      return sql;\n    }\n    attrValueHash = Utils.removeNullValuesFromHash(attrValueHash, options.omitNull, options);\n    const modelAttributeMap = {};\n    const values = [];\n    const bind = [];\n    const bindParam = options.bindParam || this.bindParam(bind);\n    if (attributes) {\n      _.each(attributes, (attribute, key) => {\n        modelAttributeMap[key] = attribute;\n        if (attribute.field) {\n          modelAttributeMap[attribute.field] = attribute;\n        }\n      });\n    }\n    for (const key in attrValueHash) {\n      const value = attrValueHash[key];\n      if (value instanceof Utils.SequelizeMethod || options.bindParam === false) {\n        values.push(`${this.quoteIdentifier(key)}=${this.escape(value, modelAttributeMap && modelAttributeMap[key] || void 0, { context: \"UPDATE\" })}`);\n      } else {\n        values.push(`${this.quoteIdentifier(key)}=${this.format(value, modelAttributeMap && modelAttributeMap[key] || void 0, { context: \"UPDATE\" }, bindParam)}`);\n      }\n    }\n    let query;\n    const whereOptions = _.defaults({ bindParam }, options);\n    query = `UPDATE (SELECT * FROM ${this.quoteTable(tableName)} ${this.whereQuery(where, whereOptions)} FETCH NEXT ${this.escape(options.limit)} ROWS ONLY) SET ${values.join(\",\")}`;\n    query = `SELECT * FROM FINAL TABLE (${query});`;\n    return { query, bind };\n  }\n  upsertQuery(tableName, insertValues, updateValues, where, model) {\n    const targetTableAlias = this.quoteTable(`${tableName}_target`);\n    const sourceTableAlias = this.quoteTable(`${tableName}_source`);\n    const primaryKeysAttrs = [];\n    const identityAttrs = [];\n    const uniqueAttrs = [];\n    const tableNameQuoted = this.quoteTable(tableName);\n    for (const key in model.rawAttributes) {\n      if (model.rawAttributes[key].primaryKey) {\n        primaryKeysAttrs.push(model.rawAttributes[key].field || key);\n      }\n      if (model.rawAttributes[key].unique) {\n        uniqueAttrs.push(model.rawAttributes[key].field || key);\n      }\n      if (model.rawAttributes[key].autoIncrement) {\n        identityAttrs.push(model.rawAttributes[key].field || key);\n      }\n    }\n    for (const index of model._indexes) {\n      if (index.unique && index.fields) {\n        for (const field of index.fields) {\n          const fieldName = typeof field === \"string\" ? field : field.name || field.attribute;\n          if (!uniqueAttrs.includes(fieldName) && model.rawAttributes[fieldName]) {\n            uniqueAttrs.push(fieldName);\n          }\n        }\n      }\n    }\n    const updateKeys = Object.keys(updateValues);\n    const insertKeys = Object.keys(insertValues);\n    const insertKeysQuoted = insertKeys.map((key) => this.quoteIdentifier(key)).join(\", \");\n    const insertValuesEscaped = insertKeys.map((key) => this.escape(insertValues[key])).join(\", \");\n    const sourceTableQuery = `VALUES(${insertValuesEscaped})`;\n    let joinCondition;\n    const clauses = where[Op.or].filter((clause) => {\n      let valid = true;\n      for (const key in clause) {\n        if (!clause[key]) {\n          valid = false;\n          break;\n        }\n      }\n      return valid;\n    });\n    const getJoinSnippet = (array) => {\n      return array.map((key) => {\n        key = this.quoteIdentifier(key);\n        return `${targetTableAlias}.${key} = ${sourceTableAlias}.${key}`;\n      });\n    };\n    if (clauses.length === 0) {\n      throw new Error(\"Primary Key or Unique key should be passed to upsert query\");\n    } else {\n      for (const key in clauses) {\n        const keys = Object.keys(clauses[key]);\n        if (primaryKeysAttrs.includes(keys[0])) {\n          joinCondition = getJoinSnippet(primaryKeysAttrs).join(\" AND \");\n          break;\n        }\n      }\n      if (!joinCondition) {\n        joinCondition = getJoinSnippet(uniqueAttrs).join(\" AND \");\n      }\n    }\n    const filteredUpdateClauses = updateKeys.filter((key) => {\n      if (!identityAttrs.includes(key)) {\n        return true;\n      }\n      return false;\n    }).map((key) => {\n      const value = this.escape(updateValues[key]);\n      key = this.quoteIdentifier(key);\n      return `${targetTableAlias}.${key} = ${value}`;\n    }).join(\", \");\n    const updateSnippet = filteredUpdateClauses.length > 0 ? `WHEN MATCHED THEN UPDATE SET ${filteredUpdateClauses}` : \"\";\n    const insertSnippet = `(${insertKeysQuoted}) VALUES(${insertValuesEscaped})`;\n    let query = `MERGE INTO ${tableNameQuoted} AS ${targetTableAlias} USING (${sourceTableQuery}) AS ${sourceTableAlias}(${insertKeysQuoted}) ON ${joinCondition}`;\n    query += ` ${updateSnippet} WHEN NOT MATCHED THEN INSERT ${insertSnippet};`;\n    return query;\n  }\n  truncateTableQuery(tableName) {\n    return `TRUNCATE TABLE ${this.quoteTable(tableName)} IMMEDIATE`;\n  }\n  deleteQuery(tableName, where, options = {}, model) {\n    const table = this.quoteTable(tableName);\n    const query = \"DELETE FROM <%= table %><%= where %><%= limit %>\";\n    where = this.getWhereConditions(where, null, model, options);\n    let limit = \"\";\n    if (options.offset > 0) {\n      limit = ` OFFSET ${this.escape(options.offset)} ROWS`;\n    }\n    if (options.limit) {\n      limit += ` FETCH NEXT ${this.escape(options.limit)} ROWS ONLY`;\n    }\n    const replacements = {\n      limit,\n      table,\n      where\n    };\n    if (replacements.where) {\n      replacements.where = ` WHERE ${replacements.where}`;\n    }\n    return _.template(query, this._templateSettings)(replacements);\n  }\n  showIndexesQuery(tableName) {\n    let sql = 'SELECT NAME AS \"name\", TBNAME AS \"tableName\", UNIQUERULE AS \"keyType\", COLNAMES, INDEXTYPE AS \"type\" FROM SYSIBM.SYSINDEXES WHERE TBNAME = <%= tableName %>';\n    let schema;\n    if (_.isObject(tableName)) {\n      schema = tableName.schema;\n      tableName = tableName.tableName;\n    }\n    if (schema) {\n      sql = `${sql} AND TBCREATOR = <%= schemaName %>`;\n    }\n    sql = `${sql} ORDER BY NAME;`;\n    return _.template(sql, this._templateSettings)({\n      tableName: wrapSingleQuote(tableName),\n      schemaName: wrapSingleQuote(schema)\n    });\n  }\n  showConstraintsQuery(tableName, constraintName) {\n    let sql = `SELECT CONSTNAME AS \"constraintName\", TRIM(TABSCHEMA) AS \"schemaName\", TABNAME AS \"tableName\" FROM SYSCAT.TABCONST WHERE TABNAME = '${tableName}'`;\n    if (constraintName) {\n      sql += ` AND CONSTNAME LIKE '%${constraintName}%'`;\n    }\n    return `${sql} ORDER BY CONSTNAME;`;\n  }\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    const sql = \"DROP INDEX <%= indexName %>\";\n    let indexName = indexNameOrAttributes;\n    if (typeof indexName !== \"string\") {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join(\"_\")}`);\n    }\n    const values = {\n      tableName: this.quoteIdentifiers(tableName),\n      indexName: this.quoteIdentifiers(indexName)\n    };\n    return _.template(sql, this._templateSettings)(values);\n  }\n  attributeToSQL(attribute, options) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    }\n    let template;\n    let changeNull = 1;\n    if (attribute.type instanceof DataTypes.ENUM) {\n      if (attribute.type.values && !attribute.values) {\n        attribute.values = attribute.type.values;\n      }\n      template = attribute.type.toSql();\n      template += ` CHECK (${this.quoteIdentifier(attribute.field)} IN(${attribute.values.map((value) => {\n        return this.escape(value);\n      }).join(\", \")}))`;\n    } else {\n      template = attribute.type.toString();\n    }\n    if (options && options.context === \"changeColumn\" && attribute.type) {\n      template = `DATA TYPE ${template}`;\n    } else if (attribute.allowNull === false || attribute.primaryKey === true || attribute.unique) {\n      template += \" NOT NULL\";\n      changeNull = 0;\n    }\n    if (attribute.autoIncrement) {\n      let initialValue = 1;\n      if (attribute.initialAutoIncrement) {\n        initialValue = attribute.initialAutoIncrement;\n      }\n      template += ` GENERATED BY DEFAULT AS IDENTITY(START WITH ${initialValue}, INCREMENT BY 1)`;\n    }\n    if (attribute.type !== \"TEXT\" && attribute.type._binary !== true && Utils.defaultValueSchemable(attribute.defaultValue)) {\n      template += ` DEFAULT ${this.escape(attribute.defaultValue)}`;\n    }\n    if (attribute.unique === true) {\n      template += \" UNIQUE\";\n    }\n    if (attribute.primaryKey) {\n      template += \" PRIMARY KEY\";\n    }\n    if (attribute.references) {\n      if (options && options.context === \"addColumn\" && options.foreignKey) {\n        const attrName = this.quoteIdentifier(options.foreignKey);\n        const fkName = `${options.tableName}_${attrName}_fidx`;\n        template += `, CONSTRAINT ${fkName} FOREIGN KEY (${attrName})`;\n      }\n      template += ` REFERENCES ${this.quoteTable(attribute.references.model)}`;\n      if (attribute.references.key) {\n        template += ` (${this.quoteIdentifier(attribute.references.key)})`;\n      } else {\n        template += ` (${this.quoteIdentifier(\"id\")})`;\n      }\n      if (attribute.onDelete) {\n        template += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;\n      }\n      if (attribute.onUpdate && attribute.onUpdate.toUpperCase() !== \"CASCADE\") {\n        template += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;\n      }\n    }\n    if (options && options.context === \"changeColumn\" && changeNull === 1 && attribute.allowNull !== void 0) {\n      template = [template];\n      if (attribute.allowNull) {\n        template.push(\"DROP NOT NULL\");\n      } else {\n        template.push(\"NOT NULL\");\n      }\n    }\n    if (attribute.comment && typeof attribute.comment === \"string\") {\n      template += ` COMMENT ${attribute.comment}`;\n    }\n    return template;\n  }\n  attributesToSQL(attributes, options) {\n    const result = {};\n    const existingConstraints = [];\n    let key;\n    let attribute;\n    for (key in attributes) {\n      attribute = attributes[key];\n      if (attribute.references) {\n        if (existingConstraints.includes(attribute.references.model.toString())) {\n          attribute.onDelete = \"\";\n          attribute.onUpdate = \"\";\n        } else if (attribute.unique && attribute.unique === true) {\n          attribute.onDelete = \"\";\n          attribute.onUpdate = \"\";\n        } else {\n          existingConstraints.push(attribute.references.model.toString());\n        }\n      }\n      if (key && !attribute.field && typeof attribute === \"object\") {\n        attribute.field = key;\n      }\n      result[attribute.field || key] = this.attributeToSQL(attribute, options);\n    }\n    return result;\n  }\n  createTrigger() {\n    throwMethodUndefined(\"createTrigger\");\n  }\n  dropTrigger() {\n    throwMethodUndefined(\"dropTrigger\");\n  }\n  renameTrigger() {\n    throwMethodUndefined(\"renameTrigger\");\n  }\n  createFunction() {\n    throwMethodUndefined(\"createFunction\");\n  }\n  dropFunction() {\n    throwMethodUndefined(\"dropFunction\");\n  }\n  renameFunction() {\n    throwMethodUndefined(\"renameFunction\");\n  }\n  _getForeignKeysQuerySQL(condition) {\n    return `SELECT R.CONSTNAME AS \"constraintName\", TRIM(R.TABSCHEMA) AS \"constraintSchema\", R.TABNAME AS \"tableName\", TRIM(R.TABSCHEMA) AS \"tableSchema\", LISTAGG(C.COLNAME,', ') WITHIN GROUP (ORDER BY C.COLNAME) AS \"columnName\", TRIM(R.REFTABSCHEMA) AS \"referencedTableSchema\", R.REFTABNAME AS \"referencedTableName\", TRIM(R.PK_COLNAMES) AS \"referencedColumnName\" FROM SYSCAT.REFERENCES R, SYSCAT.KEYCOLUSE C WHERE R.CONSTNAME = C.CONSTNAME AND R.TABSCHEMA = C.TABSCHEMA AND R.TABNAME = C.TABNAME${condition} GROUP BY R.REFTABSCHEMA, R.REFTABNAME, R.TABSCHEMA, R.TABNAME, R.CONSTNAME, R.PK_COLNAMES`;\n  }\n  getForeignKeysQuery(table, schemaName) {\n    const tableName = table.tableName || table;\n    schemaName = table.schema || schemaName;\n    let sql = \"\";\n    if (tableName) {\n      sql = ` AND R.TABNAME = ${wrapSingleQuote(tableName)}`;\n    }\n    if (schemaName) {\n      sql += ` AND R.TABSCHEMA = ${wrapSingleQuote(schemaName)}`;\n    }\n    return this._getForeignKeysQuerySQL(sql);\n  }\n  getForeignKeyQuery(table, columnName) {\n    const tableName = table.tableName || table;\n    const schemaName = table.schema;\n    let sql = \"\";\n    if (tableName) {\n      sql = ` AND R.TABNAME = ${wrapSingleQuote(tableName)}`;\n    }\n    if (schemaName) {\n      sql += ` AND R.TABSCHEMA = ${wrapSingleQuote(schemaName)}`;\n    }\n    if (columnName) {\n      sql += ` AND C.COLNAME = ${wrapSingleQuote(columnName)}`;\n    }\n    return this._getForeignKeysQuerySQL(sql);\n  }\n  getPrimaryKeyConstraintQuery(table, attributeName) {\n    const tableName = wrapSingleQuote(table.tableName || table);\n    return [\n      'SELECT TABNAME AS \"tableName\",',\n      'COLNAME AS \"columnName\",',\n      'CONSTNAME AS \"constraintName\"',\n      \"FROM SYSCAT.KEYCOLUSE WHERE CONSTNAME LIKE 'PK_%'\",\n      `AND COLNAME = ${wrapSingleQuote(attributeName)}`,\n      `AND TABNAME = ${tableName};`\n    ].join(\" \");\n  }\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return _.template(\"ALTER TABLE <%= table %> DROP <%= key %>\", this._templateSettings)({\n      table: this.quoteTable(tableName),\n      key: this.quoteIdentifier(foreignKey)\n    });\n  }\n  dropConstraintQuery(tableName, constraintName) {\n    const sql = \"ALTER TABLE <%= table %> DROP CONSTRAINT <%= constraint %>;\";\n    return _.template(sql, this._templateSettings)({\n      table: this.quoteTable(tableName),\n      constraint: this.quoteIdentifier(constraintName)\n    });\n  }\n  setAutocommitQuery() {\n    return \"\";\n  }\n  setIsolationLevelQuery() {\n  }\n  generateTransactionId() {\n    return randomBytes(10).toString(\"hex\");\n  }\n  startTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return `SAVE TRANSACTION ${this.quoteIdentifier(transaction.name)};`;\n    }\n    return \"BEGIN TRANSACTION;\";\n  }\n  commitTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return;\n    }\n    return \"COMMIT TRANSACTION;\";\n  }\n  rollbackTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return `ROLLBACK TRANSACTION ${this.quoteIdentifier(transaction.name)};`;\n    }\n    return \"ROLLBACK TRANSACTION;\";\n  }\n  addLimitAndOffset(options) {\n    const offset = options.offset || 0;\n    let fragment = \"\";\n    if (offset > 0) {\n      fragment += ` OFFSET ${this.escape(offset)} ROWS`;\n    }\n    if (options.limit) {\n      fragment += ` FETCH NEXT ${this.escape(options.limit)} ROWS ONLY`;\n    }\n    return fragment;\n  }\n  booleanValue(value) {\n    return value ? 1 : 0;\n  }\n  addUniqueFields(dataValues, rawAttributes, uniqno) {\n    uniqno = uniqno === void 0 ? 1 : uniqno;\n    for (const key in rawAttributes) {\n      if (rawAttributes[key].unique && dataValues[key] === void 0) {\n        if (rawAttributes[key].type instanceof DataTypes.DATE) {\n          dataValues[key] = Utils.now(\"db2\");\n        } else if (rawAttributes[key].type instanceof DataTypes.STRING) {\n          dataValues[key] = `unique${uniqno++}`;\n        } else if (rawAttributes[key].type instanceof DataTypes.INTEGER) {\n          dataValues[key] = uniqno++;\n        } else if (rawAttributes[key].type instanceof DataTypes.BOOLEAN) {\n          dataValues[key] = new DataTypes.BOOLEAN(false);\n        }\n      }\n    }\n    return uniqno;\n  }\n  quoteIdentifier(identifier, _force) {\n    return Utils.addTicks(Utils.removeTicks(identifier, '\"'), '\"');\n  }\n}\nfunction wrapSingleQuote(identifier) {\n  if (identifier) {\n    return `'${identifier}'`;\n  }\n  return \"\";\n}\nmodule.exports = Db2QueryGenerator;\n//# sourceMappingURL=query-generator.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/dialects/db2/query-generator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 685,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/dialects/db2/query-generator.js",
    "static": true,
    "longname": "lib/dialects/db2/query-generator.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 686,
    "kind": "variable",
    "name": "__defProps",
    "memberof": "lib/dialects/db2/query-generator.js",
    "static": true,
    "longname": "lib/dialects/db2/query-generator.js~__defProps",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 687,
    "kind": "variable",
    "name": "__getOwnPropDescs",
    "memberof": "lib/dialects/db2/query-generator.js",
    "static": true,
    "longname": "lib/dialects/db2/query-generator.js~__getOwnPropDescs",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 688,
    "kind": "variable",
    "name": "__getOwnPropSymbols",
    "memberof": "lib/dialects/db2/query-generator.js",
    "static": true,
    "longname": "lib/dialects/db2/query-generator.js~__getOwnPropSymbols",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 689,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/dialects/db2/query-generator.js",
    "static": true,
    "longname": "lib/dialects/db2/query-generator.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 690,
    "kind": "variable",
    "name": "__propIsEnum",
    "memberof": "lib/dialects/db2/query-generator.js",
    "static": true,
    "longname": "lib/dialects/db2/query-generator.js~__propIsEnum",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 691,
    "kind": "function",
    "name": "__defNormalProp",
    "memberof": "lib/dialects/db2/query-generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/db2/query-generator.js~__defNormalProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 692,
    "kind": "function",
    "name": "__spreadValues",
    "memberof": "lib/dialects/db2/query-generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/db2/query-generator.js~__spreadValues",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 693,
    "kind": "function",
    "name": "__spreadProps",
    "memberof": "lib/dialects/db2/query-generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/db2/query-generator.js~__spreadProps",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 694,
    "kind": "variable",
    "name": "_",
    "memberof": "lib/dialects/db2/query-generator.js",
    "static": true,
    "longname": "lib/dialects/db2/query-generator.js~_",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 695,
    "kind": "variable",
    "name": "Utils",
    "memberof": "lib/dialects/db2/query-generator.js",
    "static": true,
    "longname": "lib/dialects/db2/query-generator.js~Utils",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 696,
    "kind": "variable",
    "name": "DataTypes",
    "memberof": "lib/dialects/db2/query-generator.js",
    "static": true,
    "longname": "lib/dialects/db2/query-generator.js~DataTypes",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 697,
    "kind": "variable",
    "name": "AbstractQueryGenerator",
    "memberof": "lib/dialects/db2/query-generator.js",
    "static": true,
    "longname": "lib/dialects/db2/query-generator.js~AbstractQueryGenerator",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 698,
    "kind": "variable",
    "name": "randomBytes",
    "memberof": "lib/dialects/db2/query-generator.js",
    "static": true,
    "longname": "lib/dialects/db2/query-generator.js~randomBytes",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 699,
    "kind": "variable",
    "name": "Op",
    "memberof": "lib/dialects/db2/query-generator.js",
    "static": true,
    "longname": "lib/dialects/db2/query-generator.js~Op",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 700,
    "kind": "function",
    "name": "throwMethodUndefined",
    "memberof": "lib/dialects/db2/query-generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/db2/query-generator.js~throwMethodUndefined",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [
      {
        "name": "methodName",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 701,
    "kind": "class",
    "name": "Db2QueryGenerator",
    "memberof": "lib/dialects/db2/query-generator.js",
    "static": true,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "interface": false,
    "extends": [
      "AbstractQueryGenerator"
    ],
    "ignore": true
  },
  {
    "__docId__": 702,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 703,
    "kind": "member",
    "name": "OperatorMap",
    "memberof": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "static": false,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator#OperatorMap",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 704,
    "kind": "member",
    "name": "autoGenValue",
    "memberof": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "static": false,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator#autoGenValue",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 705,
    "kind": "method",
    "name": "createSchema",
    "memberof": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator#createSchema",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [
      {
        "name": "schema",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 706,
    "kind": "method",
    "name": "dropSchema",
    "memberof": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator#dropSchema",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [
      {
        "name": "schema",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 707,
    "kind": "method",
    "name": "showSchemasQuery",
    "memberof": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator#showSchemasQuery",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 708,
    "kind": "method",
    "name": "versionQuery",
    "memberof": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator#versionQuery",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 709,
    "kind": "method",
    "name": "createTableQuery",
    "memberof": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator#createTableQuery",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributes",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 710,
    "kind": "method",
    "name": "describeTableQuery",
    "memberof": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator#describeTableQuery",
    "access": "public",
    "description": null,
    "lineNumber": 137,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "schema",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 711,
    "kind": "method",
    "name": "renameTableQuery",
    "memberof": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator#renameTableQuery",
    "access": "public",
    "description": null,
    "lineNumber": 155,
    "undocument": true,
    "params": [
      {
        "name": "before",
        "types": [
          "*"
        ]
      },
      {
        "name": "after",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 712,
    "kind": "method",
    "name": "showTablesQuery",
    "memberof": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator#showTablesQuery",
    "access": "public",
    "description": null,
    "lineNumber": 162,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 713,
    "kind": "method",
    "name": "dropTableQuery",
    "memberof": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator#dropTableQuery",
    "access": "public",
    "description": null,
    "lineNumber": 165,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 714,
    "kind": "method",
    "name": "addColumnQuery",
    "memberof": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator#addColumnQuery",
    "access": "public",
    "description": null,
    "lineNumber": 172,
    "undocument": true,
    "params": [
      {
        "name": "table",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "dataType",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 715,
    "kind": "method",
    "name": "removeColumnQuery",
    "memberof": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator#removeColumnQuery",
    "access": "public",
    "description": null,
    "lineNumber": 186,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributeName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 716,
    "kind": "method",
    "name": "changeColumnQuery",
    "memberof": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator#changeColumnQuery",
    "access": "public",
    "description": null,
    "lineNumber": 193,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 717,
    "kind": "method",
    "name": "renameColumnQuery",
    "memberof": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator#renameColumnQuery",
    "access": "public",
    "description": null,
    "lineNumber": 236,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attrBefore",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 718,
    "kind": "method",
    "name": "addConstraintQuery",
    "memberof": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator#addConstraintQuery",
    "access": "public",
    "description": null,
    "lineNumber": 245,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 719,
    "kind": "method",
    "name": "bulkInsertQuery",
    "memberof": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator#bulkInsertQuery",
    "access": "public",
    "description": null,
    "lineNumber": 258,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attrValueHashes",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 720,
    "kind": "method",
    "name": "updateQuery",
    "memberof": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator#updateQuery",
    "access": "public",
    "description": null,
    "lineNumber": 308,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attrValueHash",
        "types": [
          "*"
        ]
      },
      {
        "name": "where",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"query\": *, \"bind\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 721,
    "kind": "method",
    "name": "upsertQuery",
    "memberof": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator#upsertQuery",
    "access": "public",
    "description": null,
    "lineNumber": 343,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "insertValues",
        "types": [
          "*"
        ]
      },
      {
        "name": "updateValues",
        "types": [
          "*"
        ]
      },
      {
        "name": "where",
        "types": [
          "*"
        ]
      },
      {
        "name": "model",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 722,
    "kind": "method",
    "name": "truncateTableQuery",
    "memberof": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator#truncateTableQuery",
    "access": "public",
    "description": null,
    "lineNumber": 423,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 723,
    "kind": "method",
    "name": "deleteQuery",
    "memberof": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator#deleteQuery",
    "access": "public",
    "description": null,
    "lineNumber": 426,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "where",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      },
      {
        "name": "model",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 724,
    "kind": "method",
    "name": "showIndexesQuery",
    "memberof": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator#showIndexesQuery",
    "access": "public",
    "description": null,
    "lineNumber": 447,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 725,
    "kind": "method",
    "name": "showConstraintsQuery",
    "memberof": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator#showConstraintsQuery",
    "access": "public",
    "description": null,
    "lineNumber": 463,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "constraintName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 726,
    "kind": "method",
    "name": "removeIndexQuery",
    "memberof": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator#removeIndexQuery",
    "access": "public",
    "description": null,
    "lineNumber": 470,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "indexNameOrAttributes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 727,
    "kind": "method",
    "name": "attributeToSQL",
    "memberof": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator#attributeToSQL",
    "access": "public",
    "description": null,
    "lineNumber": 482,
    "undocument": true,
    "params": [
      {
        "name": "attribute",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 728,
    "kind": "method",
    "name": "attributesToSQL",
    "memberof": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator#attributesToSQL",
    "access": "public",
    "description": null,
    "lineNumber": 555,
    "undocument": true,
    "params": [
      {
        "name": "attributes",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 729,
    "kind": "method",
    "name": "createTrigger",
    "memberof": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator#createTrigger",
    "access": "public",
    "description": null,
    "lineNumber": 580,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 730,
    "kind": "method",
    "name": "dropTrigger",
    "memberof": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator#dropTrigger",
    "access": "public",
    "description": null,
    "lineNumber": 583,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 731,
    "kind": "method",
    "name": "renameTrigger",
    "memberof": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator#renameTrigger",
    "access": "public",
    "description": null,
    "lineNumber": 586,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 732,
    "kind": "method",
    "name": "createFunction",
    "memberof": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator#createFunction",
    "access": "public",
    "description": null,
    "lineNumber": 589,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 733,
    "kind": "method",
    "name": "dropFunction",
    "memberof": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator#dropFunction",
    "access": "public",
    "description": null,
    "lineNumber": 592,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 734,
    "kind": "method",
    "name": "renameFunction",
    "memberof": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator#renameFunction",
    "access": "public",
    "description": null,
    "lineNumber": 595,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 735,
    "kind": "method",
    "name": "_getForeignKeysQuerySQL",
    "memberof": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator#_getForeignKeysQuerySQL",
    "access": "private",
    "description": null,
    "lineNumber": 598,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "condition",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 736,
    "kind": "method",
    "name": "getForeignKeysQuery",
    "memberof": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator#getForeignKeysQuery",
    "access": "public",
    "description": null,
    "lineNumber": 601,
    "undocument": true,
    "params": [
      {
        "name": "table",
        "types": [
          "*"
        ]
      },
      {
        "name": "schemaName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 737,
    "kind": "method",
    "name": "getForeignKeyQuery",
    "memberof": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator#getForeignKeyQuery",
    "access": "public",
    "description": null,
    "lineNumber": 613,
    "undocument": true,
    "params": [
      {
        "name": "table",
        "types": [
          "*"
        ]
      },
      {
        "name": "columnName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 738,
    "kind": "method",
    "name": "getPrimaryKeyConstraintQuery",
    "memberof": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator#getPrimaryKeyConstraintQuery",
    "access": "public",
    "description": null,
    "lineNumber": 628,
    "undocument": true,
    "params": [
      {
        "name": "table",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributeName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 739,
    "kind": "method",
    "name": "dropForeignKeyQuery",
    "memberof": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator#dropForeignKeyQuery",
    "access": "public",
    "description": null,
    "lineNumber": 639,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "foreignKey",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 740,
    "kind": "method",
    "name": "dropConstraintQuery",
    "memberof": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator#dropConstraintQuery",
    "access": "public",
    "description": null,
    "lineNumber": 645,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "constraintName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 741,
    "kind": "method",
    "name": "setAutocommitQuery",
    "memberof": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator#setAutocommitQuery",
    "access": "public",
    "description": null,
    "lineNumber": 652,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 742,
    "kind": "method",
    "name": "setIsolationLevelQuery",
    "memberof": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator#setIsolationLevelQuery",
    "access": "public",
    "description": null,
    "lineNumber": 655,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 743,
    "kind": "method",
    "name": "generateTransactionId",
    "memberof": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator#generateTransactionId",
    "access": "public",
    "description": null,
    "lineNumber": 657,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 744,
    "kind": "method",
    "name": "startTransactionQuery",
    "memberof": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator#startTransactionQuery",
    "access": "public",
    "description": null,
    "lineNumber": 660,
    "undocument": true,
    "params": [
      {
        "name": "transaction",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 745,
    "kind": "method",
    "name": "commitTransactionQuery",
    "memberof": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator#commitTransactionQuery",
    "access": "public",
    "description": null,
    "lineNumber": 666,
    "undocument": true,
    "params": [
      {
        "name": "transaction",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 746,
    "kind": "method",
    "name": "rollbackTransactionQuery",
    "memberof": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator#rollbackTransactionQuery",
    "access": "public",
    "description": null,
    "lineNumber": 672,
    "undocument": true,
    "params": [
      {
        "name": "transaction",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 747,
    "kind": "method",
    "name": "addLimitAndOffset",
    "memberof": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator#addLimitAndOffset",
    "access": "public",
    "description": null,
    "lineNumber": 678,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 748,
    "kind": "method",
    "name": "booleanValue",
    "memberof": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator#booleanValue",
    "access": "public",
    "description": null,
    "lineNumber": 689,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 749,
    "kind": "method",
    "name": "addUniqueFields",
    "memberof": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator#addUniqueFields",
    "access": "public",
    "description": null,
    "lineNumber": 692,
    "undocument": true,
    "params": [
      {
        "name": "dataValues",
        "types": [
          "*"
        ]
      },
      {
        "name": "rawAttributes",
        "types": [
          "*"
        ]
      },
      {
        "name": "uniqno",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 750,
    "kind": "method",
    "name": "quoteIdentifier",
    "memberof": "lib/dialects/db2/query-generator.js~Db2QueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query-generator.js~Db2QueryGenerator#quoteIdentifier",
    "access": "public",
    "description": null,
    "lineNumber": 709,
    "undocument": true,
    "params": [
      {
        "name": "identifier",
        "types": [
          "*"
        ]
      },
      {
        "name": "_force",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 751,
    "kind": "function",
    "name": "wrapSingleQuote",
    "memberof": "lib/dialects/db2/query-generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/db2/query-generator.js~wrapSingleQuote",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 713,
    "undocument": true,
    "params": [
      {
        "name": "identifier",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 752,
    "kind": "file",
    "name": "lib/dialects/db2/query-interface.js",
    "content": "\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nconst _ = require(\"lodash\");\nconst Utils = require(\"../../utils\");\nconst { Op } = require(\"../../operators\");\nconst { QueryInterface } = require(\"../abstract/query-interface\");\nconst { QueryTypes } = require(\"../../query-types\");\nclass Db2QueryInterface extends QueryInterface {\n  async getForeignKeyReferencesForTable(tableName, options) {\n    const queryOptions = __spreadProps(__spreadValues({}, options), {\n      type: QueryTypes.FOREIGNKEYS\n    });\n    const query = this.queryGenerator.getForeignKeysQuery(tableName, this.sequelize.config.username.toUpperCase());\n    return this.sequelize.query(query, queryOptions);\n  }\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    options = __spreadValues({}, options);\n    const model = options.model;\n    const wheres = [];\n    const attributes = Object.keys(insertValues);\n    let indexes = [];\n    let indexFields;\n    options = _.clone(options);\n    if (!Utils.isWhereEmpty(where)) {\n      wheres.push(where);\n    }\n    indexes = _.map(model.uniqueKeys, (value) => {\n      return value.fields;\n    });\n    for (const value of model._indexes) {\n      if (value.unique) {\n        indexFields = value.fields.map((field) => {\n          if (_.isPlainObject(field)) {\n            return field.attribute;\n          }\n          return field;\n        });\n        indexes.push(indexFields);\n      }\n    }\n    for (const index of indexes) {\n      if (_.intersection(attributes, index).length === index.length) {\n        where = {};\n        for (const field of index) {\n          where[field] = insertValues[field];\n        }\n        wheres.push(where);\n      }\n    }\n    where = { [Op.or]: wheres };\n    options.type = QueryTypes.UPSERT;\n    options.raw = true;\n    const sql = this.queryGenerator.upsertQuery(tableName, insertValues, updateValues, where, model, options);\n    const result = await this.sequelize.query(sql, options);\n    return [result, void 0];\n  }\n  async createTable(tableName, attributes, options, model) {\n    let sql = \"\";\n    options = __spreadValues({}, options);\n    if (options && options.uniqueKeys) {\n      _.forOwn(options.uniqueKeys, (uniqueKey) => {\n        if (uniqueKey.customIndex === void 0) {\n          uniqueKey.customIndex = true;\n        }\n      });\n    }\n    if (model) {\n      options.uniqueKeys = options.uniqueKeys || model.uniqueKeys;\n    }\n    attributes = _.mapValues(attributes, (attribute) => this.sequelize.normalizeAttribute(attribute));\n    if (options.indexes) {\n      for (const fields of options.indexes) {\n        const fieldArr = fields.fields;\n        if (fieldArr.length === 1) {\n          for (const field of fieldArr) {\n            for (const property in attributes) {\n              if (field === attributes[property].field) {\n                attributes[property].unique = true;\n              }\n            }\n          }\n        }\n      }\n    }\n    if (options.alter && options.indexes) {\n      for (const fields of options.indexes) {\n        const fieldArr = fields.fields;\n        if (fieldArr.length === 1) {\n          for (const field of fieldArr) {\n            for (const property in attributes) {\n              if (field === attributes[property].field && attributes[property].unique) {\n                attributes[property].unique = false;\n              }\n            }\n          }\n        }\n      }\n    }\n    if (!tableName.schema && (options.schema || Boolean(model) && model._schema)) {\n      tableName = this.queryGenerator.addSchema({\n        tableName,\n        _schema: Boolean(model) && model._schema || options.schema\n      });\n    }\n    attributes = this.queryGenerator.attributesToSQL(attributes, { table: tableName, context: \"createTable\" });\n    sql = this.queryGenerator.createTableQuery(tableName, attributes, options);\n    return await this.sequelize.query(sql, options);\n  }\n}\nexports.Db2QueryInterface = Db2QueryInterface;\n//# sourceMappingURL=query-interface.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/dialects/db2/query-interface.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 753,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/dialects/db2/query-interface.js",
    "static": true,
    "longname": "lib/dialects/db2/query-interface.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 754,
    "kind": "variable",
    "name": "__defProps",
    "memberof": "lib/dialects/db2/query-interface.js",
    "static": true,
    "longname": "lib/dialects/db2/query-interface.js~__defProps",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 755,
    "kind": "variable",
    "name": "__getOwnPropDescs",
    "memberof": "lib/dialects/db2/query-interface.js",
    "static": true,
    "longname": "lib/dialects/db2/query-interface.js~__getOwnPropDescs",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 756,
    "kind": "variable",
    "name": "__getOwnPropSymbols",
    "memberof": "lib/dialects/db2/query-interface.js",
    "static": true,
    "longname": "lib/dialects/db2/query-interface.js~__getOwnPropSymbols",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 757,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/dialects/db2/query-interface.js",
    "static": true,
    "longname": "lib/dialects/db2/query-interface.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 758,
    "kind": "variable",
    "name": "__propIsEnum",
    "memberof": "lib/dialects/db2/query-interface.js",
    "static": true,
    "longname": "lib/dialects/db2/query-interface.js~__propIsEnum",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 759,
    "kind": "function",
    "name": "__defNormalProp",
    "memberof": "lib/dialects/db2/query-interface.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/db2/query-interface.js~__defNormalProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 760,
    "kind": "function",
    "name": "__spreadValues",
    "memberof": "lib/dialects/db2/query-interface.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/db2/query-interface.js~__spreadValues",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 761,
    "kind": "function",
    "name": "__spreadProps",
    "memberof": "lib/dialects/db2/query-interface.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/db2/query-interface.js~__spreadProps",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 762,
    "kind": "variable",
    "name": "_",
    "memberof": "lib/dialects/db2/query-interface.js",
    "static": true,
    "longname": "lib/dialects/db2/query-interface.js~_",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 763,
    "kind": "variable",
    "name": "Utils",
    "memberof": "lib/dialects/db2/query-interface.js",
    "static": true,
    "longname": "lib/dialects/db2/query-interface.js~Utils",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 764,
    "kind": "variable",
    "name": "Op",
    "memberof": "lib/dialects/db2/query-interface.js",
    "static": true,
    "longname": "lib/dialects/db2/query-interface.js~Op",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 765,
    "kind": "variable",
    "name": "QueryInterface",
    "memberof": "lib/dialects/db2/query-interface.js",
    "static": true,
    "longname": "lib/dialects/db2/query-interface.js~QueryInterface",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 766,
    "kind": "variable",
    "name": "QueryTypes",
    "memberof": "lib/dialects/db2/query-interface.js",
    "static": true,
    "longname": "lib/dialects/db2/query-interface.js~QueryTypes",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 767,
    "kind": "class",
    "name": "Db2QueryInterface",
    "memberof": "lib/dialects/db2/query-interface.js",
    "static": true,
    "longname": "lib/dialects/db2/query-interface.js~Db2QueryInterface",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "interface": false,
    "extends": [
      "QueryInterface"
    ],
    "ignore": true
  },
  {
    "__docId__": 768,
    "kind": "method",
    "name": "getForeignKeyReferencesForTable",
    "memberof": "lib/dialects/db2/query-interface.js~Db2QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/db2/query-interface.js~Db2QueryInterface#getForeignKeyReferencesForTable",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 769,
    "kind": "method",
    "name": "upsert",
    "memberof": "lib/dialects/db2/query-interface.js~Db2QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/db2/query-interface.js~Db2QueryInterface#upsert",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "insertValues",
        "types": [
          "*"
        ]
      },
      {
        "name": "updateValues",
        "types": [
          "*"
        ]
      },
      {
        "name": "where",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 770,
    "kind": "method",
    "name": "createTable",
    "memberof": "lib/dialects/db2/query-interface.js~Db2QueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/db2/query-interface.js~Db2QueryInterface#createTable",
    "access": "public",
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributes",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      },
      {
        "name": "model",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 771,
    "kind": "file",
    "name": "lib/dialects/db2/query.js",
    "content": "\"use strict\";\nconst AbstractQuery = require(\"../abstract/query\");\nconst sequelizeErrors = require(\"../../errors\");\nconst parserStore = require(\"../parserStore\")(\"db2\");\nconst _ = require(\"lodash\");\nconst { logger } = require(\"../../utils/logger\");\nconst moment = require(\"moment\");\nconst debug = logger.debugContext(\"sql:db2\");\nclass Query extends AbstractQuery {\n  getInsertIdField() {\n    return \"id\";\n  }\n  getSQLTypeFromJsType(value) {\n    const param = { ParamType: \"INPUT\", Data: value };\n    if (Buffer.isBuffer(value)) {\n      param.DataType = \"BLOB\";\n      return param;\n    }\n    return value;\n  }\n  async _run(connection, sql, parameters) {\n    this.sql = sql;\n    const benchmark = this.sequelize.options.benchmark || this.options.benchmark;\n    let queryBegin;\n    if (benchmark) {\n      queryBegin = Date.now();\n    } else {\n      this.sequelize.log(`Executing (${this.connection.uuid || \"default\"}): ${this.sql}`, this.options);\n    }\n    const errStack = new Error().stack;\n    return new Promise((resolve, reject) => {\n      if (_.startsWith(this.sql, \"BEGIN TRANSACTION\")) {\n        connection.beginTransaction((err) => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            resolve(this.formatResults());\n          }\n        });\n      } else if (_.startsWith(this.sql, \"COMMIT TRANSACTION\")) {\n        connection.commitTransaction((err) => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            resolve(this.formatResults());\n          }\n        });\n      } else if (_.startsWith(this.sql, \"ROLLBACK TRANSACTION\")) {\n        connection.rollbackTransaction((err) => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            resolve(this.formatResults());\n          }\n        });\n      } else if (_.startsWith(this.sql, \"SAVE TRANSACTION\")) {\n        connection.commitTransaction((err) => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            connection.beginTransaction((err2) => {\n              if (err2) {\n                reject(this.formatError(err2, errStack));\n              } else {\n                resolve(this.formatResults());\n              }\n            });\n          }\n        }, this.options.transaction.name);\n      } else {\n        const params = [];\n        if (parameters) {\n          _.forOwn(parameters, (value, key) => {\n            const param = this.getSQLTypeFromJsType(value, key);\n            params.push(param);\n          });\n        }\n        const SQL = this.sql.toUpperCase();\n        let newSql = this.sql;\n        if ((this.isSelectQuery() || _.startsWith(SQL, \"SELECT \")) && !SQL.includes(\" FROM \", 8)) {\n          if (this.sql.charAt(this.sql.length - 1) === \";\") {\n            newSql = this.sql.slice(0, -1);\n          }\n          newSql += \" FROM SYSIBM.SYSDUMMY1;\";\n        }\n        connection.prepare(newSql, (err, stmt) => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          }\n          stmt.execute(params, (err2, result, outparams) => {\n            debug(`executed(${this.connection.uuid || \"default\"}):${newSql} ${parameters ? JSON.stringify(parameters) : \"\"}`);\n            if (benchmark) {\n              this.sequelize.log(`Executed (${this.connection.uuid || \"default\"}): ${newSql} ${parameters ? JSON.stringify(parameters) : \"\"}`, Date.now() - queryBegin, this.options);\n            }\n            if (err2 && err2.message) {\n              err2 = this.filterSQLError(err2, this.sql, connection);\n              if (err2 === null) {\n                stmt.closeSync();\n                resolve(this.formatResults([], 0));\n              }\n            }\n            if (err2) {\n              err2.sql = sql;\n              stmt.closeSync();\n              reject(this.formatError(err2, errStack, connection, parameters));\n            } else {\n              let data = [];\n              let metadata = [];\n              let affectedRows = 0;\n              if (typeof result === \"object\") {\n                if (_.startsWith(this.sql, \"DELETE FROM \")) {\n                  affectedRows = result.getAffectedRowsSync();\n                } else {\n                  data = result.fetchAllSync();\n                  metadata = result.getColumnMetadataSync();\n                }\n                result.closeSync();\n              }\n              stmt.closeSync();\n              const datalen = data.length;\n              if (datalen > 0) {\n                const coltypes = {};\n                for (const metadatum of metadata) {\n                  coltypes[metadatum.SQL_DESC_NAME] = metadatum.SQL_DESC_TYPE_NAME;\n                }\n                for (let i = 0; i < datalen; i++) {\n                  for (const column in data[i]) {\n                    const parse = parserStore.get(coltypes[column]);\n                    const value = data[i][column];\n                    if (value !== null) {\n                      if (parse) {\n                        data[i][column] = parse(value);\n                      } else if (coltypes[column] === \"TIMESTAMP\") {\n                        data[i][column] = new Date(moment.utc(value));\n                      } else if (coltypes[column] === \"BLOB\") {\n                        data[i][column] = new Buffer.from(value);\n                      } else if (coltypes[column].indexOf(\"FOR BIT DATA\") > 0) {\n                        data[i][column] = new Buffer.from(value, \"hex\");\n                      }\n                    }\n                  }\n                }\n                if (outparams && outparams.length > 0) {\n                  data.unshift(outparams);\n                }\n                resolve(this.formatResults(data, datalen, metadata, connection));\n              } else {\n                resolve(this.formatResults(data, affectedRows));\n              }\n            }\n          });\n        });\n      }\n    });\n  }\n  async run(sql, parameters) {\n    return await this._run(this.connection, sql, parameters);\n  }\n  static formatBindParameters(sql, values, dialect) {\n    let bindParam = {};\n    const replacementFunc = (match, key, values2) => {\n      if (values2[key] !== void 0) {\n        bindParam[key] = values2[key];\n        return \"?\";\n      }\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    if (Array.isArray(values) && typeof values[0] === \"object\") {\n      bindParam = values;\n    }\n    return [sql, bindParam];\n  }\n  filterSQLError(err, sql, connection) {\n    if (err.message.search(\"SQL0204N\") !== -1 && _.startsWith(sql, \"DROP \")) {\n      err = null;\n    } else if (err.message.search(\"SQL0443N\") !== -1) {\n      if (this.isDropSchemaQuery()) {\n        connection.querySync(\"DROP TABLE ERRORSCHEMA.ERRORTABLE;\");\n        connection.querySync(this.sql);\n      }\n      err = null;\n    } else if (err.message.search(\"SQL0601N\") !== -1) {\n      const match = err.message.match(/SQL0601N {2}The name of the object to be created is identical to the existing name \"(.*)\" of type \"(.*)\"./);\n      if (match && match.length > 1 && match[2] === \"TABLE\") {\n        let table;\n        const mtarray = match[1].split(\".\");\n        if (mtarray[1]) {\n          table = `\"${mtarray[0]}\".\"${mtarray[1]}\"`;\n        } else {\n          table = `\"${mtarray[0]}\"`;\n        }\n        if (connection.dropTable !== false) {\n          connection.querySync(`DROP TABLE ${table}`);\n          err = connection.querySync(sql);\n        } else {\n          err = null;\n        }\n      } else {\n        err = null;\n      }\n    } else if (err.message.search(\"SQL0911N\") !== -1) {\n      if (err.message.search('Reason code \"2\"') !== -1) {\n        err = null;\n      }\n    } else if (err.message.search(\"SQL0605W\") !== -1) {\n      err = null;\n    } else if (err.message.search(\"SQL0668N\") !== -1 && _.startsWith(sql, \"ALTER TABLE \")) {\n      connection.querySync(`CALL SYSPROC.ADMIN_CMD('REORG TABLE ${sql.slice(12).split(\" \")[0]}')`);\n      err = connection.querySync(sql);\n    }\n    if (err && err.length === 0) {\n      err = null;\n    }\n    return err;\n  }\n  formatResults(data, rowCount, metadata, conn) {\n    let result = this.instance;\n    if (this.isInsertQuery(data, metadata)) {\n      this.handleInsertQuery(data, metadata);\n      if (!this.instance) {\n        if (this.options.plain) {\n          const record = data[0];\n          result = record[Object.keys(record)[0]];\n        } else {\n          result = data;\n        }\n      }\n    }\n    if (this.isShowTablesQuery()) {\n      result = data;\n    } else if (this.isDescribeQuery()) {\n      result = {};\n      for (const _result of data) {\n        if (_result.Default) {\n          _result.Default = _result.Default.replace(\"('\", \"\").replace(\"')\", \"\").replace(/'/g, \"\");\n        }\n        result[_result.Name] = {\n          type: _result.Type.toUpperCase(),\n          allowNull: _result.IsNull === \"Y\",\n          defaultValue: _result.Default,\n          primaryKey: _result.KeySeq > 0,\n          autoIncrement: _result.IsIdentity === \"Y\",\n          comment: _result.Comment\n        };\n      }\n    } else if (this.isShowIndexesQuery()) {\n      result = this.handleShowIndexesQuery(data);\n    } else if (this.isSelectQuery()) {\n      result = this.handleSelectQuery(data);\n    } else if (this.isUpsertQuery()) {\n      result = data;\n    } else if (this.isDropSchemaQuery()) {\n      result = data[0];\n      if (conn) {\n        const query = \"DROP TABLE ERRORSCHEMA.ERRORTABLE\";\n        conn.querySync(query);\n      }\n    } else if (this.isCallQuery()) {\n      result = data;\n    } else if (this.isBulkUpdateQuery()) {\n      result = data.length;\n    } else if (this.isBulkDeleteQuery()) {\n      result = rowCount;\n    } else if (this.isVersionQuery()) {\n      result = data[0].VERSION;\n    } else if (this.isForeignKeysQuery()) {\n      result = data;\n    } else if (this.isInsertQuery() || this.isUpdateQuery()) {\n      result = [result, rowCount];\n    } else if (this.isShowConstraintsQuery()) {\n      result = this.handleShowConstraintsQuery(data);\n    } else if (this.isRawQuery()) {\n      result = [data, metadata];\n    } else {\n      result = data;\n    }\n    return result;\n  }\n  handleShowTablesQuery(results) {\n    return results.map((resultSet) => {\n      return {\n        tableName: resultSet.TABLE_NAME,\n        schema: resultSet.TABLE_SCHEMA\n      };\n    });\n  }\n  handleShowConstraintsQuery(data) {\n    return _.remove(data, (constraint) => {\n      return !_.startsWith(constraint.constraintName, \"SQL\");\n    });\n  }\n  formatError(err, errStack, conn, parameters) {\n    let match;\n    if (!(err && err.message)) {\n      err.message = \"No error message found.\";\n    }\n    match = err.message.match(/SQL0803N {2}One or more values in the INSERT statement, UPDATE statement, or foreign key update caused by a DELETE statement are not valid because the primary key, unique constraint or unique index identified by \"(\\d)+\" constrains table \"(.*)\\.(.*)\" from having duplicate values for the index key./);\n    if (match && match.length > 0) {\n      let uniqueIndexName = \"\";\n      let uniqueKey = \"\";\n      const fields = {};\n      let message = err.message;\n      const query = `SELECT INDNAME FROM SYSCAT.INDEXES  WHERE IID = ${match[1]} AND TABSCHEMA = '${match[2]}' AND TABNAME = '${match[3]}'`;\n      if (Boolean(conn) && match.length > 3) {\n        uniqueIndexName = conn.querySync(query);\n        uniqueIndexName = uniqueIndexName[0].INDNAME;\n      }\n      if (this.model && Boolean(uniqueIndexName)) {\n        uniqueKey = this.model.uniqueKeys[uniqueIndexName];\n      }\n      if (!uniqueKey && this.options.fields) {\n        uniqueKey = this.options.fields[match[1] - 1];\n      }\n      if (uniqueKey) {\n        if (this.options.where && this.options.where[uniqueKey.column] !== void 0) {\n          fields[uniqueKey.column] = this.options.where[uniqueKey.column];\n        } else if (this.options.instance && this.options.instance.dataValues && this.options.instance.dataValues[uniqueKey.column]) {\n          fields[uniqueKey.column] = this.options.instance.dataValues[uniqueKey.column];\n        } else if (parameters) {\n          fields[uniqueKey.column] = parameters[\"0\"];\n        }\n      }\n      if (uniqueKey && Boolean(uniqueKey.msg)) {\n        message = uniqueKey.msg;\n      }\n      const errors = [];\n      _.forOwn(fields, (value, field) => {\n        errors.push(new sequelizeErrors.ValidationErrorItem(this.getUniqueConstraintErrorMessage(field), \"unique violation\", field, value, this.instance, \"not_unique\"));\n      });\n      return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields, stack: errStack });\n    }\n    match = err.message.match(/SQL0532N {2}A parent row cannot be deleted because the relationship \"(.*)\" restricts the deletion/) || err.message.match(/SQL0530N/) || err.message.match(/SQL0531N/);\n    if (match && match.length > 0) {\n      return new sequelizeErrors.ForeignKeyConstraintError({\n        fields: null,\n        index: match[1],\n        parent: err,\n        stack: errStack\n      });\n    }\n    match = err.message.match(/SQL0204N {2}\"(.*)\" is an undefined name./);\n    if (match && match.length > 1) {\n      const constraint = match[1];\n      let table = err.sql.match(/table \"(.+?)\"/i);\n      table = table ? table[1] : void 0;\n      return new sequelizeErrors.UnknownConstraintError({\n        message: match[0],\n        constraint,\n        table,\n        parent: err,\n        stack: errStack\n      });\n    }\n    return new sequelizeErrors.DatabaseError(err, { stack: errStack });\n  }\n  isDropSchemaQuery() {\n    let result = false;\n    if (_.startsWith(this.sql, \"CALL SYSPROC.ADMIN_DROP_SCHEMA\")) {\n      result = true;\n    }\n    return result;\n  }\n  isShowOrDescribeQuery() {\n    let result = false;\n    result = result || this.sql.toLowerCase().startsWith(\"select c.column_name as 'name', c.data_type as 'type', c.is_nullable as 'isnull'\");\n    result = result || this.sql.toLowerCase().startsWith(\"select tablename = t.name, name = ind.name,\");\n    result = result || this.sql.toLowerCase().startsWith(\"exec sys.sp_helpindex @objname\");\n    return result;\n  }\n  isShowIndexesQuery() {\n    let result = false;\n    result = result || this.sql.toLowerCase().startsWith(\"exec sys.sp_helpindex @objname\");\n    result = result || this.sql.startsWith('SELECT NAME AS \"name\", TBNAME AS \"tableName\", UNIQUERULE AS \"keyType\", COLNAMES, INDEXTYPE AS \"type\" FROM SYSIBM.SYSINDEXES');\n    return result;\n  }\n  handleShowIndexesQuery(data) {\n    let currItem;\n    const result = [];\n    for (const item of data) {\n      if (!currItem || currItem.name !== item.Key_name) {\n        currItem = {\n          primary: item.keyType === \"P\",\n          fields: [],\n          name: item.name,\n          tableName: item.tableName,\n          unique: item.keyType === \"U\",\n          type: item.type\n        };\n        _.forEach(item.COLNAMES.replace(/\\+|-/g, (x) => {\n          return ` ${x}`;\n        }).split(\" \"), (column) => {\n          let columnName = column.trim();\n          if (columnName) {\n            columnName = columnName.replace(/\\+|-/, \"\");\n            currItem.fields.push({\n              attribute: columnName,\n              length: void 0,\n              order: !column.includes(\"-\") ? \"ASC\" : \"DESC\",\n              collate: void 0\n            });\n          }\n        });\n        result.push(currItem);\n      }\n    }\n    return result;\n  }\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n      let autoIncrementAttributeAlias = null;\n      if (Object.prototype.hasOwnProperty.call(this.model.rawAttributes, autoIncrementAttribute) && this.model.rawAttributes[autoIncrementAttribute].field !== void 0) {\n        autoIncrementAttributeAlias = this.model.rawAttributes[autoIncrementAttribute].field;\n      }\n      id = id || results && results[0][this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n      id = id || results && results[0][autoIncrementAttribute];\n      id = id || autoIncrementAttributeAlias && results && results[0][autoIncrementAttributeAlias];\n      this.instance[autoIncrementAttribute] = id;\n    }\n  }\n}\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n//# sourceMappingURL=query.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/dialects/db2/query.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 772,
    "kind": "variable",
    "name": "AbstractQuery",
    "memberof": "lib/dialects/db2/query.js",
    "static": true,
    "longname": "lib/dialects/db2/query.js~AbstractQuery",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 773,
    "kind": "variable",
    "name": "sequelizeErrors",
    "memberof": "lib/dialects/db2/query.js",
    "static": true,
    "longname": "lib/dialects/db2/query.js~sequelizeErrors",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 774,
    "kind": "variable",
    "name": "parserStore",
    "memberof": "lib/dialects/db2/query.js",
    "static": true,
    "longname": "lib/dialects/db2/query.js~parserStore",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 775,
    "kind": "variable",
    "name": "_",
    "memberof": "lib/dialects/db2/query.js",
    "static": true,
    "longname": "lib/dialects/db2/query.js~_",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 776,
    "kind": "variable",
    "name": "logger",
    "memberof": "lib/dialects/db2/query.js",
    "static": true,
    "longname": "lib/dialects/db2/query.js~logger",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 777,
    "kind": "variable",
    "name": "moment",
    "memberof": "lib/dialects/db2/query.js",
    "static": true,
    "longname": "lib/dialects/db2/query.js~moment",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 778,
    "kind": "variable",
    "name": "debug",
    "memberof": "lib/dialects/db2/query.js",
    "static": true,
    "longname": "lib/dialects/db2/query.js~debug",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 779,
    "kind": "class",
    "name": "Query",
    "memberof": "lib/dialects/db2/query.js",
    "static": true,
    "longname": "lib/dialects/db2/query.js~Query",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/db2/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false,
    "extends": [
      "AbstractQuery"
    ],
    "ignore": true
  },
  {
    "__docId__": 780,
    "kind": "method",
    "name": "getInsertIdField",
    "memberof": "lib/dialects/db2/query.js~Query",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query.js~Query#getInsertIdField",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 781,
    "kind": "method",
    "name": "getSQLTypeFromJsType",
    "memberof": "lib/dialects/db2/query.js~Query",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query.js~Query#getSQLTypeFromJsType",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 782,
    "kind": "method",
    "name": "_run",
    "memberof": "lib/dialects/db2/query.js~Query",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/db2/query.js~Query#_run",
    "access": "private",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "connection",
        "types": [
          "*"
        ]
      },
      {
        "name": "sql",
        "types": [
          "*"
        ]
      },
      {
        "name": "parameters",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 783,
    "kind": "member",
    "name": "sql",
    "memberof": "lib/dialects/db2/query.js~Query",
    "static": false,
    "longname": "lib/dialects/db2/query.js~Query#sql",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 784,
    "kind": "method",
    "name": "run",
    "memberof": "lib/dialects/db2/query.js~Query",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/db2/query.js~Query#run",
    "access": "public",
    "description": null,
    "lineNumber": 156,
    "undocument": true,
    "params": [
      {
        "name": "sql",
        "types": [
          "*"
        ]
      },
      {
        "name": "parameters",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 785,
    "kind": "method",
    "name": "formatBindParameters",
    "memberof": "lib/dialects/db2/query.js~Query",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/db2/query.js~Query.formatBindParameters",
    "access": "public",
    "description": null,
    "lineNumber": 159,
    "undocument": true,
    "params": [
      {
        "name": "sql",
        "types": [
          "*"
        ]
      },
      {
        "name": "values",
        "types": [
          "*"
        ]
      },
      {
        "name": "dialect",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 786,
    "kind": "method",
    "name": "filterSQLError",
    "memberof": "lib/dialects/db2/query.js~Query",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query.js~Query#filterSQLError",
    "access": "public",
    "description": null,
    "lineNumber": 173,
    "undocument": true,
    "params": [
      {
        "name": "err",
        "types": [
          "*"
        ]
      },
      {
        "name": "sql",
        "types": [
          "*"
        ]
      },
      {
        "name": "connection",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 787,
    "kind": "method",
    "name": "formatResults",
    "memberof": "lib/dialects/db2/query.js~Query",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query.js~Query#formatResults",
    "access": "public",
    "description": null,
    "lineNumber": 216,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "rowCount",
        "types": [
          "*"
        ]
      },
      {
        "name": "metadata",
        "types": [
          "*"
        ]
      },
      {
        "name": "conn",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 788,
    "kind": "method",
    "name": "handleShowTablesQuery",
    "memberof": "lib/dialects/db2/query.js~Query",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query.js~Query#handleShowTablesQuery",
    "access": "public",
    "description": null,
    "lineNumber": 279,
    "undocument": true,
    "params": [
      {
        "name": "results",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 789,
    "kind": "method",
    "name": "handleShowConstraintsQuery",
    "memberof": "lib/dialects/db2/query.js~Query",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query.js~Query#handleShowConstraintsQuery",
    "access": "public",
    "description": null,
    "lineNumber": 287,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 790,
    "kind": "method",
    "name": "formatError",
    "memberof": "lib/dialects/db2/query.js~Query",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query.js~Query#formatError",
    "access": "public",
    "description": null,
    "lineNumber": 292,
    "undocument": true,
    "params": [
      {
        "name": "err",
        "types": [
          "*"
        ]
      },
      {
        "name": "errStack",
        "types": [
          "*"
        ]
      },
      {
        "name": "conn",
        "types": [
          "*"
        ]
      },
      {
        "name": "parameters",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 791,
    "kind": "method",
    "name": "isDropSchemaQuery",
    "memberof": "lib/dialects/db2/query.js~Query",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query.js~Query#isDropSchemaQuery",
    "access": "public",
    "description": null,
    "lineNumber": 356,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 792,
    "kind": "method",
    "name": "isShowOrDescribeQuery",
    "memberof": "lib/dialects/db2/query.js~Query",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query.js~Query#isShowOrDescribeQuery",
    "access": "public",
    "description": null,
    "lineNumber": 363,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 793,
    "kind": "method",
    "name": "isShowIndexesQuery",
    "memberof": "lib/dialects/db2/query.js~Query",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query.js~Query#isShowIndexesQuery",
    "access": "public",
    "description": null,
    "lineNumber": 370,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 794,
    "kind": "method",
    "name": "handleShowIndexesQuery",
    "memberof": "lib/dialects/db2/query.js~Query",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query.js~Query#handleShowIndexesQuery",
    "access": "public",
    "description": null,
    "lineNumber": 376,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 795,
    "kind": "method",
    "name": "handleInsertQuery",
    "memberof": "lib/dialects/db2/query.js~Query",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/db2/query.js~Query#handleInsertQuery",
    "access": "public",
    "description": null,
    "lineNumber": 408,
    "undocument": true,
    "params": [
      {
        "name": "results",
        "types": [
          "*"
        ]
      },
      {
        "name": "metaData",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 796,
    "kind": "file",
    "name": "lib/dialects/mariadb/connection-manager.js",
    "content": "\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nconst semver = require(\"semver\");\nconst AbstractConnectionManager = require(\"../abstract/connection-manager\");\nconst SequelizeErrors = require(\"../../errors\");\nconst { logger } = require(\"../../utils/logger\");\nconst DataTypes = require(\"../../data-types\").mariadb;\nconst momentTz = require(\"moment-timezone\");\nconst debug = logger.debugContext(\"connection:mariadb\");\nconst parserStore = require(\"../parserStore\")(\"mariadb\");\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 3306;\n    super(dialect, sequelize);\n    this.lib = this._loadDialectModule(\"mariadb\");\n    this.refreshTypeParser(DataTypes);\n  }\n  static _typecast(field, next) {\n    if (parserStore.get(field.type)) {\n      return parserStore.get(field.type)(field, this.sequelize.options, next);\n    }\n    return next();\n  }\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n  async connect(config) {\n    let tzOffset = this.sequelize.options.timezone;\n    tzOffset = /\\//.test(tzOffset) ? momentTz.tz(tzOffset).format(\"Z\") : tzOffset;\n    const connectionConfig = __spreadValues({\n      host: config.host,\n      port: config.port,\n      user: config.username,\n      password: config.password,\n      database: config.database,\n      timezone: tzOffset,\n      typeCast: ConnectionManager._typecast.bind(this),\n      bigNumberStrings: false,\n      supportBigNumbers: true,\n      foundRows: false\n    }, config.dialectOptions);\n    if (!this.sequelize.config.keepDefaultTimezone) {\n      if (connectionConfig.initSql) {\n        if (!Array.isArray(connectionConfig.initSql)) {\n          connectionConfig.initSql = [connectionConfig.initSql];\n        }\n        connectionConfig.initSql.push(`SET time_zone = '${tzOffset}'`);\n      } else {\n        connectionConfig.initSql = `SET time_zone = '${tzOffset}'`;\n      }\n    }\n    try {\n      const connection = await this.lib.createConnection(connectionConfig);\n      this.sequelize.options.databaseVersion = semver.coerce(connection.serverVersion()).version;\n      debug(\"connection acquired\");\n      connection.on(\"error\", (error) => {\n        switch (error.code) {\n          case \"ESOCKET\":\n          case \"ECONNRESET\":\n          case \"EPIPE\":\n          case \"PROTOCOL_CONNECTION_LOST\":\n            this.pool.destroy(connection);\n        }\n      });\n      return connection;\n    } catch (error) {\n      switch (error.code) {\n        case \"ECONNREFUSED\":\n          throw new SequelizeErrors.ConnectionRefusedError(error);\n        case \"ER_ACCESS_DENIED_ERROR\":\n        case \"ER_ACCESS_DENIED_NO_PASSWORD_ERROR\":\n          throw new SequelizeErrors.AccessDeniedError(error);\n        case \"ENOTFOUND\":\n          throw new SequelizeErrors.HostNotFoundError(error);\n        case \"EHOSTUNREACH\":\n        case \"ENETUNREACH\":\n        case \"EADDRNOTAVAIL\":\n          throw new SequelizeErrors.HostNotReachableError(error);\n        case \"EINVAL\":\n          throw new SequelizeErrors.InvalidConnectionError(error);\n        default:\n          throw new SequelizeErrors.ConnectionError(error);\n      }\n    }\n  }\n  async disconnect(connection) {\n    if (!connection.isValid()) {\n      debug(\"connection tried to disconnect but was already at CLOSED state\");\n      return;\n    }\n    return await connection.end();\n  }\n  validate(connection) {\n    return connection && connection.isValid();\n  }\n}\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n//# sourceMappingURL=connection-manager.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/dialects/mariadb/connection-manager.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 797,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/dialects/mariadb/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/mariadb/connection-manager.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mariadb/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 798,
    "kind": "variable",
    "name": "__getOwnPropSymbols",
    "memberof": "lib/dialects/mariadb/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/mariadb/connection-manager.js~__getOwnPropSymbols",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mariadb/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 799,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/dialects/mariadb/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/mariadb/connection-manager.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mariadb/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 800,
    "kind": "variable",
    "name": "__propIsEnum",
    "memberof": "lib/dialects/mariadb/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/mariadb/connection-manager.js~__propIsEnum",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mariadb/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 801,
    "kind": "function",
    "name": "__defNormalProp",
    "memberof": "lib/dialects/mariadb/connection-manager.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/mariadb/connection-manager.js~__defNormalProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mariadb/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 802,
    "kind": "function",
    "name": "__spreadValues",
    "memberof": "lib/dialects/mariadb/connection-manager.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/mariadb/connection-manager.js~__spreadValues",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mariadb/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 803,
    "kind": "variable",
    "name": "semver",
    "memberof": "lib/dialects/mariadb/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/mariadb/connection-manager.js~semver",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mariadb/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 804,
    "kind": "variable",
    "name": "AbstractConnectionManager",
    "memberof": "lib/dialects/mariadb/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/mariadb/connection-manager.js~AbstractConnectionManager",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mariadb/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 805,
    "kind": "variable",
    "name": "SequelizeErrors",
    "memberof": "lib/dialects/mariadb/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/mariadb/connection-manager.js~SequelizeErrors",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mariadb/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 806,
    "kind": "variable",
    "name": "logger",
    "memberof": "lib/dialects/mariadb/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/mariadb/connection-manager.js~logger",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mariadb/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 807,
    "kind": "variable",
    "name": "DataTypes",
    "memberof": "lib/dialects/mariadb/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/mariadb/connection-manager.js~DataTypes",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mariadb/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 808,
    "kind": "variable",
    "name": "momentTz",
    "memberof": "lib/dialects/mariadb/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/mariadb/connection-manager.js~momentTz",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mariadb/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 809,
    "kind": "variable",
    "name": "debug",
    "memberof": "lib/dialects/mariadb/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/mariadb/connection-manager.js~debug",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mariadb/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 810,
    "kind": "variable",
    "name": "parserStore",
    "memberof": "lib/dialects/mariadb/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/mariadb/connection-manager.js~parserStore",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mariadb/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 811,
    "kind": "class",
    "name": "ConnectionManager",
    "memberof": "lib/dialects/mariadb/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/mariadb/connection-manager.js~ConnectionManager",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mariadb/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "interface": false,
    "extends": [
      "AbstractConnectionManager"
    ],
    "ignore": true
  },
  {
    "__docId__": 812,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/dialects/mariadb/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mariadb/connection-manager.js~ConnectionManager#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 813,
    "kind": "member",
    "name": "lib",
    "memberof": "lib/dialects/mariadb/connection-manager.js~ConnectionManager",
    "static": false,
    "longname": "lib/dialects/mariadb/connection-manager.js~ConnectionManager#lib",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 814,
    "kind": "method",
    "name": "_typecast",
    "memberof": "lib/dialects/mariadb/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/mariadb/connection-manager.js~ConnectionManager._typecast",
    "access": "private",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "field",
        "types": [
          "*"
        ]
      },
      {
        "name": "next",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 815,
    "kind": "method",
    "name": "_refreshTypeParser",
    "memberof": "lib/dialects/mariadb/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mariadb/connection-manager.js~ConnectionManager#_refreshTypeParser",
    "access": "private",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "dataType",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 816,
    "kind": "method",
    "name": "_clearTypeParser",
    "memberof": "lib/dialects/mariadb/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mariadb/connection-manager.js~ConnectionManager#_clearTypeParser",
    "access": "private",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 817,
    "kind": "method",
    "name": "connect",
    "memberof": "lib/dialects/mariadb/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/mariadb/connection-manager.js~ConnectionManager#connect",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 818,
    "kind": "method",
    "name": "disconnect",
    "memberof": "lib/dialects/mariadb/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/mariadb/connection-manager.js~ConnectionManager#disconnect",
    "access": "public",
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "params": [
      {
        "name": "connection",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 819,
    "kind": "method",
    "name": "validate",
    "memberof": "lib/dialects/mariadb/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mariadb/connection-manager.js~ConnectionManager#validate",
    "access": "public",
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "params": [
      {
        "name": "connection",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 820,
    "kind": "file",
    "name": "lib/dialects/mariadb/data-types.js",
    "content": "\"use strict\";\nconst wkx = require(\"wkx\");\nconst _ = require(\"lodash\");\nconst momentTz = require(\"moment-timezone\");\nconst moment = require(\"moment\");\nmodule.exports = (BaseTypes) => {\n  BaseTypes.ABSTRACT.prototype.dialectTypes = \"https://mariadb.com/kb/en/library/resultset/#field-types\";\n  BaseTypes.DATE.types.mariadb = [\"DATETIME\"];\n  BaseTypes.STRING.types.mariadb = [\"VAR_STRING\"];\n  BaseTypes.CHAR.types.mariadb = [\"STRING\"];\n  BaseTypes.TEXT.types.mariadb = [\"BLOB\"];\n  BaseTypes.TINYINT.types.mariadb = [\"TINY\"];\n  BaseTypes.SMALLINT.types.mariadb = [\"SHORT\"];\n  BaseTypes.MEDIUMINT.types.mariadb = [\"INT24\"];\n  BaseTypes.INTEGER.types.mariadb = [\"LONG\"];\n  BaseTypes.BIGINT.types.mariadb = [\"LONGLONG\"];\n  BaseTypes.FLOAT.types.mariadb = [\"FLOAT\"];\n  BaseTypes.TIME.types.mariadb = [\"TIME\"];\n  BaseTypes.DATEONLY.types.mariadb = [\"DATE\"];\n  BaseTypes.BOOLEAN.types.mariadb = [\"TINY\"];\n  BaseTypes.BLOB.types.mariadb = [\"TINYBLOB\", \"BLOB\", \"LONGBLOB\"];\n  BaseTypes.DECIMAL.types.mariadb = [\"NEWDECIMAL\"];\n  BaseTypes.UUID.types.mariadb = false;\n  BaseTypes.ENUM.types.mariadb = false;\n  BaseTypes.REAL.types.mariadb = [\"DOUBLE\"];\n  BaseTypes.DOUBLE.types.mariadb = [\"DOUBLE\"];\n  BaseTypes.GEOMETRY.types.mariadb = [\"GEOMETRY\"];\n  BaseTypes.JSON.types.mariadb = [\"JSON\"];\n  class DECIMAL extends BaseTypes.DECIMAL {\n    toSql() {\n      let definition = super.toSql();\n      if (this._unsigned) {\n        definition += \" UNSIGNED\";\n      }\n      if (this._zerofill) {\n        definition += \" ZEROFILL\";\n      }\n      return definition;\n    }\n  }\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      return this._length ? `DATETIME(${this._length})` : \"DATETIME\";\n    }\n    _stringify(date, options) {\n      if (!moment.isMoment(date)) {\n        date = this._applyTimezone(date, options);\n      }\n      return date.format(\"YYYY-MM-DD HH:mm:ss.SSS\");\n    }\n    static parse(value, options) {\n      value = value.string();\n      if (value === null) {\n        return value;\n      }\n      if (momentTz.tz.zone(options.timezone)) {\n        value = momentTz.tz(value, options.timezone).toDate();\n      } else {\n        value = new Date(`${value} ${options.timezone}`);\n      }\n      return value;\n    }\n  }\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(value) {\n      return value.string();\n    }\n  }\n  class UUID extends BaseTypes.UUID {\n    toSql() {\n      return \"CHAR(36) BINARY\";\n    }\n  }\n  class GEOMETRY extends BaseTypes.GEOMETRY {\n    constructor(type, srid) {\n      super(type, srid);\n      if (_.isEmpty(this.type)) {\n        this.sqlType = this.key;\n      } else {\n        this.sqlType = this.type;\n      }\n    }\n    static parse(value) {\n      value = value.buffer();\n      if (!value || value.length === 0) {\n        return null;\n      }\n      value = value.slice(4);\n      return wkx.Geometry.parse(value).toGeoJSON({ shortCrs: true });\n    }\n    toSql() {\n      return this.sqlType;\n    }\n  }\n  class ENUM extends BaseTypes.ENUM {\n    toSql(options) {\n      return `ENUM(${this.values.map((value) => options.escape(value)).join(\", \")})`;\n    }\n  }\n  class JSONTYPE extends BaseTypes.JSON {\n    _stringify(value, options) {\n      return options.operation === \"where\" && typeof value === \"string\" ? value : JSON.stringify(value);\n    }\n  }\n  return {\n    ENUM,\n    DATE,\n    DATEONLY,\n    UUID,\n    GEOMETRY,\n    DECIMAL,\n    JSON: JSONTYPE\n  };\n};\n//# sourceMappingURL=data-types.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/dialects/mariadb/data-types.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 821,
    "kind": "variable",
    "name": "wkx",
    "memberof": "lib/dialects/mariadb/data-types.js",
    "static": true,
    "longname": "lib/dialects/mariadb/data-types.js~wkx",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mariadb/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 822,
    "kind": "variable",
    "name": "_",
    "memberof": "lib/dialects/mariadb/data-types.js",
    "static": true,
    "longname": "lib/dialects/mariadb/data-types.js~_",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mariadb/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 823,
    "kind": "variable",
    "name": "momentTz",
    "memberof": "lib/dialects/mariadb/data-types.js",
    "static": true,
    "longname": "lib/dialects/mariadb/data-types.js~momentTz",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mariadb/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 824,
    "kind": "variable",
    "name": "moment",
    "memberof": "lib/dialects/mariadb/data-types.js",
    "static": true,
    "longname": "lib/dialects/mariadb/data-types.js~moment",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mariadb/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 825,
    "kind": "file",
    "name": "lib/dialects/mariadb/index.js",
    "content": "\"use strict\";\nconst _ = require(\"lodash\");\nconst { AbstractDialect } = require(\"../abstract\");\nconst ConnectionManager = require(\"./connection-manager\");\nconst Query = require(\"./query\");\nconst QueryGenerator = require(\"./query-generator\");\nconst { MySQLQueryInterface } = require(\"../mysql/query-interface\");\nconst DataTypes = require(\"../../data-types\").mariadb;\nclass MariadbDialect extends AbstractDialect {\n  static supports = _.merge(_.cloneDeep(AbstractDialect.supports), {\n    \"VALUES ()\": true,\n    \"LIMIT ON UPDATE\": true,\n    lock: true,\n    forShare: \"LOCK IN SHARE MODE\",\n    settingIsolationLevelDuringTransaction: false,\n    schemas: true,\n    inserts: {\n      ignoreDuplicates: \" IGNORE\",\n      updateOnDuplicate: \" ON DUPLICATE KEY UPDATE\"\n    },\n    index: {\n      collate: false,\n      length: true,\n      parser: true,\n      type: true,\n      using: 1\n    },\n    constraints: {\n      dropConstraint: false,\n      check: false\n    },\n    indexViaAlter: true,\n    indexHints: true,\n    NUMERIC: true,\n    GEOMETRY: true,\n    JSON: true,\n    REGEXP: true\n  });\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new MySQLQueryInterface(sequelize, this.queryGenerator);\n  }\n}\nMariadbDialect.prototype.defaultVersion = \"10.1.44\";\nMariadbDialect.prototype.Query = Query;\nMariadbDialect.prototype.QueryGenerator = QueryGenerator;\nMariadbDialect.prototype.DataTypes = DataTypes;\nMariadbDialect.prototype.name = \"mariadb\";\nMariadbDialect.prototype.TICK_CHAR = \"`\";\nMariadbDialect.prototype.TICK_CHAR_LEFT = MariadbDialect.prototype.TICK_CHAR;\nMariadbDialect.prototype.TICK_CHAR_RIGHT = MariadbDialect.prototype.TICK_CHAR;\nmodule.exports = MariadbDialect;\n//# sourceMappingURL=index.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/dialects/mariadb/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 826,
    "kind": "variable",
    "name": "_",
    "memberof": "lib/dialects/mariadb/index.js",
    "static": true,
    "longname": "lib/dialects/mariadb/index.js~_",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mariadb/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 827,
    "kind": "variable",
    "name": "AbstractDialect",
    "memberof": "lib/dialects/mariadb/index.js",
    "static": true,
    "longname": "lib/dialects/mariadb/index.js~AbstractDialect",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mariadb/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 828,
    "kind": "variable",
    "name": "ConnectionManager",
    "memberof": "lib/dialects/mariadb/index.js",
    "static": true,
    "longname": "lib/dialects/mariadb/index.js~ConnectionManager",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mariadb/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 829,
    "kind": "variable",
    "name": "Query",
    "memberof": "lib/dialects/mariadb/index.js",
    "static": true,
    "longname": "lib/dialects/mariadb/index.js~Query",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mariadb/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 830,
    "kind": "variable",
    "name": "QueryGenerator",
    "memberof": "lib/dialects/mariadb/index.js",
    "static": true,
    "longname": "lib/dialects/mariadb/index.js~QueryGenerator",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mariadb/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 831,
    "kind": "variable",
    "name": "MySQLQueryInterface",
    "memberof": "lib/dialects/mariadb/index.js",
    "static": true,
    "longname": "lib/dialects/mariadb/index.js~MySQLQueryInterface",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mariadb/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 832,
    "kind": "variable",
    "name": "DataTypes",
    "memberof": "lib/dialects/mariadb/index.js",
    "static": true,
    "longname": "lib/dialects/mariadb/index.js~DataTypes",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mariadb/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 833,
    "kind": "class",
    "name": "MariadbDialect",
    "memberof": "lib/dialects/mariadb/index.js",
    "static": true,
    "longname": "lib/dialects/mariadb/index.js~MariadbDialect",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mariadb/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false,
    "extends": [
      "AbstractDialect"
    ],
    "ignore": true
  },
  {
    "__docId__": 834,
    "kind": "member",
    "name": "supports",
    "memberof": "lib/dialects/mariadb/index.js~MariadbDialect",
    "static": true,
    "longname": "lib/dialects/mariadb/index.js~MariadbDialect.supports",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 835,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/dialects/mariadb/index.js~MariadbDialect",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mariadb/index.js~MariadbDialect#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 836,
    "kind": "member",
    "name": "sequelize",
    "memberof": "lib/dialects/mariadb/index.js~MariadbDialect",
    "static": false,
    "longname": "lib/dialects/mariadb/index.js~MariadbDialect#sequelize",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 837,
    "kind": "member",
    "name": "connectionManager",
    "memberof": "lib/dialects/mariadb/index.js~MariadbDialect",
    "static": false,
    "longname": "lib/dialects/mariadb/index.js~MariadbDialect#connectionManager",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 838,
    "kind": "member",
    "name": "queryGenerator",
    "memberof": "lib/dialects/mariadb/index.js~MariadbDialect",
    "static": false,
    "longname": "lib/dialects/mariadb/index.js~MariadbDialect#queryGenerator",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 839,
    "kind": "member",
    "name": "queryInterface",
    "memberof": "lib/dialects/mariadb/index.js~MariadbDialect",
    "static": false,
    "longname": "lib/dialects/mariadb/index.js~MariadbDialect#queryInterface",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 840,
    "kind": "file",
    "name": "lib/dialects/mariadb/query-generator.js",
    "content": "\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nconst MySQLQueryGenerator = require(\"../mysql/query-generator\");\nconst Utils = require(\"./../../utils\");\nconst _ = require(\"lodash\");\nclass MariaDBQueryGenerator extends MySQLQueryGenerator {\n  createSchema(schema, options) {\n    options = __spreadValues({\n      charset: null,\n      collate: null\n    }, options);\n    return Utils.joinSQLFragments([\n      \"CREATE SCHEMA IF NOT EXISTS\",\n      this.quoteIdentifier(schema),\n      options.charset && `DEFAULT CHARACTER SET ${this.escape(options.charset)}`,\n      options.collate && `DEFAULT COLLATE ${this.escape(options.collate)}`,\n      \";\"\n    ]);\n  }\n  dropSchema(schema) {\n    return `DROP SCHEMA IF EXISTS ${this.quoteIdentifier(schema)};`;\n  }\n  showSchemasQuery(options) {\n    const schemasToSkip = [\n      \"'MYSQL'\",\n      \"'INFORMATION_SCHEMA'\",\n      \"'PERFORMANCE_SCHEMA'\"\n    ];\n    if (options.skip && Array.isArray(options.skip) && options.skip.length > 0) {\n      for (const schemaName of options.skip) {\n        schemasToSkip.push(this.escape(schemaName));\n      }\n    }\n    return Utils.joinSQLFragments([\n      \"SELECT SCHEMA_NAME as schema_name\",\n      \"FROM INFORMATION_SCHEMA.SCHEMATA\",\n      `WHERE SCHEMA_NAME NOT IN (${schemasToSkip.join(\", \")})`,\n      \";\"\n    ]);\n  }\n  showTablesQuery(database) {\n    let query = \"SELECT TABLE_NAME, TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE'\";\n    if (database) {\n      query += ` AND TABLE_SCHEMA = ${this.escape(database)}`;\n    } else {\n      query += \" AND TABLE_SCHEMA NOT IN ('MYSQL', 'INFORMATION_SCHEMA', 'PERFORMANCE_SCHEMA')\";\n    }\n    return `${query};`;\n  }\n  quoteIdentifier(identifier, force) {\n    return Utils.addTicks(Utils.removeTicks(identifier, \"`\"), \"`\");\n  }\n  jsonPathExtractionQuery(column, path, isJson) {\n    const quotedColumn = this.isIdentifierQuoted(column) ? column : this.quoteIdentifier(column);\n    const pathStr = this.escape([\"$\"].concat(_.toPath(path)).join(\".\").replace(/\\.(\\d+)(?:(?=\\.)|$)/g, (__, digit) => `[${digit}]`));\n    return `json_unquote(json_extract(${quotedColumn},${pathStr}))`;\n  }\n}\nmodule.exports = MariaDBQueryGenerator;\n//# sourceMappingURL=query-generator.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/dialects/mariadb/query-generator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 841,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/dialects/mariadb/query-generator.js",
    "static": true,
    "longname": "lib/dialects/mariadb/query-generator.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mariadb/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 842,
    "kind": "variable",
    "name": "__getOwnPropSymbols",
    "memberof": "lib/dialects/mariadb/query-generator.js",
    "static": true,
    "longname": "lib/dialects/mariadb/query-generator.js~__getOwnPropSymbols",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mariadb/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 843,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/dialects/mariadb/query-generator.js",
    "static": true,
    "longname": "lib/dialects/mariadb/query-generator.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mariadb/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 844,
    "kind": "variable",
    "name": "__propIsEnum",
    "memberof": "lib/dialects/mariadb/query-generator.js",
    "static": true,
    "longname": "lib/dialects/mariadb/query-generator.js~__propIsEnum",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mariadb/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 845,
    "kind": "function",
    "name": "__defNormalProp",
    "memberof": "lib/dialects/mariadb/query-generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/mariadb/query-generator.js~__defNormalProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mariadb/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 846,
    "kind": "function",
    "name": "__spreadValues",
    "memberof": "lib/dialects/mariadb/query-generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/mariadb/query-generator.js~__spreadValues",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mariadb/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 847,
    "kind": "variable",
    "name": "MySQLQueryGenerator",
    "memberof": "lib/dialects/mariadb/query-generator.js",
    "static": true,
    "longname": "lib/dialects/mariadb/query-generator.js~MySQLQueryGenerator",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mariadb/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 848,
    "kind": "variable",
    "name": "Utils",
    "memberof": "lib/dialects/mariadb/query-generator.js",
    "static": true,
    "longname": "lib/dialects/mariadb/query-generator.js~Utils",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mariadb/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 849,
    "kind": "variable",
    "name": "_",
    "memberof": "lib/dialects/mariadb/query-generator.js",
    "static": true,
    "longname": "lib/dialects/mariadb/query-generator.js~_",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mariadb/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 850,
    "kind": "class",
    "name": "MariaDBQueryGenerator",
    "memberof": "lib/dialects/mariadb/query-generator.js",
    "static": true,
    "longname": "lib/dialects/mariadb/query-generator.js~MariaDBQueryGenerator",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mariadb/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "interface": false,
    "extends": [
      "MySQLQueryGenerator"
    ],
    "ignore": true
  },
  {
    "__docId__": 851,
    "kind": "method",
    "name": "createSchema",
    "memberof": "lib/dialects/mariadb/query-generator.js~MariaDBQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mariadb/query-generator.js~MariaDBQueryGenerator#createSchema",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "schema",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 852,
    "kind": "method",
    "name": "dropSchema",
    "memberof": "lib/dialects/mariadb/query-generator.js~MariaDBQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mariadb/query-generator.js~MariaDBQueryGenerator#dropSchema",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [
      {
        "name": "schema",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 853,
    "kind": "method",
    "name": "showSchemasQuery",
    "memberof": "lib/dialects/mariadb/query-generator.js~MariaDBQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mariadb/query-generator.js~MariaDBQueryGenerator#showSchemasQuery",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 854,
    "kind": "method",
    "name": "showTablesQuery",
    "memberof": "lib/dialects/mariadb/query-generator.js~MariaDBQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mariadb/query-generator.js~MariaDBQueryGenerator#showTablesQuery",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "params": [
      {
        "name": "database",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 855,
    "kind": "method",
    "name": "quoteIdentifier",
    "memberof": "lib/dialects/mariadb/query-generator.js~MariaDBQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mariadb/query-generator.js~MariaDBQueryGenerator#quoteIdentifier",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "params": [
      {
        "name": "identifier",
        "types": [
          "*"
        ]
      },
      {
        "name": "force",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 856,
    "kind": "method",
    "name": "jsonPathExtractionQuery",
    "memberof": "lib/dialects/mariadb/query-generator.js~MariaDBQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mariadb/query-generator.js~MariaDBQueryGenerator#jsonPathExtractionQuery",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "params": [
      {
        "name": "column",
        "types": [
          "*"
        ]
      },
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "isJson",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 857,
    "kind": "file",
    "name": "lib/dialects/mssql/async-queue.js",
    "content": "var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __markAsModule = (target) => __defProp(target, \"__esModule\", { value: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __reExport = (target, module2, copyDefault, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2))\n      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== \"default\"))\n        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });\n  }\n  return target;\n};\nvar __toESM = (module2, isNodeMode) => {\n  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);\n};\nvar __toCommonJS = /* @__PURE__ */ ((cache) => {\n  return (module2, temp) => {\n    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);\n  };\n})(typeof WeakMap !== \"undefined\" ? /* @__PURE__ */ new WeakMap() : 0);\nvar async_queue_exports = {};\n__export(async_queue_exports, {\n  AsyncQueueError: () => AsyncQueueError,\n  default: () => async_queue_default\n});\nvar import_base_error = __toESM(require(\"../../errors/base-error\"));\nvar import_connection_error = __toESM(require(\"../../errors/connection-error\"));\nclass AsyncQueueError extends import_base_error.default {\n  constructor(message) {\n    super(message);\n    this.name = \"SequelizeAsyncQueueError\";\n  }\n}\nclass AsyncQueue {\n  previous;\n  closed;\n  rejectCurrent;\n  constructor() {\n    this.previous = Promise.resolve();\n    this.closed = false;\n    this.rejectCurrent = () => {\n    };\n  }\n  close() {\n    this.closed = true;\n    this.rejectCurrent(new import_connection_error.default(new AsyncQueueError(\"the connection was closed before this query could finish executing\")));\n  }\n  async enqueue(asyncFunction) {\n    return new Promise((resolve, reject) => {\n      this.previous = this.previous.then(() => {\n        this.rejectCurrent = reject;\n        if (this.closed) {\n          return reject(new import_connection_error.default(new AsyncQueueError(\"the connection was closed before this query could be executed\")));\n        }\n        return asyncFunction().then(resolve, reject);\n      });\n    });\n  }\n}\nvar async_queue_default = AsyncQueue;\nmodule.exports = __toCommonJS(async_queue_exports);\n//# sourceMappingURL=async-queue.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/dialects/mssql/async-queue.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 858,
    "kind": "variable",
    "name": "__create",
    "memberof": "lib/dialects/mssql/async-queue.js",
    "static": true,
    "longname": "lib/dialects/mssql/async-queue.js~__create",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/async-queue.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 859,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/dialects/mssql/async-queue.js",
    "static": true,
    "longname": "lib/dialects/mssql/async-queue.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/async-queue.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 860,
    "kind": "variable",
    "name": "__getOwnPropDesc",
    "memberof": "lib/dialects/mssql/async-queue.js",
    "static": true,
    "longname": "lib/dialects/mssql/async-queue.js~__getOwnPropDesc",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/async-queue.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 861,
    "kind": "variable",
    "name": "__getOwnPropNames",
    "memberof": "lib/dialects/mssql/async-queue.js",
    "static": true,
    "longname": "lib/dialects/mssql/async-queue.js~__getOwnPropNames",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/async-queue.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 862,
    "kind": "variable",
    "name": "__getProtoOf",
    "memberof": "lib/dialects/mssql/async-queue.js",
    "static": true,
    "longname": "lib/dialects/mssql/async-queue.js~__getProtoOf",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/async-queue.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 863,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/dialects/mssql/async-queue.js",
    "static": true,
    "longname": "lib/dialects/mssql/async-queue.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/async-queue.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 864,
    "kind": "function",
    "name": "__markAsModule",
    "memberof": "lib/dialects/mssql/async-queue.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/mssql/async-queue.js~__markAsModule",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/async-queue.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 865,
    "kind": "function",
    "name": "__export",
    "memberof": "lib/dialects/mssql/async-queue.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/mssql/async-queue.js~__export",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/async-queue.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "all",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 866,
    "kind": "function",
    "name": "__reExport",
    "memberof": "lib/dialects/mssql/async-queue.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/mssql/async-queue.js~__reExport",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/async-queue.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "copyDefault",
        "types": [
          "*"
        ]
      },
      {
        "name": "desc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 867,
    "kind": "function",
    "name": "__toESM",
    "memberof": "lib/dialects/mssql/async-queue.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/mssql/async-queue.js~__toESM",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/async-queue.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "isNodeMode",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 868,
    "kind": "variable",
    "name": "__toCommonJS",
    "memberof": "lib/dialects/mssql/async-queue.js",
    "static": true,
    "longname": "lib/dialects/mssql/async-queue.js~__toCommonJS",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/async-queue.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 869,
    "kind": "variable",
    "name": "async_queue_exports",
    "memberof": "lib/dialects/mssql/async-queue.js",
    "static": true,
    "longname": "lib/dialects/mssql/async-queue.js~async_queue_exports",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/async-queue.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 870,
    "kind": "variable",
    "name": "import_base_error",
    "memberof": "lib/dialects/mssql/async-queue.js",
    "static": true,
    "longname": "lib/dialects/mssql/async-queue.js~import_base_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/async-queue.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 871,
    "kind": "variable",
    "name": "import_connection_error",
    "memberof": "lib/dialects/mssql/async-queue.js",
    "static": true,
    "longname": "lib/dialects/mssql/async-queue.js~import_connection_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/async-queue.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 872,
    "kind": "class",
    "name": "AsyncQueueError",
    "memberof": "lib/dialects/mssql/async-queue.js",
    "static": true,
    "longname": "lib/dialects/mssql/async-queue.js~AsyncQueueError",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/async-queue.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "interface": false,
    "extends": [
      "import_base_error~import_base_error.default"
    ],
    "ignore": true
  },
  {
    "__docId__": 873,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/dialects/mssql/async-queue.js~AsyncQueueError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/async-queue.js~AsyncQueueError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 874,
    "kind": "member",
    "name": "name",
    "memberof": "lib/dialects/mssql/async-queue.js~AsyncQueueError",
    "static": false,
    "longname": "lib/dialects/mssql/async-queue.js~AsyncQueueError#name",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 875,
    "kind": "class",
    "name": "AsyncQueue",
    "memberof": "lib/dialects/mssql/async-queue.js",
    "static": true,
    "longname": "lib/dialects/mssql/async-queue.js~AsyncQueue",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/async-queue.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 876,
    "kind": "member",
    "name": "previous",
    "memberof": "lib/dialects/mssql/async-queue.js~AsyncQueue",
    "static": false,
    "longname": "lib/dialects/mssql/async-queue.js~AsyncQueue#previous",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 877,
    "kind": "member",
    "name": "closed",
    "memberof": "lib/dialects/mssql/async-queue.js~AsyncQueue",
    "static": false,
    "longname": "lib/dialects/mssql/async-queue.js~AsyncQueue#closed",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 878,
    "kind": "member",
    "name": "rejectCurrent",
    "memberof": "lib/dialects/mssql/async-queue.js~AsyncQueue",
    "static": false,
    "longname": "lib/dialects/mssql/async-queue.js~AsyncQueue#rejectCurrent",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 879,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/dialects/mssql/async-queue.js~AsyncQueue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/async-queue.js~AsyncQueue#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 883,
    "kind": "method",
    "name": "close",
    "memberof": "lib/dialects/mssql/async-queue.js~AsyncQueue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/async-queue.js~AsyncQueue#close",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 885,
    "kind": "method",
    "name": "enqueue",
    "memberof": "lib/dialects/mssql/async-queue.js~AsyncQueue",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/mssql/async-queue.js~AsyncQueue#enqueue",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "params": [
      {
        "name": "asyncFunction",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 888,
    "kind": "variable",
    "name": "async_queue_default",
    "memberof": "lib/dialects/mssql/async-queue.js",
    "static": true,
    "longname": "lib/dialects/mssql/async-queue.js~async_queue_default",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/async-queue.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 889,
    "kind": "file",
    "name": "lib/dialects/mssql/connection-manager.js",
    "content": "\"use strict\";\nconst AbstractConnectionManager = require(\"../abstract/connection-manager\");\nconst AsyncQueue = require(\"./async-queue\").default;\nconst { logger } = require(\"../../utils/logger\");\nconst sequelizeErrors = require(\"../../errors\");\nconst DataTypes = require(\"../../data-types\").mssql;\nconst parserStore = require(\"../parserStore\")(\"mssql\");\nconst debug = logger.debugContext(\"connection:mssql\");\nconst debugTedious = logger.debugContext(\"connection:mssql:tedious\");\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 1433;\n    super(dialect, sequelize);\n    this.lib = this._loadDialectModule(\"tedious\");\n    this.refreshTypeParser(DataTypes);\n  }\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n  async connect(config) {\n    const connectionConfig = {\n      server: config.host,\n      authentication: {\n        type: \"default\",\n        options: {\n          userName: config.username || void 0,\n          password: config.password || void 0\n        }\n      },\n      options: {\n        port: Number.parseInt(config.port, 10),\n        database: config.database,\n        trustServerCertificate: true\n      }\n    };\n    if (config.dialectOptions) {\n      if (config.dialectOptions.options && config.dialectOptions.options.instanceName) {\n        delete connectionConfig.options.port;\n      }\n      if (config.dialectOptions.authentication) {\n        Object.assign(connectionConfig.authentication, config.dialectOptions.authentication);\n      }\n      Object.assign(connectionConfig.options, config.dialectOptions.options);\n    }\n    try {\n      return await new Promise((resolve, reject) => {\n        const connection = new this.lib.Connection(connectionConfig);\n        if (connection.state === connection.STATE.INITIALIZED) {\n          connection.connect();\n        }\n        connection.queue = new AsyncQueue();\n        connection.lib = this.lib;\n        const connectHandler = (error) => {\n          connection.removeListener(\"end\", endHandler);\n          connection.removeListener(\"error\", errorHandler);\n          if (error) {\n            return reject(error);\n          }\n          debug(\"connection acquired\");\n          resolve(connection);\n        };\n        const endHandler = () => {\n          connection.removeListener(\"connect\", connectHandler);\n          connection.removeListener(\"error\", errorHandler);\n          reject(new Error(\"Connection was closed by remote server\"));\n        };\n        const errorHandler = (error) => {\n          connection.removeListener(\"connect\", connectHandler);\n          connection.removeListener(\"end\", endHandler);\n          reject(error);\n        };\n        connection.once(\"error\", errorHandler);\n        connection.once(\"end\", endHandler);\n        connection.once(\"connect\", connectHandler);\n        connection.on(\"error\", (error) => {\n          switch (error.code) {\n            case \"ESOCKET\":\n            case \"ECONNRESET\":\n              this.pool.destroy(connection);\n          }\n        });\n        if (config.dialectOptions && config.dialectOptions.debug) {\n          connection.on(\"debug\", debugTedious.log.bind(debugTedious));\n        }\n      });\n    } catch (error) {\n      if (!error.code) {\n        throw new sequelizeErrors.ConnectionError(error);\n      }\n      switch (error.code) {\n        case \"ESOCKET\":\n          if (error.message.includes(\"connect EHOSTUNREACH\")) {\n            throw new sequelizeErrors.HostNotReachableError(error);\n          }\n          if (error.message.includes(\"connect ENETUNREACH\")) {\n            throw new sequelizeErrors.HostNotReachableError(error);\n          }\n          if (error.message.includes(\"connect EADDRNOTAVAIL\")) {\n            throw new sequelizeErrors.HostNotReachableError(error);\n          }\n          if (error.message.includes(\"getaddrinfo ENOTFOUND\")) {\n            throw new sequelizeErrors.HostNotFoundError(error);\n          }\n          if (error.message.includes(\"connect ECONNREFUSED\")) {\n            throw new sequelizeErrors.ConnectionRefusedError(error);\n          }\n          throw new sequelizeErrors.ConnectionError(error);\n        case \"ER_ACCESS_DENIED_ERROR\":\n        case \"ELOGIN\":\n          throw new sequelizeErrors.AccessDeniedError(error);\n        case \"EINVAL\":\n          throw new sequelizeErrors.InvalidConnectionError(error);\n        default:\n          throw new sequelizeErrors.ConnectionError(error);\n      }\n    }\n  }\n  async disconnect(connection) {\n    if (connection.closed) {\n      return;\n    }\n    connection.queue.close();\n    return new Promise((resolve) => {\n      connection.on(\"end\", resolve);\n      connection.close();\n      debug(\"connection closed\");\n    });\n  }\n  validate(connection) {\n    return connection && (connection.loggedIn || connection.state.name === \"LoggedIn\");\n  }\n}\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n//# sourceMappingURL=connection-manager.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/dialects/mssql/connection-manager.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 890,
    "kind": "variable",
    "name": "AbstractConnectionManager",
    "memberof": "lib/dialects/mssql/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/mssql/connection-manager.js~AbstractConnectionManager",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 891,
    "kind": "variable",
    "name": "AsyncQueue",
    "memberof": "lib/dialects/mssql/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/mssql/connection-manager.js~AsyncQueue",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 892,
    "kind": "variable",
    "name": "logger",
    "memberof": "lib/dialects/mssql/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/mssql/connection-manager.js~logger",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 893,
    "kind": "variable",
    "name": "sequelizeErrors",
    "memberof": "lib/dialects/mssql/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/mssql/connection-manager.js~sequelizeErrors",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 894,
    "kind": "variable",
    "name": "DataTypes",
    "memberof": "lib/dialects/mssql/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/mssql/connection-manager.js~DataTypes",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 895,
    "kind": "variable",
    "name": "parserStore",
    "memberof": "lib/dialects/mssql/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/mssql/connection-manager.js~parserStore",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 896,
    "kind": "variable",
    "name": "debug",
    "memberof": "lib/dialects/mssql/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/mssql/connection-manager.js~debug",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 897,
    "kind": "variable",
    "name": "debugTedious",
    "memberof": "lib/dialects/mssql/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/mssql/connection-manager.js~debugTedious",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 898,
    "kind": "class",
    "name": "ConnectionManager",
    "memberof": "lib/dialects/mssql/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/mssql/connection-manager.js~ConnectionManager",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "interface": false,
    "extends": [
      "AbstractConnectionManager"
    ],
    "ignore": true
  },
  {
    "__docId__": 899,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/dialects/mssql/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/connection-manager.js~ConnectionManager#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 900,
    "kind": "member",
    "name": "lib",
    "memberof": "lib/dialects/mssql/connection-manager.js~ConnectionManager",
    "static": false,
    "longname": "lib/dialects/mssql/connection-manager.js~ConnectionManager#lib",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 901,
    "kind": "method",
    "name": "_refreshTypeParser",
    "memberof": "lib/dialects/mssql/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/connection-manager.js~ConnectionManager#_refreshTypeParser",
    "access": "private",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "dataType",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 902,
    "kind": "method",
    "name": "_clearTypeParser",
    "memberof": "lib/dialects/mssql/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/connection-manager.js~ConnectionManager#_clearTypeParser",
    "access": "private",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 903,
    "kind": "method",
    "name": "connect",
    "memberof": "lib/dialects/mssql/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/mssql/connection-manager.js~ConnectionManager#connect",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 904,
    "kind": "method",
    "name": "disconnect",
    "memberof": "lib/dialects/mssql/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/mssql/connection-manager.js~ConnectionManager#disconnect",
    "access": "public",
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "params": [
      {
        "name": "connection",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 905,
    "kind": "method",
    "name": "validate",
    "memberof": "lib/dialects/mssql/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/connection-manager.js~ConnectionManager#validate",
    "access": "public",
    "description": null,
    "lineNumber": 132,
    "undocument": true,
    "params": [
      {
        "name": "connection",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 906,
    "kind": "file",
    "name": "lib/dialects/mssql/data-types.js",
    "content": "\"use strict\";\nconst moment = require(\"moment\");\nmodule.exports = (BaseTypes) => {\n  const warn = BaseTypes.ABSTRACT.warn.bind(void 0, \"https://msdn.microsoft.com/en-us/library/ms187752%28v=sql.110%29.aspx\");\n  function removeUnsupportedIntegerOptions(dataType) {\n    if (dataType._length || dataType.options.length > 0 || dataType._unsigned || dataType._zerofill) {\n      warn(`MSSQL does not support '${dataType.key}' with options. Plain '${dataType.key}' will be used instead.`);\n      dataType._length = void 0;\n      dataType.options.length = void 0;\n      dataType._unsigned = void 0;\n      dataType._zerofill = void 0;\n    }\n  }\n  BaseTypes.DATE.types.mssql = [43];\n  BaseTypes.STRING.types.mssql = [231, 173];\n  BaseTypes.CHAR.types.mssql = [175];\n  BaseTypes.TEXT.types.mssql = false;\n  BaseTypes.TINYINT.types.mssql = [30];\n  BaseTypes.SMALLINT.types.mssql = [34];\n  BaseTypes.MEDIUMINT.types.mssql = false;\n  BaseTypes.INTEGER.types.mssql = [38];\n  BaseTypes.BIGINT.types.mssql = false;\n  BaseTypes.FLOAT.types.mssql = [109];\n  BaseTypes.TIME.types.mssql = [41];\n  BaseTypes.DATEONLY.types.mssql = [40];\n  BaseTypes.BOOLEAN.types.mssql = [104];\n  BaseTypes.BLOB.types.mssql = [165];\n  BaseTypes.DECIMAL.types.mssql = [106];\n  BaseTypes.UUID.types.mssql = false;\n  BaseTypes.ENUM.types.mssql = false;\n  BaseTypes.REAL.types.mssql = [109];\n  BaseTypes.DOUBLE.types.mssql = [109];\n  BaseTypes.GEOMETRY.types.mssql = false;\n  class BLOB extends BaseTypes.BLOB {\n    toSql() {\n      if (this._length) {\n        if (this._length.toLowerCase() === \"tiny\") {\n          warn(\"MSSQL does not support BLOB with the `length` = `tiny` option. `VARBINARY(256)` will be used instead.\");\n          return \"VARBINARY(256)\";\n        }\n        warn(\"MSSQL does not support BLOB with the `length` option. `VARBINARY(MAX)` will be used instead.\");\n      }\n      return \"VARBINARY(MAX)\";\n    }\n    _hexify(hex) {\n      return `0x${hex}`;\n    }\n  }\n  class STRING extends BaseTypes.STRING {\n    toSql() {\n      if (!this._binary) {\n        return `NVARCHAR(${this._length})`;\n      }\n      return `BINARY(${this._length})`;\n    }\n    _stringify(value, options) {\n      if (this._binary) {\n        return BLOB.prototype._stringify(value);\n      }\n      return options.escape(value);\n    }\n    _bindParam(value, options) {\n      return options.bindParam(this._binary ? Buffer.from(value) : value);\n    }\n  }\n  STRING.prototype.escape = false;\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      if (this._length) {\n        if (this._length.toLowerCase() === \"tiny\") {\n          warn(\"MSSQL does not support TEXT with the `length` = `tiny` option. `NVARCHAR(256)` will be used instead.\");\n          return \"NVARCHAR(256)\";\n        }\n        warn(\"MSSQL does not support TEXT with the `length` option. `NVARCHAR(MAX)` will be used instead.\");\n      }\n      return \"NVARCHAR(MAX)\";\n    }\n  }\n  class BOOLEAN extends BaseTypes.BOOLEAN {\n    toSql() {\n      return \"BIT\";\n    }\n  }\n  class UUID extends BaseTypes.UUID {\n    toSql() {\n      return \"CHAR(36)\";\n    }\n  }\n  class NOW extends BaseTypes.NOW {\n    toSql() {\n      return \"GETDATE()\";\n    }\n  }\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      return \"DATETIMEOFFSET\";\n    }\n  }\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(value) {\n      return moment(value).format(\"YYYY-MM-DD\");\n    }\n  }\n  class INTEGER extends BaseTypes.INTEGER {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class TINYINT extends BaseTypes.TINYINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class SMALLINT extends BaseTypes.SMALLINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class BIGINT extends BaseTypes.BIGINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class REAL extends BaseTypes.REAL {\n    constructor(length, decimals) {\n      super(length, decimals);\n      if (this._length || this.options.length > 0 || this._unsigned || this._zerofill) {\n        warn(\"MSSQL does not support REAL with options. Plain `REAL` will be used instead.\");\n        this._length = void 0;\n        this.options.length = void 0;\n        this._unsigned = void 0;\n        this._zerofill = void 0;\n      }\n    }\n  }\n  class FLOAT extends BaseTypes.FLOAT {\n    constructor(length, decimals) {\n      super(length, decimals);\n      if (this._decimals) {\n        warn(\"MSSQL does not support Float with decimals. Plain `FLOAT` will be used instead.\");\n        this._length = void 0;\n        this.options.length = void 0;\n      }\n      if (this._unsigned) {\n        warn(\"MSSQL does not support Float unsigned. `UNSIGNED` was removed.\");\n        this._unsigned = void 0;\n      }\n      if (this._zerofill) {\n        warn(\"MSSQL does not support Float zerofill. `ZEROFILL` was removed.\");\n        this._zerofill = void 0;\n      }\n    }\n  }\n  class ENUM extends BaseTypes.ENUM {\n    toSql() {\n      return \"VARCHAR(255)\";\n    }\n  }\n  return {\n    BLOB,\n    BOOLEAN,\n    ENUM,\n    STRING,\n    UUID,\n    DATE,\n    DATEONLY,\n    NOW,\n    TINYINT,\n    SMALLINT,\n    INTEGER,\n    BIGINT,\n    REAL,\n    FLOAT,\n    TEXT\n  };\n};\n//# sourceMappingURL=data-types.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/dialects/mssql/data-types.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 907,
    "kind": "variable",
    "name": "moment",
    "memberof": "lib/dialects/mssql/data-types.js",
    "static": true,
    "longname": "lib/dialects/mssql/data-types.js~moment",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 908,
    "kind": "file",
    "name": "lib/dialects/mssql/index.js",
    "content": "\"use strict\";\nconst _ = require(\"lodash\");\nconst { AbstractDialect } = require(\"../abstract\");\nconst ConnectionManager = require(\"./connection-manager\");\nconst Query = require(\"./query\");\nconst QueryGenerator = require(\"./query-generator\");\nconst DataTypes = require(\"../../data-types\").mssql;\nconst { MSSqlQueryInterface } = require(\"./query-interface\");\nclass MssqlDialect extends AbstractDialect {\n  static supports = _.merge(_.cloneDeep(AbstractDialect.supports), {\n    \"DEFAULT VALUES\": true,\n    \"LIMIT ON UPDATE\": true,\n    migrations: false,\n    returnValues: {\n      output: true\n    },\n    schemas: true,\n    autoIncrement: {\n      identityInsert: true,\n      defaultValue: false,\n      update: false\n    },\n    constraints: {\n      restrict: false,\n      default: true\n    },\n    index: {\n      collate: false,\n      type: true,\n      using: false,\n      where: true\n    },\n    NUMERIC: true,\n    tmpTableTrigger: true\n  });\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new MSSqlQueryInterface(sequelize, this.queryGenerator);\n  }\n}\nMssqlDialect.prototype.defaultVersion = \"14.0.1000\";\nMssqlDialect.prototype.Query = Query;\nMssqlDialect.prototype.name = \"mssql\";\nMssqlDialect.prototype.TICK_CHAR = '\"';\nMssqlDialect.prototype.TICK_CHAR_LEFT = \"[\";\nMssqlDialect.prototype.TICK_CHAR_RIGHT = \"]\";\nMssqlDialect.prototype.DataTypes = DataTypes;\nmodule.exports = MssqlDialect;\n//# sourceMappingURL=index.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/dialects/mssql/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 909,
    "kind": "variable",
    "name": "_",
    "memberof": "lib/dialects/mssql/index.js",
    "static": true,
    "longname": "lib/dialects/mssql/index.js~_",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 910,
    "kind": "variable",
    "name": "AbstractDialect",
    "memberof": "lib/dialects/mssql/index.js",
    "static": true,
    "longname": "lib/dialects/mssql/index.js~AbstractDialect",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 911,
    "kind": "variable",
    "name": "ConnectionManager",
    "memberof": "lib/dialects/mssql/index.js",
    "static": true,
    "longname": "lib/dialects/mssql/index.js~ConnectionManager",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 912,
    "kind": "variable",
    "name": "Query",
    "memberof": "lib/dialects/mssql/index.js",
    "static": true,
    "longname": "lib/dialects/mssql/index.js~Query",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 913,
    "kind": "variable",
    "name": "QueryGenerator",
    "memberof": "lib/dialects/mssql/index.js",
    "static": true,
    "longname": "lib/dialects/mssql/index.js~QueryGenerator",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 914,
    "kind": "variable",
    "name": "DataTypes",
    "memberof": "lib/dialects/mssql/index.js",
    "static": true,
    "longname": "lib/dialects/mssql/index.js~DataTypes",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 915,
    "kind": "variable",
    "name": "MSSqlQueryInterface",
    "memberof": "lib/dialects/mssql/index.js",
    "static": true,
    "longname": "lib/dialects/mssql/index.js~MSSqlQueryInterface",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 916,
    "kind": "class",
    "name": "MssqlDialect",
    "memberof": "lib/dialects/mssql/index.js",
    "static": true,
    "longname": "lib/dialects/mssql/index.js~MssqlDialect",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false,
    "extends": [
      "AbstractDialect"
    ],
    "ignore": true
  },
  {
    "__docId__": 917,
    "kind": "member",
    "name": "supports",
    "memberof": "lib/dialects/mssql/index.js~MssqlDialect",
    "static": true,
    "longname": "lib/dialects/mssql/index.js~MssqlDialect.supports",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 918,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/dialects/mssql/index.js~MssqlDialect",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/index.js~MssqlDialect#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 919,
    "kind": "member",
    "name": "sequelize",
    "memberof": "lib/dialects/mssql/index.js~MssqlDialect",
    "static": false,
    "longname": "lib/dialects/mssql/index.js~MssqlDialect#sequelize",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 920,
    "kind": "member",
    "name": "connectionManager",
    "memberof": "lib/dialects/mssql/index.js~MssqlDialect",
    "static": false,
    "longname": "lib/dialects/mssql/index.js~MssqlDialect#connectionManager",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 921,
    "kind": "member",
    "name": "queryGenerator",
    "memberof": "lib/dialects/mssql/index.js~MssqlDialect",
    "static": false,
    "longname": "lib/dialects/mssql/index.js~MssqlDialect#queryGenerator",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 922,
    "kind": "member",
    "name": "queryInterface",
    "memberof": "lib/dialects/mssql/index.js~MssqlDialect",
    "static": false,
    "longname": "lib/dialects/mssql/index.js~MssqlDialect#queryInterface",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 923,
    "kind": "file",
    "name": "lib/dialects/mssql/query-generator.js",
    "content": "\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nconst _ = require(\"lodash\");\nconst Utils = require(\"../../utils\");\nconst DataTypes = require(\"../../data-types\");\nconst { TableHints } = require(\"../../table-hints\");\nconst AbstractQueryGenerator = require(\"../abstract/query-generator\");\nconst randomBytes = require(\"crypto\").randomBytes;\nconst semver = require(\"semver\");\nconst { Op } = require(\"../../operators\");\nfunction throwMethodUndefined(methodName) {\n  throw new Error(`The method \"${methodName}\" is not defined! Please add it to your sql dialect.`);\n}\nclass MSSQLQueryGenerator extends AbstractQueryGenerator {\n  createDatabaseQuery(databaseName, options) {\n    options = __spreadValues({ collate: null }, options);\n    const collation = options.collate ? `COLLATE ${this.escape(options.collate)}` : \"\";\n    return [\n      \"IF NOT EXISTS (SELECT * FROM sys.databases WHERE name =\",\n      wrapSingleQuote(databaseName),\n      \")\",\n      \"BEGIN\",\n      \"CREATE DATABASE\",\n      this.quoteIdentifier(databaseName),\n      `${collation};`,\n      \"END;\"\n    ].join(\" \");\n  }\n  dropDatabaseQuery(databaseName) {\n    return [\n      \"IF EXISTS (SELECT * FROM sys.databases WHERE name =\",\n      wrapSingleQuote(databaseName),\n      \")\",\n      \"BEGIN\",\n      \"DROP DATABASE\",\n      this.quoteIdentifier(databaseName),\n      \";\",\n      \"END;\"\n    ].join(\" \");\n  }\n  createSchema(schema) {\n    return [\n      \"IF NOT EXISTS (SELECT schema_name\",\n      \"FROM information_schema.schemata\",\n      \"WHERE schema_name =\",\n      wrapSingleQuote(schema),\n      \")\",\n      \"BEGIN\",\n      \"EXEC sp_executesql N'CREATE SCHEMA\",\n      this.quoteIdentifier(schema),\n      \";'\",\n      \"END;\"\n    ].join(\" \");\n  }\n  dropSchema(schema) {\n    const quotedSchema = wrapSingleQuote(schema);\n    return [\n      \"IF EXISTS (SELECT schema_name\",\n      \"FROM information_schema.schemata\",\n      \"WHERE schema_name =\",\n      quotedSchema,\n      \")\",\n      \"BEGIN\",\n      \"DECLARE @id INT, @ms_sql NVARCHAR(2000);\",\n      \"DECLARE @cascade TABLE (\",\n      \"id INT NOT NULL IDENTITY PRIMARY KEY,\",\n      \"ms_sql NVARCHAR(2000) NOT NULL );\",\n      \"INSERT INTO @cascade ( ms_sql )\",\n      \"SELECT CASE WHEN o.type IN ('F','PK')\",\n      \"THEN N'ALTER TABLE ['+ s.name + N'].[' + p.name + N'] DROP CONSTRAINT [' + o.name + N']'\",\n      \"ELSE N'DROP TABLE ['+ s.name + N'].[' + o.name + N']' END\",\n      \"FROM sys.objects o\",\n      \"JOIN sys.schemas s on o.schema_id = s.schema_id\",\n      \"LEFT OUTER JOIN sys.objects p on o.parent_object_id = p.object_id\",\n      \"WHERE o.type IN ('F', 'PK', 'U') AND s.name = \",\n      quotedSchema,\n      \"ORDER BY o.type ASC;\",\n      \"SELECT TOP 1 @id = id, @ms_sql = ms_sql FROM @cascade ORDER BY id;\",\n      \"WHILE @id IS NOT NULL\",\n      \"BEGIN\",\n      \"BEGIN TRY EXEC sp_executesql @ms_sql; END TRY\",\n      \"BEGIN CATCH BREAK; THROW; END CATCH;\",\n      \"DELETE FROM @cascade WHERE id = @id;\",\n      \"SELECT @id = NULL, @ms_sql = NULL;\",\n      \"SELECT TOP 1 @id = id, @ms_sql = ms_sql FROM @cascade ORDER BY id;\",\n      \"END\",\n      \"EXEC sp_executesql N'DROP SCHEMA\",\n      this.quoteIdentifier(schema),\n      \";'\",\n      \"END;\"\n    ].join(\" \");\n  }\n  showSchemasQuery() {\n    return [\n      'SELECT \"name\" as \"schema_name\" FROM sys.schemas as s',\n      'WHERE \"s\".\"name\" NOT IN (',\n      \"'INFORMATION_SCHEMA', 'dbo', 'guest', 'sys', 'archive'\",\n      \")\",\n      \"AND\",\n      '\"s\".\"name\" NOT LIKE',\n      \"'db_%'\"\n    ].join(\" \");\n  }\n  versionQuery() {\n    return [\n      \"DECLARE @ms_ver NVARCHAR(20);\",\n      \"SET @ms_ver = REVERSE(CONVERT(NVARCHAR(20), SERVERPROPERTY('ProductVersion')));\",\n      \"SELECT REVERSE(SUBSTRING(@ms_ver, CHARINDEX('.', @ms_ver)+1, 20)) AS 'version'\"\n    ].join(\" \");\n  }\n  createTableQuery(tableName, attributes, options) {\n    const primaryKeys = [];\n    const foreignKeys = {};\n    const attributesClauseParts = [];\n    let commentStr = \"\";\n    for (const attr in attributes) {\n      if (Object.prototype.hasOwnProperty.call(attributes, attr)) {\n        let dataType = attributes[attr];\n        let match;\n        if (dataType.includes(\"COMMENT \")) {\n          const commentMatch = dataType.match(/^(.+) (COMMENT.*)$/);\n          const commentText = commentMatch[2].replace(\"COMMENT\", \"\").trim();\n          commentStr += this.commentTemplate(commentText, tableName, attr);\n          dataType = commentMatch[1];\n        }\n        if (dataType.includes(\"PRIMARY KEY\")) {\n          primaryKeys.push(attr);\n          if (dataType.includes(\"REFERENCES\")) {\n            match = dataType.match(/^(.+) (REFERENCES.*)$/);\n            attributesClauseParts.push(`${this.quoteIdentifier(attr)} ${match[1].replace(\"PRIMARY KEY\", \"\")}`);\n            foreignKeys[attr] = match[2];\n          } else {\n            attributesClauseParts.push(`${this.quoteIdentifier(attr)} ${dataType.replace(\"PRIMARY KEY\", \"\")}`);\n          }\n        } else if (dataType.includes(\"REFERENCES\")) {\n          match = dataType.match(/^(.+) (REFERENCES.*)$/);\n          attributesClauseParts.push(`${this.quoteIdentifier(attr)} ${match[1]}`);\n          foreignKeys[attr] = match[2];\n        } else {\n          attributesClauseParts.push(`${this.quoteIdentifier(attr)} ${dataType}`);\n        }\n      }\n    }\n    const pkString = primaryKeys.map((pk) => this.quoteIdentifier(pk)).join(\", \");\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, (columns, indexName) => {\n        if (columns.customIndex) {\n          if (typeof indexName !== \"string\") {\n            indexName = `uniq_${tableName}_${columns.fields.join(\"_\")}`;\n          }\n          attributesClauseParts.push(`CONSTRAINT ${this.quoteIdentifier(indexName)} UNIQUE (${columns.fields.map((field) => this.quoteIdentifier(field)).join(\", \")})`);\n        }\n      });\n    }\n    if (pkString.length > 0) {\n      attributesClauseParts.push(`PRIMARY KEY (${pkString})`);\n    }\n    for (const fkey in foreignKeys) {\n      if (Object.prototype.hasOwnProperty.call(foreignKeys, fkey)) {\n        attributesClauseParts.push(`FOREIGN KEY (${this.quoteIdentifier(fkey)}) ${foreignKeys[fkey]}`);\n      }\n    }\n    const quotedTableName = this.quoteTable(tableName);\n    return Utils.joinSQLFragments([\n      `IF OBJECT_ID('${quotedTableName}', 'U') IS NULL`,\n      `CREATE TABLE ${quotedTableName} (${attributesClauseParts.join(\", \")})`,\n      \";\",\n      commentStr\n    ]);\n  }\n  describeTableQuery(tableName, schema) {\n    let sql = [\n      \"SELECT\",\n      \"c.COLUMN_NAME AS 'Name',\",\n      \"c.DATA_TYPE AS 'Type',\",\n      \"c.CHARACTER_MAXIMUM_LENGTH AS 'Length',\",\n      \"c.IS_NULLABLE as 'IsNull',\",\n      \"COLUMN_DEFAULT AS 'Default',\",\n      \"pk.CONSTRAINT_TYPE AS 'Constraint',\",\n      \"COLUMNPROPERTY(OBJECT_ID(c.TABLE_SCHEMA+'.'+c.TABLE_NAME), c.COLUMN_NAME, 'IsIdentity') as 'IsIdentity',\",\n      \"CAST(prop.value AS NVARCHAR) AS 'Comment'\",\n      \"FROM\",\n      \"INFORMATION_SCHEMA.TABLES t\",\n      \"INNER JOIN\",\n      \"INFORMATION_SCHEMA.COLUMNS c ON t.TABLE_NAME = c.TABLE_NAME AND t.TABLE_SCHEMA = c.TABLE_SCHEMA\",\n      \"LEFT JOIN (SELECT tc.table_schema, tc.table_name, \",\n      \"cu.column_name, tc.CONSTRAINT_TYPE \",\n      \"FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc \",\n      \"JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE  cu \",\n      \"ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name \",\n      \"and tc.constraint_name=cu.constraint_name \",\n      \"and tc.CONSTRAINT_TYPE='PRIMARY KEY') pk \",\n      \"ON pk.table_schema=c.table_schema \",\n      \"AND pk.table_name=c.table_name \",\n      \"AND pk.column_name=c.column_name \",\n      \"INNER JOIN sys.columns AS sc\",\n      \"ON sc.object_id = object_id(t.table_schema + '.' + t.table_name) AND sc.name = c.column_name\",\n      \"LEFT JOIN sys.extended_properties prop ON prop.major_id = sc.object_id\",\n      \"AND prop.minor_id = sc.column_id\",\n      \"AND prop.name = 'MS_Description'\",\n      \"WHERE t.TABLE_NAME =\",\n      wrapSingleQuote(tableName)\n    ].join(\" \");\n    if (schema) {\n      sql += `AND t.TABLE_SCHEMA =${wrapSingleQuote(schema)}`;\n    }\n    return sql;\n  }\n  renameTableQuery(before, after) {\n    return `EXEC sp_rename ${this.quoteTable(before)}, ${this.quoteTable(after)};`;\n  }\n  showTablesQuery() {\n    return \"SELECT TABLE_NAME, TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE';\";\n  }\n  dropTableQuery(tableName) {\n    const quoteTbl = this.quoteTable(tableName);\n    return Utils.joinSQLFragments([\n      `IF OBJECT_ID('${quoteTbl}', 'U') IS NOT NULL`,\n      \"DROP TABLE\",\n      quoteTbl,\n      \";\"\n    ]);\n  }\n  addColumnQuery(table, key, dataType) {\n    dataType.field = key;\n    let commentStr = \"\";\n    if (dataType.comment && _.isString(dataType.comment)) {\n      commentStr = this.commentTemplate(dataType.comment, table, key);\n      delete dataType.comment;\n    }\n    return Utils.joinSQLFragments([\n      \"ALTER TABLE\",\n      this.quoteTable(table),\n      \"ADD\",\n      this.quoteIdentifier(key),\n      this.attributeToSQL(dataType, { context: \"addColumn\" }),\n      \";\",\n      commentStr\n    ]);\n  }\n  commentTemplate(comment, table, column) {\n    return ` EXEC sp_addextendedproperty @name = N'MS_Description', @value = ${this.escape(comment)}, @level0type = N'Schema', @level0name = 'dbo', @level1type = N'Table', @level1name = ${this.quoteIdentifier(table)}, @level2type = N'Column', @level2name = ${this.quoteIdentifier(column)};`;\n  }\n  removeColumnQuery(tableName, attributeName) {\n    return Utils.joinSQLFragments([\n      \"ALTER TABLE\",\n      this.quoteTable(tableName),\n      \"DROP COLUMN\",\n      this.quoteIdentifier(attributeName),\n      \";\"\n    ]);\n  }\n  changeColumnQuery(tableName, attributes) {\n    const attrString = [];\n    const constraintString = [];\n    let commentString = \"\";\n    for (const attributeName in attributes) {\n      const quotedAttrName = this.quoteIdentifier(attributeName);\n      let definition = attributes[attributeName];\n      if (definition.includes(\"COMMENT \")) {\n        const commentMatch = definition.match(/^(.+) (COMMENT.*)$/);\n        const commentText = commentMatch[2].replace(\"COMMENT\", \"\").trim();\n        commentString += this.commentTemplate(commentText, tableName, attributeName);\n        definition = commentMatch[1];\n      }\n      if (definition.includes(\"REFERENCES\")) {\n        constraintString.push(`FOREIGN KEY (${quotedAttrName}) ${definition.replace(/.+?(?=REFERENCES)/, \"\")}`);\n      } else {\n        attrString.push(`${quotedAttrName} ${definition}`);\n      }\n    }\n    return Utils.joinSQLFragments([\n      \"ALTER TABLE\",\n      this.quoteTable(tableName),\n      attrString.length && `ALTER COLUMN ${attrString.join(\", \")}`,\n      constraintString.length && `ADD ${constraintString.join(\", \")}`,\n      \";\",\n      commentString\n    ]);\n  }\n  renameColumnQuery(tableName, attrBefore, attributes) {\n    const newName = Object.keys(attributes)[0];\n    return Utils.joinSQLFragments([\n      \"EXEC sp_rename\",\n      `'${this.quoteTable(tableName)}.${attrBefore}',`,\n      `'${newName}',`,\n      \"'COLUMN'\",\n      \";\"\n    ]);\n  }\n  bulkInsertQuery(tableName, attrValueHashes, options, attributes) {\n    const quotedTable = this.quoteTable(tableName);\n    options = options || {};\n    attributes = attributes || {};\n    const tuples = [];\n    const allAttributes = [];\n    const allQueries = [];\n    let needIdentityInsertWrapper = false;\n    let outputFragment = \"\";\n    if (options.returning) {\n      const returnValues = this.generateReturnValues(attributes, options);\n      outputFragment = returnValues.outputFragment;\n    }\n    const emptyQuery = `INSERT INTO ${quotedTable}${outputFragment} DEFAULT VALUES`;\n    for (const attrValueHash of attrValueHashes) {\n      const fields = Object.keys(attrValueHash);\n      const firstAttr = attributes[fields[0]];\n      if (fields.length === 1 && firstAttr && firstAttr.autoIncrement && attrValueHash[fields[0]] === null) {\n        allQueries.push(emptyQuery);\n        continue;\n      }\n      _.forOwn(attrValueHash, (value, key) => {\n        if (value !== null && attributes[key] && attributes[key].autoIncrement) {\n          needIdentityInsertWrapper = true;\n        }\n        if (!allAttributes.includes(key)) {\n          if (value === null && attributes[key] && attributes[key].autoIncrement) {\n            return;\n          }\n          allAttributes.push(key);\n        }\n      });\n    }\n    if (allAttributes.length > 0) {\n      for (const attrValueHash of attrValueHashes) {\n        tuples.push(`(${allAttributes.map((key) => this.escape(attrValueHash[key])).join(\",\")})`);\n      }\n      const quotedAttributes = allAttributes.map((attr) => this.quoteIdentifier(attr)).join(\",\");\n      allQueries.push((tupleStr) => `INSERT INTO ${quotedTable} (${quotedAttributes})${outputFragment} VALUES ${tupleStr};`);\n    }\n    const commands = [];\n    let offset = 0;\n    const batch = Math.floor(250 / (allAttributes.length + 1)) + 1;\n    while (offset < Math.max(tuples.length, 1)) {\n      const tupleStr = tuples.slice(offset, Math.min(tuples.length, offset + batch));\n      let generatedQuery = allQueries.map((v) => typeof v === \"string\" ? v : v(tupleStr)).join(\";\");\n      if (needIdentityInsertWrapper) {\n        generatedQuery = `SET IDENTITY_INSERT ${quotedTable} ON; ${generatedQuery}; SET IDENTITY_INSERT ${quotedTable} OFF;`;\n      }\n      commands.push(generatedQuery);\n      offset += batch;\n    }\n    return commands.join(\";\");\n  }\n  updateQuery(tableName, attrValueHash, where, options, attributes) {\n    const sql = super.updateQuery(tableName, attrValueHash, where, options, attributes);\n    if (options.limit) {\n      const updateArgs = `UPDATE TOP(${this.escape(options.limit)})`;\n      sql.query = sql.query.replace(\"UPDATE\", updateArgs);\n    }\n    return sql;\n  }\n  upsertQuery(tableName, insertValues, updateValues, where, model) {\n    const targetTableAlias = this.quoteTable(`${tableName}_target`);\n    const sourceTableAlias = this.quoteTable(`${tableName}_source`);\n    const primaryKeysAttrs = [];\n    const identityAttrs = [];\n    const uniqueAttrs = [];\n    const tableNameQuoted = this.quoteTable(tableName);\n    let needIdentityInsertWrapper = false;\n    for (const key in model.rawAttributes) {\n      if (model.rawAttributes[key].primaryKey) {\n        primaryKeysAttrs.push(model.rawAttributes[key].field || key);\n      }\n      if (model.rawAttributes[key].unique) {\n        uniqueAttrs.push(model.rawAttributes[key].field || key);\n      }\n      if (model.rawAttributes[key].autoIncrement) {\n        identityAttrs.push(model.rawAttributes[key].field || key);\n      }\n    }\n    for (const index of model._indexes) {\n      if (index.unique && index.fields) {\n        for (const field of index.fields) {\n          const fieldName = typeof field === \"string\" ? field : field.name || field.attribute;\n          if (!uniqueAttrs.includes(fieldName) && model.rawAttributes[fieldName]) {\n            uniqueAttrs.push(fieldName);\n          }\n        }\n      }\n    }\n    const updateKeys = Object.keys(updateValues);\n    const insertKeys = Object.keys(insertValues);\n    const insertKeysQuoted = insertKeys.map((key) => this.quoteIdentifier(key)).join(\", \");\n    const insertValuesEscaped = insertKeys.map((key) => this.escape(insertValues[key])).join(\", \");\n    const sourceTableQuery = `VALUES(${insertValuesEscaped})`;\n    let joinCondition;\n    for (const key of identityAttrs) {\n      if (insertValues[key] && insertValues[key] !== null) {\n        needIdentityInsertWrapper = true;\n      }\n    }\n    const clauses = where[Op.or].filter((clause) => {\n      let valid = true;\n      for (const key in clause) {\n        if (typeof clause[key] === \"undefined\" || clause[key] == null) {\n          valid = false;\n          break;\n        }\n      }\n      return valid;\n    });\n    const getJoinSnippet = (array) => {\n      return array.map((key) => {\n        key = this.quoteIdentifier(key);\n        return `${targetTableAlias}.${key} = ${sourceTableAlias}.${key}`;\n      });\n    };\n    if (clauses.length === 0) {\n      throw new Error(\"Primary Key or Unique key should be passed to upsert query\");\n    } else {\n      for (const key in clauses) {\n        const keys = Object.keys(clauses[key]);\n        if (primaryKeysAttrs.includes(keys[0])) {\n          joinCondition = getJoinSnippet(primaryKeysAttrs).join(\" AND \");\n          break;\n        }\n      }\n      if (!joinCondition) {\n        joinCondition = getJoinSnippet(uniqueAttrs).join(\" AND \");\n      }\n    }\n    const filteredUpdateClauses = updateKeys.filter((key) => !identityAttrs.includes(key)).map((key) => {\n      const value = this.escape(updateValues[key]);\n      key = this.quoteIdentifier(key);\n      return `${targetTableAlias}.${key} = ${value}`;\n    });\n    const updateSnippet = filteredUpdateClauses.length > 0 ? `WHEN MATCHED THEN UPDATE SET ${filteredUpdateClauses.join(\", \")}` : \"\";\n    const insertSnippet = `(${insertKeysQuoted}) VALUES(${insertValuesEscaped})`;\n    let query = `MERGE INTO ${tableNameQuoted} WITH(HOLDLOCK) AS ${targetTableAlias} USING (${sourceTableQuery}) AS ${sourceTableAlias}(${insertKeysQuoted}) ON ${joinCondition}`;\n    query += ` ${updateSnippet} WHEN NOT MATCHED THEN INSERT ${insertSnippet} OUTPUT $action, INSERTED.*;`;\n    if (needIdentityInsertWrapper) {\n      query = `SET IDENTITY_INSERT ${tableNameQuoted} ON; ${query} SET IDENTITY_INSERT ${tableNameQuoted} OFF;`;\n    }\n    return query;\n  }\n  truncateTableQuery(tableName) {\n    return `TRUNCATE TABLE ${this.quoteTable(tableName)}`;\n  }\n  deleteQuery(tableName, where, options = {}, model) {\n    const table = this.quoteTable(tableName);\n    const whereClause = this.getWhereConditions(where, null, model, options);\n    return Utils.joinSQLFragments([\n      \"DELETE\",\n      options.limit && `TOP(${this.escape(options.limit)})`,\n      \"FROM\",\n      table,\n      whereClause && `WHERE ${whereClause}`,\n      \";\",\n      \"SELECT @@ROWCOUNT AS AFFECTEDROWS\",\n      \";\"\n    ]);\n  }\n  showIndexesQuery(tableName) {\n    return `EXEC sys.sp_helpindex @objname = N'${this.quoteTable(tableName)}';`;\n  }\n  showConstraintsQuery(tableName) {\n    return `EXEC sp_helpconstraint @objname = ${this.escape(this.quoteTable(tableName))};`;\n  }\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    let indexName = indexNameOrAttributes;\n    if (typeof indexName !== \"string\") {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join(\"_\")}`);\n    }\n    return `DROP INDEX ${this.quoteIdentifiers(indexName)} ON ${this.quoteIdentifiers(tableName)}`;\n  }\n  attributeToSQL(attribute) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    }\n    if (attribute.references && attribute.Model && attribute.Model.tableName === attribute.references.model) {\n      this.sequelize.log(\"MSSQL does not support self referencial constraints, we will remove it but we recommend restructuring your query\");\n      attribute.onDelete = \"\";\n      attribute.onUpdate = \"\";\n    }\n    let template;\n    if (attribute.type instanceof DataTypes.ENUM) {\n      if (attribute.type.values && !attribute.values) {\n        attribute.values = attribute.type.values;\n      }\n      template = attribute.type.toSql();\n      template += ` CHECK (${this.quoteIdentifier(attribute.field)} IN(${attribute.values.map((value) => {\n        return this.escape(value);\n      }).join(\", \")}))`;\n      return template;\n    }\n    template = attribute.type.toString();\n    if (attribute.allowNull === false) {\n      template += \" NOT NULL\";\n    } else if (!attribute.primaryKey && !Utils.defaultValueSchemable(attribute.defaultValue)) {\n      template += \" NULL\";\n    }\n    if (attribute.autoIncrement) {\n      template += \" IDENTITY(1,1)\";\n    }\n    if (attribute.type !== \"TEXT\" && attribute.type._binary !== true && Utils.defaultValueSchemable(attribute.defaultValue)) {\n      template += ` DEFAULT ${this.escape(attribute.defaultValue)}`;\n    }\n    if (attribute.unique === true) {\n      template += \" UNIQUE\";\n    }\n    if (attribute.primaryKey) {\n      template += \" PRIMARY KEY\";\n    }\n    if (attribute.references) {\n      template += ` REFERENCES ${this.quoteTable(attribute.references.model)}`;\n      if (attribute.references.key) {\n        template += ` (${this.quoteIdentifier(attribute.references.key)})`;\n      } else {\n        template += ` (${this.quoteIdentifier(\"id\")})`;\n      }\n      if (attribute.onDelete) {\n        template += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;\n      }\n      if (attribute.onUpdate) {\n        template += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;\n      }\n    }\n    if (attribute.comment && typeof attribute.comment === \"string\") {\n      template += ` COMMENT ${attribute.comment}`;\n    }\n    return template;\n  }\n  attributesToSQL(attributes, options) {\n    const result = {};\n    const existingConstraints = [];\n    let key;\n    let attribute;\n    for (key in attributes) {\n      attribute = attributes[key];\n      if (attribute.references) {\n        if (existingConstraints.includes(attribute.references.model.toString())) {\n          attribute.onDelete = \"\";\n          attribute.onUpdate = \"\";\n        } else {\n          existingConstraints.push(attribute.references.model.toString());\n          attribute.onUpdate = \"\";\n        }\n      }\n      if (key && !attribute.field) {\n        attribute.field = key;\n      }\n      result[attribute.field || key] = this.attributeToSQL(attribute, options);\n    }\n    return result;\n  }\n  createTrigger() {\n    throwMethodUndefined(\"createTrigger\");\n  }\n  dropTrigger() {\n    throwMethodUndefined(\"dropTrigger\");\n  }\n  renameTrigger() {\n    throwMethodUndefined(\"renameTrigger\");\n  }\n  createFunction() {\n    throwMethodUndefined(\"createFunction\");\n  }\n  dropFunction() {\n    throwMethodUndefined(\"dropFunction\");\n  }\n  renameFunction() {\n    throwMethodUndefined(\"renameFunction\");\n  }\n  _getForeignKeysQueryPrefix(catalogName) {\n    return `SELECT constraint_name = OBJ.NAME, constraintName = OBJ.NAME, ${catalogName ? `constraintCatalog = '${catalogName}', ` : \"\"}constraintSchema = SCHEMA_NAME(OBJ.SCHEMA_ID), tableName = TB.NAME, tableSchema = SCHEMA_NAME(TB.SCHEMA_ID), ${catalogName ? `tableCatalog = '${catalogName}', ` : \"\"}columnName = COL.NAME, referencedTableSchema = SCHEMA_NAME(RTB.SCHEMA_ID), ${catalogName ? `referencedCatalog = '${catalogName}', ` : \"\"}referencedTableName = RTB.NAME, referencedColumnName = RCOL.NAME FROM sys.foreign_key_columns FKC INNER JOIN sys.objects OBJ ON OBJ.OBJECT_ID = FKC.CONSTRAINT_OBJECT_ID INNER JOIN sys.tables TB ON TB.OBJECT_ID = FKC.PARENT_OBJECT_ID INNER JOIN sys.columns COL ON COL.COLUMN_ID = PARENT_COLUMN_ID AND COL.OBJECT_ID = TB.OBJECT_ID INNER JOIN sys.tables RTB ON RTB.OBJECT_ID = FKC.REFERENCED_OBJECT_ID INNER JOIN sys.columns RCOL ON RCOL.COLUMN_ID = REFERENCED_COLUMN_ID AND RCOL.OBJECT_ID = RTB.OBJECT_ID`;\n  }\n  getForeignKeysQuery(table, catalogName) {\n    const tableName = table.tableName || table;\n    let sql = `${this._getForeignKeysQueryPrefix(catalogName)} WHERE TB.NAME =${wrapSingleQuote(tableName)}`;\n    if (table.schema) {\n      sql += ` AND SCHEMA_NAME(TB.SCHEMA_ID) =${wrapSingleQuote(table.schema)}`;\n    }\n    return sql;\n  }\n  getForeignKeyQuery(table, attributeName) {\n    const tableName = table.tableName || table;\n    return Utils.joinSQLFragments([\n      this._getForeignKeysQueryPrefix(),\n      \"WHERE\",\n      `TB.NAME =${wrapSingleQuote(tableName)}`,\n      \"AND\",\n      `COL.NAME =${wrapSingleQuote(attributeName)}`,\n      table.schema && `AND SCHEMA_NAME(TB.SCHEMA_ID) =${wrapSingleQuote(table.schema)}`\n    ]);\n  }\n  getPrimaryKeyConstraintQuery(table, attributeName) {\n    const tableName = wrapSingleQuote(table.tableName || table);\n    return Utils.joinSQLFragments([\n      \"SELECT K.TABLE_NAME AS tableName,\",\n      \"K.COLUMN_NAME AS columnName,\",\n      \"K.CONSTRAINT_NAME AS constraintName\",\n      \"FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS C\",\n      \"JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS K\",\n      \"ON C.TABLE_NAME = K.TABLE_NAME\",\n      \"AND C.CONSTRAINT_CATALOG = K.CONSTRAINT_CATALOG\",\n      \"AND C.CONSTRAINT_SCHEMA = K.CONSTRAINT_SCHEMA\",\n      \"AND C.CONSTRAINT_NAME = K.CONSTRAINT_NAME\",\n      \"WHERE C.CONSTRAINT_TYPE = 'PRIMARY KEY'\",\n      `AND K.COLUMN_NAME = ${wrapSingleQuote(attributeName)}`,\n      `AND K.TABLE_NAME = ${tableName}`,\n      \";\"\n    ]);\n  }\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return Utils.joinSQLFragments([\n      \"ALTER TABLE\",\n      this.quoteTable(tableName),\n      \"DROP\",\n      this.quoteIdentifier(foreignKey)\n    ]);\n  }\n  getDefaultConstraintQuery(tableName, attributeName) {\n    const quotedTable = this.quoteTable(tableName);\n    return Utils.joinSQLFragments([\n      \"SELECT name FROM sys.default_constraints\",\n      `WHERE PARENT_OBJECT_ID = OBJECT_ID('${quotedTable}', 'U')`,\n      `AND PARENT_COLUMN_ID = (SELECT column_id FROM sys.columns WHERE NAME = ('${attributeName}')`,\n      `AND object_id = OBJECT_ID('${quotedTable}', 'U'))`,\n      \";\"\n    ]);\n  }\n  dropConstraintQuery(tableName, constraintName) {\n    return Utils.joinSQLFragments([\n      \"ALTER TABLE\",\n      this.quoteTable(tableName),\n      \"DROP CONSTRAINT\",\n      this.quoteIdentifier(constraintName),\n      \";\"\n    ]);\n  }\n  setIsolationLevelQuery() {\n  }\n  generateTransactionId() {\n    return randomBytes(10).toString(\"hex\");\n  }\n  startTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return `SAVE TRANSACTION ${this.quoteIdentifier(transaction.name)};`;\n    }\n    return \"BEGIN TRANSACTION;\";\n  }\n  commitTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return;\n    }\n    return \"COMMIT TRANSACTION;\";\n  }\n  rollbackTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return `ROLLBACK TRANSACTION ${this.quoteIdentifier(transaction.name)};`;\n    }\n    return \"ROLLBACK TRANSACTION;\";\n  }\n  selectFromTableFragment(options, model, attributes, tables, mainTableAs, where) {\n    this._throwOnEmptyAttributes(attributes, { modelName: model && model.name, as: mainTableAs });\n    const dbVersion = this.sequelize.options.databaseVersion;\n    const isSQLServer2008 = semver.valid(dbVersion) && semver.lt(dbVersion, \"11.0.0\");\n    if (isSQLServer2008 && options.offset) {\n      const offset = options.offset || 0;\n      const isSubQuery = options.hasIncludeWhere || options.hasIncludeRequired || options.hasMultiAssociation;\n      let orders = { mainQueryOrder: [] };\n      if (options.order) {\n        orders = this.getQueryOrders(options, model, isSubQuery);\n      }\n      if (orders.mainQueryOrder.length === 0) {\n        orders.mainQueryOrder.push(this.quoteIdentifier(model.primaryKeyField));\n      }\n      const tmpTable = mainTableAs || \"OffsetTable\";\n      if (options.include) {\n        const subQuery = options.subQuery === void 0 ? options.limit && options.hasMultiAssociation : options.subQuery;\n        const mainTable = {\n          name: mainTableAs,\n          quotedName: null,\n          as: null,\n          model\n        };\n        const topLevelInfo = {\n          names: mainTable,\n          options,\n          subQuery\n        };\n        let mainJoinQueries = [];\n        for (const include of options.include) {\n          if (include.separate) {\n            continue;\n          }\n          const joinQueries = this.generateInclude(include, { externalAs: mainTableAs, internalAs: mainTableAs }, topLevelInfo);\n          mainJoinQueries = mainJoinQueries.concat(joinQueries.mainQuery);\n        }\n        return Utils.joinSQLFragments([\n          \"SELECT TOP 100 PERCENT\",\n          attributes.join(\", \"),\n          \"FROM (\",\n          [\n            \"SELECT\",\n            options.limit && `TOP ${options.limit}`,\n            \"* FROM (\",\n            [\n              \"SELECT ROW_NUMBER() OVER (\",\n              [\n                \"ORDER BY\",\n                orders.mainQueryOrder.join(\", \")\n              ],\n              `) as row_num, ${tmpTable}.* FROM (`,\n              [\n                \"SELECT DISTINCT\",\n                `${tmpTable}.* FROM ${tables} AS ${tmpTable}`,\n                mainJoinQueries,\n                where && `WHERE ${where}`\n              ],\n              `) AS ${tmpTable}`\n            ],\n            `) AS ${tmpTable} WHERE row_num > ${offset}`\n          ],\n          `) AS ${tmpTable}`\n        ]);\n      }\n      return Utils.joinSQLFragments([\n        \"SELECT TOP 100 PERCENT\",\n        attributes.join(\", \"),\n        \"FROM (\",\n        [\n          \"SELECT\",\n          options.limit && `TOP ${options.limit}`,\n          \"* FROM (\",\n          [\n            \"SELECT ROW_NUMBER() OVER (\",\n            [\n              \"ORDER BY\",\n              orders.mainQueryOrder.join(\", \")\n            ],\n            `) as row_num, * FROM ${tables} AS ${tmpTable}`,\n            where && `WHERE ${where}`\n          ],\n          `) AS ${tmpTable} WHERE row_num > ${offset}`\n        ],\n        `) AS ${tmpTable}`\n      ]);\n    }\n    return Utils.joinSQLFragments([\n      \"SELECT\",\n      isSQLServer2008 && options.limit && `TOP ${options.limit}`,\n      attributes.join(\", \"),\n      `FROM ${tables}`,\n      mainTableAs && `AS ${mainTableAs}`,\n      options.tableHint && TableHints[options.tableHint] && `WITH (${TableHints[options.tableHint]})`\n    ]);\n  }\n  addLimitAndOffset(options, model) {\n    if (semver.valid(this.sequelize.options.databaseVersion) && semver.lt(this.sequelize.options.databaseVersion, \"11.0.0\")) {\n      return \"\";\n    }\n    const offset = options.offset || 0;\n    const isSubQuery = options.subQuery === void 0 ? options.hasIncludeWhere || options.hasIncludeRequired || options.hasMultiAssociation : options.subQuery;\n    let fragment = \"\";\n    let orders = {};\n    if (options.order) {\n      orders = this.getQueryOrders(options, model, isSubQuery);\n    }\n    if (options.limit || options.offset) {\n      if (!options.order || options.order.length === 0 || options.include && orders.subQueryOrder.length === 0) {\n        const tablePkFragment = `${this.quoteTable(options.tableAs || model.name)}.${this.quoteIdentifier(model.primaryKeyField)}`;\n        if (!options.order || options.order.length === 0) {\n          fragment += ` ORDER BY ${tablePkFragment}`;\n        } else {\n          const orderFieldNames = _.map(options.order, (order) => order[0]);\n          const primaryKeyFieldAlreadyPresent = _.includes(orderFieldNames, model.primaryKeyField);\n          if (!primaryKeyFieldAlreadyPresent) {\n            fragment += options.order && !isSubQuery ? \", \" : \" ORDER BY \";\n            fragment += tablePkFragment;\n          }\n        }\n      }\n      if (options.offset || options.limit) {\n        fragment += ` OFFSET ${this.escape(offset)} ROWS`;\n      }\n      if (options.limit) {\n        fragment += ` FETCH NEXT ${this.escape(options.limit)} ROWS ONLY`;\n      }\n    }\n    return fragment;\n  }\n  booleanValue(value) {\n    return value ? 1 : 0;\n  }\n  quoteIdentifier(identifier, force) {\n    return `[${identifier.replace(/['[\\]]+/g, \"\")}]`;\n  }\n}\nfunction wrapSingleQuote(identifier) {\n  return Utils.addTicks(Utils.removeTicks(identifier, \"'\"), \"'\");\n}\nmodule.exports = MSSQLQueryGenerator;\n//# sourceMappingURL=query-generator.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/dialects/mssql/query-generator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 924,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/dialects/mssql/query-generator.js",
    "static": true,
    "longname": "lib/dialects/mssql/query-generator.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 925,
    "kind": "variable",
    "name": "__getOwnPropSymbols",
    "memberof": "lib/dialects/mssql/query-generator.js",
    "static": true,
    "longname": "lib/dialects/mssql/query-generator.js~__getOwnPropSymbols",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 926,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/dialects/mssql/query-generator.js",
    "static": true,
    "longname": "lib/dialects/mssql/query-generator.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 927,
    "kind": "variable",
    "name": "__propIsEnum",
    "memberof": "lib/dialects/mssql/query-generator.js",
    "static": true,
    "longname": "lib/dialects/mssql/query-generator.js~__propIsEnum",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 928,
    "kind": "function",
    "name": "__defNormalProp",
    "memberof": "lib/dialects/mssql/query-generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/mssql/query-generator.js~__defNormalProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 929,
    "kind": "function",
    "name": "__spreadValues",
    "memberof": "lib/dialects/mssql/query-generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/mssql/query-generator.js~__spreadValues",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 930,
    "kind": "variable",
    "name": "_",
    "memberof": "lib/dialects/mssql/query-generator.js",
    "static": true,
    "longname": "lib/dialects/mssql/query-generator.js~_",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 931,
    "kind": "variable",
    "name": "Utils",
    "memberof": "lib/dialects/mssql/query-generator.js",
    "static": true,
    "longname": "lib/dialects/mssql/query-generator.js~Utils",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 932,
    "kind": "variable",
    "name": "DataTypes",
    "memberof": "lib/dialects/mssql/query-generator.js",
    "static": true,
    "longname": "lib/dialects/mssql/query-generator.js~DataTypes",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 933,
    "kind": "variable",
    "name": "TableHints",
    "memberof": "lib/dialects/mssql/query-generator.js",
    "static": true,
    "longname": "lib/dialects/mssql/query-generator.js~TableHints",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 934,
    "kind": "variable",
    "name": "AbstractQueryGenerator",
    "memberof": "lib/dialects/mssql/query-generator.js",
    "static": true,
    "longname": "lib/dialects/mssql/query-generator.js~AbstractQueryGenerator",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 935,
    "kind": "variable",
    "name": "randomBytes",
    "memberof": "lib/dialects/mssql/query-generator.js",
    "static": true,
    "longname": "lib/dialects/mssql/query-generator.js~randomBytes",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 936,
    "kind": "variable",
    "name": "semver",
    "memberof": "lib/dialects/mssql/query-generator.js",
    "static": true,
    "longname": "lib/dialects/mssql/query-generator.js~semver",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 937,
    "kind": "variable",
    "name": "Op",
    "memberof": "lib/dialects/mssql/query-generator.js",
    "static": true,
    "longname": "lib/dialects/mssql/query-generator.js~Op",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 938,
    "kind": "function",
    "name": "throwMethodUndefined",
    "memberof": "lib/dialects/mssql/query-generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/mssql/query-generator.js~throwMethodUndefined",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "methodName",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 939,
    "kind": "class",
    "name": "MSSQLQueryGenerator",
    "memberof": "lib/dialects/mssql/query-generator.js",
    "static": true,
    "longname": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "interface": false,
    "extends": [
      "AbstractQueryGenerator"
    ],
    "ignore": true
  },
  {
    "__docId__": 940,
    "kind": "method",
    "name": "createDatabaseQuery",
    "memberof": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator#createDatabaseQuery",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [
      {
        "name": "databaseName",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 941,
    "kind": "method",
    "name": "dropDatabaseQuery",
    "memberof": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator#dropDatabaseQuery",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [
      {
        "name": "databaseName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 942,
    "kind": "method",
    "name": "createSchema",
    "memberof": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator#createSchema",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "params": [
      {
        "name": "schema",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 943,
    "kind": "method",
    "name": "dropSchema",
    "memberof": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator#dropSchema",
    "access": "public",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [
      {
        "name": "schema",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 944,
    "kind": "method",
    "name": "showSchemasQuery",
    "memberof": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator#showSchemasQuery",
    "access": "public",
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 945,
    "kind": "method",
    "name": "versionQuery",
    "memberof": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator#versionQuery",
    "access": "public",
    "description": null,
    "lineNumber": 119,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 946,
    "kind": "method",
    "name": "createTableQuery",
    "memberof": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator#createTableQuery",
    "access": "public",
    "description": null,
    "lineNumber": 126,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributes",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 947,
    "kind": "method",
    "name": "describeTableQuery",
    "memberof": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator#describeTableQuery",
    "access": "public",
    "description": null,
    "lineNumber": 186,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "schema",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 948,
    "kind": "method",
    "name": "renameTableQuery",
    "memberof": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator#renameTableQuery",
    "access": "public",
    "description": null,
    "lineNumber": 224,
    "undocument": true,
    "params": [
      {
        "name": "before",
        "types": [
          "*"
        ]
      },
      {
        "name": "after",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 949,
    "kind": "method",
    "name": "showTablesQuery",
    "memberof": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator#showTablesQuery",
    "access": "public",
    "description": null,
    "lineNumber": 227,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 950,
    "kind": "method",
    "name": "dropTableQuery",
    "memberof": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator#dropTableQuery",
    "access": "public",
    "description": null,
    "lineNumber": 230,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 951,
    "kind": "method",
    "name": "addColumnQuery",
    "memberof": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator#addColumnQuery",
    "access": "public",
    "description": null,
    "lineNumber": 239,
    "undocument": true,
    "params": [
      {
        "name": "table",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "dataType",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 952,
    "kind": "method",
    "name": "commentTemplate",
    "memberof": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator#commentTemplate",
    "access": "public",
    "description": null,
    "lineNumber": 256,
    "undocument": true,
    "params": [
      {
        "name": "comment",
        "types": [
          "*"
        ]
      },
      {
        "name": "table",
        "types": [
          "*"
        ]
      },
      {
        "name": "column",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 953,
    "kind": "method",
    "name": "removeColumnQuery",
    "memberof": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator#removeColumnQuery",
    "access": "public",
    "description": null,
    "lineNumber": 259,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributeName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 954,
    "kind": "method",
    "name": "changeColumnQuery",
    "memberof": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator#changeColumnQuery",
    "access": "public",
    "description": null,
    "lineNumber": 268,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 955,
    "kind": "method",
    "name": "renameColumnQuery",
    "memberof": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator#renameColumnQuery",
    "access": "public",
    "description": null,
    "lineNumber": 296,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attrBefore",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 956,
    "kind": "method",
    "name": "bulkInsertQuery",
    "memberof": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator#bulkInsertQuery",
    "access": "public",
    "description": null,
    "lineNumber": 306,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attrValueHashes",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 957,
    "kind": "method",
    "name": "updateQuery",
    "memberof": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator#updateQuery",
    "access": "public",
    "description": null,
    "lineNumber": 360,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attrValueHash",
        "types": [
          "*"
        ]
      },
      {
        "name": "where",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 958,
    "kind": "method",
    "name": "upsertQuery",
    "memberof": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator#upsertQuery",
    "access": "public",
    "description": null,
    "lineNumber": 368,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "insertValues",
        "types": [
          "*"
        ]
      },
      {
        "name": "updateValues",
        "types": [
          "*"
        ]
      },
      {
        "name": "where",
        "types": [
          "*"
        ]
      },
      {
        "name": "model",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 959,
    "kind": "method",
    "name": "truncateTableQuery",
    "memberof": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator#truncateTableQuery",
    "access": "public",
    "description": null,
    "lineNumber": 452,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 960,
    "kind": "method",
    "name": "deleteQuery",
    "memberof": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator#deleteQuery",
    "access": "public",
    "description": null,
    "lineNumber": 455,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "where",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      },
      {
        "name": "model",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 961,
    "kind": "method",
    "name": "showIndexesQuery",
    "memberof": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator#showIndexesQuery",
    "access": "public",
    "description": null,
    "lineNumber": 469,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 962,
    "kind": "method",
    "name": "showConstraintsQuery",
    "memberof": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator#showConstraintsQuery",
    "access": "public",
    "description": null,
    "lineNumber": 472,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 963,
    "kind": "method",
    "name": "removeIndexQuery",
    "memberof": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator#removeIndexQuery",
    "access": "public",
    "description": null,
    "lineNumber": 475,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "indexNameOrAttributes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 964,
    "kind": "method",
    "name": "attributeToSQL",
    "memberof": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator#attributeToSQL",
    "access": "public",
    "description": null,
    "lineNumber": 482,
    "undocument": true,
    "params": [
      {
        "name": "attribute",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 965,
    "kind": "method",
    "name": "attributesToSQL",
    "memberof": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator#attributesToSQL",
    "access": "public",
    "description": null,
    "lineNumber": 541,
    "undocument": true,
    "params": [
      {
        "name": "attributes",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 966,
    "kind": "method",
    "name": "createTrigger",
    "memberof": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator#createTrigger",
    "access": "public",
    "description": null,
    "lineNumber": 564,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 967,
    "kind": "method",
    "name": "dropTrigger",
    "memberof": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator#dropTrigger",
    "access": "public",
    "description": null,
    "lineNumber": 567,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 968,
    "kind": "method",
    "name": "renameTrigger",
    "memberof": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator#renameTrigger",
    "access": "public",
    "description": null,
    "lineNumber": 570,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 969,
    "kind": "method",
    "name": "createFunction",
    "memberof": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator#createFunction",
    "access": "public",
    "description": null,
    "lineNumber": 573,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 970,
    "kind": "method",
    "name": "dropFunction",
    "memberof": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator#dropFunction",
    "access": "public",
    "description": null,
    "lineNumber": 576,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 971,
    "kind": "method",
    "name": "renameFunction",
    "memberof": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator#renameFunction",
    "access": "public",
    "description": null,
    "lineNumber": 579,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 972,
    "kind": "method",
    "name": "_getForeignKeysQueryPrefix",
    "memberof": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator#_getForeignKeysQueryPrefix",
    "access": "private",
    "description": null,
    "lineNumber": 582,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "catalogName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 973,
    "kind": "method",
    "name": "getForeignKeysQuery",
    "memberof": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator#getForeignKeysQuery",
    "access": "public",
    "description": null,
    "lineNumber": 585,
    "undocument": true,
    "params": [
      {
        "name": "table",
        "types": [
          "*"
        ]
      },
      {
        "name": "catalogName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 974,
    "kind": "method",
    "name": "getForeignKeyQuery",
    "memberof": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator#getForeignKeyQuery",
    "access": "public",
    "description": null,
    "lineNumber": 593,
    "undocument": true,
    "params": [
      {
        "name": "table",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributeName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 975,
    "kind": "method",
    "name": "getPrimaryKeyConstraintQuery",
    "memberof": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator#getPrimaryKeyConstraintQuery",
    "access": "public",
    "description": null,
    "lineNumber": 604,
    "undocument": true,
    "params": [
      {
        "name": "table",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributeName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 976,
    "kind": "method",
    "name": "dropForeignKeyQuery",
    "memberof": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator#dropForeignKeyQuery",
    "access": "public",
    "description": null,
    "lineNumber": 622,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "foreignKey",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 977,
    "kind": "method",
    "name": "getDefaultConstraintQuery",
    "memberof": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator#getDefaultConstraintQuery",
    "access": "public",
    "description": null,
    "lineNumber": 630,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributeName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 978,
    "kind": "method",
    "name": "dropConstraintQuery",
    "memberof": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator#dropConstraintQuery",
    "access": "public",
    "description": null,
    "lineNumber": 640,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "constraintName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 979,
    "kind": "method",
    "name": "setIsolationLevelQuery",
    "memberof": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator#setIsolationLevelQuery",
    "access": "public",
    "description": null,
    "lineNumber": 649,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 980,
    "kind": "method",
    "name": "generateTransactionId",
    "memberof": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator#generateTransactionId",
    "access": "public",
    "description": null,
    "lineNumber": 651,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 981,
    "kind": "method",
    "name": "startTransactionQuery",
    "memberof": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator#startTransactionQuery",
    "access": "public",
    "description": null,
    "lineNumber": 654,
    "undocument": true,
    "params": [
      {
        "name": "transaction",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 982,
    "kind": "method",
    "name": "commitTransactionQuery",
    "memberof": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator#commitTransactionQuery",
    "access": "public",
    "description": null,
    "lineNumber": 660,
    "undocument": true,
    "params": [
      {
        "name": "transaction",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 983,
    "kind": "method",
    "name": "rollbackTransactionQuery",
    "memberof": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator#rollbackTransactionQuery",
    "access": "public",
    "description": null,
    "lineNumber": 666,
    "undocument": true,
    "params": [
      {
        "name": "transaction",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 984,
    "kind": "method",
    "name": "selectFromTableFragment",
    "memberof": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator#selectFromTableFragment",
    "access": "public",
    "description": null,
    "lineNumber": 672,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      },
      {
        "name": "model",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributes",
        "types": [
          "*"
        ]
      },
      {
        "name": "tables",
        "types": [
          "*"
        ]
      },
      {
        "name": "mainTableAs",
        "types": [
          "*"
        ]
      },
      {
        "name": "where",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 985,
    "kind": "method",
    "name": "addLimitAndOffset",
    "memberof": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator#addLimitAndOffset",
    "access": "public",
    "description": null,
    "lineNumber": 767,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      },
      {
        "name": "model",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 986,
    "kind": "method",
    "name": "booleanValue",
    "memberof": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator#booleanValue",
    "access": "public",
    "description": null,
    "lineNumber": 801,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 987,
    "kind": "method",
    "name": "quoteIdentifier",
    "memberof": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query-generator.js~MSSQLQueryGenerator#quoteIdentifier",
    "access": "public",
    "description": null,
    "lineNumber": 804,
    "undocument": true,
    "params": [
      {
        "name": "identifier",
        "types": [
          "*"
        ]
      },
      {
        "name": "force",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 988,
    "kind": "function",
    "name": "wrapSingleQuote",
    "memberof": "lib/dialects/mssql/query-generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/mssql/query-generator.js~wrapSingleQuote",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 808,
    "undocument": true,
    "params": [
      {
        "name": "identifier",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 989,
    "kind": "file",
    "name": "lib/dialects/mssql/query-interface.js",
    "content": "\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nconst _ = require(\"lodash\");\nconst Utils = require(\"../../utils\");\nconst { QueryTypes } = require(\"../../query-types\");\nconst { Op } = require(\"../../operators\");\nconst { QueryInterface } = require(\"../abstract/query-interface\");\nclass MSSqlQueryInterface extends QueryInterface {\n  async removeColumn(tableName, attributeName, options) {\n    options = __spreadValues({ raw: true }, options);\n    const findConstraintSql = this.queryGenerator.getDefaultConstraintQuery(tableName, attributeName);\n    const [results0] = await this.sequelize.query(findConstraintSql, options);\n    if (results0.length > 0) {\n      const dropConstraintSql = this.queryGenerator.dropConstraintQuery(tableName, results0[0].name);\n      await this.sequelize.query(dropConstraintSql, options);\n    }\n    const findForeignKeySql = this.queryGenerator.getForeignKeyQuery(tableName, attributeName);\n    const [results] = await this.sequelize.query(findForeignKeySql, options);\n    if (results.length > 0) {\n      const dropForeignKeySql = this.queryGenerator.dropForeignKeyQuery(tableName, results[0].constraint_name);\n      await this.sequelize.query(dropForeignKeySql, options);\n    }\n    const primaryKeyConstraintSql = this.queryGenerator.getPrimaryKeyConstraintQuery(tableName, attributeName);\n    const [result] = await this.sequelize.query(primaryKeyConstraintSql, options);\n    if (result.length > 0) {\n      const dropConstraintSql = this.queryGenerator.dropConstraintQuery(tableName, result[0].constraintName);\n      await this.sequelize.query(dropConstraintSql, options);\n    }\n    const removeSql = this.queryGenerator.removeColumnQuery(tableName, attributeName);\n    return this.sequelize.query(removeSql, options);\n  }\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    const model = options.model;\n    const wheres = [];\n    options = __spreadValues({}, options);\n    if (!Utils.isWhereEmpty(where)) {\n      wheres.push(where);\n    }\n    let indexes = Object.values(model.uniqueKeys).map((item) => item.fields);\n    indexes = indexes.concat(Object.values(model._indexes).filter((item) => item.unique).map((item) => item.fields));\n    const attributes = Object.keys(insertValues);\n    for (const index of indexes) {\n      if (_.intersection(attributes, index).length === index.length) {\n        where = {};\n        for (const field of index) {\n          where[field] = insertValues[field];\n        }\n        wheres.push(where);\n      }\n    }\n    where = { [Op.or]: wheres };\n    options.type = QueryTypes.UPSERT;\n    options.raw = true;\n    const sql = this.queryGenerator.upsertQuery(tableName, insertValues, updateValues, where, model, options);\n    return await this.sequelize.query(sql, options);\n  }\n}\nexports.MSSqlQueryInterface = MSSqlQueryInterface;\n//# sourceMappingURL=query-interface.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/dialects/mssql/query-interface.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 990,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/dialects/mssql/query-interface.js",
    "static": true,
    "longname": "lib/dialects/mssql/query-interface.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 991,
    "kind": "variable",
    "name": "__getOwnPropSymbols",
    "memberof": "lib/dialects/mssql/query-interface.js",
    "static": true,
    "longname": "lib/dialects/mssql/query-interface.js~__getOwnPropSymbols",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 992,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/dialects/mssql/query-interface.js",
    "static": true,
    "longname": "lib/dialects/mssql/query-interface.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 993,
    "kind": "variable",
    "name": "__propIsEnum",
    "memberof": "lib/dialects/mssql/query-interface.js",
    "static": true,
    "longname": "lib/dialects/mssql/query-interface.js~__propIsEnum",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 994,
    "kind": "function",
    "name": "__defNormalProp",
    "memberof": "lib/dialects/mssql/query-interface.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/mssql/query-interface.js~__defNormalProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 995,
    "kind": "function",
    "name": "__spreadValues",
    "memberof": "lib/dialects/mssql/query-interface.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/mssql/query-interface.js~__spreadValues",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 996,
    "kind": "variable",
    "name": "_",
    "memberof": "lib/dialects/mssql/query-interface.js",
    "static": true,
    "longname": "lib/dialects/mssql/query-interface.js~_",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 997,
    "kind": "variable",
    "name": "Utils",
    "memberof": "lib/dialects/mssql/query-interface.js",
    "static": true,
    "longname": "lib/dialects/mssql/query-interface.js~Utils",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 998,
    "kind": "variable",
    "name": "QueryTypes",
    "memberof": "lib/dialects/mssql/query-interface.js",
    "static": true,
    "longname": "lib/dialects/mssql/query-interface.js~QueryTypes",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 999,
    "kind": "variable",
    "name": "Op",
    "memberof": "lib/dialects/mssql/query-interface.js",
    "static": true,
    "longname": "lib/dialects/mssql/query-interface.js~Op",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1000,
    "kind": "variable",
    "name": "QueryInterface",
    "memberof": "lib/dialects/mssql/query-interface.js",
    "static": true,
    "longname": "lib/dialects/mssql/query-interface.js~QueryInterface",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1001,
    "kind": "class",
    "name": "MSSqlQueryInterface",
    "memberof": "lib/dialects/mssql/query-interface.js",
    "static": true,
    "longname": "lib/dialects/mssql/query-interface.js~MSSqlQueryInterface",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "interface": false,
    "extends": [
      "QueryInterface"
    ],
    "ignore": true
  },
  {
    "__docId__": 1002,
    "kind": "method",
    "name": "removeColumn",
    "memberof": "lib/dialects/mssql/query-interface.js~MSSqlQueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/mssql/query-interface.js~MSSqlQueryInterface#removeColumn",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributeName",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1003,
    "kind": "method",
    "name": "upsert",
    "memberof": "lib/dialects/mssql/query-interface.js~MSSqlQueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/mssql/query-interface.js~MSSqlQueryInterface#upsert",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "insertValues",
        "types": [
          "*"
        ]
      },
      {
        "name": "updateValues",
        "types": [
          "*"
        ]
      },
      {
        "name": "where",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1004,
    "kind": "file",
    "name": "lib/dialects/mssql/query.js",
    "content": "\"use strict\";\nconst AbstractQuery = require(\"../abstract/query\");\nconst sequelizeErrors = require(\"../../errors\");\nconst parserStore = require(\"../parserStore\")(\"mssql\");\nconst _ = require(\"lodash\");\nconst { logger } = require(\"../../utils/logger\");\nconst debug = logger.debugContext(\"sql:mssql\");\nfunction getScale(aNum) {\n  if (!Number.isFinite(aNum)) {\n    return 0;\n  }\n  let e = 1;\n  while (Math.round(aNum * e) / e !== aNum) {\n    e *= 10;\n  }\n  return Math.log10(e);\n}\nclass Query extends AbstractQuery {\n  getInsertIdField() {\n    return \"id\";\n  }\n  getSQLTypeFromJsType(value, TYPES) {\n    const paramType = { type: TYPES.VarChar, typeOptions: {} };\n    paramType.type = TYPES.NVarChar;\n    if (typeof value === \"number\") {\n      if (Number.isInteger(value)) {\n        if (value >= -2147483648 && value <= 2147483647) {\n          paramType.type = TYPES.Int;\n        } else {\n          paramType.type = TYPES.BigInt;\n        }\n      } else {\n        paramType.type = TYPES.Numeric;\n        paramType.typeOptions = { precision: 30, scale: getScale(value) };\n      }\n    } else if (typeof value === \"boolean\") {\n      paramType.type = TYPES.Bit;\n    }\n    if (Buffer.isBuffer(value)) {\n      paramType.type = TYPES.VarBinary;\n    }\n    return paramType;\n  }\n  async _run(connection, sql, parameters, errStack) {\n    this.sql = sql;\n    const { options } = this;\n    const complete = this._logQuery(sql, debug, parameters);\n    const query = new Promise((resolve, reject) => {\n      if (sql.startsWith(\"BEGIN TRANSACTION\")) {\n        connection.beginTransaction((error) => error ? reject(error) : resolve([]), options.transaction.name, connection.lib.ISOLATION_LEVEL[options.isolationLevel]);\n        return;\n      }\n      if (sql.startsWith(\"COMMIT TRANSACTION\")) {\n        connection.commitTransaction((error) => error ? reject(error) : resolve([]));\n        return;\n      }\n      if (sql.startsWith(\"ROLLBACK TRANSACTION\")) {\n        connection.rollbackTransaction((error) => error ? reject(error) : resolve([]), options.transaction.name);\n        return;\n      }\n      if (sql.startsWith(\"SAVE TRANSACTION\")) {\n        connection.saveTransaction((error) => error ? reject(error) : resolve([]), options.transaction.name);\n        return;\n      }\n      const rows2 = [];\n      const request = new connection.lib.Request(sql, (err, rowCount2) => err ? reject(err) : resolve([rows2, rowCount2]));\n      if (parameters) {\n        _.forOwn(parameters, (value, key) => {\n          const paramType = this.getSQLTypeFromJsType(value, connection.lib.TYPES);\n          request.addParameter(key, paramType.type, value, paramType.typeOptions);\n        });\n      }\n      request.on(\"row\", (columns) => {\n        rows2.push(columns);\n      });\n      connection.execSql(request);\n    });\n    let rows;\n    let rowCount;\n    try {\n      [rows, rowCount] = await query;\n    } catch (error) {\n      error.sql = sql;\n      error.parameters = parameters;\n      throw this.formatError(error, errStack);\n    }\n    complete();\n    if (Array.isArray(rows)) {\n      rows = rows.map((columns) => {\n        const row = {};\n        for (const column of columns) {\n          const typeid = column.metadata.type.id;\n          const parse = parserStore.get(typeid);\n          let value = column.value;\n          if (value !== null & Boolean(parse)) {\n            value = parse(value);\n          }\n          row[column.metadata.colName] = value;\n        }\n        return row;\n      });\n    }\n    return this.formatResults(rows, rowCount);\n  }\n  run(sql, parameters) {\n    const errForStack = new Error();\n    return this.connection.queue.enqueue(() => this._run(this.connection, sql, parameters, errForStack.stack));\n  }\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = {};\n    const replacementFunc = (match, key, valuesIn) => {\n      if (valuesIn[key] !== void 0) {\n        bindParam[key] = valuesIn[key];\n        return `@${key}`;\n      }\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    return [sql, bindParam];\n  }\n  formatResults(data, rowCount) {\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n      return [this.instance || data, rowCount];\n    }\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n    if (this.isDescribeQuery()) {\n      const result = {};\n      for (const _result of data) {\n        if (_result.Default) {\n          _result.Default = _result.Default.replace(\"('\", \"\").replace(\"')\", \"\").replace(/'/g, \"\");\n        }\n        result[_result.Name] = {\n          type: _result.Type.toUpperCase(),\n          allowNull: _result.IsNull === \"YES\",\n          defaultValue: _result.Default,\n          primaryKey: _result.Constraint === \"PRIMARY KEY\",\n          autoIncrement: _result.IsIdentity === 1,\n          comment: _result.Comment\n        };\n        if (result[_result.Name].type.includes(\"CHAR\") && _result.Length) {\n          if (_result.Length === -1) {\n            result[_result.Name].type += \"(MAX)\";\n          } else {\n            result[_result.Name].type += `(${_result.Length})`;\n          }\n        }\n      }\n      return result;\n    }\n    if (this.isSelectQuery()) {\n      return this.handleSelectQuery(data);\n    }\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n    if (this.isBulkUpdateQuery()) {\n      if (this.options.returning) {\n        return this.handleSelectQuery(data);\n      }\n      return rowCount;\n    }\n    if (this.isBulkDeleteQuery()) {\n      return data[0] ? data[0].AFFECTEDROWS : 0;\n    }\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n    if (this.isForeignKeysQuery()) {\n      return data;\n    }\n    if (this.isUpsertQuery()) {\n      if (data && data.length === 0) {\n        return [this.instance || data, false];\n      }\n      this.handleInsertQuery(data);\n      return [this.instance || data, data[0].$action === \"INSERT\"];\n    }\n    if (this.isUpdateQuery()) {\n      return [this.instance || data, rowCount];\n    }\n    if (this.isShowConstraintsQuery()) {\n      return this.handleShowConstraintsQuery(data);\n    }\n    if (this.isRawQuery()) {\n      return [data, rowCount];\n    }\n    return data;\n  }\n  handleShowTablesQuery(results) {\n    return results.map((resultSet) => {\n      return {\n        tableName: resultSet.TABLE_NAME,\n        schema: resultSet.TABLE_SCHEMA\n      };\n    });\n  }\n  handleShowConstraintsQuery(data) {\n    return data.slice(1).map((result) => {\n      const constraint = {};\n      for (const key in result) {\n        constraint[_.camelCase(key)] = result[key];\n      }\n      return constraint;\n    });\n  }\n  formatError(err, errStack) {\n    let match;\n    match = err.message.match(/Violation of (?:UNIQUE|PRIMARY) KEY constraint '([^']*)'. Cannot insert duplicate key in object '.*'.(:? The duplicate key value is \\((.*)\\).)?/);\n    match = match || err.message.match(/Cannot insert duplicate key row in object .* with unique index '(.*)'/);\n    if (match && match.length > 1) {\n      let fields = {};\n      const uniqueKey = this.model && this.model.uniqueKeys[match[1]];\n      let message = \"Validation error\";\n      if (uniqueKey && Boolean(uniqueKey.msg)) {\n        message = uniqueKey.msg;\n      }\n      if (match[3]) {\n        const values = match[3].split(\",\").map((part) => part.trim());\n        if (uniqueKey) {\n          fields = _.zipObject(uniqueKey.fields, values);\n        } else {\n          fields[match[1]] = match[3];\n        }\n      }\n      const errors = [];\n      _.forOwn(fields, (value, field) => {\n        errors.push(new sequelizeErrors.ValidationErrorItem(this.getUniqueConstraintErrorMessage(field), \"unique violation\", field, value, this.instance, \"not_unique\"));\n      });\n      return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields, stack: errStack });\n    }\n    match = err.message.match(/Failed on step '(.*)'.Could not create constraint. See previous errors./) || err.message.match(/The DELETE statement conflicted with the REFERENCE constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./) || err.message.match(/The (?:INSERT|MERGE|UPDATE) statement conflicted with the FOREIGN KEY constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./);\n    if (match && match.length > 0) {\n      return new sequelizeErrors.ForeignKeyConstraintError({\n        fields: null,\n        index: match[1],\n        parent: err,\n        stack: errStack\n      });\n    }\n    match = err.message.match(/Could not drop constraint. See previous errors./);\n    if (match && match.length > 0) {\n      let constraint = err.sql.match(/(?:constraint|index) \\[(.+?)]/i);\n      constraint = constraint ? constraint[1] : void 0;\n      let table = err.sql.match(/table \\[(.+?)]/i);\n      table = table ? table[1] : void 0;\n      return new sequelizeErrors.UnknownConstraintError({\n        message: match[1],\n        constraint,\n        table,\n        parent: err,\n        stack: errStack\n      });\n    }\n    return new sequelizeErrors.DatabaseError(err, { stack: errStack });\n  }\n  isShowOrDescribeQuery() {\n    let result = false;\n    result = result || this.sql.toLowerCase().startsWith(\"select c.column_name as 'name', c.data_type as 'type', c.is_nullable as 'isnull'\");\n    result = result || this.sql.toLowerCase().startsWith(\"select tablename = t.name, name = ind.name,\");\n    result = result || this.sql.toLowerCase().startsWith(\"exec sys.sp_helpindex @objname\");\n    return result;\n  }\n  isShowIndexesQuery() {\n    return this.sql.toLowerCase().startsWith(\"exec sys.sp_helpindex @objname\");\n  }\n  handleShowIndexesQuery(data) {\n    data = data.reduce((acc, item) => {\n      if (!(item.index_name in acc)) {\n        acc[item.index_name] = item;\n        item.fields = [];\n      }\n      for (const column of item.index_keys.split(\",\")) {\n        let columnName = column.trim();\n        if (columnName.includes(\"(-)\")) {\n          columnName = columnName.replace(\"(-)\", \"\");\n        }\n        acc[item.index_name].fields.push({\n          attribute: columnName,\n          length: void 0,\n          order: column.includes(\"(-)\") ? \"DESC\" : \"ASC\",\n          collate: void 0\n        });\n      }\n      delete item.index_keys;\n      return acc;\n    }, {});\n    return _.map(data, (item) => ({\n      primary: item.index_name.toLowerCase().startsWith(\"pk\"),\n      fields: item.fields,\n      name: item.index_name,\n      tableName: void 0,\n      unique: item.index_description.toLowerCase().includes(\"unique\"),\n      type: void 0\n    }));\n  }\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n      let autoIncrementAttributeAlias = null;\n      if (Object.prototype.hasOwnProperty.call(this.model.rawAttributes, autoIncrementAttribute) && this.model.rawAttributes[autoIncrementAttribute].field !== void 0) {\n        autoIncrementAttributeAlias = this.model.rawAttributes[autoIncrementAttribute].field;\n      }\n      id = id || results && results[0][this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n      id = id || results && results[0][autoIncrementAttribute];\n      id = id || autoIncrementAttributeAlias && results && results[0][autoIncrementAttributeAlias];\n      this.instance[autoIncrementAttribute] = id;\n      if (this.instance.dataValues) {\n        for (const key in results[0]) {\n          if (Object.prototype.hasOwnProperty.call(results[0], key)) {\n            const record = results[0][key];\n            const attr = _.find(this.model.rawAttributes, (attribute) => attribute.fieldName === key || attribute.field === key);\n            this.instance.dataValues[attr && attr.fieldName || key] = record;\n          }\n        }\n      }\n    }\n  }\n}\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n//# sourceMappingURL=query.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/dialects/mssql/query.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1005,
    "kind": "variable",
    "name": "AbstractQuery",
    "memberof": "lib/dialects/mssql/query.js",
    "static": true,
    "longname": "lib/dialects/mssql/query.js~AbstractQuery",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1006,
    "kind": "variable",
    "name": "sequelizeErrors",
    "memberof": "lib/dialects/mssql/query.js",
    "static": true,
    "longname": "lib/dialects/mssql/query.js~sequelizeErrors",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1007,
    "kind": "variable",
    "name": "parserStore",
    "memberof": "lib/dialects/mssql/query.js",
    "static": true,
    "longname": "lib/dialects/mssql/query.js~parserStore",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1008,
    "kind": "variable",
    "name": "_",
    "memberof": "lib/dialects/mssql/query.js",
    "static": true,
    "longname": "lib/dialects/mssql/query.js~_",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1009,
    "kind": "variable",
    "name": "logger",
    "memberof": "lib/dialects/mssql/query.js",
    "static": true,
    "longname": "lib/dialects/mssql/query.js~logger",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1010,
    "kind": "variable",
    "name": "debug",
    "memberof": "lib/dialects/mssql/query.js",
    "static": true,
    "longname": "lib/dialects/mssql/query.js~debug",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1011,
    "kind": "function",
    "name": "getScale",
    "memberof": "lib/dialects/mssql/query.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/mssql/query.js~getScale",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "aNum",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1012,
    "kind": "class",
    "name": "Query",
    "memberof": "lib/dialects/mssql/query.js",
    "static": true,
    "longname": "lib/dialects/mssql/query.js~Query",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mssql/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "interface": false,
    "extends": [
      "AbstractQuery"
    ],
    "ignore": true
  },
  {
    "__docId__": 1013,
    "kind": "method",
    "name": "getInsertIdField",
    "memberof": "lib/dialects/mssql/query.js~Query",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query.js~Query#getInsertIdField",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1014,
    "kind": "method",
    "name": "getSQLTypeFromJsType",
    "memberof": "lib/dialects/mssql/query.js~Query",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query.js~Query#getSQLTypeFromJsType",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "TYPES",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1015,
    "kind": "method",
    "name": "_run",
    "memberof": "lib/dialects/mssql/query.js~Query",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/mssql/query.js~Query#_run",
    "access": "private",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "connection",
        "types": [
          "*"
        ]
      },
      {
        "name": "sql",
        "types": [
          "*"
        ]
      },
      {
        "name": "parameters",
        "types": [
          "*"
        ]
      },
      {
        "name": "errStack",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1016,
    "kind": "member",
    "name": "sql",
    "memberof": "lib/dialects/mssql/query.js~Query",
    "static": false,
    "longname": "lib/dialects/mssql/query.js~Query#sql",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1017,
    "kind": "method",
    "name": "run",
    "memberof": "lib/dialects/mssql/query.js~Query",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query.js~Query#run",
    "access": "public",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "params": [
      {
        "name": "sql",
        "types": [
          "*"
        ]
      },
      {
        "name": "parameters",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1018,
    "kind": "method",
    "name": "formatBindParameters",
    "memberof": "lib/dialects/mssql/query.js~Query",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/mssql/query.js~Query.formatBindParameters",
    "access": "public",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "params": [
      {
        "name": "sql",
        "types": [
          "*"
        ]
      },
      {
        "name": "values",
        "types": [
          "*"
        ]
      },
      {
        "name": "dialect",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1019,
    "kind": "method",
    "name": "formatResults",
    "memberof": "lib/dialects/mssql/query.js~Query",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query.js~Query#formatResults",
    "access": "public",
    "description": null,
    "lineNumber": 120,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "rowCount",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1020,
    "kind": "method",
    "name": "handleShowTablesQuery",
    "memberof": "lib/dialects/mssql/query.js~Query",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query.js~Query#handleShowTablesQuery",
    "access": "public",
    "description": null,
    "lineNumber": 194,
    "undocument": true,
    "params": [
      {
        "name": "results",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1021,
    "kind": "method",
    "name": "handleShowConstraintsQuery",
    "memberof": "lib/dialects/mssql/query.js~Query",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query.js~Query#handleShowConstraintsQuery",
    "access": "public",
    "description": null,
    "lineNumber": 202,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1022,
    "kind": "method",
    "name": "formatError",
    "memberof": "lib/dialects/mssql/query.js~Query",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query.js~Query#formatError",
    "access": "public",
    "description": null,
    "lineNumber": 211,
    "undocument": true,
    "params": [
      {
        "name": "err",
        "types": [
          "*"
        ]
      },
      {
        "name": "errStack",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1023,
    "kind": "method",
    "name": "isShowOrDescribeQuery",
    "memberof": "lib/dialects/mssql/query.js~Query",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query.js~Query#isShowOrDescribeQuery",
    "access": "public",
    "description": null,
    "lineNumber": 261,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1024,
    "kind": "method",
    "name": "isShowIndexesQuery",
    "memberof": "lib/dialects/mssql/query.js~Query",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query.js~Query#isShowIndexesQuery",
    "access": "public",
    "description": null,
    "lineNumber": 268,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1025,
    "kind": "method",
    "name": "handleShowIndexesQuery",
    "memberof": "lib/dialects/mssql/query.js~Query",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query.js~Query#handleShowIndexesQuery",
    "access": "public",
    "description": null,
    "lineNumber": 271,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1026,
    "kind": "method",
    "name": "handleInsertQuery",
    "memberof": "lib/dialects/mssql/query.js~Query",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mssql/query.js~Query#handleInsertQuery",
    "access": "public",
    "description": null,
    "lineNumber": 301,
    "undocument": true,
    "params": [
      {
        "name": "results",
        "types": [
          "*"
        ]
      },
      {
        "name": "metaData",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 1027,
    "kind": "file",
    "name": "lib/dialects/mysql/connection-manager.js",
    "content": "\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nconst AbstractConnectionManager = require(\"../abstract/connection-manager\");\nconst SequelizeErrors = require(\"../../errors\");\nconst { logger } = require(\"../../utils/logger\");\nconst DataTypes = require(\"../../data-types\").mysql;\nconst momentTz = require(\"moment-timezone\");\nconst debug = logger.debugContext(\"connection:mysql\");\nconst parserStore = require(\"../parserStore\")(\"mysql\");\nconst { promisify } = require(\"util\");\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 3306;\n    super(dialect, sequelize);\n    this.lib = this._loadDialectModule(\"mysql2\");\n    this.refreshTypeParser(DataTypes);\n  }\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n  static _typecast(field, next) {\n    if (parserStore.get(field.type)) {\n      return parserStore.get(field.type)(field, this.sequelize.options, next);\n    }\n    return next();\n  }\n  async connect(config) {\n    const connectionConfig = __spreadValues({\n      host: config.host,\n      port: config.port,\n      user: config.username,\n      flags: \"-FOUND_ROWS\",\n      password: config.password,\n      database: config.database,\n      timezone: this.sequelize.options.timezone,\n      typeCast: ConnectionManager._typecast.bind(this),\n      bigNumberStrings: false,\n      supportBigNumbers: true\n    }, config.dialectOptions);\n    try {\n      const connection = await new Promise((resolve, reject) => {\n        const connection2 = this.lib.createConnection(connectionConfig);\n        const errorHandler = (e) => {\n          connection2.removeListener(\"connect\", connectHandler);\n          connection2.removeListener(\"error\", connectHandler);\n          reject(e);\n        };\n        const connectHandler = () => {\n          connection2.removeListener(\"error\", errorHandler);\n          resolve(connection2);\n        };\n        connection2.on(\"error\", errorHandler);\n        connection2.once(\"connect\", connectHandler);\n      });\n      debug(\"connection acquired\");\n      connection.on(\"error\", (error) => {\n        switch (error.code) {\n          case \"ESOCKET\":\n          case \"ECONNRESET\":\n          case \"EPIPE\":\n          case \"PROTOCOL_CONNECTION_LOST\":\n            this.pool.destroy(connection);\n        }\n      });\n      if (!this.sequelize.config.keepDefaultTimezone) {\n        let tzOffset = this.sequelize.options.timezone;\n        tzOffset = /\\//.test(tzOffset) ? momentTz.tz(tzOffset).format(\"Z\") : tzOffset;\n        await promisify((cb) => connection.query(`SET time_zone = '${tzOffset}'`, cb))();\n      }\n      return connection;\n    } catch (error) {\n      switch (error.code) {\n        case \"ECONNREFUSED\":\n          throw new SequelizeErrors.ConnectionRefusedError(error);\n        case \"ER_ACCESS_DENIED_ERROR\":\n          throw new SequelizeErrors.AccessDeniedError(error);\n        case \"ENOTFOUND\":\n          throw new SequelizeErrors.HostNotFoundError(error);\n        case \"EHOSTUNREACH\":\n          throw new SequelizeErrors.HostNotReachableError(error);\n        case \"EINVAL\":\n          throw new SequelizeErrors.InvalidConnectionError(error);\n        default:\n          throw new SequelizeErrors.ConnectionError(error);\n      }\n    }\n  }\n  async disconnect(connection) {\n    if (connection._closing) {\n      debug(\"connection tried to disconnect but was already at CLOSED state\");\n      return;\n    }\n    return await promisify((callback) => connection.end(callback))();\n  }\n  validate(connection) {\n    return connection && !connection._fatalError && !connection._protocolError && !connection._closing && !connection.stream.destroyed;\n  }\n}\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n//# sourceMappingURL=connection-manager.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/dialects/mysql/connection-manager.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1028,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/dialects/mysql/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/mysql/connection-manager.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1029,
    "kind": "variable",
    "name": "__getOwnPropSymbols",
    "memberof": "lib/dialects/mysql/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/mysql/connection-manager.js~__getOwnPropSymbols",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1030,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/dialects/mysql/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/mysql/connection-manager.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1031,
    "kind": "variable",
    "name": "__propIsEnum",
    "memberof": "lib/dialects/mysql/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/mysql/connection-manager.js~__propIsEnum",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1032,
    "kind": "function",
    "name": "__defNormalProp",
    "memberof": "lib/dialects/mysql/connection-manager.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/mysql/connection-manager.js~__defNormalProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1033,
    "kind": "function",
    "name": "__spreadValues",
    "memberof": "lib/dialects/mysql/connection-manager.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/mysql/connection-manager.js~__spreadValues",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1034,
    "kind": "variable",
    "name": "AbstractConnectionManager",
    "memberof": "lib/dialects/mysql/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/mysql/connection-manager.js~AbstractConnectionManager",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1035,
    "kind": "variable",
    "name": "SequelizeErrors",
    "memberof": "lib/dialects/mysql/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/mysql/connection-manager.js~SequelizeErrors",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1036,
    "kind": "variable",
    "name": "logger",
    "memberof": "lib/dialects/mysql/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/mysql/connection-manager.js~logger",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1037,
    "kind": "variable",
    "name": "DataTypes",
    "memberof": "lib/dialects/mysql/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/mysql/connection-manager.js~DataTypes",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1038,
    "kind": "variable",
    "name": "momentTz",
    "memberof": "lib/dialects/mysql/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/mysql/connection-manager.js~momentTz",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1039,
    "kind": "variable",
    "name": "debug",
    "memberof": "lib/dialects/mysql/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/mysql/connection-manager.js~debug",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1040,
    "kind": "variable",
    "name": "parserStore",
    "memberof": "lib/dialects/mysql/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/mysql/connection-manager.js~parserStore",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1041,
    "kind": "variable",
    "name": "promisify",
    "memberof": "lib/dialects/mysql/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/mysql/connection-manager.js~promisify",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1042,
    "kind": "class",
    "name": "ConnectionManager",
    "memberof": "lib/dialects/mysql/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/mysql/connection-manager.js~ConnectionManager",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "interface": false,
    "extends": [
      "AbstractConnectionManager"
    ],
    "ignore": true
  },
  {
    "__docId__": 1043,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/dialects/mysql/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mysql/connection-manager.js~ConnectionManager#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 1044,
    "kind": "member",
    "name": "lib",
    "memberof": "lib/dialects/mysql/connection-manager.js~ConnectionManager",
    "static": false,
    "longname": "lib/dialects/mysql/connection-manager.js~ConnectionManager#lib",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1045,
    "kind": "method",
    "name": "_refreshTypeParser",
    "memberof": "lib/dialects/mysql/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mysql/connection-manager.js~ConnectionManager#_refreshTypeParser",
    "access": "private",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "dataType",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1046,
    "kind": "method",
    "name": "_clearTypeParser",
    "memberof": "lib/dialects/mysql/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mysql/connection-manager.js~ConnectionManager#_clearTypeParser",
    "access": "private",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1047,
    "kind": "method",
    "name": "_typecast",
    "memberof": "lib/dialects/mysql/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/mysql/connection-manager.js~ConnectionManager._typecast",
    "access": "private",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "field",
        "types": [
          "*"
        ]
      },
      {
        "name": "next",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1048,
    "kind": "method",
    "name": "connect",
    "memberof": "lib/dialects/mysql/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/mysql/connection-manager.js~ConnectionManager#connect",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1049,
    "kind": "method",
    "name": "disconnect",
    "memberof": "lib/dialects/mysql/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/mysql/connection-manager.js~ConnectionManager#disconnect",
    "access": "public",
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "params": [
      {
        "name": "connection",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1050,
    "kind": "method",
    "name": "validate",
    "memberof": "lib/dialects/mysql/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mysql/connection-manager.js~ConnectionManager#validate",
    "access": "public",
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "params": [
      {
        "name": "connection",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1051,
    "kind": "file",
    "name": "lib/dialects/mysql/data-types.js",
    "content": "\"use strict\";\nconst wkx = require(\"wkx\");\nconst _ = require(\"lodash\");\nconst momentTz = require(\"moment-timezone\");\nconst moment = require(\"moment\");\nmodule.exports = (BaseTypes) => {\n  BaseTypes.ABSTRACT.prototype.dialectTypes = \"https://dev.mysql.com/doc/refman/5.7/en/data-types.html\";\n  BaseTypes.DATE.types.mysql = [\"DATETIME\"];\n  BaseTypes.STRING.types.mysql = [\"VAR_STRING\"];\n  BaseTypes.CHAR.types.mysql = [\"STRING\"];\n  BaseTypes.TEXT.types.mysql = [\"BLOB\"];\n  BaseTypes.TINYINT.types.mysql = [\"TINY\"];\n  BaseTypes.SMALLINT.types.mysql = [\"SHORT\"];\n  BaseTypes.MEDIUMINT.types.mysql = [\"INT24\"];\n  BaseTypes.INTEGER.types.mysql = [\"LONG\"];\n  BaseTypes.BIGINT.types.mysql = [\"LONGLONG\"];\n  BaseTypes.FLOAT.types.mysql = [\"FLOAT\"];\n  BaseTypes.TIME.types.mysql = [\"TIME\"];\n  BaseTypes.DATEONLY.types.mysql = [\"DATE\"];\n  BaseTypes.BOOLEAN.types.mysql = [\"TINY\"];\n  BaseTypes.BLOB.types.mysql = [\"TINYBLOB\", \"BLOB\", \"LONGBLOB\"];\n  BaseTypes.DECIMAL.types.mysql = [\"NEWDECIMAL\"];\n  BaseTypes.UUID.types.mysql = false;\n  BaseTypes.ENUM.types.mysql = false;\n  BaseTypes.REAL.types.mysql = [\"DOUBLE\"];\n  BaseTypes.DOUBLE.types.mysql = [\"DOUBLE\"];\n  BaseTypes.GEOMETRY.types.mysql = [\"GEOMETRY\"];\n  BaseTypes.JSON.types.mysql = [\"JSON\"];\n  class DECIMAL extends BaseTypes.DECIMAL {\n    toSql() {\n      let definition = super.toSql();\n      if (this._unsigned) {\n        definition += \" UNSIGNED\";\n      }\n      if (this._zerofill) {\n        definition += \" ZEROFILL\";\n      }\n      return definition;\n    }\n  }\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      return this._length ? `DATETIME(${this._length})` : \"DATETIME\";\n    }\n    _stringify(date, options) {\n      if (!moment.isMoment(date)) {\n        date = this._applyTimezone(date, options);\n      }\n      if (this._length) {\n        return date.format(\"YYYY-MM-DD HH:mm:ss.SSS\");\n      }\n      return date.format(\"YYYY-MM-DD HH:mm:ss\");\n    }\n    static parse(value, options) {\n      value = value.string();\n      if (value === null) {\n        return value;\n      }\n      if (momentTz.tz.zone(options.timezone)) {\n        value = momentTz.tz(value, options.timezone).toDate();\n      } else {\n        value = new Date(`${value} ${options.timezone}`);\n      }\n      return value;\n    }\n  }\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(value) {\n      return value.string();\n    }\n  }\n  class UUID extends BaseTypes.UUID {\n    toSql() {\n      return \"CHAR(36) BINARY\";\n    }\n  }\n  const SUPPORTED_GEOMETRY_TYPES = [\"POINT\", \"LINESTRING\", \"POLYGON\"];\n  class GEOMETRY extends BaseTypes.GEOMETRY {\n    constructor(type, srid) {\n      super(type, srid);\n      if (_.isEmpty(this.type)) {\n        this.sqlType = this.key;\n        return;\n      }\n      if (SUPPORTED_GEOMETRY_TYPES.includes(this.type)) {\n        this.sqlType = this.type;\n        return;\n      }\n      throw new Error(`Supported geometry types are: ${SUPPORTED_GEOMETRY_TYPES.join(\", \")}`);\n    }\n    static parse(value) {\n      value = value.buffer();\n      if (!value || value.length === 0) {\n        return null;\n      }\n      value = value.slice(4);\n      return wkx.Geometry.parse(value).toGeoJSON({ shortCrs: true });\n    }\n    toSql() {\n      return this.sqlType;\n    }\n  }\n  class ENUM extends BaseTypes.ENUM {\n    toSql(options) {\n      return `ENUM(${this.values.map((value) => options.escape(value)).join(\", \")})`;\n    }\n  }\n  class JSONTYPE extends BaseTypes.JSON {\n    _stringify(value, options) {\n      return options.operation === \"where\" && typeof value === \"string\" ? value : JSON.stringify(value);\n    }\n  }\n  return {\n    ENUM,\n    DATE,\n    DATEONLY,\n    UUID,\n    GEOMETRY,\n    DECIMAL,\n    JSON: JSONTYPE\n  };\n};\n//# sourceMappingURL=data-types.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/dialects/mysql/data-types.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1052,
    "kind": "variable",
    "name": "wkx",
    "memberof": "lib/dialects/mysql/data-types.js",
    "static": true,
    "longname": "lib/dialects/mysql/data-types.js~wkx",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1053,
    "kind": "variable",
    "name": "_",
    "memberof": "lib/dialects/mysql/data-types.js",
    "static": true,
    "longname": "lib/dialects/mysql/data-types.js~_",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1054,
    "kind": "variable",
    "name": "momentTz",
    "memberof": "lib/dialects/mysql/data-types.js",
    "static": true,
    "longname": "lib/dialects/mysql/data-types.js~momentTz",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1055,
    "kind": "variable",
    "name": "moment",
    "memberof": "lib/dialects/mysql/data-types.js",
    "static": true,
    "longname": "lib/dialects/mysql/data-types.js~moment",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1056,
    "kind": "file",
    "name": "lib/dialects/mysql/index.js",
    "content": "\"use strict\";\nconst _ = require(\"lodash\");\nconst { AbstractDialect } = require(\"../abstract\");\nconst ConnectionManager = require(\"./connection-manager\");\nconst Query = require(\"./query\");\nconst QueryGenerator = require(\"./query-generator\");\nconst DataTypes = require(\"../../data-types\").mysql;\nconst { MySQLQueryInterface } = require(\"./query-interface\");\nclass MysqlDialect extends AbstractDialect {\n  static supports = _.merge(_.cloneDeep(AbstractDialect.supports), {\n    \"VALUES ()\": true,\n    \"LIMIT ON UPDATE\": true,\n    lock: true,\n    forShare: \"LOCK IN SHARE MODE\",\n    settingIsolationLevelDuringTransaction: false,\n    inserts: {\n      ignoreDuplicates: \" IGNORE\",\n      updateOnDuplicate: \" ON DUPLICATE KEY UPDATE\"\n    },\n    index: {\n      collate: false,\n      length: true,\n      parser: true,\n      type: true,\n      using: 1\n    },\n    constraints: {\n      dropConstraint: false,\n      check: false\n    },\n    indexViaAlter: true,\n    indexHints: true,\n    NUMERIC: true,\n    GEOMETRY: true,\n    JSON: true,\n    REGEXP: true\n  });\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new MySQLQueryInterface(sequelize, this.queryGenerator);\n  }\n}\nMysqlDialect.prototype.defaultVersion = \"5.7.0\";\nMysqlDialect.prototype.Query = Query;\nMysqlDialect.prototype.QueryGenerator = QueryGenerator;\nMysqlDialect.prototype.DataTypes = DataTypes;\nMysqlDialect.prototype.name = \"mysql\";\nMysqlDialect.prototype.TICK_CHAR = \"`\";\nMysqlDialect.prototype.TICK_CHAR_LEFT = MysqlDialect.prototype.TICK_CHAR;\nMysqlDialect.prototype.TICK_CHAR_RIGHT = MysqlDialect.prototype.TICK_CHAR;\nmodule.exports = MysqlDialect;\n//# sourceMappingURL=index.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/dialects/mysql/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1057,
    "kind": "variable",
    "name": "_",
    "memberof": "lib/dialects/mysql/index.js",
    "static": true,
    "longname": "lib/dialects/mysql/index.js~_",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1058,
    "kind": "variable",
    "name": "AbstractDialect",
    "memberof": "lib/dialects/mysql/index.js",
    "static": true,
    "longname": "lib/dialects/mysql/index.js~AbstractDialect",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1059,
    "kind": "variable",
    "name": "ConnectionManager",
    "memberof": "lib/dialects/mysql/index.js",
    "static": true,
    "longname": "lib/dialects/mysql/index.js~ConnectionManager",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1060,
    "kind": "variable",
    "name": "Query",
    "memberof": "lib/dialects/mysql/index.js",
    "static": true,
    "longname": "lib/dialects/mysql/index.js~Query",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1061,
    "kind": "variable",
    "name": "QueryGenerator",
    "memberof": "lib/dialects/mysql/index.js",
    "static": true,
    "longname": "lib/dialects/mysql/index.js~QueryGenerator",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1062,
    "kind": "variable",
    "name": "DataTypes",
    "memberof": "lib/dialects/mysql/index.js",
    "static": true,
    "longname": "lib/dialects/mysql/index.js~DataTypes",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1063,
    "kind": "variable",
    "name": "MySQLQueryInterface",
    "memberof": "lib/dialects/mysql/index.js",
    "static": true,
    "longname": "lib/dialects/mysql/index.js~MySQLQueryInterface",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1064,
    "kind": "class",
    "name": "MysqlDialect",
    "memberof": "lib/dialects/mysql/index.js",
    "static": true,
    "longname": "lib/dialects/mysql/index.js~MysqlDialect",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false,
    "extends": [
      "AbstractDialect"
    ],
    "ignore": true
  },
  {
    "__docId__": 1065,
    "kind": "member",
    "name": "supports",
    "memberof": "lib/dialects/mysql/index.js~MysqlDialect",
    "static": true,
    "longname": "lib/dialects/mysql/index.js~MysqlDialect.supports",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1066,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/dialects/mysql/index.js~MysqlDialect",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mysql/index.js~MysqlDialect#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 1067,
    "kind": "member",
    "name": "sequelize",
    "memberof": "lib/dialects/mysql/index.js~MysqlDialect",
    "static": false,
    "longname": "lib/dialects/mysql/index.js~MysqlDialect#sequelize",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1068,
    "kind": "member",
    "name": "connectionManager",
    "memberof": "lib/dialects/mysql/index.js~MysqlDialect",
    "static": false,
    "longname": "lib/dialects/mysql/index.js~MysqlDialect#connectionManager",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1069,
    "kind": "member",
    "name": "queryGenerator",
    "memberof": "lib/dialects/mysql/index.js~MysqlDialect",
    "static": false,
    "longname": "lib/dialects/mysql/index.js~MysqlDialect#queryGenerator",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1070,
    "kind": "member",
    "name": "queryInterface",
    "memberof": "lib/dialects/mysql/index.js~MysqlDialect",
    "static": false,
    "longname": "lib/dialects/mysql/index.js~MysqlDialect#queryInterface",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1071,
    "kind": "file",
    "name": "lib/dialects/mysql/query-generator.js",
    "content": "\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nconst _ = require(\"lodash\");\nconst Utils = require(\"../../utils\");\nconst AbstractQueryGenerator = require(\"../abstract/query-generator\");\nconst util = require(\"util\");\nconst { Op } = require(\"../../operators\");\nconst JSON_FUNCTION_REGEX = /^\\s*((?:[a-z]+_){0,2}jsonb?(?:_[a-z]+){0,2})\\([^)]*\\)/i;\nconst JSON_OPERATOR_REGEX = /^\\s*(->>?|@>|<@|\\?[&|]?|\\|{2}|#-)/i;\nconst TOKEN_CAPTURE_REGEX = /^\\s*((?:([\"'`])(?:(?!\\2).|\\2{2})*\\2)|[\\s\\w]+|[()+,.;-])/i;\nconst FOREIGN_KEY_FIELDS = [\n  \"CONSTRAINT_NAME as constraint_name\",\n  \"CONSTRAINT_NAME as constraintName\",\n  \"CONSTRAINT_SCHEMA as constraintSchema\",\n  \"CONSTRAINT_SCHEMA as constraintCatalog\",\n  \"TABLE_NAME as tableName\",\n  \"TABLE_SCHEMA as tableSchema\",\n  \"TABLE_SCHEMA as tableCatalog\",\n  \"COLUMN_NAME as columnName\",\n  \"REFERENCED_TABLE_SCHEMA as referencedTableSchema\",\n  \"REFERENCED_TABLE_SCHEMA as referencedTableCatalog\",\n  \"REFERENCED_TABLE_NAME as referencedTableName\",\n  \"REFERENCED_COLUMN_NAME as referencedColumnName\"\n].join(\",\");\nconst typeWithoutDefault = /* @__PURE__ */ new Set([\"BLOB\", \"TEXT\", \"GEOMETRY\", \"JSON\"]);\nclass MySQLQueryGenerator extends AbstractQueryGenerator {\n  constructor(options) {\n    super(options);\n    this.OperatorMap = __spreadProps(__spreadValues({}, this.OperatorMap), {\n      [Op.regexp]: \"REGEXP\",\n      [Op.notRegexp]: \"NOT REGEXP\"\n    });\n  }\n  createDatabaseQuery(databaseName, options) {\n    options = __spreadValues({\n      charset: null,\n      collate: null\n    }, options);\n    return Utils.joinSQLFragments([\n      \"CREATE DATABASE IF NOT EXISTS\",\n      this.quoteIdentifier(databaseName),\n      options.charset && `DEFAULT CHARACTER SET ${this.escape(options.charset)}`,\n      options.collate && `DEFAULT COLLATE ${this.escape(options.collate)}`,\n      \";\"\n    ]);\n  }\n  dropDatabaseQuery(databaseName) {\n    return `DROP DATABASE IF EXISTS ${this.quoteIdentifier(databaseName)};`;\n  }\n  createSchema() {\n    return \"SHOW TABLES\";\n  }\n  showSchemasQuery() {\n    return \"SHOW TABLES\";\n  }\n  versionQuery() {\n    return \"SELECT VERSION() as `version`\";\n  }\n  createTableQuery(tableName, attributes, options) {\n    options = __spreadValues({\n      engine: \"InnoDB\",\n      charset: null,\n      rowFormat: null\n    }, options);\n    const primaryKeys = [];\n    const foreignKeys = {};\n    const attrStr = [];\n    for (const attr in attributes) {\n      if (!Object.prototype.hasOwnProperty.call(attributes, attr)) {\n        continue;\n      }\n      const dataType = attributes[attr];\n      let match;\n      if (dataType.includes(\"PRIMARY KEY\")) {\n        primaryKeys.push(attr);\n        if (dataType.includes(\"REFERENCES\")) {\n          match = dataType.match(/^(.+) (REFERENCES.*)$/);\n          attrStr.push(`${this.quoteIdentifier(attr)} ${match[1].replace(\"PRIMARY KEY\", \"\")}`);\n          foreignKeys[attr] = match[2];\n        } else {\n          attrStr.push(`${this.quoteIdentifier(attr)} ${dataType.replace(\"PRIMARY KEY\", \"\")}`);\n        }\n      } else if (dataType.includes(\"REFERENCES\")) {\n        match = dataType.match(/^(.+) (REFERENCES.*)$/);\n        attrStr.push(`${this.quoteIdentifier(attr)} ${match[1]}`);\n        foreignKeys[attr] = match[2];\n      } else {\n        attrStr.push(`${this.quoteIdentifier(attr)} ${dataType}`);\n      }\n    }\n    const table = this.quoteTable(tableName);\n    let attributesClause = attrStr.join(\", \");\n    const pkString = primaryKeys.map((pk) => this.quoteIdentifier(pk)).join(\", \");\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, (columns, indexName) => {\n        if (columns.customIndex) {\n          if (typeof indexName !== \"string\") {\n            indexName = `uniq_${tableName}_${columns.fields.join(\"_\")}`;\n          }\n          attributesClause += `, UNIQUE ${this.quoteIdentifier(indexName)} (${columns.fields.map((field) => this.quoteIdentifier(field)).join(\", \")})`;\n        }\n      });\n    }\n    if (pkString.length > 0) {\n      attributesClause += `, PRIMARY KEY (${pkString})`;\n    }\n    for (const fkey in foreignKeys) {\n      if (Object.prototype.hasOwnProperty.call(foreignKeys, fkey)) {\n        attributesClause += `, FOREIGN KEY (${this.quoteIdentifier(fkey)}) ${foreignKeys[fkey]}`;\n      }\n    }\n    return Utils.joinSQLFragments([\n      \"CREATE TABLE IF NOT EXISTS\",\n      table,\n      `(${attributesClause})`,\n      `ENGINE=${options.engine}`,\n      options.comment && typeof options.comment === \"string\" && `COMMENT ${this.escape(options.comment)}`,\n      options.charset && `DEFAULT CHARSET=${options.charset}`,\n      options.collate && `COLLATE ${options.collate}`,\n      options.initialAutoIncrement && `AUTO_INCREMENT=${options.initialAutoIncrement}`,\n      options.rowFormat && `ROW_FORMAT=${options.rowFormat}`,\n      \";\"\n    ]);\n  }\n  describeTableQuery(tableName, schema, schemaDelimiter) {\n    const table = this.quoteTable(this.addSchema({\n      tableName,\n      _schema: schema,\n      _schemaDelimiter: schemaDelimiter\n    }));\n    return `SHOW FULL COLUMNS FROM ${table};`;\n  }\n  showTablesQuery(database) {\n    let query = \"SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE'\";\n    if (database) {\n      query += ` AND TABLE_SCHEMA = ${this.escape(database)}`;\n    } else {\n      query += \" AND TABLE_SCHEMA NOT IN ('MYSQL', 'INFORMATION_SCHEMA', 'PERFORMANCE_SCHEMA', 'SYS')\";\n    }\n    return `${query};`;\n  }\n  addColumnQuery(table, key, dataType) {\n    return Utils.joinSQLFragments([\n      \"ALTER TABLE\",\n      this.quoteTable(table),\n      \"ADD\",\n      this.quoteIdentifier(key),\n      this.attributeToSQL(dataType, {\n        context: \"addColumn\",\n        tableName: table,\n        foreignKey: key\n      }),\n      \";\"\n    ]);\n  }\n  removeColumnQuery(tableName, attributeName) {\n    return Utils.joinSQLFragments([\n      \"ALTER TABLE\",\n      this.quoteTable(tableName),\n      \"DROP\",\n      this.quoteIdentifier(attributeName),\n      \";\"\n    ]);\n  }\n  changeColumnQuery(tableName, attributes) {\n    const attrString = [];\n    const constraintString = [];\n    for (const attributeName in attributes) {\n      let definition = attributes[attributeName];\n      if (definition.includes(\"REFERENCES\")) {\n        const attrName = this.quoteIdentifier(attributeName);\n        definition = definition.replace(/.+?(?=REFERENCES)/, \"\");\n        constraintString.push(`FOREIGN KEY (${attrName}) ${definition}`);\n      } else {\n        attrString.push(`\\`${attributeName}\\` \\`${attributeName}\\` ${definition}`);\n      }\n    }\n    return Utils.joinSQLFragments([\n      \"ALTER TABLE\",\n      this.quoteTable(tableName),\n      attrString.length && `CHANGE ${attrString.join(\", \")}`,\n      constraintString.length && `ADD ${constraintString.join(\", \")}`,\n      \";\"\n    ]);\n  }\n  renameColumnQuery(tableName, attrBefore, attributes) {\n    const attrString = [];\n    for (const attrName in attributes) {\n      const definition = attributes[attrName];\n      attrString.push(`\\`${attrBefore}\\` \\`${attrName}\\` ${definition}`);\n    }\n    return Utils.joinSQLFragments([\n      \"ALTER TABLE\",\n      this.quoteTable(tableName),\n      \"CHANGE\",\n      attrString.join(\", \"),\n      \";\"\n    ]);\n  }\n  handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n    if (smth instanceof Utils.Json) {\n      if (smth.conditions) {\n        const conditions = this.parseConditionObject(smth.conditions).map((condition) => `${this.jsonPathExtractionQuery(condition.path[0], _.tail(condition.path))} = '${condition.value}'`);\n        return conditions.join(\" AND \");\n      }\n      if (smth.path) {\n        let str;\n        if (this._checkValidJsonStatement(smth.path)) {\n          str = smth.path;\n        } else {\n          const paths = _.toPath(smth.path);\n          const column = paths.shift();\n          str = this.jsonPathExtractionQuery(column, paths);\n        }\n        if (smth.value) {\n          str += util.format(\" = %s\", this.escape(smth.value));\n        }\n        return str;\n      }\n    } else if (smth instanceof Utils.Cast) {\n      if (/timestamp/i.test(smth.type)) {\n        smth.type = \"datetime\";\n      } else if (smth.json && /boolean/i.test(smth.type)) {\n        smth.type = \"char\";\n      } else if (/double precision/i.test(smth.type) || /boolean/i.test(smth.type) || /integer/i.test(smth.type)) {\n        smth.type = \"decimal\";\n      } else if (/text/i.test(smth.type)) {\n        smth.type = \"char\";\n      }\n    }\n    return super.handleSequelizeMethod(smth, tableName, factory, options, prepend);\n  }\n  _toJSONValue(value) {\n    if (typeof value === \"boolean\") {\n      return value.toString();\n    }\n    if (value === null) {\n      return \"null\";\n    }\n    return value;\n  }\n  truncateTableQuery(tableName) {\n    return `TRUNCATE ${this.quoteTable(tableName)}`;\n  }\n  deleteQuery(tableName, where, options = {}, model) {\n    let limit = \"\";\n    let query = `DELETE FROM ${this.quoteTable(tableName)}`;\n    if (options.limit) {\n      limit = ` LIMIT ${this.escape(options.limit)}`;\n    }\n    where = this.getWhereConditions(where, null, model, options);\n    if (where) {\n      query += ` WHERE ${where}`;\n    }\n    return query + limit;\n  }\n  showIndexesQuery(tableName, options) {\n    return Utils.joinSQLFragments([\n      `SHOW INDEX FROM ${this.quoteTable(tableName)}`,\n      options && options.database && `FROM \\`${options.database}\\``\n    ]);\n  }\n  showConstraintsQuery(table, constraintName) {\n    const tableName = table.tableName || table;\n    const schemaName = table.schema;\n    return Utils.joinSQLFragments([\n      \"SELECT CONSTRAINT_CATALOG AS constraintCatalog,\",\n      \"CONSTRAINT_NAME AS constraintName,\",\n      \"CONSTRAINT_SCHEMA AS constraintSchema,\",\n      \"CONSTRAINT_TYPE AS constraintType,\",\n      \"TABLE_NAME AS tableName,\",\n      \"TABLE_SCHEMA AS tableSchema\",\n      \"from INFORMATION_SCHEMA.TABLE_CONSTRAINTS\",\n      `WHERE table_name='${tableName}'`,\n      constraintName && `AND constraint_name = '${constraintName}'`,\n      schemaName && `AND TABLE_SCHEMA = '${schemaName}'`,\n      \";\"\n    ]);\n  }\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    let indexName = indexNameOrAttributes;\n    if (typeof indexName !== \"string\") {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join(\"_\")}`);\n    }\n    return Utils.joinSQLFragments([\n      \"DROP INDEX\",\n      this.quoteIdentifier(indexName),\n      \"ON\",\n      this.quoteTable(tableName)\n    ]);\n  }\n  attributeToSQL(attribute, options) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    }\n    const attributeString = attribute.type.toString({ escape: this.escape.bind(this) });\n    let template = attributeString;\n    if (attribute.allowNull === false) {\n      template += \" NOT NULL\";\n    }\n    if (attribute.autoIncrement) {\n      template += \" auto_increment\";\n    }\n    if (!typeWithoutDefault.has(attributeString) && attribute.type._binary !== true && Utils.defaultValueSchemable(attribute.defaultValue)) {\n      template += ` DEFAULT ${this.escape(attribute.defaultValue)}`;\n    }\n    if (attribute.unique === true) {\n      template += \" UNIQUE\";\n    }\n    if (attribute.primaryKey) {\n      template += \" PRIMARY KEY\";\n    }\n    if (attribute.comment) {\n      template += ` COMMENT ${this.escape(attribute.comment)}`;\n    }\n    if (attribute.first) {\n      template += \" FIRST\";\n    }\n    if (attribute.after) {\n      template += ` AFTER ${this.quoteIdentifier(attribute.after)}`;\n    }\n    if (attribute.references) {\n      if (options && options.context === \"addColumn\" && options.foreignKey) {\n        const attrName = this.quoteIdentifier(options.foreignKey);\n        const fkName = this.quoteIdentifier(`${options.tableName}_${attrName}_foreign_idx`);\n        template += `, ADD CONSTRAINT ${fkName} FOREIGN KEY (${attrName})`;\n      }\n      template += ` REFERENCES ${this.quoteTable(attribute.references.model)}`;\n      if (attribute.references.key) {\n        template += ` (${this.quoteIdentifier(attribute.references.key)})`;\n      } else {\n        template += ` (${this.quoteIdentifier(\"id\")})`;\n      }\n      if (attribute.onDelete) {\n        template += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;\n      }\n      if (attribute.onUpdate) {\n        template += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;\n      }\n    }\n    return template;\n  }\n  attributesToSQL(attributes, options) {\n    const result = {};\n    for (const key in attributes) {\n      const attribute = attributes[key];\n      result[attribute.field || key] = this.attributeToSQL(attribute, options);\n    }\n    return result;\n  }\n  _checkValidJsonStatement(stmt) {\n    if (typeof stmt !== \"string\") {\n      return false;\n    }\n    let currentIndex = 0;\n    let openingBrackets = 0;\n    let closingBrackets = 0;\n    let hasJsonFunction = false;\n    let hasInvalidToken = false;\n    while (currentIndex < stmt.length) {\n      const string = stmt.slice(currentIndex);\n      const functionMatches = JSON_FUNCTION_REGEX.exec(string);\n      if (functionMatches) {\n        currentIndex += functionMatches[0].indexOf(\"(\");\n        hasJsonFunction = true;\n        continue;\n      }\n      const operatorMatches = JSON_OPERATOR_REGEX.exec(string);\n      if (operatorMatches) {\n        currentIndex += operatorMatches[0].length;\n        hasJsonFunction = true;\n        continue;\n      }\n      const tokenMatches = TOKEN_CAPTURE_REGEX.exec(string);\n      if (tokenMatches) {\n        const capturedToken = tokenMatches[1];\n        if (capturedToken === \"(\") {\n          openingBrackets++;\n        } else if (capturedToken === \")\") {\n          closingBrackets++;\n        } else if (capturedToken === \";\") {\n          hasInvalidToken = true;\n          break;\n        }\n        currentIndex += tokenMatches[0].length;\n        continue;\n      }\n      break;\n    }\n    if (hasJsonFunction && (hasInvalidToken || openingBrackets !== closingBrackets)) {\n      throw new Error(`Invalid json statement: ${stmt}`);\n    }\n    return hasJsonFunction;\n  }\n  getForeignKeysQuery(table, schemaName) {\n    const tableName = table.tableName || table;\n    return Utils.joinSQLFragments([\n      \"SELECT\",\n      FOREIGN_KEY_FIELDS,\n      `FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = '${tableName}'`,\n      `AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='${schemaName}'`,\n      \"AND REFERENCED_TABLE_NAME IS NOT NULL\",\n      \";\"\n    ]);\n  }\n  getForeignKeyQuery(table, columnName) {\n    const quotedSchemaName = table.schema ? wrapSingleQuote(table.schema) : \"\";\n    const quotedTableName = wrapSingleQuote(table.tableName || table);\n    const quotedColumnName = wrapSingleQuote(columnName);\n    return Utils.joinSQLFragments([\n      \"SELECT\",\n      FOREIGN_KEY_FIELDS,\n      \"FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE\",\n      \"WHERE (\",\n      [\n        `REFERENCED_TABLE_NAME = ${quotedTableName}`,\n        table.schema && `AND REFERENCED_TABLE_SCHEMA = ${quotedSchemaName}`,\n        `AND REFERENCED_COLUMN_NAME = ${quotedColumnName}`\n      ],\n      \") OR (\",\n      [\n        `TABLE_NAME = ${quotedTableName}`,\n        table.schema && `AND TABLE_SCHEMA = ${quotedSchemaName}`,\n        `AND COLUMN_NAME = ${quotedColumnName}`,\n        \"AND REFERENCED_TABLE_NAME IS NOT NULL\"\n      ],\n      \")\"\n    ]);\n  }\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return Utils.joinSQLFragments([\n      \"ALTER TABLE\",\n      this.quoteTable(tableName),\n      \"DROP FOREIGN KEY\",\n      this.quoteIdentifier(foreignKey),\n      \";\"\n    ]);\n  }\n  quoteIdentifier(identifier, force) {\n    return Utils.addTicks(Utils.removeTicks(identifier, \"`\"), \"`\");\n  }\n  jsonPathExtractionQuery(column, path, isJson) {\n    let paths = _.toPath(path);\n    const quotedColumn = this.isIdentifierQuoted(column) ? column : this.quoteIdentifier(column);\n    paths = paths.map((subPath) => {\n      return /\\D/.test(subPath) ? Utils.addTicks(subPath, '\"') : subPath;\n    });\n    const pathStr = this.escape([\"$\"].concat(paths).join(\".\").replace(/\\.(\\d+)(?:(?=\\.)|$)/g, (__, digit) => `[${digit}]`));\n    return `json_unquote(json_extract(${quotedColumn},${pathStr}))`;\n  }\n}\nfunction wrapSingleQuote(identifier) {\n  return Utils.addTicks(identifier, \"'\");\n}\nmodule.exports = MySQLQueryGenerator;\n//# sourceMappingURL=query-generator.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/dialects/mysql/query-generator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1072,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/dialects/mysql/query-generator.js",
    "static": true,
    "longname": "lib/dialects/mysql/query-generator.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1073,
    "kind": "variable",
    "name": "__defProps",
    "memberof": "lib/dialects/mysql/query-generator.js",
    "static": true,
    "longname": "lib/dialects/mysql/query-generator.js~__defProps",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1074,
    "kind": "variable",
    "name": "__getOwnPropDescs",
    "memberof": "lib/dialects/mysql/query-generator.js",
    "static": true,
    "longname": "lib/dialects/mysql/query-generator.js~__getOwnPropDescs",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1075,
    "kind": "variable",
    "name": "__getOwnPropSymbols",
    "memberof": "lib/dialects/mysql/query-generator.js",
    "static": true,
    "longname": "lib/dialects/mysql/query-generator.js~__getOwnPropSymbols",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1076,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/dialects/mysql/query-generator.js",
    "static": true,
    "longname": "lib/dialects/mysql/query-generator.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1077,
    "kind": "variable",
    "name": "__propIsEnum",
    "memberof": "lib/dialects/mysql/query-generator.js",
    "static": true,
    "longname": "lib/dialects/mysql/query-generator.js~__propIsEnum",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1078,
    "kind": "function",
    "name": "__defNormalProp",
    "memberof": "lib/dialects/mysql/query-generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/mysql/query-generator.js~__defNormalProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1079,
    "kind": "function",
    "name": "__spreadValues",
    "memberof": "lib/dialects/mysql/query-generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/mysql/query-generator.js~__spreadValues",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1080,
    "kind": "function",
    "name": "__spreadProps",
    "memberof": "lib/dialects/mysql/query-generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/mysql/query-generator.js~__spreadProps",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1081,
    "kind": "variable",
    "name": "_",
    "memberof": "lib/dialects/mysql/query-generator.js",
    "static": true,
    "longname": "lib/dialects/mysql/query-generator.js~_",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1082,
    "kind": "variable",
    "name": "Utils",
    "memberof": "lib/dialects/mysql/query-generator.js",
    "static": true,
    "longname": "lib/dialects/mysql/query-generator.js~Utils",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1083,
    "kind": "variable",
    "name": "AbstractQueryGenerator",
    "memberof": "lib/dialects/mysql/query-generator.js",
    "static": true,
    "longname": "lib/dialects/mysql/query-generator.js~AbstractQueryGenerator",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1084,
    "kind": "variable",
    "name": "util",
    "memberof": "lib/dialects/mysql/query-generator.js",
    "static": true,
    "longname": "lib/dialects/mysql/query-generator.js~util",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1085,
    "kind": "variable",
    "name": "Op",
    "memberof": "lib/dialects/mysql/query-generator.js",
    "static": true,
    "longname": "lib/dialects/mysql/query-generator.js~Op",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1086,
    "kind": "variable",
    "name": "JSON_FUNCTION_REGEX",
    "memberof": "lib/dialects/mysql/query-generator.js",
    "static": true,
    "longname": "lib/dialects/mysql/query-generator.js~JSON_FUNCTION_REGEX",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "undefined"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1087,
    "kind": "variable",
    "name": "JSON_OPERATOR_REGEX",
    "memberof": "lib/dialects/mysql/query-generator.js",
    "static": true,
    "longname": "lib/dialects/mysql/query-generator.js~JSON_OPERATOR_REGEX",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "undefined"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1088,
    "kind": "variable",
    "name": "TOKEN_CAPTURE_REGEX",
    "memberof": "lib/dialects/mysql/query-generator.js",
    "static": true,
    "longname": "lib/dialects/mysql/query-generator.js~TOKEN_CAPTURE_REGEX",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "undefined"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1089,
    "kind": "variable",
    "name": "FOREIGN_KEY_FIELDS",
    "memberof": "lib/dialects/mysql/query-generator.js",
    "static": true,
    "longname": "lib/dialects/mysql/query-generator.js~FOREIGN_KEY_FIELDS",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1090,
    "kind": "variable",
    "name": "typeWithoutDefault",
    "memberof": "lib/dialects/mysql/query-generator.js",
    "static": true,
    "longname": "lib/dialects/mysql/query-generator.js~typeWithoutDefault",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1091,
    "kind": "class",
    "name": "MySQLQueryGenerator",
    "memberof": "lib/dialects/mysql/query-generator.js",
    "static": true,
    "longname": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "interface": false,
    "extends": [
      "AbstractQueryGenerator"
    ],
    "ignore": true
  },
  {
    "__docId__": 1092,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 1093,
    "kind": "member",
    "name": "OperatorMap",
    "memberof": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator",
    "static": false,
    "longname": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator#OperatorMap",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1094,
    "kind": "method",
    "name": "createDatabaseQuery",
    "memberof": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator#createDatabaseQuery",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [
      {
        "name": "databaseName",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1095,
    "kind": "method",
    "name": "dropDatabaseQuery",
    "memberof": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator#dropDatabaseQuery",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "params": [
      {
        "name": "databaseName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1096,
    "kind": "method",
    "name": "createSchema",
    "memberof": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator#createSchema",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1097,
    "kind": "method",
    "name": "showSchemasQuery",
    "memberof": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator#showSchemasQuery",
    "access": "public",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1098,
    "kind": "method",
    "name": "versionQuery",
    "memberof": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator#versionQuery",
    "access": "public",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1099,
    "kind": "method",
    "name": "createTableQuery",
    "memberof": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator#createTableQuery",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributes",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1100,
    "kind": "method",
    "name": "describeTableQuery",
    "memberof": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator#describeTableQuery",
    "access": "public",
    "description": null,
    "lineNumber": 143,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "schema",
        "types": [
          "*"
        ]
      },
      {
        "name": "schemaDelimiter",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1101,
    "kind": "method",
    "name": "showTablesQuery",
    "memberof": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator#showTablesQuery",
    "access": "public",
    "description": null,
    "lineNumber": 151,
    "undocument": true,
    "params": [
      {
        "name": "database",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1102,
    "kind": "method",
    "name": "addColumnQuery",
    "memberof": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator#addColumnQuery",
    "access": "public",
    "description": null,
    "lineNumber": 160,
    "undocument": true,
    "params": [
      {
        "name": "table",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "dataType",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1103,
    "kind": "method",
    "name": "removeColumnQuery",
    "memberof": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator#removeColumnQuery",
    "access": "public",
    "description": null,
    "lineNumber": 174,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributeName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1104,
    "kind": "method",
    "name": "changeColumnQuery",
    "memberof": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator#changeColumnQuery",
    "access": "public",
    "description": null,
    "lineNumber": 183,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1105,
    "kind": "method",
    "name": "renameColumnQuery",
    "memberof": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator#renameColumnQuery",
    "access": "public",
    "description": null,
    "lineNumber": 204,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attrBefore",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1106,
    "kind": "method",
    "name": "handleSequelizeMethod",
    "memberof": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator#handleSequelizeMethod",
    "access": "public",
    "description": null,
    "lineNumber": 218,
    "undocument": true,
    "params": [
      {
        "name": "smth",
        "types": [
          "*"
        ]
      },
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "factory",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      },
      {
        "name": "prepend",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1107,
    "kind": "method",
    "name": "_toJSONValue",
    "memberof": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator#_toJSONValue",
    "access": "private",
    "description": null,
    "lineNumber": 251,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1108,
    "kind": "method",
    "name": "truncateTableQuery",
    "memberof": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator#truncateTableQuery",
    "access": "public",
    "description": null,
    "lineNumber": 260,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1109,
    "kind": "method",
    "name": "deleteQuery",
    "memberof": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator#deleteQuery",
    "access": "public",
    "description": null,
    "lineNumber": 263,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "where",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      },
      {
        "name": "model",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1110,
    "kind": "method",
    "name": "showIndexesQuery",
    "memberof": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator#showIndexesQuery",
    "access": "public",
    "description": null,
    "lineNumber": 275,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1111,
    "kind": "method",
    "name": "showConstraintsQuery",
    "memberof": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator#showConstraintsQuery",
    "access": "public",
    "description": null,
    "lineNumber": 281,
    "undocument": true,
    "params": [
      {
        "name": "table",
        "types": [
          "*"
        ]
      },
      {
        "name": "constraintName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1112,
    "kind": "method",
    "name": "removeIndexQuery",
    "memberof": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator#removeIndexQuery",
    "access": "public",
    "description": null,
    "lineNumber": 298,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "indexNameOrAttributes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1113,
    "kind": "method",
    "name": "attributeToSQL",
    "memberof": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator#attributeToSQL",
    "access": "public",
    "description": null,
    "lineNumber": 310,
    "undocument": true,
    "params": [
      {
        "name": "attribute",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1114,
    "kind": "method",
    "name": "attributesToSQL",
    "memberof": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator#attributesToSQL",
    "access": "public",
    "description": null,
    "lineNumber": 363,
    "undocument": true,
    "params": [
      {
        "name": "attributes",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1115,
    "kind": "method",
    "name": "_checkValidJsonStatement",
    "memberof": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator#_checkValidJsonStatement",
    "access": "private",
    "description": null,
    "lineNumber": 371,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "stmt",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1116,
    "kind": "method",
    "name": "getForeignKeysQuery",
    "memberof": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator#getForeignKeysQuery",
    "access": "public",
    "description": null,
    "lineNumber": 415,
    "undocument": true,
    "params": [
      {
        "name": "table",
        "types": [
          "*"
        ]
      },
      {
        "name": "schemaName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1117,
    "kind": "method",
    "name": "getForeignKeyQuery",
    "memberof": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator#getForeignKeyQuery",
    "access": "public",
    "description": null,
    "lineNumber": 426,
    "undocument": true,
    "params": [
      {
        "name": "table",
        "types": [
          "*"
        ]
      },
      {
        "name": "columnName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1118,
    "kind": "method",
    "name": "dropForeignKeyQuery",
    "memberof": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator#dropForeignKeyQuery",
    "access": "public",
    "description": null,
    "lineNumber": 450,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "foreignKey",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1119,
    "kind": "method",
    "name": "quoteIdentifier",
    "memberof": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator#quoteIdentifier",
    "access": "public",
    "description": null,
    "lineNumber": 459,
    "undocument": true,
    "params": [
      {
        "name": "identifier",
        "types": [
          "*"
        ]
      },
      {
        "name": "force",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1120,
    "kind": "method",
    "name": "jsonPathExtractionQuery",
    "memberof": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/mysql/query-generator.js~MySQLQueryGenerator#jsonPathExtractionQuery",
    "access": "public",
    "description": null,
    "lineNumber": 462,
    "undocument": true,
    "params": [
      {
        "name": "column",
        "types": [
          "*"
        ]
      },
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "isJson",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1121,
    "kind": "function",
    "name": "wrapSingleQuote",
    "memberof": "lib/dialects/mysql/query-generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/mysql/query-generator.js~wrapSingleQuote",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 472,
    "undocument": true,
    "params": [
      {
        "name": "identifier",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1122,
    "kind": "file",
    "name": "lib/dialects/mysql/query-interface.js",
    "content": "\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nconst sequelizeErrors = require(\"../../errors\");\nconst { QueryInterface } = require(\"../abstract/query-interface\");\nconst { QueryTypes } = require(\"../../query-types\");\nclass MySQLQueryInterface extends QueryInterface {\n  async removeColumn(tableName, columnName, options) {\n    options = options || {};\n    const [results] = await this.sequelize.query(this.queryGenerator.getForeignKeyQuery(tableName.tableName ? tableName : {\n      tableName,\n      schema: this.sequelize.config.database\n    }, columnName), __spreadValues({ raw: true }, options));\n    if (results.length > 0 && results[0].constraint_name !== \"PRIMARY\") {\n      await Promise.all(results.map((constraint) => this.sequelize.query(this.queryGenerator.dropForeignKeyQuery(tableName, constraint.constraint_name), __spreadValues({ raw: true }, options))));\n    }\n    return await this.sequelize.query(this.queryGenerator.removeColumnQuery(tableName, columnName), __spreadValues({ raw: true }, options));\n  }\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    options = __spreadValues({}, options);\n    options.type = QueryTypes.UPSERT;\n    options.updateOnDuplicate = Object.keys(updateValues);\n    options.upsertKeys = Object.values(options.model.primaryKeys).map((item) => item.field);\n    const model = options.model;\n    const sql = this.queryGenerator.insertQuery(tableName, insertValues, model.rawAttributes, options);\n    return await this.sequelize.query(sql, options);\n  }\n  async removeConstraint(tableName, constraintName, options) {\n    const sql = this.queryGenerator.showConstraintsQuery(tableName.tableName ? tableName : {\n      tableName,\n      schema: this.sequelize.config.database\n    }, constraintName);\n    const constraints = await this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), {\n      type: this.sequelize.QueryTypes.SHOWCONSTRAINTS\n    }));\n    const constraint = constraints[0];\n    let query;\n    if (!constraint || !constraint.constraintType) {\n      throw new sequelizeErrors.UnknownConstraintError({\n        message: `Constraint ${constraintName} on table ${tableName} does not exist`,\n        constraint: constraintName,\n        table: tableName\n      });\n    }\n    if (constraint.constraintType === \"FOREIGN KEY\") {\n      query = this.queryGenerator.dropForeignKeyQuery(tableName, constraintName);\n    } else {\n      query = this.queryGenerator.removeIndexQuery(constraint.tableName, constraint.constraintName);\n    }\n    return await this.sequelize.query(query, options);\n  }\n}\nexports.MySQLQueryInterface = MySQLQueryInterface;\n//# sourceMappingURL=query-interface.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/dialects/mysql/query-interface.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1123,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/dialects/mysql/query-interface.js",
    "static": true,
    "longname": "lib/dialects/mysql/query-interface.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1124,
    "kind": "variable",
    "name": "__defProps",
    "memberof": "lib/dialects/mysql/query-interface.js",
    "static": true,
    "longname": "lib/dialects/mysql/query-interface.js~__defProps",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1125,
    "kind": "variable",
    "name": "__getOwnPropDescs",
    "memberof": "lib/dialects/mysql/query-interface.js",
    "static": true,
    "longname": "lib/dialects/mysql/query-interface.js~__getOwnPropDescs",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1126,
    "kind": "variable",
    "name": "__getOwnPropSymbols",
    "memberof": "lib/dialects/mysql/query-interface.js",
    "static": true,
    "longname": "lib/dialects/mysql/query-interface.js~__getOwnPropSymbols",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1127,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/dialects/mysql/query-interface.js",
    "static": true,
    "longname": "lib/dialects/mysql/query-interface.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1128,
    "kind": "variable",
    "name": "__propIsEnum",
    "memberof": "lib/dialects/mysql/query-interface.js",
    "static": true,
    "longname": "lib/dialects/mysql/query-interface.js~__propIsEnum",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1129,
    "kind": "function",
    "name": "__defNormalProp",
    "memberof": "lib/dialects/mysql/query-interface.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/mysql/query-interface.js~__defNormalProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1130,
    "kind": "function",
    "name": "__spreadValues",
    "memberof": "lib/dialects/mysql/query-interface.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/mysql/query-interface.js~__spreadValues",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1131,
    "kind": "function",
    "name": "__spreadProps",
    "memberof": "lib/dialects/mysql/query-interface.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/mysql/query-interface.js~__spreadProps",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1132,
    "kind": "variable",
    "name": "sequelizeErrors",
    "memberof": "lib/dialects/mysql/query-interface.js",
    "static": true,
    "longname": "lib/dialects/mysql/query-interface.js~sequelizeErrors",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1133,
    "kind": "variable",
    "name": "QueryInterface",
    "memberof": "lib/dialects/mysql/query-interface.js",
    "static": true,
    "longname": "lib/dialects/mysql/query-interface.js~QueryInterface",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1134,
    "kind": "variable",
    "name": "QueryTypes",
    "memberof": "lib/dialects/mysql/query-interface.js",
    "static": true,
    "longname": "lib/dialects/mysql/query-interface.js~QueryTypes",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1135,
    "kind": "class",
    "name": "MySQLQueryInterface",
    "memberof": "lib/dialects/mysql/query-interface.js",
    "static": true,
    "longname": "lib/dialects/mysql/query-interface.js~MySQLQueryInterface",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/mysql/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "interface": false,
    "extends": [
      "QueryInterface"
    ],
    "ignore": true
  },
  {
    "__docId__": 1136,
    "kind": "method",
    "name": "removeColumn",
    "memberof": "lib/dialects/mysql/query-interface.js~MySQLQueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/mysql/query-interface.js~MySQLQueryInterface#removeColumn",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "columnName",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1137,
    "kind": "method",
    "name": "upsert",
    "memberof": "lib/dialects/mysql/query-interface.js~MySQLQueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/mysql/query-interface.js~MySQLQueryInterface#upsert",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "insertValues",
        "types": [
          "*"
        ]
      },
      {
        "name": "updateValues",
        "types": [
          "*"
        ]
      },
      {
        "name": "where",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1138,
    "kind": "method",
    "name": "removeConstraint",
    "memberof": "lib/dialects/mysql/query-interface.js~MySQLQueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/mysql/query-interface.js~MySQLQueryInterface#removeConstraint",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "constraintName",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1139,
    "kind": "file",
    "name": "lib/dialects/parserStore.js",
    "content": "\"use strict\";\nconst stores = /* @__PURE__ */ new Map();\nmodule.exports = (dialect) => {\n  if (!stores.has(dialect)) {\n    stores.set(dialect, /* @__PURE__ */ new Map());\n  }\n  return {\n    clear() {\n      stores.get(dialect).clear();\n    },\n    refresh(dataType) {\n      for (const type of dataType.types[dialect]) {\n        stores.get(dialect).set(type, dataType.parse);\n      }\n    },\n    get(type) {\n      return stores.get(dialect).get(type);\n    }\n  };\n};\n//# sourceMappingURL=parserStore.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/dialects/parserStore.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1140,
    "kind": "variable",
    "name": "stores",
    "memberof": "lib/dialects/parserStore.js",
    "static": true,
    "longname": "lib/dialects/parserStore.js~stores",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/parserStore.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1141,
    "kind": "file",
    "name": "lib/dialects/postgres/connection-manager.js",
    "content": "\"use strict\";\nconst _ = require(\"lodash\");\nconst AbstractConnectionManager = require(\"../abstract/connection-manager\");\nconst { logger } = require(\"../../utils/logger\");\nconst debug = logger.debugContext(\"connection:pg\");\nconst sequelizeErrors = require(\"../../errors\");\nconst semver = require(\"semver\");\nconst dataTypes = require(\"../../data-types\");\nconst momentTz = require(\"moment-timezone\");\nconst { promisify } = require(\"util\");\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 5432;\n    super(dialect, sequelize);\n    const pgLib = this._loadDialectModule(\"pg\");\n    this.lib = this.sequelize.config.native ? pgLib.native : pgLib;\n    this._clearDynamicOIDs();\n    this._clearTypeParser();\n    this.refreshTypeParser(dataTypes.postgres);\n  }\n  _refreshTypeParser(dataType) {\n    const arrayParserBuilder = (parser2) => {\n      return (value) => this.lib.types.arrayParser.create(value, parser2).parse();\n    };\n    const rangeParserBuilder = (parser2) => {\n      return (value) => dataType.parse(value, { parser: parser2 });\n    };\n    if (dataType.key.toLowerCase() === \"range\") {\n      for (const name in this.nameOidMap) {\n        const entry = this.nameOidMap[name];\n        if (!entry.rangeOid) {\n          continue;\n        }\n        const rangeParser = rangeParserBuilder(this.getTypeParser(entry.oid));\n        const arrayRangeParser = arrayParserBuilder(rangeParser);\n        this.oidParserMap.set(entry.rangeOid, rangeParser);\n        if (!entry.arrayRangeOid) {\n          continue;\n        }\n        this.oidParserMap.set(entry.arrayRangeOid, arrayRangeParser);\n      }\n      return;\n    }\n    const parser = (value) => dataType.parse(value);\n    const arrayParser = arrayParserBuilder(parser);\n    if (dataType.key.toLowerCase() === \"enum\") {\n      for (const oid of this.enumOids.oids) {\n        this.oidParserMap.set(oid, parser);\n      }\n      for (const arrayOid of this.enumOids.arrayOids) {\n        this.oidParserMap.set(arrayOid, arrayParser);\n      }\n      return;\n    }\n    for (const name of dataType.types.postgres) {\n      if (!this.nameOidMap[name]) {\n        continue;\n      }\n      this.oidParserMap.set(this.nameOidMap[name].oid, parser);\n      if (!this.nameOidMap[name].arrayOid) {\n        continue;\n      }\n      this.oidParserMap.set(this.nameOidMap[name].arrayOid, arrayParser);\n    }\n  }\n  _clearTypeParser() {\n    this.oidParserMap = /* @__PURE__ */ new Map();\n  }\n  getTypeParser(oid, ...args) {\n    if (this.oidParserMap.get(oid)) {\n      return this.oidParserMap.get(oid);\n    }\n    return this.lib.types.getTypeParser(oid, ...args);\n  }\n  async connect(config) {\n    config.user = config.username;\n    const connectionConfig = _.pick(config, [\n      \"user\",\n      \"password\",\n      \"host\",\n      \"database\",\n      \"port\"\n    ]);\n    connectionConfig.types = {\n      getTypeParser: ConnectionManager.prototype.getTypeParser.bind(this)\n    };\n    if (config.dialectOptions) {\n      _.merge(connectionConfig, _.pick(config.dialectOptions, [\n        \"application_name\",\n        \"ssl\",\n        \"client_encoding\",\n        \"binary\",\n        \"keepAlive\",\n        \"statement_timeout\",\n        \"query_timeout\",\n        \"idle_in_transaction_session_timeout\",\n        \"options\"\n      ]));\n    }\n    const connection = await new Promise((resolve, reject) => {\n      let responded = false;\n      const connection2 = new this.lib.Client(connectionConfig);\n      const parameterHandler = (message) => {\n        switch (message.parameterName) {\n          case \"server_version\":\n            if (this.sequelize.options.databaseVersion === 0) {\n              const version = semver.coerce(message.parameterValue).version;\n              this.sequelize.options.databaseVersion = semver.valid(version) ? version : this.dialect.defaultVersion;\n            }\n            break;\n          case \"standard_conforming_strings\":\n            connection2.standard_conforming_strings = message.parameterValue;\n            break;\n        }\n      };\n      const endHandler = () => {\n        debug(\"connection timeout\");\n        if (!responded) {\n          reject(new sequelizeErrors.ConnectionTimedOutError(new Error(\"Connection timed out\")));\n        }\n      };\n      connection2.once(\"end\", endHandler);\n      if (!this.sequelize.config.native) {\n        connection2.connection.on(\"parameterStatus\", parameterHandler);\n      }\n      connection2.connect((err) => {\n        responded = true;\n        if (!this.sequelize.config.native) {\n          connection2.connection.removeListener(\"parameterStatus\", parameterHandler);\n        }\n        if (err) {\n          if (err.code) {\n            switch (err.code) {\n              case \"ECONNREFUSED\":\n                reject(new sequelizeErrors.ConnectionRefusedError(err));\n                break;\n              case \"ENOTFOUND\":\n                reject(new sequelizeErrors.HostNotFoundError(err));\n                break;\n              case \"EHOSTUNREACH\":\n                reject(new sequelizeErrors.HostNotReachableError(err));\n                break;\n              case \"EINVAL\":\n                reject(new sequelizeErrors.InvalidConnectionError(err));\n                break;\n              default:\n                reject(new sequelizeErrors.ConnectionError(err));\n                break;\n            }\n          } else {\n            reject(new sequelizeErrors.ConnectionError(err));\n          }\n        } else {\n          debug(\"connection acquired\");\n          connection2.removeListener(\"end\", endHandler);\n          resolve(connection2);\n        }\n      });\n    });\n    let query = \"\";\n    if (this.sequelize.options.standardConformingStrings !== false && connection.standard_conforming_strings !== \"on\") {\n      query += \"SET standard_conforming_strings=on;\";\n    }\n    if (this.sequelize.options.clientMinMessages !== void 0) {\n      console.warn('Usage of \"options.clientMinMessages\" is deprecated and will be removed in v7.');\n      console.warn('Please use the sequelize option \"dialectOptions.clientMinMessages\" instead.');\n    }\n    if (!(config.dialectOptions && config.dialectOptions.clientMinMessages && config.dialectOptions.clientMinMessages.toLowerCase() === \"ignore\" || this.sequelize.options.clientMinMessages === false)) {\n      const clientMinMessages = config.dialectOptions && config.dialectOptions.clientMinMessages || this.sequelize.options.clientMinMessages || \"warning\";\n      query += `SET client_min_messages TO ${clientMinMessages};`;\n    }\n    if (!this.sequelize.config.keepDefaultTimezone) {\n      const isZone = Boolean(momentTz.tz.zone(this.sequelize.options.timezone));\n      if (isZone) {\n        query += `SET TIME ZONE '${this.sequelize.options.timezone}';`;\n      } else {\n        query += `SET TIME ZONE INTERVAL '${this.sequelize.options.timezone}' HOUR TO MINUTE;`;\n      }\n    }\n    if (query) {\n      await connection.query(query);\n    }\n    if (Object.keys(this.nameOidMap).length === 0 && this.enumOids.oids.length === 0 && this.enumOids.arrayOids.length === 0) {\n      await this._refreshDynamicOIDs(connection);\n    }\n    connection.on(\"error\", (error) => {\n      connection._invalid = true;\n      debug(`connection error ${error.code || error.message}`);\n      this.pool.destroy(connection);\n    });\n    return connection;\n  }\n  async disconnect(connection) {\n    if (connection._ending) {\n      debug(\"connection tried to disconnect but was already at ENDING state\");\n      return;\n    }\n    return await promisify((callback) => connection.end(callback))();\n  }\n  validate(connection) {\n    return !connection._invalid && !connection._ending;\n  }\n  async _refreshDynamicOIDs(connection) {\n    const databaseVersion = this.sequelize.options.databaseVersion;\n    const supportedVersion = \"8.3.0\";\n    if ((databaseVersion && semver.gte(databaseVersion, supportedVersion)) === false) {\n      return;\n    }\n    const results = await (connection || this.sequelize).query(\"WITH ranges AS (  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,         pg_type.typarray AS rngtyparray, pg_range.rngsubtype    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid)SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype WHERE (pg_type.typtype IN('b', 'e'));\");\n    let result = Array.isArray(results) ? results.pop() : results;\n    if (Array.isArray(result) && result[0].command === \"SET\") {\n      result = result.pop();\n    }\n    const newNameOidMap = {};\n    const newEnumOids = { oids: [], arrayOids: [] };\n    for (const row of result.rows) {\n      if (row.typtype === \"e\") {\n        newEnumOids.oids.push(row.oid);\n        if (row.typarray) {\n          newEnumOids.arrayOids.push(row.typarray);\n        }\n        continue;\n      }\n      newNameOidMap[row.typname] = { oid: row.oid };\n      if (row.typarray) {\n        newNameOidMap[row.typname].arrayOid = row.typarray;\n      }\n      if (row.rngtypid) {\n        newNameOidMap[row.typname].rangeOid = row.rngtypid;\n        if (row.rngtyparray) {\n          newNameOidMap[row.typname].arrayRangeOid = row.rngtyparray;\n        }\n      }\n    }\n    this.nameOidMap = newNameOidMap;\n    this.enumOids = newEnumOids;\n    this.refreshTypeParser(dataTypes.postgres);\n  }\n  _clearDynamicOIDs() {\n    this.nameOidMap = {};\n    this.enumOids = { oids: [], arrayOids: [] };\n  }\n}\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n//# sourceMappingURL=connection-manager.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/dialects/postgres/connection-manager.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1142,
    "kind": "variable",
    "name": "_",
    "memberof": "lib/dialects/postgres/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/postgres/connection-manager.js~_",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1143,
    "kind": "variable",
    "name": "AbstractConnectionManager",
    "memberof": "lib/dialects/postgres/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/postgres/connection-manager.js~AbstractConnectionManager",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1144,
    "kind": "variable",
    "name": "logger",
    "memberof": "lib/dialects/postgres/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/postgres/connection-manager.js~logger",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1145,
    "kind": "variable",
    "name": "debug",
    "memberof": "lib/dialects/postgres/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/postgres/connection-manager.js~debug",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1146,
    "kind": "variable",
    "name": "sequelizeErrors",
    "memberof": "lib/dialects/postgres/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/postgres/connection-manager.js~sequelizeErrors",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1147,
    "kind": "variable",
    "name": "semver",
    "memberof": "lib/dialects/postgres/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/postgres/connection-manager.js~semver",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1148,
    "kind": "variable",
    "name": "dataTypes",
    "memberof": "lib/dialects/postgres/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/postgres/connection-manager.js~dataTypes",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1149,
    "kind": "variable",
    "name": "momentTz",
    "memberof": "lib/dialects/postgres/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/postgres/connection-manager.js~momentTz",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1150,
    "kind": "variable",
    "name": "promisify",
    "memberof": "lib/dialects/postgres/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/postgres/connection-manager.js~promisify",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1151,
    "kind": "class",
    "name": "ConnectionManager",
    "memberof": "lib/dialects/postgres/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/postgres/connection-manager.js~ConnectionManager",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "interface": false,
    "extends": [
      "AbstractConnectionManager"
    ],
    "ignore": true
  },
  {
    "__docId__": 1152,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/dialects/postgres/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/connection-manager.js~ConnectionManager#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 1153,
    "kind": "member",
    "name": "lib",
    "memberof": "lib/dialects/postgres/connection-manager.js~ConnectionManager",
    "static": false,
    "longname": "lib/dialects/postgres/connection-manager.js~ConnectionManager#lib",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1154,
    "kind": "method",
    "name": "_refreshTypeParser",
    "memberof": "lib/dialects/postgres/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/connection-manager.js~ConnectionManager#_refreshTypeParser",
    "access": "private",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "dataType",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1155,
    "kind": "method",
    "name": "_clearTypeParser",
    "memberof": "lib/dialects/postgres/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/connection-manager.js~ConnectionManager#_clearTypeParser",
    "access": "private",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1156,
    "kind": "member",
    "name": "oidParserMap",
    "memberof": "lib/dialects/postgres/connection-manager.js~ConnectionManager",
    "static": false,
    "longname": "lib/dialects/postgres/connection-manager.js~ConnectionManager#oidParserMap",
    "access": "public",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1157,
    "kind": "method",
    "name": "getTypeParser",
    "memberof": "lib/dialects/postgres/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/connection-manager.js~ConnectionManager#getTypeParser",
    "access": "public",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "params": [
      {
        "name": "oid",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1158,
    "kind": "method",
    "name": "connect",
    "memberof": "lib/dialects/postgres/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/postgres/connection-manager.js~ConnectionManager#connect",
    "access": "public",
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1159,
    "kind": "method",
    "name": "disconnect",
    "memberof": "lib/dialects/postgres/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/postgres/connection-manager.js~ConnectionManager#disconnect",
    "access": "public",
    "description": null,
    "lineNumber": 193,
    "undocument": true,
    "params": [
      {
        "name": "connection",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1160,
    "kind": "method",
    "name": "validate",
    "memberof": "lib/dialects/postgres/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/connection-manager.js~ConnectionManager#validate",
    "access": "public",
    "description": null,
    "lineNumber": 200,
    "undocument": true,
    "params": [
      {
        "name": "connection",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1161,
    "kind": "method",
    "name": "_refreshDynamicOIDs",
    "memberof": "lib/dialects/postgres/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/postgres/connection-manager.js~ConnectionManager#_refreshDynamicOIDs",
    "access": "private",
    "description": null,
    "lineNumber": 203,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "connection",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1162,
    "kind": "member",
    "name": "nameOidMap",
    "memberof": "lib/dialects/postgres/connection-manager.js~ConnectionManager",
    "static": false,
    "longname": "lib/dialects/postgres/connection-manager.js~ConnectionManager#nameOidMap",
    "access": "public",
    "description": null,
    "lineNumber": 235,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1163,
    "kind": "member",
    "name": "enumOids",
    "memberof": "lib/dialects/postgres/connection-manager.js~ConnectionManager",
    "static": false,
    "longname": "lib/dialects/postgres/connection-manager.js~ConnectionManager#enumOids",
    "access": "public",
    "description": null,
    "lineNumber": 236,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1164,
    "kind": "method",
    "name": "_clearDynamicOIDs",
    "memberof": "lib/dialects/postgres/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/connection-manager.js~ConnectionManager#_clearDynamicOIDs",
    "access": "private",
    "description": null,
    "lineNumber": 239,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1167,
    "kind": "file",
    "name": "lib/dialects/postgres/data-types.js",
    "content": "\"use strict\";\nconst _ = require(\"lodash\");\nconst wkx = require(\"wkx\");\nmodule.exports = (BaseTypes) => {\n  const warn = BaseTypes.ABSTRACT.warn.bind(void 0, \"http://www.postgresql.org/docs/9.4/static/datatype.html\");\n  function removeUnsupportedIntegerOptions(dataType) {\n    if (dataType._length || dataType.options.length > 0 || dataType._unsigned || dataType._zerofill) {\n      warn(`PostgresSQL does not support '${dataType.key}' with LENGTH, UNSIGNED or ZEROFILL. Plain '${dataType.key}' will be used instead.`);\n      dataType._length = void 0;\n      dataType.options.length = void 0;\n      dataType._unsigned = void 0;\n      dataType._zerofill = void 0;\n    }\n  }\n  BaseTypes.UUID.types.postgres = [\"uuid\"];\n  BaseTypes.CIDR.types.postgres = [\"cidr\"];\n  BaseTypes.INET.types.postgres = [\"inet\"];\n  BaseTypes.MACADDR.types.postgres = [\"macaddr\"];\n  BaseTypes.TSVECTOR.types.postgres = [\"tsvector\"];\n  BaseTypes.JSON.types.postgres = [\"json\"];\n  BaseTypes.JSONB.types.postgres = [\"jsonb\"];\n  BaseTypes.TIME.types.postgres = [\"time\"];\n  class DATEONLY extends BaseTypes.DATEONLY {\n    _stringify(value, options) {\n      if (value === Number.POSITIVE_INFINITY) {\n        return \"Infinity\";\n      }\n      if (value === Number.NEGATIVE_INFINITY) {\n        return \"-Infinity\";\n      }\n      return super._stringify(value, options);\n    }\n    _sanitize(value, options) {\n      if ((!options || options && !options.raw) && value !== Number.POSITIVE_INFINITY && value !== Number.NEGATIVE_INFINITY) {\n        if (typeof value === \"string\") {\n          const lower = value.toLowerCase();\n          if (lower === \"infinity\") {\n            return Number.POSITIVE_INFINITY;\n          }\n          if (lower === \"-infinity\") {\n            return Number.NEGATIVE_INFINITY;\n          }\n        }\n        return super._sanitize(value);\n      }\n      return value;\n    }\n    static parse(value) {\n      if (value === \"infinity\") {\n        return Number.POSITIVE_INFINITY;\n      }\n      if (value === \"-infinity\") {\n        return Number.NEGATIVE_INFINITY;\n      }\n      return value;\n    }\n  }\n  BaseTypes.DATEONLY.types.postgres = [\"date\"];\n  class DECIMAL extends BaseTypes.DECIMAL {\n    static parse(value) {\n      return value;\n    }\n  }\n  BaseTypes.DECIMAL.types.postgres = [\"numeric\"];\n  class STRING extends BaseTypes.STRING {\n    toSql() {\n      if (this._binary) {\n        return \"BYTEA\";\n      }\n      return super.toSql();\n    }\n  }\n  BaseTypes.STRING.types.postgres = [\"varchar\"];\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      if (this._length) {\n        warn(\"PostgreSQL does not support TEXT with options. Plain `TEXT` will be used instead.\");\n        this._length = void 0;\n      }\n      return \"TEXT\";\n    }\n  }\n  BaseTypes.TEXT.types.postgres = [\"text\"];\n  class CITEXT extends BaseTypes.CITEXT {\n    static parse(value) {\n      return value;\n    }\n  }\n  BaseTypes.CITEXT.types.postgres = [\"citext\"];\n  class CHAR extends BaseTypes.CHAR {\n    toSql() {\n      if (this._binary) {\n        return \"BYTEA\";\n      }\n      return super.toSql();\n    }\n  }\n  BaseTypes.CHAR.types.postgres = [\"char\", \"bpchar\"];\n  class BOOLEAN extends BaseTypes.BOOLEAN {\n    toSql() {\n      return \"BOOLEAN\";\n    }\n    _sanitize(value) {\n      if (value !== null && value !== void 0) {\n        if (Buffer.isBuffer(value) && value.length === 1) {\n          value = value[0];\n        }\n        if (typeof value === \"string\") {\n          return [\"true\", \"t\"].includes(value) ? true : [\"false\", \"f\"].includes(value) ? false : value;\n        }\n        if (typeof value === \"number\") {\n          return value === 1 ? true : value === 0 ? false : value;\n        }\n      }\n      return value;\n    }\n  }\n  BOOLEAN.parse = BOOLEAN.prototype._sanitize;\n  BaseTypes.BOOLEAN.types.postgres = [\"bool\"];\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      return \"TIMESTAMP WITH TIME ZONE\";\n    }\n    validate(value) {\n      if (value !== Number.POSITIVE_INFINITY && value !== Number.NEGATIVE_INFINITY) {\n        return super.validate(value);\n      }\n      return true;\n    }\n    _stringify(value, options) {\n      if (value === Number.POSITIVE_INFINITY) {\n        return \"Infinity\";\n      }\n      if (value === Number.NEGATIVE_INFINITY) {\n        return \"-Infinity\";\n      }\n      return super._stringify(value, options);\n    }\n    _sanitize(value, options) {\n      if ((!options || options && !options.raw) && !(value instanceof Date) && Boolean(value) && value !== Number.POSITIVE_INFINITY && value !== Number.NEGATIVE_INFINITY) {\n        if (typeof value === \"string\") {\n          const lower = value.toLowerCase();\n          if (lower === \"infinity\") {\n            return Number.POSITIVE_INFINITY;\n          }\n          if (lower === \"-infinity\") {\n            return Number.NEGATIVE_INFINITY;\n          }\n        }\n        return new Date(value);\n      }\n      return value;\n    }\n  }\n  BaseTypes.DATE.types.postgres = [\"timestamptz\"];\n  class TINYINT extends BaseTypes.TINYINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  BaseTypes.TINYINT.types.postgres = [\"int2\"];\n  class SMALLINT extends BaseTypes.SMALLINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  BaseTypes.SMALLINT.types.postgres = [\"int2\"];\n  class INTEGER extends BaseTypes.INTEGER {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  INTEGER.parse = function parse(value) {\n    return Number.parseInt(value, 10);\n  };\n  BaseTypes.INTEGER.types.postgres = [\"int4\"];\n  class BIGINT extends BaseTypes.BIGINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  BaseTypes.BIGINT.types.postgres = [\"int8\"];\n  class REAL extends BaseTypes.REAL {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  BaseTypes.REAL.types.postgres = [\"float4\"];\n  class DOUBLE extends BaseTypes.DOUBLE {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  BaseTypes.DOUBLE.types.postgres = [\"float8\"];\n  class FLOAT extends BaseTypes.FLOAT {\n    constructor(length, decimals) {\n      super(length, decimals);\n      if (this._decimals) {\n        warn(\"PostgreSQL does not support FLOAT with decimals. Plain `FLOAT` will be used instead.\");\n        this._length = void 0;\n        this.options.length = void 0;\n        this._decimals = void 0;\n      }\n      if (this._unsigned) {\n        warn(\"PostgreSQL does not support FLOAT unsigned. `UNSIGNED` was removed.\");\n        this._unsigned = void 0;\n      }\n      if (this._zerofill) {\n        warn(\"PostgreSQL does not support FLOAT zerofill. `ZEROFILL` was removed.\");\n        this._zerofill = void 0;\n      }\n    }\n  }\n  delete FLOAT.parse;\n  class BLOB extends BaseTypes.BLOB {\n    toSql() {\n      if (this._length) {\n        warn(\"PostgreSQL does not support BLOB (BYTEA) with options. Plain `BYTEA` will be used instead.\");\n        this._length = void 0;\n      }\n      return \"BYTEA\";\n    }\n    _hexify(hex) {\n      return `E'\\\\\\\\x${hex}'`;\n    }\n  }\n  BaseTypes.BLOB.types.postgres = [\"bytea\"];\n  class GEOMETRY extends BaseTypes.GEOMETRY {\n    toSql() {\n      let result = this.key;\n      if (this.type) {\n        result += `(${this.type}`;\n        if (this.srid) {\n          result += `,${this.srid}`;\n        }\n        result += \")\";\n      }\n      return result;\n    }\n    static parse(value) {\n      const b = Buffer.from(value, \"hex\");\n      return wkx.Geometry.parse(b).toGeoJSON({ shortCrs: true });\n    }\n    _stringify(value, options) {\n      return `ST_GeomFromGeoJSON(${options.escape(JSON.stringify(value))})`;\n    }\n    _bindParam(value, options) {\n      return `ST_GeomFromGeoJSON(${options.bindParam(value)})`;\n    }\n  }\n  BaseTypes.GEOMETRY.types.postgres = [\"geometry\"];\n  class GEOGRAPHY extends BaseTypes.GEOGRAPHY {\n    toSql() {\n      let result = \"GEOGRAPHY\";\n      if (this.type) {\n        result += `(${this.type}`;\n        if (this.srid) {\n          result += `,${this.srid}`;\n        }\n        result += \")\";\n      }\n      return result;\n    }\n    static parse(value) {\n      const b = Buffer.from(value, \"hex\");\n      return wkx.Geometry.parse(b).toGeoJSON({ shortCrs: true });\n    }\n    _stringify(value, options) {\n      return `ST_GeomFromGeoJSON(${options.escape(JSON.stringify(value))})`;\n    }\n    bindParam(value, options) {\n      return `ST_GeomFromGeoJSON(${options.bindParam(value)})`;\n    }\n  }\n  BaseTypes.GEOGRAPHY.types.postgres = [\"geography\"];\n  let hstore;\n  class HSTORE extends BaseTypes.HSTORE {\n    constructor() {\n      super();\n      if (!hstore) {\n        hstore = require(\"./hstore\");\n      }\n    }\n    _value(value) {\n      if (!hstore) {\n        hstore = require(\"./hstore\");\n      }\n      return hstore.stringify(value);\n    }\n    _stringify(value) {\n      return `'${this._value(value)}'`;\n    }\n    _bindParam(value, options) {\n      return options.bindParam(this._value(value));\n    }\n    static parse(value) {\n      if (!hstore) {\n        hstore = require(\"./hstore\");\n      }\n      return hstore.parse(value);\n    }\n  }\n  HSTORE.prototype.escape = false;\n  BaseTypes.HSTORE.types.postgres = [\"hstore\"];\n  class RANGE extends BaseTypes.RANGE {\n    _value(values, options) {\n      if (!Array.isArray(values)) {\n        return this.options.subtype.stringify(values, options);\n      }\n      const valueInclusivity = [true, false];\n      const valuesStringified = values.map((value, index) => {\n        if (_.isObject(value) && Object.prototype.hasOwnProperty.call(value, \"value\")) {\n          if (Object.prototype.hasOwnProperty.call(value, \"inclusive\")) {\n            valueInclusivity[index] = value.inclusive;\n          }\n          value = value.value;\n        }\n        if (value === null || value === Number.NEGATIVE_INFINITY || value === Number.POSITIVE_INFINITY) {\n          return value;\n        }\n        if (this.options.subtype.stringify) {\n          return this.options.subtype.stringify(value, options);\n        }\n        return options.escape(value);\n      });\n      valuesStringified.inclusive = valueInclusivity;\n      return range.stringify(valuesStringified);\n    }\n    _stringify(values, options) {\n      const value = this._value(values, options);\n      if (!Array.isArray(values)) {\n        return `'${value}'::${this.toCastType()}`;\n      }\n      return `'${value}'`;\n    }\n    _bindParam(values, options) {\n      const value = this._value(values, options);\n      if (!Array.isArray(values)) {\n        return `${options.bindParam(value)}::${this.toCastType()}`;\n      }\n      return options.bindParam(value);\n    }\n    toSql() {\n      return BaseTypes.RANGE.types.postgres.subtypes[this._subtype.toLowerCase()];\n    }\n    toCastType() {\n      return BaseTypes.RANGE.types.postgres.castTypes[this._subtype.toLowerCase()];\n    }\n    static parse(value, options = { parser: (val) => val }) {\n      return range.parse(value, options.parser);\n    }\n  }\n  const range = require(\"./range\");\n  RANGE.prototype.escape = false;\n  BaseTypes.RANGE.types.postgres = {\n    subtypes: {\n      integer: \"int4range\",\n      decimal: \"numrange\",\n      date: \"tstzrange\",\n      dateonly: \"daterange\",\n      bigint: \"int8range\"\n    },\n    castTypes: {\n      integer: \"int4\",\n      decimal: \"numeric\",\n      date: \"timestamptz\",\n      dateonly: \"date\",\n      bigint: \"int8\"\n    }\n  };\n  BaseTypes.ARRAY.prototype.escape = false;\n  BaseTypes.ARRAY.prototype._value = function _value(values, options) {\n    return values.map((value) => {\n      if (options && options.bindParam && this.type && this.type._value) {\n        return this.type._value(value, options);\n      }\n      if (this.type && this.type.stringify) {\n        value = this.type.stringify(value, options);\n        if (this.type.escape === false) {\n          return value;\n        }\n      }\n      return options.escape(value);\n    });\n  };\n  BaseTypes.ARRAY.prototype._stringify = function _stringify(values, options) {\n    let str = `ARRAY[${this._value(values, options).join(\",\")}]`;\n    if (this.type) {\n      const Utils = require(\"../../utils\");\n      let castKey = this.toSql();\n      if (this.type instanceof BaseTypes.ENUM) {\n        const table = options.field.Model.getTableName();\n        const useSchema = table.schema !== void 0;\n        const schemaWithDelimiter = useSchema ? `${Utils.addTicks(table.schema, '\"')}${table.delimiter}` : \"\";\n        castKey = `${Utils.addTicks(Utils.generateEnumName(useSchema ? table.tableName : table, options.field.field), '\"')}[]`;\n        str += `::${schemaWithDelimiter}${castKey}`;\n      } else {\n        str += `::${castKey}`;\n      }\n    }\n    return str;\n  };\n  BaseTypes.ARRAY.prototype._bindParam = function _bindParam(values, options) {\n    return options.bindParam(this._value(values, options));\n  };\n  class ENUM extends BaseTypes.ENUM {\n    static parse(value) {\n      return value;\n    }\n  }\n  BaseTypes.ENUM.types.postgres = [null];\n  return {\n    DECIMAL,\n    BLOB,\n    STRING,\n    CHAR,\n    TEXT,\n    CITEXT,\n    TINYINT,\n    SMALLINT,\n    INTEGER,\n    BIGINT,\n    BOOLEAN,\n    DATE,\n    DATEONLY,\n    REAL,\n    \"DOUBLE PRECISION\": DOUBLE,\n    FLOAT,\n    GEOMETRY,\n    GEOGRAPHY,\n    HSTORE,\n    RANGE,\n    ENUM\n  };\n};\n//# sourceMappingURL=data-types.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/dialects/postgres/data-types.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1168,
    "kind": "variable",
    "name": "_",
    "memberof": "lib/dialects/postgres/data-types.js",
    "static": true,
    "longname": "lib/dialects/postgres/data-types.js~_",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1169,
    "kind": "variable",
    "name": "wkx",
    "memberof": "lib/dialects/postgres/data-types.js",
    "static": true,
    "longname": "lib/dialects/postgres/data-types.js~wkx",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1170,
    "kind": "file",
    "name": "lib/dialects/postgres/hstore.js",
    "content": "\"use strict\";\nconst hstore = require(\"pg-hstore\")({ sanitize: true });\nfunction stringify(data) {\n  if (data === null) {\n    return null;\n  }\n  return hstore.stringify(data);\n}\nexports.stringify = stringify;\nfunction parse(value) {\n  if (value === null) {\n    return null;\n  }\n  return hstore.parse(value);\n}\nexports.parse = parse;\n//# sourceMappingURL=hstore.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/dialects/postgres/hstore.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1171,
    "kind": "variable",
    "name": "hstore",
    "memberof": "lib/dialects/postgres/hstore.js",
    "static": true,
    "longname": "lib/dialects/postgres/hstore.js~hstore",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/hstore.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1172,
    "kind": "function",
    "name": "stringify",
    "memberof": "lib/dialects/postgres/hstore.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/postgres/hstore.js~stringify",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/hstore.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1173,
    "kind": "function",
    "name": "parse",
    "memberof": "lib/dialects/postgres/hstore.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/postgres/hstore.js~parse",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/hstore.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1174,
    "kind": "file",
    "name": "lib/dialects/postgres/index.js",
    "content": "\"use strict\";\nconst _ = require(\"lodash\");\nconst { AbstractDialect } = require(\"../abstract\");\nconst ConnectionManager = require(\"./connection-manager\");\nconst Query = require(\"./query\");\nconst QueryGenerator = require(\"./query-generator\");\nconst DataTypes = require(\"../../data-types\").postgres;\nconst { PostgresQueryInterface } = require(\"./query-interface\");\nclass PostgresDialect extends AbstractDialect {\n  static supports = _.merge(_.cloneDeep(AbstractDialect.supports), {\n    \"DEFAULT VALUES\": true,\n    EXCEPTION: true,\n    \"ON DUPLICATE KEY\": false,\n    \"ORDER NULLS\": true,\n    returnValues: {\n      returning: true\n    },\n    bulkDefault: true,\n    schemas: true,\n    lock: true,\n    lockOf: true,\n    lockKey: true,\n    lockOuterJoinFailure: true,\n    skipLocked: true,\n    forShare: \"FOR SHARE\",\n    index: {\n      concurrently: true,\n      using: 2,\n      where: true,\n      functionBased: true,\n      operator: true\n    },\n    inserts: {\n      onConflictDoNothing: \" ON CONFLICT DO NOTHING\",\n      updateOnDuplicate: \" ON CONFLICT DO UPDATE SET\",\n      conflictFields: true\n    },\n    NUMERIC: true,\n    ARRAY: true,\n    RANGE: true,\n    GEOMETRY: true,\n    REGEXP: true,\n    GEOGRAPHY: true,\n    JSON: true,\n    JSONB: true,\n    HSTORE: true,\n    TSVECTOR: true,\n    deferrableConstraints: true,\n    searchPath: true\n  });\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new PostgresQueryInterface(sequelize, this.queryGenerator);\n  }\n}\nPostgresDialect.prototype.defaultVersion = \"9.5.0\";\nPostgresDialect.prototype.Query = Query;\nPostgresDialect.prototype.DataTypes = DataTypes;\nPostgresDialect.prototype.name = \"postgres\";\nPostgresDialect.prototype.TICK_CHAR = '\"';\nPostgresDialect.prototype.TICK_CHAR_LEFT = PostgresDialect.prototype.TICK_CHAR;\nPostgresDialect.prototype.TICK_CHAR_RIGHT = PostgresDialect.prototype.TICK_CHAR;\nmodule.exports = PostgresDialect;\nmodule.exports.default = PostgresDialect;\nmodule.exports.PostgresDialect = PostgresDialect;\n//# sourceMappingURL=index.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/dialects/postgres/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1175,
    "kind": "variable",
    "name": "_",
    "memberof": "lib/dialects/postgres/index.js",
    "static": true,
    "longname": "lib/dialects/postgres/index.js~_",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1176,
    "kind": "variable",
    "name": "AbstractDialect",
    "memberof": "lib/dialects/postgres/index.js",
    "static": true,
    "longname": "lib/dialects/postgres/index.js~AbstractDialect",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1177,
    "kind": "variable",
    "name": "ConnectionManager",
    "memberof": "lib/dialects/postgres/index.js",
    "static": true,
    "longname": "lib/dialects/postgres/index.js~ConnectionManager",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1178,
    "kind": "variable",
    "name": "Query",
    "memberof": "lib/dialects/postgres/index.js",
    "static": true,
    "longname": "lib/dialects/postgres/index.js~Query",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1179,
    "kind": "variable",
    "name": "QueryGenerator",
    "memberof": "lib/dialects/postgres/index.js",
    "static": true,
    "longname": "lib/dialects/postgres/index.js~QueryGenerator",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1180,
    "kind": "variable",
    "name": "DataTypes",
    "memberof": "lib/dialects/postgres/index.js",
    "static": true,
    "longname": "lib/dialects/postgres/index.js~DataTypes",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1181,
    "kind": "variable",
    "name": "PostgresQueryInterface",
    "memberof": "lib/dialects/postgres/index.js",
    "static": true,
    "longname": "lib/dialects/postgres/index.js~PostgresQueryInterface",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1182,
    "kind": "class",
    "name": "PostgresDialect",
    "memberof": "lib/dialects/postgres/index.js",
    "static": true,
    "longname": "lib/dialects/postgres/index.js~PostgresDialect",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false,
    "extends": [
      "AbstractDialect"
    ],
    "ignore": true
  },
  {
    "__docId__": 1183,
    "kind": "member",
    "name": "supports",
    "memberof": "lib/dialects/postgres/index.js~PostgresDialect",
    "static": true,
    "longname": "lib/dialects/postgres/index.js~PostgresDialect.supports",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1184,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/dialects/postgres/index.js~PostgresDialect",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/index.js~PostgresDialect#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 1185,
    "kind": "member",
    "name": "sequelize",
    "memberof": "lib/dialects/postgres/index.js~PostgresDialect",
    "static": false,
    "longname": "lib/dialects/postgres/index.js~PostgresDialect#sequelize",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1186,
    "kind": "member",
    "name": "connectionManager",
    "memberof": "lib/dialects/postgres/index.js~PostgresDialect",
    "static": false,
    "longname": "lib/dialects/postgres/index.js~PostgresDialect#connectionManager",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1187,
    "kind": "member",
    "name": "queryGenerator",
    "memberof": "lib/dialects/postgres/index.js~PostgresDialect",
    "static": false,
    "longname": "lib/dialects/postgres/index.js~PostgresDialect#queryGenerator",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1188,
    "kind": "member",
    "name": "queryInterface",
    "memberof": "lib/dialects/postgres/index.js~PostgresDialect",
    "static": false,
    "longname": "lib/dialects/postgres/index.js~PostgresDialect#queryInterface",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1189,
    "kind": "file",
    "name": "lib/dialects/postgres/query-generator.js",
    "content": "\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nconst Utils = require(\"../../utils\");\nconst util = require(\"util\");\nconst DataTypes = require(\"../../data-types\");\nconst AbstractQueryGenerator = require(\"../abstract/query-generator\");\nconst semver = require(\"semver\");\nconst _ = require(\"lodash\");\nconst POSTGRES_RESERVED_WORDS = \"all,analyse,analyze,and,any,array,as,asc,asymmetric,authorization,binary,both,case,cast,check,collate,collation,column,concurrently,constraint,create,cross,current_catalog,current_date,current_role,current_schema,current_time,current_timestamp,current_user,default,deferrable,desc,distinct,do,else,end,except,false,fetch,for,foreign,freeze,from,full,grant,group,having,ilike,in,initially,inner,intersect,into,is,isnull,join,lateral,leading,left,like,limit,localtime,localtimestamp,natural,not,notnull,null,offset,on,only,or,order,outer,overlaps,placing,primary,references,returning,right,select,session_user,similar,some,symmetric,table,tablesample,then,to,trailing,true,union,unique,user,using,variadic,verbose,when,where,window,with\".split(\",\");\nclass PostgresQueryGenerator extends AbstractQueryGenerator {\n  setSearchPath(searchPath) {\n    return `SET search_path to ${searchPath};`;\n  }\n  createDatabaseQuery(databaseName, options) {\n    options = __spreadValues({\n      encoding: null,\n      collate: null\n    }, options);\n    const values = {\n      database: this.quoteTable(databaseName),\n      encoding: options.encoding ? ` ENCODING = ${this.escape(options.encoding)}` : \"\",\n      collation: options.collate ? ` LC_COLLATE = ${this.escape(options.collate)}` : \"\",\n      ctype: options.ctype ? ` LC_CTYPE = ${this.escape(options.ctype)}` : \"\",\n      template: options.template ? ` TEMPLATE = ${this.escape(options.template)}` : \"\"\n    };\n    return `CREATE DATABASE ${values.database}${values.encoding}${values.collation}${values.ctype}${values.template};`;\n  }\n  dropDatabaseQuery(databaseName) {\n    return `DROP DATABASE IF EXISTS ${this.quoteTable(databaseName)};`;\n  }\n  createSchema(schema) {\n    const databaseVersion = _.get(this, \"sequelize.options.databaseVersion\", 0);\n    if (databaseVersion && semver.gte(databaseVersion, \"9.2.0\")) {\n      return `CREATE SCHEMA IF NOT EXISTS ${schema};`;\n    }\n    return `CREATE SCHEMA ${schema};`;\n  }\n  dropSchema(schema) {\n    return `DROP SCHEMA IF EXISTS ${schema} CASCADE;`;\n  }\n  showSchemasQuery() {\n    return \"SELECT schema_name FROM information_schema.schemata WHERE schema_name <> 'information_schema' AND schema_name != 'public' AND schema_name !~ E'^pg_';\";\n  }\n  versionQuery() {\n    return \"SHOW SERVER_VERSION\";\n  }\n  createTableQuery(tableName, attributes, options) {\n    options = __spreadValues({}, options);\n    const databaseVersion = _.get(this, \"sequelize.options.databaseVersion\", 0);\n    const attrStr = [];\n    let comments = \"\";\n    let columnComments = \"\";\n    const quotedTable = this.quoteTable(tableName);\n    if (options.comment && typeof options.comment === \"string\") {\n      comments += `; COMMENT ON TABLE ${quotedTable} IS ${this.escape(options.comment)}`;\n    }\n    for (const attr in attributes) {\n      const quotedAttr = this.quoteIdentifier(attr);\n      const i = attributes[attr].indexOf(\"COMMENT \");\n      if (i !== -1) {\n        const escapedCommentText = this.escape(attributes[attr].slice(Math.max(0, i + 8)));\n        columnComments += `; COMMENT ON COLUMN ${quotedTable}.${quotedAttr} IS ${escapedCommentText}`;\n        attributes[attr] = attributes[attr].slice(0, Math.max(0, i));\n      }\n      const dataType = this.dataTypeMapping(tableName, attr, attributes[attr]);\n      attrStr.push(`${quotedAttr} ${dataType}`);\n    }\n    let attributesClause = attrStr.join(\", \");\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, (columns) => {\n        if (columns.customIndex) {\n          attributesClause += `, UNIQUE (${columns.fields.map((field) => this.quoteIdentifier(field)).join(\", \")})`;\n        }\n      });\n    }\n    const pks = _.reduce(attributes, (acc, attribute, key) => {\n      if (attribute.includes(\"PRIMARY KEY\")) {\n        acc.push(this.quoteIdentifier(key));\n      }\n      return acc;\n    }, []).join(\",\");\n    if (pks.length > 0) {\n      attributesClause += `, PRIMARY KEY (${pks})`;\n    }\n    return `CREATE TABLE ${databaseVersion === 0 || semver.gte(databaseVersion, \"9.1.0\") ? \"IF NOT EXISTS \" : \"\"}${quotedTable} (${attributesClause})${comments}${columnComments};`;\n  }\n  dropTableQuery(tableName, options) {\n    options = options || {};\n    return `DROP TABLE IF EXISTS ${this.quoteTable(tableName)}${options.cascade ? \" CASCADE\" : \"\"};`;\n  }\n  showTablesQuery() {\n    return \"SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_type LIKE '%TABLE' AND table_name != 'spatial_ref_sys';\";\n  }\n  describeTableQuery(tableName, schema) {\n    if (!schema) {\n      schema = \"public\";\n    }\n    return `SELECT pk.constraint_type as \"Constraint\",c.column_name as \"Field\", c.column_default as \"Default\",c.is_nullable as \"Null\", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as \"Type\", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = ${this.escape(tableName)} AND c.table_schema = ${this.escape(schema)} `;\n  }\n  _checkValidJsonStatement(stmt) {\n    if (typeof stmt !== \"string\") {\n      return false;\n    }\n    const jsonFunctionRegex = /^\\s*((?:[a-z]+_){0,2}jsonb?(?:_[a-z]+){0,2})\\([^)]*\\)/i;\n    const jsonOperatorRegex = /^\\s*(->>?|#>>?|@>|<@|\\?[&|]?|\\|{2}|#-)/i;\n    const tokenCaptureRegex = /^\\s*((?:([\"'`])(?:(?!\\2).|\\2{2})*\\2)|[\\s\\w]+|[()+,.;-])/i;\n    let currentIndex = 0;\n    let openingBrackets = 0;\n    let closingBrackets = 0;\n    let hasJsonFunction = false;\n    let hasInvalidToken = false;\n    while (currentIndex < stmt.length) {\n      const string = stmt.slice(currentIndex);\n      const functionMatches = jsonFunctionRegex.exec(string);\n      if (functionMatches) {\n        currentIndex += functionMatches[0].indexOf(\"(\");\n        hasJsonFunction = true;\n        continue;\n      }\n      const operatorMatches = jsonOperatorRegex.exec(string);\n      if (operatorMatches) {\n        currentIndex += operatorMatches[0].length;\n        hasJsonFunction = true;\n        continue;\n      }\n      const tokenMatches = tokenCaptureRegex.exec(string);\n      if (tokenMatches) {\n        const capturedToken = tokenMatches[1];\n        if (capturedToken === \"(\") {\n          openingBrackets++;\n        } else if (capturedToken === \")\") {\n          closingBrackets++;\n        } else if (capturedToken === \";\") {\n          hasInvalidToken = true;\n          break;\n        }\n        currentIndex += tokenMatches[0].length;\n        continue;\n      }\n      break;\n    }\n    hasInvalidToken |= openingBrackets !== closingBrackets;\n    if (hasJsonFunction && hasInvalidToken) {\n      throw new Error(`Invalid json statement: ${stmt}`);\n    }\n    return hasJsonFunction;\n  }\n  handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n    if (smth instanceof Utils.Json) {\n      if (smth.conditions) {\n        const conditions = this.parseConditionObject(smth.conditions).map((condition) => `${this.jsonPathExtractionQuery(condition.path[0], _.tail(condition.path))} = '${condition.value}'`);\n        return conditions.join(\" AND \");\n      }\n      if (smth.path) {\n        let str;\n        if (this._checkValidJsonStatement(smth.path)) {\n          str = smth.path;\n        } else {\n          const paths = _.toPath(smth.path);\n          const column = paths.shift();\n          str = this.jsonPathExtractionQuery(column, paths);\n        }\n        if (smth.value) {\n          str += util.format(\" = %s\", this.escape(smth.value));\n        }\n        return str;\n      }\n    }\n    return super.handleSequelizeMethod.call(this, smth, tableName, factory, options, prepend);\n  }\n  addColumnQuery(table, key, attribute) {\n    const dbDataType = this.attributeToSQL(attribute, { context: \"addColumn\", table, key });\n    const dataType = attribute.type || attribute;\n    const definition = this.dataTypeMapping(table, key, dbDataType);\n    const quotedKey = this.quoteIdentifier(key);\n    const quotedTable = this.quoteTable(this.extractTableDetails(table));\n    let query = `ALTER TABLE ${quotedTable} ADD COLUMN ${quotedKey} ${definition};`;\n    if (dataType instanceof DataTypes.ENUM) {\n      query = this.pgEnum(table, key, dataType) + query;\n    } else if (dataType.type && dataType.type instanceof DataTypes.ENUM) {\n      query = this.pgEnum(table, key, dataType.type) + query;\n    }\n    return query;\n  }\n  removeColumnQuery(tableName, attributeName) {\n    const quotedTableName = this.quoteTable(this.extractTableDetails(tableName));\n    const quotedAttributeName = this.quoteIdentifier(attributeName);\n    return `ALTER TABLE ${quotedTableName} DROP COLUMN ${quotedAttributeName};`;\n  }\n  changeColumnQuery(tableName, attributes) {\n    const query = (subQuery) => `ALTER TABLE ${this.quoteTable(tableName)} ALTER COLUMN ${subQuery};`;\n    const sql = [];\n    for (const attributeName in attributes) {\n      let definition = this.dataTypeMapping(tableName, attributeName, attributes[attributeName]);\n      let attrSql = \"\";\n      if (definition.includes(\"NOT NULL\")) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} SET NOT NULL`);\n        definition = definition.replace(\"NOT NULL\", \"\").trim();\n      } else if (!definition.includes(\"REFERENCES\")) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} DROP NOT NULL`);\n      }\n      if (definition.includes(\"DEFAULT\")) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} SET DEFAULT ${definition.match(/DEFAULT ([^;]+)/)[1]}`);\n        definition = definition.replace(/(DEFAULT[^;]+)/, \"\").trim();\n      } else if (!definition.includes(\"REFERENCES\")) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} DROP DEFAULT`);\n      }\n      if (attributes[attributeName].startsWith(\"ENUM(\")) {\n        attrSql += this.pgEnum(tableName, attributeName, attributes[attributeName]);\n        definition = definition.replace(/^ENUM\\(.+\\)/, this.pgEnumName(tableName, attributeName, { schema: false }));\n        definition += ` USING (${this.quoteIdentifier(attributeName)}::${this.pgEnumName(tableName, attributeName)})`;\n      }\n      if (/UNIQUE;*$/.test(definition)) {\n        definition = definition.replace(/UNIQUE;*$/, \"\");\n        attrSql += query(`ADD UNIQUE (${this.quoteIdentifier(attributeName)})`).replace(\"ALTER COLUMN\", \"\");\n      }\n      if (definition.includes(\"REFERENCES\")) {\n        definition = definition.replace(/.+?(?=REFERENCES)/, \"\");\n        attrSql += query(`ADD FOREIGN KEY (${this.quoteIdentifier(attributeName)}) ${definition}`).replace(\"ALTER COLUMN\", \"\");\n      } else {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} TYPE ${definition}`);\n      }\n      sql.push(attrSql);\n    }\n    return sql.join(\"\");\n  }\n  renameColumnQuery(tableName, attrBefore, attributes) {\n    const attrString = [];\n    for (const attributeName in attributes) {\n      attrString.push(`${this.quoteIdentifier(attrBefore)} TO ${this.quoteIdentifier(attributeName)}`);\n    }\n    return `ALTER TABLE ${this.quoteTable(tableName)} RENAME COLUMN ${attrString.join(\", \")};`;\n  }\n  fn(fnName, tableName, parameters, body, returns, language) {\n    fnName = fnName || \"testfunc\";\n    language = language || \"plpgsql\";\n    returns = returns ? `RETURNS ${returns}` : \"\";\n    parameters = parameters || \"\";\n    return `CREATE OR REPLACE FUNCTION pg_temp.${fnName}(${parameters}) ${returns} AS $func$ BEGIN ${body} END; $func$ LANGUAGE ${language}; SELECT * FROM pg_temp.${fnName}();`;\n  }\n  truncateTableQuery(tableName, options = {}) {\n    return [\n      `TRUNCATE ${this.quoteTable(tableName)}`,\n      options.restartIdentity ? \" RESTART IDENTITY\" : \"\",\n      options.cascade ? \" CASCADE\" : \"\"\n    ].join(\"\");\n  }\n  deleteQuery(tableName, where, options = {}, model) {\n    const table = this.quoteTable(tableName);\n    let whereClause = this.getWhereConditions(where, null, model, options);\n    const limit = options.limit ? ` LIMIT ${this.escape(options.limit)}` : \"\";\n    let primaryKeys = \"\";\n    let primaryKeysSelection = \"\";\n    if (whereClause) {\n      whereClause = ` WHERE ${whereClause}`;\n    }\n    if (options.limit) {\n      if (!model) {\n        throw new Error(\"Cannot LIMIT delete without a model.\");\n      }\n      const pks = Object.values(model.primaryKeys).map((pk) => this.quoteIdentifier(pk.field)).join(\",\");\n      primaryKeys = model.primaryKeyAttributes.length > 1 ? `(${pks})` : pks;\n      primaryKeysSelection = pks;\n      return `DELETE FROM ${table} WHERE ${primaryKeys} IN (SELECT ${primaryKeysSelection} FROM ${table}${whereClause}${limit})`;\n    }\n    return `DELETE FROM ${table}${whereClause}`;\n  }\n  showIndexesQuery(tableName) {\n    let schemaJoin = \"\";\n    let schemaWhere = \"\";\n    if (typeof tableName !== \"string\") {\n      schemaJoin = \", pg_namespace s\";\n      schemaWhere = ` AND s.oid = t.relnamespace AND s.nspname = '${tableName.schema}'`;\n      tableName = tableName.tableName;\n    }\n    return `SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a${schemaJoin} WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = '${tableName}'${schemaWhere} GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;`;\n  }\n  showConstraintsQuery(tableName) {\n    return [\n      'SELECT constraint_catalog AS \"constraintCatalog\",',\n      'constraint_schema AS \"constraintSchema\",',\n      'constraint_name AS \"constraintName\",',\n      'table_catalog AS \"tableCatalog\",',\n      'table_schema AS \"tableSchema\",',\n      'table_name AS \"tableName\",',\n      'constraint_type AS \"constraintType\",',\n      'is_deferrable AS \"isDeferrable\",',\n      'initially_deferred AS \"initiallyDeferred\"',\n      \"from INFORMATION_SCHEMA.table_constraints\",\n      `WHERE table_name='${tableName}';`\n    ].join(\" \");\n  }\n  removeIndexQuery(tableName, indexNameOrAttributes, options) {\n    let indexName = indexNameOrAttributes;\n    if (typeof indexName !== \"string\") {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join(\"_\")}`);\n    }\n    return [\n      \"DROP INDEX\",\n      options && options.concurrently && \"CONCURRENTLY\",\n      `IF EXISTS ${this.quoteIdentifiers(indexName)}`\n    ].filter(Boolean).join(\" \");\n  }\n  addLimitAndOffset(options) {\n    let fragment = \"\";\n    if (options.limit != null) {\n      fragment += ` LIMIT ${this.escape(options.limit)}`;\n    }\n    if (options.offset != null) {\n      fragment += ` OFFSET ${this.escape(options.offset)}`;\n    }\n    return fragment;\n  }\n  attributeToSQL(attribute, options) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    }\n    let type;\n    if (attribute.type instanceof DataTypes.ENUM || attribute.type instanceof DataTypes.ARRAY && attribute.type.type instanceof DataTypes.ENUM) {\n      const enumType = attribute.type.type || attribute.type;\n      let values = attribute.values;\n      if (enumType.values && !attribute.values) {\n        values = enumType.values;\n      }\n      if (Array.isArray(values) && values.length > 0) {\n        type = `ENUM(${values.map((value) => this.escape(value)).join(\", \")})`;\n        if (attribute.type instanceof DataTypes.ARRAY) {\n          type += \"[]\";\n        }\n      } else {\n        throw new Error(\"Values for ENUM haven't been defined.\");\n      }\n    }\n    if (!type) {\n      type = attribute.type;\n    }\n    let sql = type.toString();\n    if (Object.prototype.hasOwnProperty.call(attribute, \"allowNull\") && !attribute.allowNull) {\n      sql += \" NOT NULL\";\n    }\n    if (attribute.autoIncrement) {\n      if (attribute.autoIncrementIdentity) {\n        sql += \" GENERATED BY DEFAULT AS IDENTITY\";\n      } else {\n        sql += \" SERIAL\";\n      }\n    }\n    if (Utils.defaultValueSchemable(attribute.defaultValue)) {\n      sql += ` DEFAULT ${this.escape(attribute.defaultValue, attribute)}`;\n    }\n    if (attribute.unique === true) {\n      sql += \" UNIQUE\";\n    }\n    if (attribute.primaryKey) {\n      sql += \" PRIMARY KEY\";\n    }\n    if (attribute.references) {\n      let referencesTable = this.quoteTable(attribute.references.model);\n      let schema;\n      if (options.schema) {\n        schema = options.schema;\n      } else if ((!attribute.references.model || typeof attribute.references.model === \"string\") && options.table && options.table.schema) {\n        schema = options.table.schema;\n      }\n      if (schema) {\n        referencesTable = this.quoteTable(this.addSchema({\n          tableName: referencesTable,\n          _schema: schema\n        }));\n      }\n      let referencesKey;\n      if (attribute.references.key) {\n        referencesKey = this.quoteIdentifiers(attribute.references.key);\n      } else {\n        referencesKey = this.quoteIdentifier(\"id\");\n      }\n      sql += ` REFERENCES ${referencesTable} (${referencesKey})`;\n      if (attribute.onDelete) {\n        sql += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;\n      }\n      if (attribute.onUpdate) {\n        sql += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;\n      }\n      if (attribute.references.deferrable) {\n        sql += ` ${attribute.references.deferrable.toString(this)}`;\n      }\n    }\n    if (attribute.comment && typeof attribute.comment === \"string\") {\n      if (options && [\"addColumn\", \"changeColumn\"].includes(options.context)) {\n        const quotedAttr = this.quoteIdentifier(options.key);\n        const escapedCommentText = this.escape(attribute.comment);\n        sql += `; COMMENT ON COLUMN ${this.quoteTable(options.table)}.${quotedAttr} IS ${escapedCommentText}`;\n      } else {\n        sql += ` COMMENT ${attribute.comment}`;\n      }\n    }\n    return sql;\n  }\n  deferConstraintsQuery(options) {\n    return options.deferrable.toString(this);\n  }\n  setConstraintQuery(columns, type) {\n    let columnFragment = \"ALL\";\n    if (columns) {\n      columnFragment = columns.map((column) => this.quoteIdentifier(column)).join(\", \");\n    }\n    return `SET CONSTRAINTS ${columnFragment} ${type}`;\n  }\n  setDeferredQuery(columns) {\n    return this.setConstraintQuery(columns, \"DEFERRED\");\n  }\n  setImmediateQuery(columns) {\n    return this.setConstraintQuery(columns, \"IMMEDIATE\");\n  }\n  attributesToSQL(attributes, options) {\n    const result = {};\n    for (const key in attributes) {\n      const attribute = attributes[key];\n      result[attribute.field || key] = this.attributeToSQL(attribute, __spreadValues({ key }, options));\n    }\n    return result;\n  }\n  createTrigger(tableName, triggerName, eventType, fireOnSpec, functionName, functionParams, optionsArray) {\n    const decodedEventType = this.decodeTriggerEventType(eventType);\n    const eventSpec = this.expandTriggerEventSpec(fireOnSpec);\n    const expandedOptions = this.expandOptions(optionsArray);\n    const paramList = this._expandFunctionParamList(functionParams);\n    return `CREATE ${this.triggerEventTypeIsConstraint(eventType)}TRIGGER ${this.quoteIdentifier(triggerName)} ${decodedEventType} ${eventSpec} ON ${this.quoteTable(tableName)}${expandedOptions ? ` ${expandedOptions}` : \"\"} EXECUTE PROCEDURE ${functionName}(${paramList});`;\n  }\n  dropTrigger(tableName, triggerName) {\n    return `DROP TRIGGER ${this.quoteIdentifier(triggerName)} ON ${this.quoteTable(tableName)} RESTRICT;`;\n  }\n  renameTrigger(tableName, oldTriggerName, newTriggerName) {\n    return `ALTER TRIGGER ${this.quoteIdentifier(oldTriggerName)} ON ${this.quoteTable(tableName)} RENAME TO ${this.quoteIdentifier(newTriggerName)};`;\n  }\n  createFunction(functionName, params, returnType, language, body, optionsArray, options) {\n    if (!functionName || !returnType || !language || !body) {\n      throw new Error(\"createFunction missing some parameters. Did you pass functionName, returnType, language and body?\");\n    }\n    const paramList = this._expandFunctionParamList(params);\n    const variableList = options && options.variables ? this._expandFunctionVariableList(options.variables) : \"\";\n    const expandedOptionsArray = this.expandOptions(optionsArray);\n    const statement = options && options.force ? \"CREATE OR REPLACE FUNCTION\" : \"CREATE FUNCTION\";\n    return `${statement} ${functionName}(${paramList}) RETURNS ${returnType} AS $func$ ${variableList} BEGIN ${body} END; $func$ language '${language}'${expandedOptionsArray};`;\n  }\n  dropFunction(functionName, params) {\n    if (!functionName) {\n      throw new Error(\"requires functionName\");\n    }\n    const paramList = this._expandFunctionParamList(params);\n    return `DROP FUNCTION ${functionName}(${paramList}) RESTRICT;`;\n  }\n  renameFunction(oldFunctionName, params, newFunctionName) {\n    const paramList = this._expandFunctionParamList(params);\n    return `ALTER FUNCTION ${oldFunctionName}(${paramList}) RENAME TO ${newFunctionName};`;\n  }\n  pgEscapeAndQuote(val) {\n    return this.quoteIdentifier(Utils.removeTicks(this.escape(val), \"'\"));\n  }\n  _expandFunctionParamList(params) {\n    if (params === void 0 || !Array.isArray(params)) {\n      throw new Error(\"_expandFunctionParamList: function parameters array required, including an empty one for no arguments\");\n    }\n    const paramList = [];\n    for (const curParam of params) {\n      const paramDef = [];\n      if (curParam.type) {\n        if (curParam.direction) {\n          paramDef.push(curParam.direction);\n        }\n        if (curParam.name) {\n          paramDef.push(curParam.name);\n        }\n        paramDef.push(curParam.type);\n      } else {\n        throw new Error(\"function or trigger used with a parameter without any type\");\n      }\n      const joined = paramDef.join(\" \");\n      if (joined) {\n        paramList.push(joined);\n      }\n    }\n    return paramList.join(\", \");\n  }\n  _expandFunctionVariableList(variables) {\n    if (!Array.isArray(variables)) {\n      throw new TypeError(\"_expandFunctionVariableList: function variables must be an array\");\n    }\n    const variableDefinitions = [];\n    for (const variable of variables) {\n      if (!variable.name || !variable.type) {\n        throw new Error(\"function variable must have a name and type\");\n      }\n      let variableDefinition = `DECLARE ${variable.name} ${variable.type}`;\n      if (variable.default) {\n        variableDefinition += ` := ${variable.default}`;\n      }\n      variableDefinition += \";\";\n      variableDefinitions.push(variableDefinition);\n    }\n    return variableDefinitions.join(\" \");\n  }\n  expandOptions(options) {\n    return options === void 0 || _.isEmpty(options) ? \"\" : options.join(\" \");\n  }\n  decodeTriggerEventType(eventSpecifier) {\n    const EVENT_DECODER = {\n      after: \"AFTER\",\n      before: \"BEFORE\",\n      instead_of: \"INSTEAD OF\",\n      after_constraint: \"AFTER\"\n    };\n    if (!EVENT_DECODER[eventSpecifier]) {\n      throw new Error(`Invalid trigger event specified: ${eventSpecifier}`);\n    }\n    return EVENT_DECODER[eventSpecifier];\n  }\n  triggerEventTypeIsConstraint(eventSpecifier) {\n    return eventSpecifier === \"after_constraint\" ? \"CONSTRAINT \" : \"\";\n  }\n  expandTriggerEventSpec(fireOnSpec) {\n    if (_.isEmpty(fireOnSpec)) {\n      throw new Error(\"no table change events specified to trigger on\");\n    }\n    return _.map(fireOnSpec, (fireValue, fireKey) => {\n      const EVENT_MAP = {\n        insert: \"INSERT\",\n        update: \"UPDATE\",\n        delete: \"DELETE\",\n        truncate: \"TRUNCATE\"\n      };\n      if (!EVENT_MAP[fireValue]) {\n        throw new Error(`parseTriggerEventSpec: undefined trigger event ${fireKey}`);\n      }\n      let eventSpec = EVENT_MAP[fireValue];\n      if (eventSpec === \"UPDATE\" && Array.isArray(fireValue) && fireValue.length > 0) {\n        eventSpec += ` OF ${fireValue.join(\", \")}`;\n      }\n      return eventSpec;\n    }).join(\" OR \");\n  }\n  pgEnumName(tableName, attr, options) {\n    options = options || {};\n    const tableDetails = this.extractTableDetails(tableName, options);\n    let enumName = Utils.addTicks(Utils.generateEnumName(tableDetails.tableName, attr), '\"');\n    if (options.schema !== false && tableDetails.schema) {\n      enumName = this.quoteIdentifier(tableDetails.schema) + tableDetails.delimiter + enumName;\n    }\n    return enumName;\n  }\n  pgListEnums(tableName, attrName, options) {\n    let enumName = \"\";\n    const tableDetails = this.extractTableDetails(tableName, options);\n    if (tableDetails.tableName && attrName) {\n      enumName = ` AND t.typname=${this.pgEnumName(tableDetails.tableName, attrName, { schema: false }).replace(/\"/g, \"'\")}`;\n    }\n    return `SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = '${tableDetails.schema}'${enumName} GROUP BY 1`;\n  }\n  pgEnum(tableName, attr, dataType, options) {\n    const enumName = this.pgEnumName(tableName, attr, options);\n    let values;\n    if (dataType.values) {\n      values = `ENUM(${dataType.values.map((value) => this.escape(value)).join(\", \")})`;\n    } else {\n      values = dataType.toString().match(/^ENUM\\(.+\\)/)[0];\n    }\n    let sql = `CREATE TYPE ${enumName} AS ${values};`;\n    if (Boolean(options) && options.force === true) {\n      sql = this.pgEnumDrop(tableName, attr) + sql;\n    }\n    return sql;\n  }\n  pgEnumAdd(tableName, attr, value, options) {\n    const enumName = this.pgEnumName(tableName, attr);\n    let sql = `ALTER TYPE ${enumName} ADD VALUE `;\n    if (semver.gte(this.sequelize.options.databaseVersion, \"9.3.0\")) {\n      sql += \"IF NOT EXISTS \";\n    }\n    sql += this.escape(value);\n    if (options.before) {\n      sql += ` BEFORE ${this.escape(options.before)}`;\n    } else if (options.after) {\n      sql += ` AFTER ${this.escape(options.after)}`;\n    }\n    return sql;\n  }\n  pgEnumDrop(tableName, attr, enumName) {\n    enumName = enumName || this.pgEnumName(tableName, attr);\n    return `DROP TYPE IF EXISTS ${enumName}; `;\n  }\n  fromArray(text) {\n    text = text.replace(/^{/, \"\").replace(/}$/, \"\");\n    let matches = text.match(/(\"(?:\\\\.|[^\"\\\\])*\"|[^,]*)(?:\\s*,\\s*|\\s*$)/gi);\n    if (matches.length === 0) {\n      return [];\n    }\n    matches = matches.map((m) => m.replace(/\",$/, \"\").replace(/,$/, \"\").replace(/(^\"|\"$)/g, \"\"));\n    return matches.slice(0, -1);\n  }\n  dataTypeMapping(tableName, attr, dataType) {\n    if (dataType.includes(\"PRIMARY KEY\")) {\n      dataType = dataType.replace(\"PRIMARY KEY\", \"\");\n    }\n    if (dataType.includes(\"SERIAL\")) {\n      if (dataType.includes(\"BIGINT\")) {\n        dataType = dataType.replace(\"SERIAL\", \"BIGSERIAL\");\n        dataType = dataType.replace(\"BIGINT\", \"\");\n      } else if (dataType.includes(\"SMALLINT\")) {\n        dataType = dataType.replace(\"SERIAL\", \"SMALLSERIAL\");\n        dataType = dataType.replace(\"SMALLINT\", \"\");\n      } else {\n        dataType = dataType.replace(\"INTEGER\", \"\");\n      }\n      dataType = dataType.replace(\"NOT NULL\", \"\");\n    }\n    if (dataType.startsWith(\"ENUM(\")) {\n      dataType = dataType.replace(/^ENUM\\(.+\\)/, this.pgEnumName(tableName, attr));\n    }\n    return dataType;\n  }\n  getForeignKeysQuery(tableName) {\n    return `SELECT conname as constraint_name, pg_catalog.pg_get_constraintdef(r.oid, true) as condef FROM pg_catalog.pg_constraint r WHERE r.conrelid = (SELECT oid FROM pg_class WHERE relname = '${tableName}' LIMIT 1) AND r.contype = 'f' ORDER BY 1;`;\n  }\n  _getForeignKeyReferencesQueryPrefix() {\n    return \"SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name \";\n  }\n  getForeignKeyReferencesQuery(tableName, catalogName, schemaName) {\n    return `${this._getForeignKeyReferencesQueryPrefix()}WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = '${tableName}'${catalogName ? ` AND tc.table_catalog = '${catalogName}'` : \"\"}${schemaName ? ` AND tc.table_schema = '${schemaName}'` : \"\"}`;\n  }\n  getForeignKeyReferenceQuery(table, columnName) {\n    const tableName = table.tableName || table;\n    const schema = table.schema;\n    return `${this._getForeignKeyReferencesQueryPrefix()}WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name='${tableName}' AND  kcu.column_name = '${columnName}'${schema ? ` AND tc.table_schema = '${schema}'` : \"\"}`;\n  }\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return `ALTER TABLE ${this.quoteTable(tableName)} DROP CONSTRAINT ${this.quoteIdentifier(foreignKey)};`;\n  }\n  quoteIdentifier(identifier, force) {\n    const optForceQuote = force || false;\n    const optQuoteIdentifiers = this.options.quoteIdentifiers !== false;\n    const rawIdentifier = Utils.removeTicks(identifier, '\"');\n    if (optForceQuote === true || optQuoteIdentifiers !== false || identifier.includes(\".\") || identifier.includes(\"->\") || POSTGRES_RESERVED_WORDS.includes(rawIdentifier.toLowerCase())) {\n      return Utils.addTicks(rawIdentifier, '\"');\n    }\n    return rawIdentifier;\n  }\n  jsonPathExtractionQuery(column, path, isJson) {\n    const quotedColumn = this.isIdentifierQuoted(column) ? column : this.quoteIdentifier(column);\n    const join = isJson ? \"#>\" : \"#>>\";\n    const pathStr = this.escape(`{${_.toPath(path).join(\",\")}}`);\n    return `(${quotedColumn}${join}${pathStr})`;\n  }\n}\nmodule.exports = PostgresQueryGenerator;\n//# sourceMappingURL=query-generator.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/dialects/postgres/query-generator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1190,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/dialects/postgres/query-generator.js",
    "static": true,
    "longname": "lib/dialects/postgres/query-generator.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1191,
    "kind": "variable",
    "name": "__getOwnPropSymbols",
    "memberof": "lib/dialects/postgres/query-generator.js",
    "static": true,
    "longname": "lib/dialects/postgres/query-generator.js~__getOwnPropSymbols",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1192,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/dialects/postgres/query-generator.js",
    "static": true,
    "longname": "lib/dialects/postgres/query-generator.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1193,
    "kind": "variable",
    "name": "__propIsEnum",
    "memberof": "lib/dialects/postgres/query-generator.js",
    "static": true,
    "longname": "lib/dialects/postgres/query-generator.js~__propIsEnum",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1194,
    "kind": "function",
    "name": "__defNormalProp",
    "memberof": "lib/dialects/postgres/query-generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/postgres/query-generator.js~__defNormalProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1195,
    "kind": "function",
    "name": "__spreadValues",
    "memberof": "lib/dialects/postgres/query-generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/postgres/query-generator.js~__spreadValues",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1196,
    "kind": "variable",
    "name": "Utils",
    "memberof": "lib/dialects/postgres/query-generator.js",
    "static": true,
    "longname": "lib/dialects/postgres/query-generator.js~Utils",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1197,
    "kind": "variable",
    "name": "util",
    "memberof": "lib/dialects/postgres/query-generator.js",
    "static": true,
    "longname": "lib/dialects/postgres/query-generator.js~util",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1198,
    "kind": "variable",
    "name": "DataTypes",
    "memberof": "lib/dialects/postgres/query-generator.js",
    "static": true,
    "longname": "lib/dialects/postgres/query-generator.js~DataTypes",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1199,
    "kind": "variable",
    "name": "AbstractQueryGenerator",
    "memberof": "lib/dialects/postgres/query-generator.js",
    "static": true,
    "longname": "lib/dialects/postgres/query-generator.js~AbstractQueryGenerator",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1200,
    "kind": "variable",
    "name": "semver",
    "memberof": "lib/dialects/postgres/query-generator.js",
    "static": true,
    "longname": "lib/dialects/postgres/query-generator.js~semver",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1201,
    "kind": "variable",
    "name": "_",
    "memberof": "lib/dialects/postgres/query-generator.js",
    "static": true,
    "longname": "lib/dialects/postgres/query-generator.js~_",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1202,
    "kind": "variable",
    "name": "POSTGRES_RESERVED_WORDS",
    "memberof": "lib/dialects/postgres/query-generator.js",
    "static": true,
    "longname": "lib/dialects/postgres/query-generator.js~POSTGRES_RESERVED_WORDS",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1203,
    "kind": "class",
    "name": "PostgresQueryGenerator",
    "memberof": "lib/dialects/postgres/query-generator.js",
    "static": true,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "interface": false,
    "extends": [
      "AbstractQueryGenerator"
    ],
    "ignore": true
  },
  {
    "__docId__": 1204,
    "kind": "method",
    "name": "setSearchPath",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#setSearchPath",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "searchPath",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1205,
    "kind": "method",
    "name": "createDatabaseQuery",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#createDatabaseQuery",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [
      {
        "name": "databaseName",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1206,
    "kind": "method",
    "name": "dropDatabaseQuery",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#dropDatabaseQuery",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [
      {
        "name": "databaseName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1207,
    "kind": "method",
    "name": "createSchema",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#createSchema",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [
      {
        "name": "schema",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1208,
    "kind": "method",
    "name": "dropSchema",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#dropSchema",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "params": [
      {
        "name": "schema",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1209,
    "kind": "method",
    "name": "showSchemasQuery",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#showSchemasQuery",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1210,
    "kind": "method",
    "name": "versionQuery",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#versionQuery",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1211,
    "kind": "method",
    "name": "createTableQuery",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#createTableQuery",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributes",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1212,
    "kind": "method",
    "name": "dropTableQuery",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#dropTableQuery",
    "access": "public",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1213,
    "kind": "method",
    "name": "showTablesQuery",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#showTablesQuery",
    "access": "public",
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1214,
    "kind": "method",
    "name": "describeTableQuery",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#describeTableQuery",
    "access": "public",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "schema",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1215,
    "kind": "method",
    "name": "_checkValidJsonStatement",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#_checkValidJsonStatement",
    "access": "private",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "stmt",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1216,
    "kind": "method",
    "name": "handleSequelizeMethod",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#handleSequelizeMethod",
    "access": "public",
    "description": null,
    "lineNumber": 163,
    "undocument": true,
    "params": [
      {
        "name": "smth",
        "types": [
          "*"
        ]
      },
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "factory",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      },
      {
        "name": "prepend",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1217,
    "kind": "method",
    "name": "addColumnQuery",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#addColumnQuery",
    "access": "public",
    "description": null,
    "lineNumber": 186,
    "undocument": true,
    "params": [
      {
        "name": "table",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "attribute",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1218,
    "kind": "method",
    "name": "removeColumnQuery",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#removeColumnQuery",
    "access": "public",
    "description": null,
    "lineNumber": 200,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributeName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1219,
    "kind": "method",
    "name": "changeColumnQuery",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#changeColumnQuery",
    "access": "public",
    "description": null,
    "lineNumber": 205,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1220,
    "kind": "method",
    "name": "renameColumnQuery",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#renameColumnQuery",
    "access": "public",
    "description": null,
    "lineNumber": 242,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attrBefore",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1221,
    "kind": "method",
    "name": "fn",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#fn",
    "access": "public",
    "description": null,
    "lineNumber": 249,
    "undocument": true,
    "params": [
      {
        "name": "fnName",
        "types": [
          "*"
        ]
      },
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "parameters",
        "types": [
          "*"
        ]
      },
      {
        "name": "body",
        "types": [
          "*"
        ]
      },
      {
        "name": "returns",
        "types": [
          "*"
        ]
      },
      {
        "name": "language",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1222,
    "kind": "method",
    "name": "truncateTableQuery",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#truncateTableQuery",
    "access": "public",
    "description": null,
    "lineNumber": 256,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1223,
    "kind": "method",
    "name": "deleteQuery",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#deleteQuery",
    "access": "public",
    "description": null,
    "lineNumber": 263,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "where",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      },
      {
        "name": "model",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1224,
    "kind": "method",
    "name": "showIndexesQuery",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#showIndexesQuery",
    "access": "public",
    "description": null,
    "lineNumber": 283,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1225,
    "kind": "method",
    "name": "showConstraintsQuery",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#showConstraintsQuery",
    "access": "public",
    "description": null,
    "lineNumber": 293,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1226,
    "kind": "method",
    "name": "removeIndexQuery",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#removeIndexQuery",
    "access": "public",
    "description": null,
    "lineNumber": 308,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "indexNameOrAttributes",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1227,
    "kind": "method",
    "name": "addLimitAndOffset",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#addLimitAndOffset",
    "access": "public",
    "description": null,
    "lineNumber": 319,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1228,
    "kind": "method",
    "name": "attributeToSQL",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#attributeToSQL",
    "access": "public",
    "description": null,
    "lineNumber": 329,
    "undocument": true,
    "params": [
      {
        "name": "attribute",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1229,
    "kind": "method",
    "name": "deferConstraintsQuery",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#deferConstraintsQuery",
    "access": "public",
    "description": null,
    "lineNumber": 416,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1230,
    "kind": "method",
    "name": "setConstraintQuery",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#setConstraintQuery",
    "access": "public",
    "description": null,
    "lineNumber": 419,
    "undocument": true,
    "params": [
      {
        "name": "columns",
        "types": [
          "*"
        ]
      },
      {
        "name": "type",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1231,
    "kind": "method",
    "name": "setDeferredQuery",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#setDeferredQuery",
    "access": "public",
    "description": null,
    "lineNumber": 426,
    "undocument": true,
    "params": [
      {
        "name": "columns",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1232,
    "kind": "method",
    "name": "setImmediateQuery",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#setImmediateQuery",
    "access": "public",
    "description": null,
    "lineNumber": 429,
    "undocument": true,
    "params": [
      {
        "name": "columns",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1233,
    "kind": "method",
    "name": "attributesToSQL",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#attributesToSQL",
    "access": "public",
    "description": null,
    "lineNumber": 432,
    "undocument": true,
    "params": [
      {
        "name": "attributes",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1234,
    "kind": "method",
    "name": "createTrigger",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#createTrigger",
    "access": "public",
    "description": null,
    "lineNumber": 440,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "triggerName",
        "types": [
          "*"
        ]
      },
      {
        "name": "eventType",
        "types": [
          "*"
        ]
      },
      {
        "name": "fireOnSpec",
        "types": [
          "*"
        ]
      },
      {
        "name": "functionName",
        "types": [
          "*"
        ]
      },
      {
        "name": "functionParams",
        "types": [
          "*"
        ]
      },
      {
        "name": "optionsArray",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1235,
    "kind": "method",
    "name": "dropTrigger",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#dropTrigger",
    "access": "public",
    "description": null,
    "lineNumber": 447,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "triggerName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1236,
    "kind": "method",
    "name": "renameTrigger",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#renameTrigger",
    "access": "public",
    "description": null,
    "lineNumber": 450,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "oldTriggerName",
        "types": [
          "*"
        ]
      },
      {
        "name": "newTriggerName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1237,
    "kind": "method",
    "name": "createFunction",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#createFunction",
    "access": "public",
    "description": null,
    "lineNumber": 453,
    "undocument": true,
    "params": [
      {
        "name": "functionName",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "*"
        ]
      },
      {
        "name": "returnType",
        "types": [
          "*"
        ]
      },
      {
        "name": "language",
        "types": [
          "*"
        ]
      },
      {
        "name": "body",
        "types": [
          "*"
        ]
      },
      {
        "name": "optionsArray",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1238,
    "kind": "method",
    "name": "dropFunction",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#dropFunction",
    "access": "public",
    "description": null,
    "lineNumber": 463,
    "undocument": true,
    "params": [
      {
        "name": "functionName",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1239,
    "kind": "method",
    "name": "renameFunction",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#renameFunction",
    "access": "public",
    "description": null,
    "lineNumber": 470,
    "undocument": true,
    "params": [
      {
        "name": "oldFunctionName",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "*"
        ]
      },
      {
        "name": "newFunctionName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1240,
    "kind": "method",
    "name": "pgEscapeAndQuote",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#pgEscapeAndQuote",
    "access": "public",
    "description": null,
    "lineNumber": 474,
    "undocument": true,
    "params": [
      {
        "name": "val",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1241,
    "kind": "method",
    "name": "_expandFunctionParamList",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#_expandFunctionParamList",
    "access": "private",
    "description": null,
    "lineNumber": 477,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "params",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1242,
    "kind": "method",
    "name": "_expandFunctionVariableList",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#_expandFunctionVariableList",
    "access": "private",
    "description": null,
    "lineNumber": 502,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "variables",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1243,
    "kind": "method",
    "name": "expandOptions",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#expandOptions",
    "access": "public",
    "description": null,
    "lineNumber": 520,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1244,
    "kind": "method",
    "name": "decodeTriggerEventType",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#decodeTriggerEventType",
    "access": "public",
    "description": null,
    "lineNumber": 523,
    "undocument": true,
    "params": [
      {
        "name": "eventSpecifier",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1245,
    "kind": "method",
    "name": "triggerEventTypeIsConstraint",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#triggerEventTypeIsConstraint",
    "access": "public",
    "description": null,
    "lineNumber": 535,
    "undocument": true,
    "params": [
      {
        "name": "eventSpecifier",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1246,
    "kind": "method",
    "name": "expandTriggerEventSpec",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#expandTriggerEventSpec",
    "access": "public",
    "description": null,
    "lineNumber": 538,
    "undocument": true,
    "params": [
      {
        "name": "fireOnSpec",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1247,
    "kind": "method",
    "name": "pgEnumName",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#pgEnumName",
    "access": "public",
    "description": null,
    "lineNumber": 559,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attr",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1248,
    "kind": "method",
    "name": "pgListEnums",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#pgListEnums",
    "access": "public",
    "description": null,
    "lineNumber": 568,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attrName",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1249,
    "kind": "method",
    "name": "pgEnum",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#pgEnum",
    "access": "public",
    "description": null,
    "lineNumber": 576,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attr",
        "types": [
          "*"
        ]
      },
      {
        "name": "dataType",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1250,
    "kind": "method",
    "name": "pgEnumAdd",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#pgEnumAdd",
    "access": "public",
    "description": null,
    "lineNumber": 590,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attr",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1251,
    "kind": "method",
    "name": "pgEnumDrop",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#pgEnumDrop",
    "access": "public",
    "description": null,
    "lineNumber": 604,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attr",
        "types": [
          "*"
        ]
      },
      {
        "name": "enumName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1252,
    "kind": "method",
    "name": "fromArray",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#fromArray",
    "access": "public",
    "description": null,
    "lineNumber": 608,
    "undocument": true,
    "params": [
      {
        "name": "text",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1253,
    "kind": "method",
    "name": "dataTypeMapping",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#dataTypeMapping",
    "access": "public",
    "description": null,
    "lineNumber": 617,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attr",
        "types": [
          "*"
        ]
      },
      {
        "name": "dataType",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1254,
    "kind": "method",
    "name": "getForeignKeysQuery",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#getForeignKeysQuery",
    "access": "public",
    "description": null,
    "lineNumber": 638,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1255,
    "kind": "method",
    "name": "_getForeignKeyReferencesQueryPrefix",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#_getForeignKeyReferencesQueryPrefix",
    "access": "private",
    "description": null,
    "lineNumber": 641,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 1256,
    "kind": "method",
    "name": "getForeignKeyReferencesQuery",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#getForeignKeyReferencesQuery",
    "access": "public",
    "description": null,
    "lineNumber": 644,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "catalogName",
        "types": [
          "*"
        ]
      },
      {
        "name": "schemaName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1257,
    "kind": "method",
    "name": "getForeignKeyReferenceQuery",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#getForeignKeyReferenceQuery",
    "access": "public",
    "description": null,
    "lineNumber": 647,
    "undocument": true,
    "params": [
      {
        "name": "table",
        "types": [
          "*"
        ]
      },
      {
        "name": "columnName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1258,
    "kind": "method",
    "name": "dropForeignKeyQuery",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#dropForeignKeyQuery",
    "access": "public",
    "description": null,
    "lineNumber": 652,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "foreignKey",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1259,
    "kind": "method",
    "name": "quoteIdentifier",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#quoteIdentifier",
    "access": "public",
    "description": null,
    "lineNumber": 655,
    "undocument": true,
    "params": [
      {
        "name": "identifier",
        "types": [
          "*"
        ]
      },
      {
        "name": "force",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1260,
    "kind": "method",
    "name": "jsonPathExtractionQuery",
    "memberof": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query-generator.js~PostgresQueryGenerator#jsonPathExtractionQuery",
    "access": "public",
    "description": null,
    "lineNumber": 664,
    "undocument": true,
    "params": [
      {
        "name": "column",
        "types": [
          "*"
        ]
      },
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "isJson",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1261,
    "kind": "file",
    "name": "lib/dialects/postgres/query-interface.js",
    "content": "\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nconst DataTypes = require(\"../../data-types\");\nconst { QueryTypes } = require(\"../../query-types\");\nconst { QueryInterface } = require(\"../abstract/query-interface\");\nconst Utils = require(\"../../utils\");\nclass PostgresQueryInterface extends QueryInterface {\n  async ensureEnums(tableName, attributes, options, model) {\n    const keys = Object.keys(attributes);\n    const keyLen = keys.length;\n    let sql = \"\";\n    let promises = [];\n    let i = 0;\n    for (i = 0; i < keyLen; i++) {\n      const attribute = attributes[keys[i]];\n      const type = attribute.type;\n      if (type instanceof DataTypes.ENUM || type instanceof DataTypes.ARRAY && type.type instanceof DataTypes.ENUM) {\n        sql = this.queryGenerator.pgListEnums(tableName, attribute.field || keys[i], options);\n        promises.push(this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), { plain: true, raw: true, type: QueryTypes.SELECT })));\n      }\n    }\n    const results = await Promise.all(promises);\n    promises = [];\n    let enumIdx = 0;\n    const addEnumValue = (field, value, relativeValue, position = \"before\", spliceStart = promises.length) => {\n      const valueOptions = __spreadValues({}, options);\n      valueOptions.before = null;\n      valueOptions.after = null;\n      switch (position) {\n        case \"after\":\n          valueOptions.after = relativeValue;\n          break;\n        case \"before\":\n        default:\n          valueOptions.before = relativeValue;\n          break;\n      }\n      promises.splice(spliceStart, 0, () => {\n        return this.sequelize.query(this.queryGenerator.pgEnumAdd(tableName, field, value, valueOptions), valueOptions);\n      });\n    };\n    for (i = 0; i < keyLen; i++) {\n      const attribute = attributes[keys[i]];\n      const type = attribute.type;\n      const enumType = type.type || type;\n      const field = attribute.field || keys[i];\n      if (type instanceof DataTypes.ENUM || type instanceof DataTypes.ARRAY && enumType instanceof DataTypes.ENUM) {\n        if (!results[enumIdx]) {\n          promises.push(() => {\n            return this.sequelize.query(this.queryGenerator.pgEnum(tableName, field, enumType, options), __spreadProps(__spreadValues({}, options), { raw: true }));\n          });\n        } else if (Boolean(results[enumIdx]) && Boolean(model)) {\n          const enumVals = this.queryGenerator.fromArray(results[enumIdx].enum_value);\n          const vals = enumType.values;\n          let lastOldEnumValue;\n          let rightestPosition = -1;\n          for (let oldIndex = 0; oldIndex < enumVals.length; oldIndex++) {\n            const enumVal = enumVals[oldIndex];\n            const newIdx = vals.indexOf(enumVal);\n            lastOldEnumValue = enumVal;\n            if (newIdx === -1) {\n              continue;\n            }\n            const newValuesBefore = vals.slice(0, newIdx);\n            const promisesLength = promises.length;\n            for (let reverseIdx = newValuesBefore.length - 1; reverseIdx >= 0; reverseIdx--) {\n              if (~enumVals.indexOf(newValuesBefore[reverseIdx])) {\n                break;\n              }\n              addEnumValue(field, newValuesBefore[reverseIdx], lastOldEnumValue, \"before\", promisesLength);\n            }\n            if (newIdx > rightestPosition) {\n              rightestPosition = newIdx;\n            }\n          }\n          if (lastOldEnumValue && rightestPosition < vals.length - 1) {\n            const remainingEnumValues = vals.slice(rightestPosition + 1);\n            for (let reverseIdx = remainingEnumValues.length - 1; reverseIdx >= 0; reverseIdx--) {\n              addEnumValue(field, remainingEnumValues[reverseIdx], lastOldEnumValue, \"after\");\n            }\n          }\n          enumIdx++;\n        }\n      }\n    }\n    const result = await promises.reduce(async (promise, asyncFunction) => await asyncFunction(await promise), Promise.resolve());\n    if (promises.length > 0) {\n      await this.sequelize.dialect.connectionManager._refreshDynamicOIDs();\n    }\n    return result;\n  }\n  async getForeignKeyReferencesForTable(table, options) {\n    const queryOptions = __spreadProps(__spreadValues({}, options), {\n      type: QueryTypes.FOREIGNKEYS\n    });\n    const query = this.queryGenerator.getForeignKeyReferencesQuery(table.tableName || table, this.sequelize.config.database);\n    const result = await this.sequelize.query(query, queryOptions);\n    return result.map(Utils.camelizeObjectKeys);\n  }\n  async dropEnum(enumName, options) {\n    options = options || {};\n    return this.sequelize.query(this.queryGenerator.pgEnumDrop(null, null, this.queryGenerator.pgEscapeAndQuote(enumName)), __spreadProps(__spreadValues({}, options), { raw: true }));\n  }\n  async dropAllEnums(options) {\n    options = options || {};\n    const enums = await this.pgListEnums(null, options);\n    return await Promise.all(enums.map((result) => this.sequelize.query(this.queryGenerator.pgEnumDrop(null, null, this.queryGenerator.pgEscapeAndQuote(result.enum_name)), __spreadProps(__spreadValues({}, options), { raw: true }))));\n  }\n  async pgListEnums(tableName, options) {\n    options = options || {};\n    const sql = this.queryGenerator.pgListEnums(tableName);\n    return this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), { plain: false, raw: true, type: QueryTypes.SELECT }));\n  }\n  async dropTable(tableName, options) {\n    await super.dropTable(tableName, options);\n    const promises = [];\n    const instanceTable = this.sequelize.modelManager.getModel(tableName, { attribute: \"tableName\" });\n    if (!instanceTable) {\n      return;\n    }\n    const getTableName = (!options || !options.schema || options.schema === \"public\" ? \"\" : `${options.schema}_`) + tableName;\n    const keys = Object.keys(instanceTable.rawAttributes);\n    const keyLen = keys.length;\n    for (let i = 0; i < keyLen; i++) {\n      if (instanceTable.rawAttributes[keys[i]].type instanceof DataTypes.ENUM) {\n        const sql = this.queryGenerator.pgEnumDrop(getTableName, keys[i]);\n        options.supportsSearchPath = false;\n        promises.push(this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), { raw: true })));\n      }\n    }\n    await Promise.all(promises);\n  }\n}\nexports.PostgresQueryInterface = PostgresQueryInterface;\n//# sourceMappingURL=query-interface.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/dialects/postgres/query-interface.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1262,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/dialects/postgres/query-interface.js",
    "static": true,
    "longname": "lib/dialects/postgres/query-interface.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1263,
    "kind": "variable",
    "name": "__defProps",
    "memberof": "lib/dialects/postgres/query-interface.js",
    "static": true,
    "longname": "lib/dialects/postgres/query-interface.js~__defProps",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1264,
    "kind": "variable",
    "name": "__getOwnPropDescs",
    "memberof": "lib/dialects/postgres/query-interface.js",
    "static": true,
    "longname": "lib/dialects/postgres/query-interface.js~__getOwnPropDescs",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1265,
    "kind": "variable",
    "name": "__getOwnPropSymbols",
    "memberof": "lib/dialects/postgres/query-interface.js",
    "static": true,
    "longname": "lib/dialects/postgres/query-interface.js~__getOwnPropSymbols",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1266,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/dialects/postgres/query-interface.js",
    "static": true,
    "longname": "lib/dialects/postgres/query-interface.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1267,
    "kind": "variable",
    "name": "__propIsEnum",
    "memberof": "lib/dialects/postgres/query-interface.js",
    "static": true,
    "longname": "lib/dialects/postgres/query-interface.js~__propIsEnum",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1268,
    "kind": "function",
    "name": "__defNormalProp",
    "memberof": "lib/dialects/postgres/query-interface.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/postgres/query-interface.js~__defNormalProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1269,
    "kind": "function",
    "name": "__spreadValues",
    "memberof": "lib/dialects/postgres/query-interface.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/postgres/query-interface.js~__spreadValues",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1270,
    "kind": "function",
    "name": "__spreadProps",
    "memberof": "lib/dialects/postgres/query-interface.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/postgres/query-interface.js~__spreadProps",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1271,
    "kind": "variable",
    "name": "DataTypes",
    "memberof": "lib/dialects/postgres/query-interface.js",
    "static": true,
    "longname": "lib/dialects/postgres/query-interface.js~DataTypes",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1272,
    "kind": "variable",
    "name": "QueryTypes",
    "memberof": "lib/dialects/postgres/query-interface.js",
    "static": true,
    "longname": "lib/dialects/postgres/query-interface.js~QueryTypes",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1273,
    "kind": "variable",
    "name": "QueryInterface",
    "memberof": "lib/dialects/postgres/query-interface.js",
    "static": true,
    "longname": "lib/dialects/postgres/query-interface.js~QueryInterface",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1274,
    "kind": "variable",
    "name": "Utils",
    "memberof": "lib/dialects/postgres/query-interface.js",
    "static": true,
    "longname": "lib/dialects/postgres/query-interface.js~Utils",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1275,
    "kind": "class",
    "name": "PostgresQueryInterface",
    "memberof": "lib/dialects/postgres/query-interface.js",
    "static": true,
    "longname": "lib/dialects/postgres/query-interface.js~PostgresQueryInterface",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "interface": false,
    "extends": [
      "QueryInterface"
    ],
    "ignore": true
  },
  {
    "__docId__": 1276,
    "kind": "method",
    "name": "ensureEnums",
    "memberof": "lib/dialects/postgres/query-interface.js~PostgresQueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/postgres/query-interface.js~PostgresQueryInterface#ensureEnums",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributes",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      },
      {
        "name": "model",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1277,
    "kind": "method",
    "name": "getForeignKeyReferencesForTable",
    "memberof": "lib/dialects/postgres/query-interface.js~PostgresQueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/postgres/query-interface.js~PostgresQueryInterface#getForeignKeyReferencesForTable",
    "access": "public",
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "params": [
      {
        "name": "table",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1278,
    "kind": "method",
    "name": "dropEnum",
    "memberof": "lib/dialects/postgres/query-interface.js~PostgresQueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/postgres/query-interface.js~PostgresQueryInterface#dropEnum",
    "access": "public",
    "description": null,
    "lineNumber": 118,
    "undocument": true,
    "params": [
      {
        "name": "enumName",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1279,
    "kind": "method",
    "name": "dropAllEnums",
    "memberof": "lib/dialects/postgres/query-interface.js~PostgresQueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/postgres/query-interface.js~PostgresQueryInterface#dropAllEnums",
    "access": "public",
    "description": null,
    "lineNumber": 122,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1280,
    "kind": "method",
    "name": "pgListEnums",
    "memberof": "lib/dialects/postgres/query-interface.js~PostgresQueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/postgres/query-interface.js~PostgresQueryInterface#pgListEnums",
    "access": "public",
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1281,
    "kind": "method",
    "name": "dropTable",
    "memberof": "lib/dialects/postgres/query-interface.js~PostgresQueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/postgres/query-interface.js~PostgresQueryInterface#dropTable",
    "access": "public",
    "description": null,
    "lineNumber": 132,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 1282,
    "kind": "file",
    "name": "lib/dialects/postgres/query.js",
    "content": "\"use strict\";\nconst AbstractQuery = require(\"../abstract/query\");\nconst { QueryTypes } = require(\"../../query-types\");\nconst sequelizeErrors = require(\"../../errors\");\nconst _ = require(\"lodash\");\nconst { logger } = require(\"../../utils/logger\");\nconst debug = logger.debugContext(\"sql:pg\");\nclass Query extends AbstractQuery {\n  static formatBindParameters(sql, values, dialect) {\n    const stringReplaceFunc = (value) => typeof value === \"string\" ? value.replace(/\\0/g, \"\\\\0\") : value;\n    let bindParam;\n    if (Array.isArray(values)) {\n      bindParam = values.map(stringReplaceFunc);\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, { skipValueReplace: true })[0];\n    } else {\n      bindParam = [];\n      let i = 0;\n      const seen = {};\n      const replacementFunc = (match, key, values2) => {\n        if (seen[key] !== void 0) {\n          return seen[key];\n        }\n        if (values2[key] !== void 0) {\n          i = i + 1;\n          bindParam.push(stringReplaceFunc(values2[key]));\n          seen[key] = `$${i}`;\n          return `$${i}`;\n        }\n      };\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    }\n    return [sql, bindParam];\n  }\n  async run(sql, parameters) {\n    const { connection } = this;\n    if (!_.isEmpty(this.options.searchPath)) {\n      sql = this.sequelize.getQueryInterface().queryGenerator.setSearchPath(this.options.searchPath) + sql;\n    }\n    if (this.sequelize.options.minifyAliases && this.options.includeAliases) {\n      for (const [alias, original] of _.toPairs(this.options.includeAliases).sort((a, b) => b[1].length - a[1].length)) {\n        const reg = new RegExp(_.escapeRegExp(original), \"g\");\n        sql = sql.replace(reg, alias);\n      }\n    }\n    this.sql = sql;\n    const query = new Promise((resolve, reject) => {\n      if (parameters && parameters.length > 0) {\n        connection.query(sql, parameters, (error, result) => error ? reject(error) : resolve(result));\n      } else {\n        connection.query(sql, (error, result) => error ? reject(error) : resolve(result));\n      }\n    });\n    const complete = this._logQuery(sql, debug, parameters);\n    let queryResult;\n    const errForStack = new Error();\n    try {\n      queryResult = await query;\n    } catch (error) {\n      if (error.code === \"ECONNRESET\") {\n        connection._invalid = true;\n      }\n      error.sql = sql;\n      error.parameters = parameters;\n      throw this.formatError(error, errForStack.stack);\n    }\n    complete();\n    let rows = Array.isArray(queryResult) ? queryResult.reduce((allRows, r) => allRows.concat(r.rows || []), []) : queryResult.rows;\n    const rowCount = Array.isArray(queryResult) ? queryResult.reduce((count, r) => Number.isFinite(r.rowCount) ? count + r.rowCount : count, 0) : queryResult.rowCount || 0;\n    if (this.sequelize.options.minifyAliases && this.options.aliasesMapping) {\n      rows = rows.map((row) => _.toPairs(row).reduce((acc, [key, value]) => {\n        const mapping = this.options.aliasesMapping.get(key);\n        acc[mapping || key] = value;\n        return acc;\n      }, {}));\n    }\n    const isTableNameQuery = sql.startsWith(\"SELECT table_name FROM information_schema.tables\");\n    const isRelNameQuery = sql.startsWith(\"SELECT relname FROM pg_class WHERE oid IN\");\n    if (isRelNameQuery) {\n      return rows.map((row) => ({\n        name: row.relname,\n        tableName: row.relname.split(\"_\")[0]\n      }));\n    }\n    if (isTableNameQuery) {\n      return rows.map((row) => Object.values(row));\n    }\n    if (rows[0] && rows[0].sequelize_caught_exception !== void 0) {\n      if (rows[0].sequelize_caught_exception !== null) {\n        throw this.formatError({\n          sql,\n          parameters,\n          code: \"23505\",\n          detail: rows[0].sequelize_caught_exception\n        });\n      }\n      for (const row of rows) {\n        delete row.sequelize_caught_exception;\n      }\n    }\n    if (this.isShowIndexesQuery()) {\n      for (const row of rows) {\n        const attributes = /on .*? (?:using .*?\\s)?\\(([^]*)\\)/gi.exec(row.definition)[1].split(\",\");\n        const columns = _.zipObject(row.column_indexes, this.sequelize.getQueryInterface().queryGenerator.fromArray(row.column_names));\n        delete row.column_indexes;\n        delete row.column_names;\n        let field;\n        let attribute;\n        row.fields = row.indkey.split(\" \").map((indKey, index) => {\n          field = columns[indKey];\n          if (!field) {\n            return null;\n          }\n          attribute = attributes[index];\n          return {\n            attribute: field,\n            collate: /COLLATE \"(.*?)\"/.test(attribute) ? /COLLATE \"(.*?)\"/.exec(attribute)[1] : void 0,\n            order: attribute.includes(\"DESC\") ? \"DESC\" : attribute.includes(\"ASC\") ? \"ASC\" : void 0,\n            length: void 0\n          };\n        }).filter((n) => n !== null);\n        delete row.columns;\n      }\n      return rows;\n    }\n    if (this.isForeignKeysQuery()) {\n      const result = [];\n      for (const row of rows) {\n        let defParts;\n        if (row.condef !== void 0 && (defParts = row.condef.match(/FOREIGN KEY \\((.+)\\) REFERENCES (.+)\\((.+)\\)( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?/))) {\n          row.id = row.constraint_name;\n          row.table = defParts[2];\n          row.from = defParts[1];\n          row.to = defParts[3];\n          let i;\n          for (i = 5; i <= 8; i += 3) {\n            if (/(UPDATE|DELETE)/.test(defParts[i])) {\n              row[`on_${defParts[i].toLowerCase()}`] = defParts[i + 1];\n            }\n          }\n        }\n        result.push(row);\n      }\n      return result;\n    }\n    if (this.isSelectQuery()) {\n      let result = rows;\n      if (this.options.raw === false && this.sequelize.options.quoteIdentifiers === false) {\n        const attrsMap = _.reduce(this.model.rawAttributes, (m, v, k) => {\n          m[k.toLowerCase()] = k;\n          return m;\n        }, {});\n        result = rows.map((row) => {\n          return _.mapKeys(row, (value, key) => {\n            const targetAttr = attrsMap[key];\n            if (typeof targetAttr === \"string\" && targetAttr !== key) {\n              return targetAttr;\n            }\n            return key;\n          });\n        });\n      }\n      return this.handleSelectQuery(result);\n    }\n    if (QueryTypes.DESCRIBE === this.options.type) {\n      const result = {};\n      for (const row of rows) {\n        result[row.Field] = {\n          type: row.Type.toUpperCase(),\n          allowNull: row.Null === \"YES\",\n          defaultValue: row.Default,\n          comment: row.Comment,\n          special: row.special ? this.sequelize.getQueryInterface().queryGenerator.fromArray(row.special) : [],\n          primaryKey: row.Constraint === \"PRIMARY KEY\"\n        };\n        if (result[row.Field].type === \"BOOLEAN\") {\n          result[row.Field].defaultValue = { false: false, true: true }[result[row.Field].defaultValue];\n          if (result[row.Field].defaultValue === void 0) {\n            result[row.Field].defaultValue = null;\n          }\n        }\n        if (typeof result[row.Field].defaultValue === \"string\") {\n          result[row.Field].defaultValue = result[row.Field].defaultValue.replace(/'/g, \"\");\n          if (result[row.Field].defaultValue.includes(\"::\")) {\n            const split = result[row.Field].defaultValue.split(\"::\");\n            if (split[1].toLowerCase() !== \"regclass)\") {\n              result[row.Field].defaultValue = split[0];\n            }\n          }\n        }\n      }\n      return result;\n    }\n    if (this.isVersionQuery()) {\n      return rows[0].server_version;\n    }\n    if (this.isShowOrDescribeQuery()) {\n      return rows;\n    }\n    if (QueryTypes.BULKUPDATE === this.options.type) {\n      if (!this.options.returning) {\n        return Number.parseInt(rowCount, 10);\n      }\n      return this.handleSelectQuery(rows);\n    }\n    if (QueryTypes.BULKDELETE === this.options.type) {\n      return Number.parseInt(rowCount, 10);\n    }\n    if (this.isInsertQuery() || this.isUpdateQuery() || this.isUpsertQuery()) {\n      if (this.instance && this.instance.dataValues) {\n        if (this.isInsertQuery() && !this.isUpsertQuery() && rowCount === 0) {\n          throw new sequelizeErrors.EmptyResultError();\n        }\n        for (const key in rows[0]) {\n          if (Object.prototype.hasOwnProperty.call(rows[0], key)) {\n            const record = rows[0][key];\n            const attr = _.find(this.model.rawAttributes, (attribute) => attribute.fieldName === key || attribute.field === key);\n            this.instance.dataValues[attr && attr.fieldName || key] = record;\n          }\n        }\n      }\n      if (this.isUpsertQuery()) {\n        return [\n          this.instance,\n          null\n        ];\n      }\n      return [\n        this.instance || rows && (this.options.plain && rows[0] || rows) || void 0,\n        rowCount\n      ];\n    }\n    if (this.isRawQuery()) {\n      return [rows, queryResult];\n    }\n    return rows;\n  }\n  formatError(err, errStack) {\n    let match;\n    let table;\n    let index;\n    let fields;\n    let errors;\n    let message;\n    const code = err.code || err.sqlState;\n    const errMessage = err.message || err.messagePrimary;\n    const errDetail = err.detail || err.messageDetail;\n    switch (code) {\n      case \"23503\":\n        index = errMessage.match(/violates foreign key constraint \"(.+?)\"/);\n        index = index ? index[1] : void 0;\n        table = errMessage.match(/on table \"(.+?)\"/);\n        table = table ? table[1] : void 0;\n        return new sequelizeErrors.ForeignKeyConstraintError({\n          message: errMessage,\n          fields: null,\n          index,\n          table,\n          parent: err,\n          stack: errStack\n        });\n      case \"23505\":\n        if (errDetail && (match = errDetail.replace(/\"/g, \"\").match(/Key \\((.*?)\\)=\\((.*?)\\)/))) {\n          fields = _.zipObject(match[1].split(\", \"), match[2].split(\", \"));\n          errors = [];\n          message = \"Validation error\";\n          _.forOwn(fields, (value, field) => {\n            errors.push(new sequelizeErrors.ValidationErrorItem(this.getUniqueConstraintErrorMessage(field), \"unique violation\", field, value, this.instance, \"not_unique\"));\n          });\n          if (this.model && this.model.uniqueKeys) {\n            _.forOwn(this.model.uniqueKeys, (constraint) => {\n              if (_.isEqual(constraint.fields, Object.keys(fields)) && Boolean(constraint.msg)) {\n                message = constraint.msg;\n                return false;\n              }\n            });\n          }\n          return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields, stack: errStack });\n        }\n        return new sequelizeErrors.UniqueConstraintError({\n          message: errMessage,\n          parent: err,\n          stack: errStack\n        });\n      case \"23P01\":\n        match = errDetail.match(/Key \\((.*?)\\)=\\((.*?)\\)/);\n        if (match) {\n          fields = _.zipObject(match[1].split(\", \"), match[2].split(\", \"));\n        }\n        message = \"Exclusion constraint error\";\n        return new sequelizeErrors.ExclusionConstraintError({\n          message,\n          constraint: err.constraint,\n          fields,\n          table: err.table,\n          parent: err,\n          stack: errStack\n        });\n      case \"42704\":\n        if (err.sql && /(constraint|index)/gi.test(err.sql)) {\n          message = \"Unknown constraint error\";\n          index = errMessage.match(/(?:constraint|index) \"(.+?)\"/i);\n          index = index ? index[1] : void 0;\n          table = errMessage.match(/relation \"(.+?)\"/i);\n          table = table ? table[1] : void 0;\n          throw new sequelizeErrors.UnknownConstraintError({\n            message,\n            constraint: index,\n            fields,\n            table,\n            parent: err,\n            stack: errStack\n          });\n        }\n      default:\n        return new sequelizeErrors.DatabaseError(err, { stack: errStack });\n    }\n  }\n  isForeignKeysQuery() {\n    return /SELECT conname as constraint_name, pg_catalog\\.pg_get_constraintdef\\(r\\.oid, true\\) as condef FROM pg_catalog\\.pg_constraint r WHERE r\\.conrelid = \\(SELECT oid FROM pg_class WHERE relname = '.*' LIMIT 1\\) AND r\\.contype = 'f' ORDER BY 1;/.test(this.sql);\n  }\n  getInsertIdField() {\n    return \"id\";\n  }\n}\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n//# sourceMappingURL=query.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/dialects/postgres/query.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1283,
    "kind": "variable",
    "name": "AbstractQuery",
    "memberof": "lib/dialects/postgres/query.js",
    "static": true,
    "longname": "lib/dialects/postgres/query.js~AbstractQuery",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1284,
    "kind": "variable",
    "name": "QueryTypes",
    "memberof": "lib/dialects/postgres/query.js",
    "static": true,
    "longname": "lib/dialects/postgres/query.js~QueryTypes",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1285,
    "kind": "variable",
    "name": "sequelizeErrors",
    "memberof": "lib/dialects/postgres/query.js",
    "static": true,
    "longname": "lib/dialects/postgres/query.js~sequelizeErrors",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1286,
    "kind": "variable",
    "name": "_",
    "memberof": "lib/dialects/postgres/query.js",
    "static": true,
    "longname": "lib/dialects/postgres/query.js~_",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1287,
    "kind": "variable",
    "name": "logger",
    "memberof": "lib/dialects/postgres/query.js",
    "static": true,
    "longname": "lib/dialects/postgres/query.js~logger",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1288,
    "kind": "variable",
    "name": "debug",
    "memberof": "lib/dialects/postgres/query.js",
    "static": true,
    "longname": "lib/dialects/postgres/query.js~debug",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1289,
    "kind": "class",
    "name": "Query",
    "memberof": "lib/dialects/postgres/query.js",
    "static": true,
    "longname": "lib/dialects/postgres/query.js~Query",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false,
    "extends": [
      "AbstractQuery"
    ],
    "ignore": true
  },
  {
    "__docId__": 1290,
    "kind": "method",
    "name": "formatBindParameters",
    "memberof": "lib/dialects/postgres/query.js~Query",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/postgres/query.js~Query.formatBindParameters",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "sql",
        "types": [
          "*"
        ]
      },
      {
        "name": "values",
        "types": [
          "*"
        ]
      },
      {
        "name": "dialect",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1291,
    "kind": "method",
    "name": "run",
    "memberof": "lib/dialects/postgres/query.js~Query",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/postgres/query.js~Query#run",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [
      {
        "name": "sql",
        "types": [
          "*"
        ]
      },
      {
        "name": "parameters",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1292,
    "kind": "member",
    "name": "sql",
    "memberof": "lib/dialects/postgres/query.js~Query",
    "static": false,
    "longname": "lib/dialects/postgres/query.js~Query#sql",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1293,
    "kind": "method",
    "name": "formatError",
    "memberof": "lib/dialects/postgres/query.js~Query",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query.js~Query#formatError",
    "access": "public",
    "description": null,
    "lineNumber": 237,
    "undocument": true,
    "params": [
      {
        "name": "err",
        "types": [
          "*"
        ]
      },
      {
        "name": "errStack",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1294,
    "kind": "method",
    "name": "isForeignKeysQuery",
    "memberof": "lib/dialects/postgres/query.js~Query",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query.js~Query#isForeignKeysQuery",
    "access": "public",
    "description": null,
    "lineNumber": 318,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1295,
    "kind": "method",
    "name": "getInsertIdField",
    "memberof": "lib/dialects/postgres/query.js~Query",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/postgres/query.js~Query#getInsertIdField",
    "access": "public",
    "description": null,
    "lineNumber": 321,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1296,
    "kind": "file",
    "name": "lib/dialects/postgres/range.js",
    "content": "\"use strict\";\nconst _ = require(\"lodash\");\nfunction stringifyRangeBound(bound) {\n  if (bound === null) {\n    return \"\";\n  }\n  if (bound === Number.POSITIVE_INFINITY || bound === Number.NEGATIVE_INFINITY) {\n    return bound.toString().toLowerCase();\n  }\n  return JSON.stringify(bound);\n}\nfunction parseRangeBound(bound, parseType) {\n  if (!bound) {\n    return null;\n  }\n  if (bound === \"infinity\") {\n    return Number.POSITIVE_INFINITY;\n  }\n  if (bound === \"-infinity\") {\n    return Number.NEGATIVE_INFINITY;\n  }\n  return parseType(bound);\n}\nfunction stringify(data) {\n  if (data === null) {\n    return null;\n  }\n  if (!Array.isArray(data)) {\n    throw new TypeError(\"range must be an array\");\n  }\n  if (data.length === 0) {\n    return \"empty\";\n  }\n  if (data.length !== 2) {\n    throw new Error(\"range array length must be 0 (empty) or 2 (lower and upper bounds)\");\n  }\n  if (Object.prototype.hasOwnProperty.call(data, \"inclusive\")) {\n    if (data.inclusive === false) {\n      data.inclusive = [false, false];\n    } else if (!data.inclusive) {\n      data.inclusive = [true, false];\n    } else if (data.inclusive === true) {\n      data.inclusive = [true, true];\n    }\n  } else {\n    data.inclusive = [true, false];\n  }\n  _.each(data, (value, index) => {\n    if (_.isObject(value)) {\n      if (Object.prototype.hasOwnProperty.call(value, \"inclusive\")) {\n        data.inclusive[index] = Boolean(value.inclusive);\n      }\n      if (Object.prototype.hasOwnProperty.call(value, \"value\")) {\n        data[index] = value.value;\n      }\n    }\n  });\n  const lowerBound = stringifyRangeBound(data[0]);\n  const upperBound = stringifyRangeBound(data[1]);\n  return `${(data.inclusive[0] ? \"[\" : \"(\") + lowerBound},${upperBound}${data.inclusive[1] ? \"]\" : \")\"}`;\n}\nexports.stringify = stringify;\nfunction parse(value, parser) {\n  if (value === null) {\n    return null;\n  }\n  if (value === \"empty\") {\n    return [];\n  }\n  let result = value.substring(1, value.length - 1).split(\",\", 2);\n  if (result.length !== 2) {\n    return value;\n  }\n  result = result.map((item, index) => {\n    return {\n      value: parseRangeBound(item, parser),\n      inclusive: index === 0 ? value[0] === \"[\" : value[value.length - 1] === \"]\"\n    };\n  });\n  return result;\n}\nexports.parse = parse;\n//# sourceMappingURL=range.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/dialects/postgres/range.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1297,
    "kind": "variable",
    "name": "_",
    "memberof": "lib/dialects/postgres/range.js",
    "static": true,
    "longname": "lib/dialects/postgres/range.js~_",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/range.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1298,
    "kind": "function",
    "name": "stringifyRangeBound",
    "memberof": "lib/dialects/postgres/range.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/postgres/range.js~stringifyRangeBound",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/range.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "bound",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1299,
    "kind": "function",
    "name": "parseRangeBound",
    "memberof": "lib/dialects/postgres/range.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/postgres/range.js~parseRangeBound",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/range.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "bound",
        "types": [
          "*"
        ]
      },
      {
        "name": "parseType",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1300,
    "kind": "function",
    "name": "stringify",
    "memberof": "lib/dialects/postgres/range.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/postgres/range.js~stringify",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/range.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1301,
    "kind": "function",
    "name": "parse",
    "memberof": "lib/dialects/postgres/range.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/postgres/range.js~parse",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/postgres/range.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "parser",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1302,
    "kind": "file",
    "name": "lib/dialects/snowflake/connection-manager.js",
    "content": "\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nconst AbstractConnectionManager = require(\"../abstract/connection-manager\");\nconst SequelizeErrors = require(\"../../errors\");\nconst { logger } = require(\"../../utils/logger\");\nconst DataTypes = require(\"../../data-types\").snowflake;\nconst debug = logger.debugContext(\"connection:snowflake\");\nconst parserStore = require(\"../parserStore\")(\"snowflake\");\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 3306;\n    super(dialect, sequelize);\n    this.lib = this._loadDialectModule(\"snowflake-sdk\");\n    this.refreshTypeParser(DataTypes);\n  }\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n  static _typecast(field, next) {\n    if (parserStore.get(field.type)) {\n      return parserStore.get(field.type)(field, this.sequelize.options, next);\n    }\n    return next();\n  }\n  async connect(config) {\n    const connectionConfig = __spreadValues({\n      account: config.host,\n      username: config.username,\n      password: config.password,\n      database: config.database,\n      warehouse: config.warehouse,\n      role: config.role\n    }, config.dialectOptions);\n    try {\n      const connection = await new Promise((resolve, reject) => {\n        this.lib.createConnection(connectionConfig).connect((err, conn) => {\n          if (err) {\n            console.error(err);\n            reject(err);\n          } else {\n            resolve(conn);\n          }\n        });\n      });\n      debug(\"connection acquired\");\n      if (!this.sequelize.config.keepDefaultTimezone) {\n        const tzOffset = this.sequelize.options.timezone === \"+00:00\" ? \"Etc/UTC\" : this.sequelize.options.timezone;\n        const isNamedTzOffset = /\\//.test(tzOffset);\n        if (isNamedTzOffset) {\n          await new Promise((resolve, reject) => {\n            connection.execute({\n              sqlText: `ALTER SESSION SET timezone = '${tzOffset}'`,\n              complete(err) {\n                if (err) {\n                  console.error(err);\n                  reject(err);\n                } else {\n                  resolve();\n                }\n              }\n            });\n          });\n        } else {\n          throw new Error(\"only support time zone name for snowflake!\");\n        }\n      }\n      return connection;\n    } catch (error) {\n      switch (error.code) {\n        case \"ECONNREFUSED\":\n          throw new SequelizeErrors.ConnectionRefusedError(error);\n        case \"ER_ACCESS_DENIED_ERROR\":\n          throw new SequelizeErrors.AccessDeniedError(error);\n        case \"ENOTFOUND\":\n          throw new SequelizeErrors.HostNotFoundError(error);\n        case \"EHOSTUNREACH\":\n          throw new SequelizeErrors.HostNotReachableError(error);\n        case \"EINVAL\":\n          throw new SequelizeErrors.InvalidConnectionError(error);\n        default:\n          throw new SequelizeErrors.ConnectionError(error);\n      }\n    }\n  }\n  async disconnect(connection) {\n    if (!connection.isUp()) {\n      debug(\"connection tried to disconnect but was already at CLOSED state\");\n      return;\n    }\n    return new Promise((resolve, reject) => {\n      connection.destroy((err) => {\n        if (err) {\n          console.error(`Unable to disconnect: ${err.message}`);\n          reject(err);\n        } else {\n          console.error(`Disconnected connection with id: ${connection.getId()}`);\n          resolve(connection.getId());\n        }\n      });\n    });\n  }\n  validate(connection) {\n    return connection.isUp();\n  }\n}\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n//# sourceMappingURL=connection-manager.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/dialects/snowflake/connection-manager.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1303,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/dialects/snowflake/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/snowflake/connection-manager.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1304,
    "kind": "variable",
    "name": "__getOwnPropSymbols",
    "memberof": "lib/dialects/snowflake/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/snowflake/connection-manager.js~__getOwnPropSymbols",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1305,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/dialects/snowflake/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/snowflake/connection-manager.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1306,
    "kind": "variable",
    "name": "__propIsEnum",
    "memberof": "lib/dialects/snowflake/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/snowflake/connection-manager.js~__propIsEnum",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1307,
    "kind": "function",
    "name": "__defNormalProp",
    "memberof": "lib/dialects/snowflake/connection-manager.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/snowflake/connection-manager.js~__defNormalProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1308,
    "kind": "function",
    "name": "__spreadValues",
    "memberof": "lib/dialects/snowflake/connection-manager.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/snowflake/connection-manager.js~__spreadValues",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1309,
    "kind": "variable",
    "name": "AbstractConnectionManager",
    "memberof": "lib/dialects/snowflake/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/snowflake/connection-manager.js~AbstractConnectionManager",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1310,
    "kind": "variable",
    "name": "SequelizeErrors",
    "memberof": "lib/dialects/snowflake/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/snowflake/connection-manager.js~SequelizeErrors",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1311,
    "kind": "variable",
    "name": "logger",
    "memberof": "lib/dialects/snowflake/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/snowflake/connection-manager.js~logger",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1312,
    "kind": "variable",
    "name": "DataTypes",
    "memberof": "lib/dialects/snowflake/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/snowflake/connection-manager.js~DataTypes",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1313,
    "kind": "variable",
    "name": "debug",
    "memberof": "lib/dialects/snowflake/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/snowflake/connection-manager.js~debug",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1314,
    "kind": "variable",
    "name": "parserStore",
    "memberof": "lib/dialects/snowflake/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/snowflake/connection-manager.js~parserStore",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1315,
    "kind": "class",
    "name": "ConnectionManager",
    "memberof": "lib/dialects/snowflake/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/snowflake/connection-manager.js~ConnectionManager",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "interface": false,
    "extends": [
      "AbstractConnectionManager"
    ],
    "ignore": true
  },
  {
    "__docId__": 1316,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/dialects/snowflake/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/snowflake/connection-manager.js~ConnectionManager#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 1317,
    "kind": "member",
    "name": "lib",
    "memberof": "lib/dialects/snowflake/connection-manager.js~ConnectionManager",
    "static": false,
    "longname": "lib/dialects/snowflake/connection-manager.js~ConnectionManager#lib",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1318,
    "kind": "method",
    "name": "_refreshTypeParser",
    "memberof": "lib/dialects/snowflake/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/snowflake/connection-manager.js~ConnectionManager#_refreshTypeParser",
    "access": "private",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "dataType",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1319,
    "kind": "method",
    "name": "_clearTypeParser",
    "memberof": "lib/dialects/snowflake/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/snowflake/connection-manager.js~ConnectionManager#_clearTypeParser",
    "access": "private",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1320,
    "kind": "method",
    "name": "_typecast",
    "memberof": "lib/dialects/snowflake/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/snowflake/connection-manager.js~ConnectionManager._typecast",
    "access": "private",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "field",
        "types": [
          "*"
        ]
      },
      {
        "name": "next",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1321,
    "kind": "method",
    "name": "connect",
    "memberof": "lib/dialects/snowflake/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/snowflake/connection-manager.js~ConnectionManager#connect",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1322,
    "kind": "method",
    "name": "disconnect",
    "memberof": "lib/dialects/snowflake/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/snowflake/connection-manager.js~ConnectionManager#disconnect",
    "access": "public",
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "params": [
      {
        "name": "connection",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1323,
    "kind": "method",
    "name": "validate",
    "memberof": "lib/dialects/snowflake/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/snowflake/connection-manager.js~ConnectionManager#validate",
    "access": "public",
    "description": null,
    "lineNumber": 120,
    "undocument": true,
    "params": [
      {
        "name": "connection",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1324,
    "kind": "file",
    "name": "lib/dialects/snowflake/data-types.js",
    "content": "\"use strict\";\nconst momentTz = require(\"moment-timezone\");\nconst moment = require(\"moment\");\nmodule.exports = (BaseTypes) => {\n  BaseTypes.ABSTRACT.prototype.dialectTypes = \"https://dev.snowflake.com/doc/refman/5.7/en/data-types.html\";\n  BaseTypes.DATE.types.snowflake = [\"DATETIME\"];\n  BaseTypes.STRING.types.snowflake = [\"VAR_STRING\"];\n  BaseTypes.CHAR.types.snowflake = [\"STRING\"];\n  BaseTypes.TEXT.types.snowflake = [\"BLOB\"];\n  BaseTypes.TINYINT.types.snowflake = [\"TINY\"];\n  BaseTypes.SMALLINT.types.snowflake = [\"SHORT\"];\n  BaseTypes.MEDIUMINT.types.snowflake = [\"INT24\"];\n  BaseTypes.INTEGER.types.snowflake = [\"LONG\"];\n  BaseTypes.BIGINT.types.snowflake = [\"LONGLONG\"];\n  BaseTypes.FLOAT.types.snowflake = [\"FLOAT\"];\n  BaseTypes.TIME.types.snowflake = [\"TIME\"];\n  BaseTypes.DATEONLY.types.snowflake = [\"DATE\"];\n  BaseTypes.BOOLEAN.types.snowflake = [\"TINY\"];\n  BaseTypes.BLOB.types.snowflake = [\"TINYBLOB\", \"BLOB\", \"LONGBLOB\"];\n  BaseTypes.DECIMAL.types.snowflake = [\"NEWDECIMAL\"];\n  BaseTypes.UUID.types.snowflake = false;\n  BaseTypes.ENUM.types.snowflake = false;\n  BaseTypes.REAL.types.snowflake = [\"DOUBLE\"];\n  BaseTypes.DOUBLE.types.snowflake = [\"DOUBLE\"];\n  BaseTypes.GEOMETRY.types.snowflake = [\"GEOMETRY\"];\n  BaseTypes.JSON.types.snowflake = [\"JSON\"];\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      return \"TIMESTAMP\";\n    }\n    _stringify(date, options) {\n      if (!moment.isMoment(date)) {\n        date = this._applyTimezone(date, options);\n      }\n      if (this._length) {\n        return date.format(\"YYYY-MM-DD HH:mm:ss.SSS\");\n      }\n      return date.format(\"YYYY-MM-DD HH:mm:ss\");\n    }\n    static parse(value, options) {\n      value = value.string();\n      if (value === null) {\n        return value;\n      }\n      if (momentTz.tz.zone(options.timezone)) {\n        value = momentTz.tz(value, options.timezone).toDate();\n      } else {\n        value = new Date(`${value} ${options.timezone}`);\n      }\n      return value;\n    }\n  }\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(value) {\n      return value.string();\n    }\n  }\n  class UUID extends BaseTypes.UUID {\n    toSql() {\n      return \"VARCHAR(36)\";\n    }\n  }\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      return \"TEXT\";\n    }\n  }\n  class BOOLEAN extends BaseTypes.BOOLEAN {\n    toSql() {\n      return \"BOOLEAN\";\n    }\n  }\n  class JSONTYPE extends BaseTypes.JSON {\n    _stringify(value, options) {\n      return options.operation === \"where\" && typeof value === \"string\" ? value : JSON.stringify(value);\n    }\n  }\n  return {\n    TEXT,\n    DATE,\n    BOOLEAN,\n    DATEONLY,\n    UUID,\n    JSON: JSONTYPE\n  };\n};\n//# sourceMappingURL=data-types.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/dialects/snowflake/data-types.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1325,
    "kind": "variable",
    "name": "momentTz",
    "memberof": "lib/dialects/snowflake/data-types.js",
    "static": true,
    "longname": "lib/dialects/snowflake/data-types.js~momentTz",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1326,
    "kind": "variable",
    "name": "moment",
    "memberof": "lib/dialects/snowflake/data-types.js",
    "static": true,
    "longname": "lib/dialects/snowflake/data-types.js~moment",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/data-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1327,
    "kind": "file",
    "name": "lib/dialects/snowflake/index.js",
    "content": "\"use strict\";\nconst _ = require(\"lodash\");\nconst { AbstractDialect } = require(\"../abstract\");\nconst ConnectionManager = require(\"./connection-manager\");\nconst Query = require(\"./query\");\nconst QueryGenerator = require(\"./query-generator\");\nconst DataTypes = require(\"../../data-types\").snowflake;\nconst { SnowflakeQueryInterface } = require(\"./query-interface\");\nclass SnowflakeDialect extends AbstractDialect {\n  static supports = _.merge(_.cloneDeep(AbstractDialect.supports), {\n    \"VALUES ()\": true,\n    \"LIMIT ON UPDATE\": true,\n    lock: true,\n    forShare: \"LOCK IN SHARE MODE\",\n    settingIsolationLevelDuringTransaction: false,\n    inserts: {\n      ignoreDuplicates: \" IGNORE\"\n    },\n    index: {\n      collate: false,\n      length: true,\n      parser: true,\n      type: true,\n      using: 1\n    },\n    constraints: {\n      dropConstraint: false,\n      check: false\n    },\n    indexViaAlter: true,\n    indexHints: true,\n    NUMERIC: true,\n    REGEXP: true,\n    schemas: true\n  });\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new SnowflakeQueryInterface(sequelize, this.queryGenerator);\n  }\n}\nSnowflakeDialect.prototype.defaultVersion = \"5.7.0\";\nSnowflakeDialect.prototype.Query = Query;\nSnowflakeDialect.prototype.QueryGenerator = QueryGenerator;\nSnowflakeDialect.prototype.DataTypes = DataTypes;\nSnowflakeDialect.prototype.name = \"snowflake\";\nSnowflakeDialect.prototype.TICK_CHAR = '\"';\nSnowflakeDialect.prototype.TICK_CHAR_LEFT = SnowflakeDialect.prototype.TICK_CHAR;\nSnowflakeDialect.prototype.TICK_CHAR_RIGHT = SnowflakeDialect.prototype.TICK_CHAR;\nmodule.exports = SnowflakeDialect;\n//# sourceMappingURL=index.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/dialects/snowflake/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1328,
    "kind": "variable",
    "name": "_",
    "memberof": "lib/dialects/snowflake/index.js",
    "static": true,
    "longname": "lib/dialects/snowflake/index.js~_",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1329,
    "kind": "variable",
    "name": "AbstractDialect",
    "memberof": "lib/dialects/snowflake/index.js",
    "static": true,
    "longname": "lib/dialects/snowflake/index.js~AbstractDialect",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1330,
    "kind": "variable",
    "name": "ConnectionManager",
    "memberof": "lib/dialects/snowflake/index.js",
    "static": true,
    "longname": "lib/dialects/snowflake/index.js~ConnectionManager",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1331,
    "kind": "variable",
    "name": "Query",
    "memberof": "lib/dialects/snowflake/index.js",
    "static": true,
    "longname": "lib/dialects/snowflake/index.js~Query",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1332,
    "kind": "variable",
    "name": "QueryGenerator",
    "memberof": "lib/dialects/snowflake/index.js",
    "static": true,
    "longname": "lib/dialects/snowflake/index.js~QueryGenerator",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1333,
    "kind": "variable",
    "name": "DataTypes",
    "memberof": "lib/dialects/snowflake/index.js",
    "static": true,
    "longname": "lib/dialects/snowflake/index.js~DataTypes",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1334,
    "kind": "variable",
    "name": "SnowflakeQueryInterface",
    "memberof": "lib/dialects/snowflake/index.js",
    "static": true,
    "longname": "lib/dialects/snowflake/index.js~SnowflakeQueryInterface",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1335,
    "kind": "class",
    "name": "SnowflakeDialect",
    "memberof": "lib/dialects/snowflake/index.js",
    "static": true,
    "longname": "lib/dialects/snowflake/index.js~SnowflakeDialect",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false,
    "extends": [
      "AbstractDialect"
    ],
    "ignore": true
  },
  {
    "__docId__": 1336,
    "kind": "member",
    "name": "supports",
    "memberof": "lib/dialects/snowflake/index.js~SnowflakeDialect",
    "static": true,
    "longname": "lib/dialects/snowflake/index.js~SnowflakeDialect.supports",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1337,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/dialects/snowflake/index.js~SnowflakeDialect",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/snowflake/index.js~SnowflakeDialect#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 1338,
    "kind": "member",
    "name": "sequelize",
    "memberof": "lib/dialects/snowflake/index.js~SnowflakeDialect",
    "static": false,
    "longname": "lib/dialects/snowflake/index.js~SnowflakeDialect#sequelize",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1339,
    "kind": "member",
    "name": "connectionManager",
    "memberof": "lib/dialects/snowflake/index.js~SnowflakeDialect",
    "static": false,
    "longname": "lib/dialects/snowflake/index.js~SnowflakeDialect#connectionManager",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1340,
    "kind": "member",
    "name": "queryGenerator",
    "memberof": "lib/dialects/snowflake/index.js~SnowflakeDialect",
    "static": false,
    "longname": "lib/dialects/snowflake/index.js~SnowflakeDialect#queryGenerator",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1341,
    "kind": "member",
    "name": "queryInterface",
    "memberof": "lib/dialects/snowflake/index.js~SnowflakeDialect",
    "static": false,
    "longname": "lib/dialects/snowflake/index.js~SnowflakeDialect#queryInterface",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1342,
    "kind": "file",
    "name": "lib/dialects/snowflake/query-generator.js",
    "content": "\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nconst _ = require(\"lodash\");\nconst Utils = require(\"../../utils\");\nconst AbstractQueryGenerator = require(\"../abstract/query-generator\");\nconst util = require(\"util\");\nconst { Op } = require(\"../../operators\");\nconst JSON_FUNCTION_REGEX = /^\\s*((?:[a-z]+_){0,2}jsonb?(?:_[a-z]+){0,2})\\([^)]*\\)/i;\nconst JSON_OPERATOR_REGEX = /^\\s*(->>?|@>|<@|\\?[&|]?|\\|{2}|#-)/i;\nconst TOKEN_CAPTURE_REGEX = /^\\s*((?:([\"'`])(?:(?!\\2).|\\2{2})*\\2)|[\\s\\w]+|[()+,.;-])/i;\nconst FOREIGN_KEY_FIELDS = [\n  \"CONSTRAINT_NAME as constraint_name\",\n  \"CONSTRAINT_NAME as constraintName\",\n  \"CONSTRAINT_SCHEMA as constraintSchema\",\n  \"CONSTRAINT_SCHEMA as constraintCatalog\",\n  \"TABLE_NAME as tableName\",\n  \"TABLE_SCHEMA as tableSchema\",\n  \"TABLE_SCHEMA as tableCatalog\",\n  \"COLUMN_NAME as columnName\",\n  \"REFERENCED_TABLE_SCHEMA as referencedTableSchema\",\n  \"REFERENCED_TABLE_SCHEMA as referencedTableCatalog\",\n  \"REFERENCED_TABLE_NAME as referencedTableName\",\n  \"REFERENCED_COLUMN_NAME as referencedColumnName\"\n].join(\",\");\nconst SNOWFLAKE_RESERVED_WORDS = \"account,all,alter,and,any,as,between,by,case,cast,check,column,connect,connections,constraint,create,cross,current,current_date,current_time,current_timestamp,current_user,database,delete,distinct,drop,else,exists,false,following,for,from,full,grant,group,gscluster,having,ilike,in,increment,inner,insert,intersect,into,is,issue,join,lateral,left,like,localtime,localtimestamp,minus,natural,not,null,of,on,or,order,organization,qualify,regexp,revoke,right,rlike,row,rows,sample,schema,select,set,some,start,table,tablesample,then,to,trigger,true,try_cast,union,unique,update,using,values,view,when,whenever,where,with\".split(\",\");\nconst typeWithoutDefault = /* @__PURE__ */ new Set([\"BLOB\", \"TEXT\", \"GEOMETRY\", \"JSON\"]);\nclass SnowflakeQueryGenerator extends AbstractQueryGenerator {\n  constructor(options) {\n    super(options);\n    this.OperatorMap = __spreadProps(__spreadValues({}, this.OperatorMap), {\n      [Op.regexp]: \"REGEXP\",\n      [Op.notRegexp]: \"NOT REGEXP\"\n    });\n  }\n  createDatabaseQuery(databaseName, options) {\n    options = __spreadValues({\n      charset: null,\n      collate: null\n    }, options);\n    return Utils.joinSQLFragments([\n      \"CREATE DATABASE IF NOT EXISTS\",\n      this.quoteIdentifier(databaseName),\n      options.charset && `DEFAULT CHARACTER SET ${this.escape(options.charset)}`,\n      options.collate && `DEFAULT COLLATE ${this.escape(options.collate)}`,\n      \";\"\n    ]);\n  }\n  dropDatabaseQuery(databaseName) {\n    return `DROP DATABASE IF EXISTS ${this.quoteIdentifier(databaseName)};`;\n  }\n  createSchema() {\n    return \"SHOW TABLES\";\n  }\n  showSchemasQuery() {\n    return \"SHOW TABLES\";\n  }\n  versionQuery() {\n    return \"SELECT CURRENT_VERSION()\";\n  }\n  createTableQuery(tableName, attributes, options) {\n    options = __spreadValues({\n      charset: null,\n      rowFormat: null\n    }, options);\n    const primaryKeys = [];\n    const foreignKeys = {};\n    const attrStr = [];\n    for (const attr in attributes) {\n      if (!Object.prototype.hasOwnProperty.call(attributes, attr)) {\n        continue;\n      }\n      const dataType = attributes[attr];\n      let match;\n      if (dataType.includes(\"PRIMARY KEY\")) {\n        primaryKeys.push(attr);\n        if (dataType.includes(\"REFERENCES\")) {\n          match = dataType.match(/^(.+) (REFERENCES.*)$/);\n          attrStr.push(`${this.quoteIdentifier(attr)} ${match[1].replace(\"PRIMARY KEY\", \"\")}`);\n          foreignKeys[attr] = match[2];\n        } else {\n          attrStr.push(`${this.quoteIdentifier(attr)} ${dataType.replace(\"PRIMARY KEY\", \"\")}`);\n        }\n      } else if (dataType.includes(\"REFERENCES\")) {\n        match = dataType.match(/^(.+) (REFERENCES.*)$/);\n        attrStr.push(`${this.quoteIdentifier(attr)} ${match[1]}`);\n        foreignKeys[attr] = match[2];\n      } else {\n        attrStr.push(`${this.quoteIdentifier(attr)} ${dataType}`);\n      }\n    }\n    const table = this.quoteTable(tableName);\n    let attributesClause = attrStr.join(\", \");\n    const pkString = primaryKeys.map((pk) => this.quoteIdentifier(pk)).join(\", \");\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, (columns, indexName) => {\n        if (columns.customIndex) {\n          if (typeof indexName !== \"string\") {\n            indexName = `uniq_${tableName}_${columns.fields.join(\"_\")}`;\n          }\n          attributesClause += `, UNIQUE ${this.quoteIdentifier(indexName)} (${columns.fields.map((field) => this.quoteIdentifier(field)).join(\", \")})`;\n        }\n      });\n    }\n    if (pkString.length > 0) {\n      attributesClause += `, PRIMARY KEY (${pkString})`;\n    }\n    for (const fkey in foreignKeys) {\n      if (Object.prototype.hasOwnProperty.call(foreignKeys, fkey)) {\n        attributesClause += `, FOREIGN KEY (${this.quoteIdentifier(fkey)}) ${foreignKeys[fkey]}`;\n      }\n    }\n    return Utils.joinSQLFragments([\n      \"CREATE TABLE IF NOT EXISTS\",\n      table,\n      `(${attributesClause})`,\n      options.comment && typeof options.comment === \"string\" && `COMMENT ${this.escape(options.comment)}`,\n      options.charset && `DEFAULT CHARSET=${options.charset}`,\n      options.collate && `COLLATE ${options.collate}`,\n      options.rowFormat && `ROW_FORMAT=${options.rowFormat}`,\n      \";\"\n    ]);\n  }\n  describeTableQuery(tableName, schema, schemaDelimiter) {\n    const table = this.quoteTable(this.addSchema({\n      tableName,\n      _schema: schema,\n      _schemaDelimiter: schemaDelimiter\n    }));\n    return `SHOW FULL COLUMNS FROM ${table};`;\n  }\n  showTablesQuery(database) {\n    return Utils.joinSQLFragments([\n      \"SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE'\",\n      database ? `AND TABLE_SCHEMA = ${this.escape(database)}` : \"AND TABLE_SCHEMA NOT IN ( 'INFORMATION_SCHEMA', 'PERFORMANCE_SCHEMA', 'SYS')\",\n      \";\"\n    ]);\n  }\n  addColumnQuery(table, key, dataType) {\n    return Utils.joinSQLFragments([\n      \"ALTER TABLE\",\n      this.quoteTable(table),\n      \"ADD\",\n      this.quoteIdentifier(key),\n      this.attributeToSQL(dataType, {\n        context: \"addColumn\",\n        tableName: table,\n        foreignKey: key\n      }),\n      \";\"\n    ]);\n  }\n  removeColumnQuery(tableName, attributeName) {\n    return Utils.joinSQLFragments([\n      \"ALTER TABLE\",\n      this.quoteTable(tableName),\n      \"DROP\",\n      this.quoteIdentifier(attributeName),\n      \";\"\n    ]);\n  }\n  changeColumnQuery(tableName, attributes) {\n    const query = (...subQuerys) => Utils.joinSQLFragments([\n      \"ALTER TABLE\",\n      this.quoteTable(tableName),\n      \"ALTER COLUMN\",\n      ...subQuerys,\n      \";\"\n    ]);\n    const sql = [];\n    for (const attributeName in attributes) {\n      let definition = this.dataTypeMapping(tableName, attributeName, attributes[attributeName]);\n      const attrSql = [];\n      if (definition.includes(\"NOT NULL\")) {\n        attrSql.push(query(this.quoteIdentifier(attributeName), \"SET NOT NULL\"));\n        definition = definition.replace(\"NOT NULL\", \"\").trim();\n      } else if (!definition.includes(\"REFERENCES\")) {\n        attrSql.push(query(this.quoteIdentifier(attributeName), \"DROP NOT NULL\"));\n      }\n      if (definition.includes(\"DEFAULT\")) {\n        attrSql.push(query(this.quoteIdentifier(attributeName), \"SET DEFAULT\", definition.match(/DEFAULT ([^;]+)/)[1]));\n        definition = definition.replace(/(DEFAULT[^;]+)/, \"\").trim();\n      } else if (!definition.includes(\"REFERENCES\")) {\n        attrSql.push(query(this.quoteIdentifier(attributeName), \"DROP DEFAULT\"));\n      }\n      if (/UNIQUE;*$/.test(definition)) {\n        definition = definition.replace(/UNIQUE;*$/, \"\");\n        attrSql.push(query(\"ADD UNIQUE (\", this.quoteIdentifier(attributeName), \")\").replace(\"ALTER COLUMN\", \"\"));\n      }\n      if (definition.includes(\"REFERENCES\")) {\n        definition = definition.replace(/.+?(?=REFERENCES)/, \"\");\n        attrSql.push(query(\"ADD FOREIGN KEY (\", this.quoteIdentifier(attributeName), \")\", definition).replace(\"ALTER COLUMN\", \"\"));\n      } else {\n        attrSql.push(query(this.quoteIdentifier(attributeName), \"TYPE\", definition));\n      }\n      sql.push(attrSql.join(\"\"));\n    }\n    return sql.join(\"\");\n  }\n  renameColumnQuery(tableName, attrBefore, attributes) {\n    const attrString = [];\n    for (const attrName in attributes) {\n      const definition = attributes[attrName];\n      attrString.push(`'${attrBefore}' '${attrName}' ${definition}`);\n    }\n    return Utils.joinSQLFragments([\n      \"ALTER TABLE\",\n      this.quoteTable(tableName),\n      \"RENAME COLUMN\",\n      attrString.join(\" to \"),\n      \";\"\n    ]);\n  }\n  handleSequelizeMethod(attr, tableName, factory, options, prepend) {\n    if (attr instanceof Utils.Json) {\n      if (attr.conditions) {\n        const conditions = this.parseConditionObject(attr.conditions).map((condition) => `${this.jsonPathExtractionQuery(condition.path[0], _.tail(condition.path))} = '${condition.value}'`);\n        return conditions.join(\" AND \");\n      }\n      if (attr.path) {\n        let str;\n        if (this._checkValidJsonStatement(attr.path)) {\n          str = attr.path;\n        } else {\n          const paths = _.toPath(attr.path);\n          const column = paths.shift();\n          str = this.jsonPathExtractionQuery(column, paths);\n        }\n        if (attr.value) {\n          str += util.format(\" = %s\", this.escape(attr.value));\n        }\n        return str;\n      }\n    } else if (attr instanceof Utils.Cast) {\n      if (/timestamp/i.test(attr.type)) {\n        attr.type = \"datetime\";\n      } else if (attr.json && /boolean/i.test(attr.type)) {\n        attr.type = \"char\";\n      } else if (/double precision/i.test(attr.type) || /boolean/i.test(attr.type) || /integer/i.test(attr.type)) {\n        attr.type = \"decimal\";\n      } else if (/text/i.test(attr.type)) {\n        attr.type = \"char\";\n      }\n    }\n    return super.handleSequelizeMethod(attr, tableName, factory, options, prepend);\n  }\n  truncateTableQuery(tableName) {\n    return Utils.joinSQLFragments([\n      \"TRUNCATE\",\n      this.quoteTable(tableName)\n    ]);\n  }\n  deleteQuery(tableName, where, options = {}, model) {\n    const table = this.quoteTable(tableName);\n    let whereClause = this.getWhereConditions(where, null, model, options);\n    const limit = options.limit && ` LIMIT ${this.escape(options.limit)}`;\n    let primaryKeys = \"\";\n    let primaryKeysSelection = \"\";\n    if (whereClause) {\n      whereClause = `WHERE ${whereClause}`;\n    }\n    if (limit) {\n      if (!model) {\n        throw new Error(\"Cannot LIMIT delete without a model.\");\n      }\n      const pks = Object.values(model.primaryKeys).map((pk) => this.quoteIdentifier(pk.field)).join(\",\");\n      primaryKeys = model.primaryKeyAttributes.length > 1 ? `(${pks})` : pks;\n      primaryKeysSelection = pks;\n      return Utils.joinSQLFragments([\n        \"DELETE FROM\",\n        table,\n        \"WHERE\",\n        primaryKeys,\n        \"IN (SELECT\",\n        primaryKeysSelection,\n        \"FROM\",\n        table,\n        whereClause,\n        limit,\n        \")\",\n        \";\"\n      ]);\n    }\n    return Utils.joinSQLFragments([\n      \"DELETE FROM\",\n      table,\n      whereClause,\n      \";\"\n    ]);\n  }\n  showIndexesQuery() {\n    return \"SELECT '' FROM DUAL\";\n  }\n  showConstraintsQuery(table, constraintName) {\n    const tableName = table.tableName || table;\n    const schemaName = table.schema;\n    return Utils.joinSQLFragments([\n      \"SELECT CONSTRAINT_CATALOG AS constraintCatalog,\",\n      \"CONSTRAINT_NAME AS constraintName,\",\n      \"CONSTRAINT_SCHEMA AS constraintSchema,\",\n      \"CONSTRAINT_TYPE AS constraintType,\",\n      \"TABLE_NAME AS tableName,\",\n      \"TABLE_SCHEMA AS tableSchema\",\n      \"from INFORMATION_SCHEMA.TABLE_CONSTRAINTS\",\n      `WHERE table_name='${tableName}'`,\n      constraintName && `AND constraint_name = '${constraintName}'`,\n      schemaName && `AND TABLE_SCHEMA = '${schemaName}'`,\n      \";\"\n    ]);\n  }\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    let indexName = indexNameOrAttributes;\n    if (typeof indexName !== \"string\") {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join(\"_\")}`);\n    }\n    return Utils.joinSQLFragments([\n      \"DROP INDEX\",\n      this.quoteIdentifier(indexName),\n      \"ON\",\n      this.quoteTable(tableName),\n      \";\"\n    ]);\n  }\n  attributeToSQL(attribute, options) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    }\n    const attributeString = attribute.type.toString({ escape: this.escape.bind(this) });\n    let template = attributeString;\n    if (attribute.allowNull === false) {\n      template += \" NOT NULL\";\n    }\n    if (attribute.autoIncrement) {\n      template += \" AUTOINCREMENT\";\n    }\n    if (!typeWithoutDefault.has(attributeString) && attribute.type._binary !== true && Utils.defaultValueSchemable(attribute.defaultValue)) {\n      template += ` DEFAULT ${this.escape(attribute.defaultValue)}`;\n    }\n    if (attribute.unique === true) {\n      template += \" UNIQUE\";\n    }\n    if (attribute.primaryKey) {\n      template += \" PRIMARY KEY\";\n    }\n    if (attribute.comment) {\n      template += ` COMMENT ${this.escape(attribute.comment)}`;\n    }\n    if (attribute.first) {\n      template += \" FIRST\";\n    }\n    if (attribute.after) {\n      template += ` AFTER ${this.quoteIdentifier(attribute.after)}`;\n    }\n    if (attribute.references) {\n      if (options && options.context === \"addColumn\" && options.foreignKey) {\n        const attrName = this.quoteIdentifier(options.foreignKey);\n        const fkName = this.quoteIdentifier(`${options.tableName}_${attrName}_foreign_idx`);\n        template += `, ADD CONSTRAINT ${fkName} FOREIGN KEY (${attrName})`;\n      }\n      template += ` REFERENCES ${this.quoteTable(attribute.references.model)}`;\n      if (attribute.references.key) {\n        template += ` (${this.quoteIdentifier(attribute.references.key)})`;\n      } else {\n        template += ` (${this.quoteIdentifier(\"id\")})`;\n      }\n      if (attribute.onDelete) {\n        template += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;\n      }\n      if (attribute.onUpdate) {\n        template += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;\n      }\n    }\n    return template;\n  }\n  attributesToSQL(attributes, options) {\n    const result = {};\n    for (const key in attributes) {\n      const attribute = attributes[key];\n      result[attribute.field || key] = this.attributeToSQL(attribute, options);\n    }\n    return result;\n  }\n  _checkValidJsonStatement(stmt) {\n    if (typeof stmt !== \"string\") {\n      return false;\n    }\n    let currentIndex = 0;\n    let openingBrackets = 0;\n    let closingBrackets = 0;\n    let hasJsonFunction = false;\n    let hasInvalidToken = false;\n    while (currentIndex < stmt.length) {\n      const string = stmt.slice(currentIndex);\n      const functionMatches = JSON_FUNCTION_REGEX.exec(string);\n      if (functionMatches) {\n        currentIndex += functionMatches[0].indexOf(\"(\");\n        hasJsonFunction = true;\n        continue;\n      }\n      const operatorMatches = JSON_OPERATOR_REGEX.exec(string);\n      if (operatorMatches) {\n        currentIndex += operatorMatches[0].length;\n        hasJsonFunction = true;\n        continue;\n      }\n      const tokenMatches = TOKEN_CAPTURE_REGEX.exec(string);\n      if (tokenMatches) {\n        const capturedToken = tokenMatches[1];\n        if (capturedToken === \"(\") {\n          openingBrackets++;\n        } else if (capturedToken === \")\") {\n          closingBrackets++;\n        } else if (capturedToken === \";\") {\n          hasInvalidToken = true;\n          break;\n        }\n        currentIndex += tokenMatches[0].length;\n        continue;\n      }\n      break;\n    }\n    if (hasJsonFunction && (hasInvalidToken || openingBrackets !== closingBrackets)) {\n      throw new Error(`Invalid json statement: ${stmt}`);\n    }\n    return hasJsonFunction;\n  }\n  dataTypeMapping(tableName, attr, dataType) {\n    if (dataType.includes(\"PRIMARY KEY\")) {\n      dataType = dataType.replace(\"PRIMARY KEY\", \"\");\n    }\n    if (dataType.includes(\"SERIAL\")) {\n      if (dataType.includes(\"BIGINT\")) {\n        dataType = dataType.replace(\"SERIAL\", \"BIGSERIAL\");\n        dataType = dataType.replace(\"BIGINT\", \"\");\n      } else if (dataType.includes(\"SMALLINT\")) {\n        dataType = dataType.replace(\"SERIAL\", \"SMALLSERIAL\");\n        dataType = dataType.replace(\"SMALLINT\", \"\");\n      } else {\n        dataType = dataType.replace(\"INTEGER\", \"\");\n      }\n      dataType = dataType.replace(\"NOT NULL\", \"\");\n    }\n    return dataType;\n  }\n  getForeignKeysQuery(table, schemaName) {\n    const tableName = table.tableName || table;\n    return Utils.joinSQLFragments([\n      \"SELECT\",\n      FOREIGN_KEY_FIELDS,\n      `FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = '${tableName}'`,\n      `AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='${schemaName}'`,\n      \"AND REFERENCED_TABLE_NAME IS NOT NULL\",\n      \";\"\n    ]);\n  }\n  getForeignKeyQuery(table, columnName) {\n    const quotedSchemaName = table.schema ? wrapSingleQuote(table.schema) : \"\";\n    const quotedTableName = wrapSingleQuote(table.tableName || table);\n    const quotedColumnName = wrapSingleQuote(columnName);\n    return Utils.joinSQLFragments([\n      \"SELECT\",\n      FOREIGN_KEY_FIELDS,\n      \"FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE\",\n      \"WHERE (\",\n      [\n        `REFERENCED_TABLE_NAME = ${quotedTableName}`,\n        table.schema && `AND REFERENCED_TABLE_SCHEMA = ${quotedSchemaName}`,\n        `AND REFERENCED_COLUMN_NAME = ${quotedColumnName}`\n      ],\n      \") OR (\",\n      [\n        `TABLE_NAME = ${quotedTableName}`,\n        table.schema && `AND TABLE_SCHEMA = ${quotedSchemaName}`,\n        `AND COLUMN_NAME = ${quotedColumnName}`,\n        \"AND REFERENCED_TABLE_NAME IS NOT NULL\"\n      ],\n      \")\"\n    ]);\n  }\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return Utils.joinSQLFragments([\n      \"ALTER TABLE\",\n      this.quoteTable(tableName),\n      \"DROP FOREIGN KEY\",\n      this.quoteIdentifier(foreignKey),\n      \";\"\n    ]);\n  }\n  addLimitAndOffset(options) {\n    let fragment = [];\n    if (options.offset !== null && options.offset !== void 0 && options.offset !== 0) {\n      fragment = [...fragment, \" LIMIT \", this.escape(options.limit), \" OFFSET \", this.escape(options.offset)];\n    } else if (options.limit !== null && options.limit !== void 0) {\n      fragment = [\" LIMIT \", this.escape(options.limit)];\n    }\n    return fragment.join(\"\");\n  }\n  quoteIdentifier(identifier, force) {\n    const optForceQuote = force || false;\n    const optQuoteIdentifiers = this.options.quoteIdentifiers !== false;\n    const rawIdentifier = Utils.removeTicks(identifier, '\"');\n    if (optForceQuote === true || optQuoteIdentifiers !== false || identifier.includes(\".\") || identifier.includes(\"->\") || SNOWFLAKE_RESERVED_WORDS.includes(rawIdentifier.toLowerCase())) {\n      return Utils.addTicks(rawIdentifier, '\"');\n    }\n    return rawIdentifier;\n  }\n}\nfunction wrapSingleQuote(identifier) {\n  return Utils.addTicks(identifier, \"'\");\n}\nmodule.exports = SnowflakeQueryGenerator;\n//# sourceMappingURL=query-generator.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/dialects/snowflake/query-generator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1343,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/dialects/snowflake/query-generator.js",
    "static": true,
    "longname": "lib/dialects/snowflake/query-generator.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1344,
    "kind": "variable",
    "name": "__defProps",
    "memberof": "lib/dialects/snowflake/query-generator.js",
    "static": true,
    "longname": "lib/dialects/snowflake/query-generator.js~__defProps",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1345,
    "kind": "variable",
    "name": "__getOwnPropDescs",
    "memberof": "lib/dialects/snowflake/query-generator.js",
    "static": true,
    "longname": "lib/dialects/snowflake/query-generator.js~__getOwnPropDescs",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1346,
    "kind": "variable",
    "name": "__getOwnPropSymbols",
    "memberof": "lib/dialects/snowflake/query-generator.js",
    "static": true,
    "longname": "lib/dialects/snowflake/query-generator.js~__getOwnPropSymbols",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1347,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/dialects/snowflake/query-generator.js",
    "static": true,
    "longname": "lib/dialects/snowflake/query-generator.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1348,
    "kind": "variable",
    "name": "__propIsEnum",
    "memberof": "lib/dialects/snowflake/query-generator.js",
    "static": true,
    "longname": "lib/dialects/snowflake/query-generator.js~__propIsEnum",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1349,
    "kind": "function",
    "name": "__defNormalProp",
    "memberof": "lib/dialects/snowflake/query-generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/snowflake/query-generator.js~__defNormalProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1350,
    "kind": "function",
    "name": "__spreadValues",
    "memberof": "lib/dialects/snowflake/query-generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/snowflake/query-generator.js~__spreadValues",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1351,
    "kind": "function",
    "name": "__spreadProps",
    "memberof": "lib/dialects/snowflake/query-generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/snowflake/query-generator.js~__spreadProps",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1352,
    "kind": "variable",
    "name": "_",
    "memberof": "lib/dialects/snowflake/query-generator.js",
    "static": true,
    "longname": "lib/dialects/snowflake/query-generator.js~_",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1353,
    "kind": "variable",
    "name": "Utils",
    "memberof": "lib/dialects/snowflake/query-generator.js",
    "static": true,
    "longname": "lib/dialects/snowflake/query-generator.js~Utils",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1354,
    "kind": "variable",
    "name": "AbstractQueryGenerator",
    "memberof": "lib/dialects/snowflake/query-generator.js",
    "static": true,
    "longname": "lib/dialects/snowflake/query-generator.js~AbstractQueryGenerator",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1355,
    "kind": "variable",
    "name": "util",
    "memberof": "lib/dialects/snowflake/query-generator.js",
    "static": true,
    "longname": "lib/dialects/snowflake/query-generator.js~util",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1356,
    "kind": "variable",
    "name": "Op",
    "memberof": "lib/dialects/snowflake/query-generator.js",
    "static": true,
    "longname": "lib/dialects/snowflake/query-generator.js~Op",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1357,
    "kind": "variable",
    "name": "JSON_FUNCTION_REGEX",
    "memberof": "lib/dialects/snowflake/query-generator.js",
    "static": true,
    "longname": "lib/dialects/snowflake/query-generator.js~JSON_FUNCTION_REGEX",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "undefined"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1358,
    "kind": "variable",
    "name": "JSON_OPERATOR_REGEX",
    "memberof": "lib/dialects/snowflake/query-generator.js",
    "static": true,
    "longname": "lib/dialects/snowflake/query-generator.js~JSON_OPERATOR_REGEX",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "undefined"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1359,
    "kind": "variable",
    "name": "TOKEN_CAPTURE_REGEX",
    "memberof": "lib/dialects/snowflake/query-generator.js",
    "static": true,
    "longname": "lib/dialects/snowflake/query-generator.js~TOKEN_CAPTURE_REGEX",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "undefined"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1360,
    "kind": "variable",
    "name": "FOREIGN_KEY_FIELDS",
    "memberof": "lib/dialects/snowflake/query-generator.js",
    "static": true,
    "longname": "lib/dialects/snowflake/query-generator.js~FOREIGN_KEY_FIELDS",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1361,
    "kind": "variable",
    "name": "SNOWFLAKE_RESERVED_WORDS",
    "memberof": "lib/dialects/snowflake/query-generator.js",
    "static": true,
    "longname": "lib/dialects/snowflake/query-generator.js~SNOWFLAKE_RESERVED_WORDS",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1362,
    "kind": "variable",
    "name": "typeWithoutDefault",
    "memberof": "lib/dialects/snowflake/query-generator.js",
    "static": true,
    "longname": "lib/dialects/snowflake/query-generator.js~typeWithoutDefault",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1363,
    "kind": "class",
    "name": "SnowflakeQueryGenerator",
    "memberof": "lib/dialects/snowflake/query-generator.js",
    "static": true,
    "longname": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "interface": false,
    "extends": [
      "AbstractQueryGenerator"
    ],
    "ignore": true
  },
  {
    "__docId__": 1364,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 1365,
    "kind": "member",
    "name": "OperatorMap",
    "memberof": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator",
    "static": false,
    "longname": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator#OperatorMap",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1366,
    "kind": "method",
    "name": "createDatabaseQuery",
    "memberof": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator#createDatabaseQuery",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "params": [
      {
        "name": "databaseName",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1367,
    "kind": "method",
    "name": "dropDatabaseQuery",
    "memberof": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator#dropDatabaseQuery",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [
      {
        "name": "databaseName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1368,
    "kind": "method",
    "name": "createSchema",
    "memberof": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator#createSchema",
    "access": "public",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1369,
    "kind": "method",
    "name": "showSchemasQuery",
    "memberof": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator#showSchemasQuery",
    "access": "public",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1370,
    "kind": "method",
    "name": "versionQuery",
    "memberof": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator#versionQuery",
    "access": "public",
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1371,
    "kind": "method",
    "name": "createTableQuery",
    "memberof": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator#createTableQuery",
    "access": "public",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributes",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1372,
    "kind": "method",
    "name": "describeTableQuery",
    "memberof": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator#describeTableQuery",
    "access": "public",
    "description": null,
    "lineNumber": 141,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "schema",
        "types": [
          "*"
        ]
      },
      {
        "name": "schemaDelimiter",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1373,
    "kind": "method",
    "name": "showTablesQuery",
    "memberof": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator#showTablesQuery",
    "access": "public",
    "description": null,
    "lineNumber": 149,
    "undocument": true,
    "params": [
      {
        "name": "database",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1374,
    "kind": "method",
    "name": "addColumnQuery",
    "memberof": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator#addColumnQuery",
    "access": "public",
    "description": null,
    "lineNumber": 156,
    "undocument": true,
    "params": [
      {
        "name": "table",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "dataType",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1375,
    "kind": "method",
    "name": "removeColumnQuery",
    "memberof": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator#removeColumnQuery",
    "access": "public",
    "description": null,
    "lineNumber": 170,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributeName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1376,
    "kind": "method",
    "name": "changeColumnQuery",
    "memberof": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator#changeColumnQuery",
    "access": "public",
    "description": null,
    "lineNumber": 179,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1377,
    "kind": "method",
    "name": "renameColumnQuery",
    "memberof": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator#renameColumnQuery",
    "access": "public",
    "description": null,
    "lineNumber": 217,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attrBefore",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1378,
    "kind": "method",
    "name": "handleSequelizeMethod",
    "memberof": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator#handleSequelizeMethod",
    "access": "public",
    "description": null,
    "lineNumber": 231,
    "undocument": true,
    "params": [
      {
        "name": "attr",
        "types": [
          "*"
        ]
      },
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "factory",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      },
      {
        "name": "prepend",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1379,
    "kind": "method",
    "name": "truncateTableQuery",
    "memberof": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator#truncateTableQuery",
    "access": "public",
    "description": null,
    "lineNumber": 264,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1380,
    "kind": "method",
    "name": "deleteQuery",
    "memberof": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator#deleteQuery",
    "access": "public",
    "description": null,
    "lineNumber": 270,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "where",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      },
      {
        "name": "model",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1381,
    "kind": "method",
    "name": "showIndexesQuery",
    "memberof": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator#showIndexesQuery",
    "access": "public",
    "description": null,
    "lineNumber": 308,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1382,
    "kind": "method",
    "name": "showConstraintsQuery",
    "memberof": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator#showConstraintsQuery",
    "access": "public",
    "description": null,
    "lineNumber": 311,
    "undocument": true,
    "params": [
      {
        "name": "table",
        "types": [
          "*"
        ]
      },
      {
        "name": "constraintName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1383,
    "kind": "method",
    "name": "removeIndexQuery",
    "memberof": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator#removeIndexQuery",
    "access": "public",
    "description": null,
    "lineNumber": 328,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "indexNameOrAttributes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1384,
    "kind": "method",
    "name": "attributeToSQL",
    "memberof": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator#attributeToSQL",
    "access": "public",
    "description": null,
    "lineNumber": 341,
    "undocument": true,
    "params": [
      {
        "name": "attribute",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1385,
    "kind": "method",
    "name": "attributesToSQL",
    "memberof": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator#attributesToSQL",
    "access": "public",
    "description": null,
    "lineNumber": 394,
    "undocument": true,
    "params": [
      {
        "name": "attributes",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1386,
    "kind": "method",
    "name": "_checkValidJsonStatement",
    "memberof": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator#_checkValidJsonStatement",
    "access": "private",
    "description": null,
    "lineNumber": 402,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "stmt",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1387,
    "kind": "method",
    "name": "dataTypeMapping",
    "memberof": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator#dataTypeMapping",
    "access": "public",
    "description": null,
    "lineNumber": 446,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attr",
        "types": [
          "*"
        ]
      },
      {
        "name": "dataType",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1388,
    "kind": "method",
    "name": "getForeignKeysQuery",
    "memberof": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator#getForeignKeysQuery",
    "access": "public",
    "description": null,
    "lineNumber": 464,
    "undocument": true,
    "params": [
      {
        "name": "table",
        "types": [
          "*"
        ]
      },
      {
        "name": "schemaName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1389,
    "kind": "method",
    "name": "getForeignKeyQuery",
    "memberof": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator#getForeignKeyQuery",
    "access": "public",
    "description": null,
    "lineNumber": 475,
    "undocument": true,
    "params": [
      {
        "name": "table",
        "types": [
          "*"
        ]
      },
      {
        "name": "columnName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1390,
    "kind": "method",
    "name": "dropForeignKeyQuery",
    "memberof": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator#dropForeignKeyQuery",
    "access": "public",
    "description": null,
    "lineNumber": 499,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "foreignKey",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1391,
    "kind": "method",
    "name": "addLimitAndOffset",
    "memberof": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator#addLimitAndOffset",
    "access": "public",
    "description": null,
    "lineNumber": 508,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1392,
    "kind": "method",
    "name": "quoteIdentifier",
    "memberof": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/snowflake/query-generator.js~SnowflakeQueryGenerator#quoteIdentifier",
    "access": "public",
    "description": null,
    "lineNumber": 517,
    "undocument": true,
    "params": [
      {
        "name": "identifier",
        "types": [
          "*"
        ]
      },
      {
        "name": "force",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1393,
    "kind": "function",
    "name": "wrapSingleQuote",
    "memberof": "lib/dialects/snowflake/query-generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/snowflake/query-generator.js~wrapSingleQuote",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 527,
    "undocument": true,
    "params": [
      {
        "name": "identifier",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1394,
    "kind": "file",
    "name": "lib/dialects/snowflake/query-interface.js",
    "content": "\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nconst sequelizeErrors = require(\"../../errors\");\nconst { QueryInterface } = require(\"../abstract/query-interface\");\nconst { QueryTypes } = require(\"../../query-types\");\nclass SnowflakeQueryInterface extends QueryInterface {\n  async removeColumn(tableName, columnName, options) {\n    options = options || {};\n    const [results] = await this.sequelize.query(this.queryGenerator.getForeignKeyQuery(tableName.tableName ? tableName : {\n      tableName,\n      schema: this.sequelize.config.database\n    }, columnName), __spreadValues({ raw: true }, options));\n    if (results.length > 0 && results[0].constraint_name !== \"PRIMARY\") {\n      await Promise.all(results.map((constraint) => this.sequelize.query(this.queryGenerator.dropForeignKeyQuery(tableName, constraint.constraint_name), __spreadValues({ raw: true }, options))));\n    }\n    return await this.sequelize.query(this.queryGenerator.removeColumnQuery(tableName, columnName), __spreadValues({ raw: true }, options));\n  }\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    options = __spreadValues({}, options);\n    options.type = QueryTypes.UPSERT;\n    options.updateOnDuplicate = Object.keys(updateValues);\n    const model = options.model;\n    const sql = this.queryGenerator.insertQuery(tableName, insertValues, model.rawAttributes, options);\n    return await this.sequelize.query(sql, options);\n  }\n  async removeConstraint(tableName, constraintName, options) {\n    const sql = this.queryGenerator.showConstraintsQuery(tableName.tableName ? tableName : {\n      tableName,\n      schema: this.sequelize.config.database\n    }, constraintName);\n    const constraints = await this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), {\n      type: this.sequelize.QueryTypes.SHOWCONSTRAINTS\n    }));\n    const constraint = constraints[0];\n    let query;\n    if (!constraint || !constraint.constraintType) {\n      throw new sequelizeErrors.UnknownConstraintError({\n        message: `Constraint ${constraintName} on table ${tableName} does not exist`,\n        constraint: constraintName,\n        table: tableName\n      });\n    }\n    if (constraint.constraintType === \"FOREIGN KEY\") {\n      query = this.queryGenerator.dropForeignKeyQuery(tableName, constraintName);\n    } else {\n      query = this.queryGenerator.removeIndexQuery(constraint.tableName, constraint.constraintName);\n    }\n    return await this.sequelize.query(query, options);\n  }\n}\nexports.SnowflakeQueryInterface = SnowflakeQueryInterface;\n//# sourceMappingURL=query-interface.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/dialects/snowflake/query-interface.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1395,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/dialects/snowflake/query-interface.js",
    "static": true,
    "longname": "lib/dialects/snowflake/query-interface.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1396,
    "kind": "variable",
    "name": "__defProps",
    "memberof": "lib/dialects/snowflake/query-interface.js",
    "static": true,
    "longname": "lib/dialects/snowflake/query-interface.js~__defProps",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1397,
    "kind": "variable",
    "name": "__getOwnPropDescs",
    "memberof": "lib/dialects/snowflake/query-interface.js",
    "static": true,
    "longname": "lib/dialects/snowflake/query-interface.js~__getOwnPropDescs",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1398,
    "kind": "variable",
    "name": "__getOwnPropSymbols",
    "memberof": "lib/dialects/snowflake/query-interface.js",
    "static": true,
    "longname": "lib/dialects/snowflake/query-interface.js~__getOwnPropSymbols",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1399,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/dialects/snowflake/query-interface.js",
    "static": true,
    "longname": "lib/dialects/snowflake/query-interface.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1400,
    "kind": "variable",
    "name": "__propIsEnum",
    "memberof": "lib/dialects/snowflake/query-interface.js",
    "static": true,
    "longname": "lib/dialects/snowflake/query-interface.js~__propIsEnum",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1401,
    "kind": "function",
    "name": "__defNormalProp",
    "memberof": "lib/dialects/snowflake/query-interface.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/snowflake/query-interface.js~__defNormalProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1402,
    "kind": "function",
    "name": "__spreadValues",
    "memberof": "lib/dialects/snowflake/query-interface.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/snowflake/query-interface.js~__spreadValues",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1403,
    "kind": "function",
    "name": "__spreadProps",
    "memberof": "lib/dialects/snowflake/query-interface.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/snowflake/query-interface.js~__spreadProps",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1404,
    "kind": "variable",
    "name": "sequelizeErrors",
    "memberof": "lib/dialects/snowflake/query-interface.js",
    "static": true,
    "longname": "lib/dialects/snowflake/query-interface.js~sequelizeErrors",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1405,
    "kind": "variable",
    "name": "QueryInterface",
    "memberof": "lib/dialects/snowflake/query-interface.js",
    "static": true,
    "longname": "lib/dialects/snowflake/query-interface.js~QueryInterface",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1406,
    "kind": "variable",
    "name": "QueryTypes",
    "memberof": "lib/dialects/snowflake/query-interface.js",
    "static": true,
    "longname": "lib/dialects/snowflake/query-interface.js~QueryTypes",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1407,
    "kind": "class",
    "name": "SnowflakeQueryInterface",
    "memberof": "lib/dialects/snowflake/query-interface.js",
    "static": true,
    "longname": "lib/dialects/snowflake/query-interface.js~SnowflakeQueryInterface",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/snowflake/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "interface": false,
    "extends": [
      "QueryInterface"
    ],
    "ignore": true
  },
  {
    "__docId__": 1408,
    "kind": "method",
    "name": "removeColumn",
    "memberof": "lib/dialects/snowflake/query-interface.js~SnowflakeQueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/snowflake/query-interface.js~SnowflakeQueryInterface#removeColumn",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "columnName",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1409,
    "kind": "method",
    "name": "upsert",
    "memberof": "lib/dialects/snowflake/query-interface.js~SnowflakeQueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/snowflake/query-interface.js~SnowflakeQueryInterface#upsert",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "insertValues",
        "types": [
          "*"
        ]
      },
      {
        "name": "updateValues",
        "types": [
          "*"
        ]
      },
      {
        "name": "where",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1410,
    "kind": "method",
    "name": "removeConstraint",
    "memberof": "lib/dialects/snowflake/query-interface.js~SnowflakeQueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/snowflake/query-interface.js~SnowflakeQueryInterface#removeConstraint",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "constraintName",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1411,
    "kind": "file",
    "name": "lib/dialects/sqlite/connection-manager.js",
    "content": "\"use strict\";\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst AbstractConnectionManager = require(\"../abstract/connection-manager\");\nconst { logger } = require(\"../../utils/logger\");\nconst debug = logger.debugContext(\"connection:sqlite\");\nconst dataTypes = require(\"../../data-types\").sqlite;\nconst sequelizeErrors = require(\"../../errors\");\nconst parserStore = require(\"../parserStore\")(\"sqlite\");\nconst { promisify } = require(\"util\");\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    super(dialect, sequelize);\n    if (this.sequelize.options.host === \"localhost\") {\n      delete this.sequelize.options.host;\n    }\n    this.connections = {};\n    this.lib = this._loadDialectModule(\"sqlite3\");\n    this.refreshTypeParser(dataTypes);\n  }\n  async _onProcessExit() {\n    await Promise.all(Object.getOwnPropertyNames(this.connections).map((connection) => promisify((callback) => this.connections[connection].close(callback))()));\n    return super._onProcessExit.call(this);\n  }\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n  async getConnection(options) {\n    options = options || {};\n    options.uuid = options.uuid || \"default\";\n    if (Boolean(this.sequelize.options.storage) !== null && this.sequelize.options.storage !== void 0) {\n      options.storage = this.sequelize.options.storage;\n    } else {\n      options.storage = this.sequelize.options.host || \":memory:\";\n    }\n    options.inMemory = options.storage === \":memory:\" ? 1 : 0;\n    const dialectOptions = this.sequelize.options.dialectOptions;\n    const defaultReadWriteMode = this.lib.OPEN_READWRITE | this.lib.OPEN_CREATE;\n    options.readWriteMode = dialectOptions && dialectOptions.mode || defaultReadWriteMode;\n    if (this.connections[options.inMemory || options.uuid]) {\n      return this.connections[options.inMemory || options.uuid];\n    }\n    if (!options.inMemory && (options.readWriteMode & this.lib.OPEN_CREATE) !== 0) {\n      fs.mkdirSync(path.dirname(options.storage), { recursive: true });\n    }\n    const connection = await new Promise((resolve, reject) => {\n      this.connections[options.inMemory || options.uuid] = new this.lib.Database(options.storage, options.readWriteMode, (err) => {\n        if (err) {\n          return reject(new sequelizeErrors.ConnectionError(err));\n        }\n        debug(`connection acquired ${options.uuid}`);\n        resolve(this.connections[options.inMemory || options.uuid]);\n      });\n    });\n    if (this.sequelize.config.password) {\n      connection.run(`PRAGMA KEY=${this.sequelize.escape(this.sequelize.config.password)}`);\n    }\n    if (this.sequelize.options.foreignKeys !== false) {\n      connection.run(\"PRAGMA FOREIGN_KEYS=ON\");\n    }\n    return connection;\n  }\n  releaseConnection(connection, force) {\n    if (connection.filename === \":memory:\" && force !== true) {\n      return;\n    }\n    if (connection.uuid) {\n      connection.close();\n      debug(`connection released ${connection.uuid}`);\n      delete this.connections[connection.uuid];\n    }\n  }\n}\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n//# sourceMappingURL=connection-manager.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/dialects/sqlite/connection-manager.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1412,
    "kind": "variable",
    "name": "fs",
    "memberof": "lib/dialects/sqlite/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/sqlite/connection-manager.js~fs",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1413,
    "kind": "variable",
    "name": "path",
    "memberof": "lib/dialects/sqlite/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/sqlite/connection-manager.js~path",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1414,
    "kind": "variable",
    "name": "AbstractConnectionManager",
    "memberof": "lib/dialects/sqlite/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/sqlite/connection-manager.js~AbstractConnectionManager",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1415,
    "kind": "variable",
    "name": "logger",
    "memberof": "lib/dialects/sqlite/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/sqlite/connection-manager.js~logger",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1416,
    "kind": "variable",
    "name": "debug",
    "memberof": "lib/dialects/sqlite/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/sqlite/connection-manager.js~debug",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1417,
    "kind": "variable",
    "name": "dataTypes",
    "memberof": "lib/dialects/sqlite/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/sqlite/connection-manager.js~dataTypes",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1418,
    "kind": "variable",
    "name": "sequelizeErrors",
    "memberof": "lib/dialects/sqlite/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/sqlite/connection-manager.js~sequelizeErrors",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1419,
    "kind": "variable",
    "name": "parserStore",
    "memberof": "lib/dialects/sqlite/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/sqlite/connection-manager.js~parserStore",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1420,
    "kind": "variable",
    "name": "promisify",
    "memberof": "lib/dialects/sqlite/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/sqlite/connection-manager.js~promisify",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1421,
    "kind": "class",
    "name": "ConnectionManager",
    "memberof": "lib/dialects/sqlite/connection-manager.js",
    "static": true,
    "longname": "lib/dialects/sqlite/connection-manager.js~ConnectionManager",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/connection-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "interface": false,
    "extends": [
      "AbstractConnectionManager"
    ],
    "ignore": true
  },
  {
    "__docId__": 1422,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/dialects/sqlite/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/sqlite/connection-manager.js~ConnectionManager#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 1423,
    "kind": "member",
    "name": "connections",
    "memberof": "lib/dialects/sqlite/connection-manager.js~ConnectionManager",
    "static": false,
    "longname": "lib/dialects/sqlite/connection-manager.js~ConnectionManager#connections",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1424,
    "kind": "member",
    "name": "lib",
    "memberof": "lib/dialects/sqlite/connection-manager.js~ConnectionManager",
    "static": false,
    "longname": "lib/dialects/sqlite/connection-manager.js~ConnectionManager#lib",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1425,
    "kind": "method",
    "name": "_onProcessExit",
    "memberof": "lib/dialects/sqlite/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/sqlite/connection-manager.js~ConnectionManager#_onProcessExit",
    "access": "private",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1426,
    "kind": "method",
    "name": "_refreshTypeParser",
    "memberof": "lib/dialects/sqlite/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/sqlite/connection-manager.js~ConnectionManager#_refreshTypeParser",
    "access": "private",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "dataType",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1427,
    "kind": "method",
    "name": "_clearTypeParser",
    "memberof": "lib/dialects/sqlite/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/sqlite/connection-manager.js~ConnectionManager#_clearTypeParser",
    "access": "private",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1428,
    "kind": "method",
    "name": "getConnection",
    "memberof": "lib/dialects/sqlite/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/sqlite/connection-manager.js~ConnectionManager#getConnection",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1429,
    "kind": "method",
    "name": "releaseConnection",
    "memberof": "lib/dialects/sqlite/connection-manager.js~ConnectionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/sqlite/connection-manager.js~ConnectionManager#releaseConnection",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [
      {
        "name": "connection",
        "types": [
          "*"
        ]
      },
      {
        "name": "force",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 1430,
    "kind": "file",
    "name": "lib/dialects/sqlite/data-types.js",
    "content": "\"use strict\";\nmodule.exports = (BaseTypes) => {\n  const warn = BaseTypes.ABSTRACT.warn.bind(void 0, \"https://www.sqlite.org/datatype3.html\");\n  function removeUnsupportedIntegerOptions(dataType) {\n    if (dataType._zerofill || dataType._unsigned) {\n      warn(`SQLite does not support '${dataType.key}' with UNSIGNED or ZEROFILL. Plain '${dataType.key}' will be used instead.`);\n      dataType._unsigned = void 0;\n      dataType._zerofill = void 0;\n    }\n  }\n  BaseTypes.DATE.types.sqlite = [\"DATETIME\"];\n  BaseTypes.STRING.types.sqlite = [\"VARCHAR\", \"VARCHAR BINARY\"];\n  BaseTypes.CHAR.types.sqlite = [\"CHAR\", \"CHAR BINARY\"];\n  BaseTypes.TEXT.types.sqlite = [\"TEXT\"];\n  BaseTypes.TINYINT.types.sqlite = [\"TINYINT\"];\n  BaseTypes.SMALLINT.types.sqlite = [\"SMALLINT\"];\n  BaseTypes.MEDIUMINT.types.sqlite = [\"MEDIUMINT\"];\n  BaseTypes.INTEGER.types.sqlite = [\"INTEGER\"];\n  BaseTypes.BIGINT.types.sqlite = [\"BIGINT\"];\n  BaseTypes.FLOAT.types.sqlite = [\"FLOAT\"];\n  BaseTypes.TIME.types.sqlite = [\"TIME\"];\n  BaseTypes.DATEONLY.types.sqlite = [\"DATE\"];\n  BaseTypes.BOOLEAN.types.sqlite = [\"TINYINT\"];\n  BaseTypes.BLOB.types.sqlite = [\"TINYBLOB\", \"BLOB\", \"LONGBLOB\"];\n  BaseTypes.DECIMAL.types.sqlite = [\"DECIMAL\"];\n  BaseTypes.UUID.types.sqlite = [\"UUID\"];\n  BaseTypes.ENUM.types.sqlite = false;\n  BaseTypes.REAL.types.sqlite = [\"REAL\"];\n  BaseTypes.DOUBLE.types.sqlite = [\"DOUBLE PRECISION\"];\n  BaseTypes.GEOMETRY.types.sqlite = false;\n  BaseTypes.JSON.types.sqlite = [\"JSON\", \"JSONB\"];\n  class JSONTYPE extends BaseTypes.JSON {\n    static parse(data) {\n      return JSON.parse(data);\n    }\n  }\n  class DATE extends BaseTypes.DATE {\n    static parse(date, options) {\n      if (!date.includes(\"+\")) {\n        return new Date(date + options.timezone);\n      }\n      return new Date(date);\n    }\n  }\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(date) {\n      return date;\n    }\n  }\n  class STRING extends BaseTypes.STRING {\n    toSql() {\n      if (this._binary) {\n        return `VARCHAR BINARY(${this._length})`;\n      }\n      return super.toSql(this);\n    }\n  }\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      if (this._length) {\n        warn(\"SQLite does not support TEXT with options. Plain `TEXT` will be used instead.\");\n        this._length = void 0;\n      }\n      return \"TEXT\";\n    }\n  }\n  class CITEXT extends BaseTypes.CITEXT {\n    toSql() {\n      return \"TEXT COLLATE NOCASE\";\n    }\n  }\n  class CHAR extends BaseTypes.CHAR {\n    toSql() {\n      if (this._binary) {\n        return `CHAR BINARY(${this._length})`;\n      }\n      return super.toSql();\n    }\n  }\n  class NUMBER extends BaseTypes.NUMBER {\n    toSql() {\n      let result = this.key;\n      if (this._unsigned) {\n        result += \" UNSIGNED\";\n      }\n      if (this._zerofill) {\n        result += \" ZEROFILL\";\n      }\n      if (this._length) {\n        result += `(${this._length}`;\n        if (typeof this._decimals === \"number\") {\n          result += `,${this._decimals}`;\n        }\n        result += \")\";\n      }\n      return result;\n    }\n  }\n  class TINYINT extends BaseTypes.TINYINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class SMALLINT extends BaseTypes.SMALLINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class MEDIUMINT extends BaseTypes.MEDIUMINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class INTEGER extends BaseTypes.INTEGER {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class BIGINT extends BaseTypes.BIGINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class FLOAT extends BaseTypes.FLOAT {\n  }\n  class DOUBLE extends BaseTypes.DOUBLE {\n  }\n  class REAL extends BaseTypes.REAL {\n  }\n  function parseFloating(value) {\n    if (typeof value !== \"string\") {\n      return value;\n    }\n    if (value === \"NaN\") {\n      return Number.NaN;\n    }\n    if (value === \"Infinity\") {\n      return Number.POSITIVE_INFINITY;\n    }\n    if (value === \"-Infinity\") {\n      return Number.NEGATIVE_INFINITY;\n    }\n  }\n  for (const floating of [FLOAT, DOUBLE, REAL]) {\n    floating.parse = parseFloating;\n  }\n  for (const num of [FLOAT, DOUBLE, REAL, TINYINT, SMALLINT, MEDIUMINT, INTEGER, BIGINT]) {\n    num.prototype.toSql = NUMBER.prototype.toSql;\n  }\n  class ENUM extends BaseTypes.ENUM {\n    toSql() {\n      return \"TEXT\";\n    }\n  }\n  return {\n    DATE,\n    DATEONLY,\n    STRING,\n    CHAR,\n    NUMBER,\n    FLOAT,\n    REAL,\n    \"DOUBLE PRECISION\": DOUBLE,\n    TINYINT,\n    SMALLINT,\n    MEDIUMINT,\n    INTEGER,\n    BIGINT,\n    TEXT,\n    ENUM,\n    JSON: JSONTYPE,\n    CITEXT\n  };\n};\n//# sourceMappingURL=data-types.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/dialects/sqlite/data-types.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1431,
    "kind": "file",
    "name": "lib/dialects/sqlite/index.js",
    "content": "\"use strict\";\nconst _ = require(\"lodash\");\nconst { AbstractDialect } = require(\"../abstract\");\nconst ConnectionManager = require(\"./connection-manager\");\nconst Query = require(\"./query\");\nconst QueryGenerator = require(\"./query-generator\");\nconst DataTypes = require(\"../../data-types\").sqlite;\nconst { SQLiteQueryInterface } = require(\"./query-interface\");\nclass SqliteDialect extends AbstractDialect {\n  static supports = _.merge(_.cloneDeep(AbstractDialect.supports), {\n    DEFAULT: false,\n    \"DEFAULT VALUES\": true,\n    \"UNION ALL\": false,\n    \"RIGHT JOIN\": false,\n    inserts: {\n      ignoreDuplicates: \" OR IGNORE\",\n      updateOnDuplicate: \" ON CONFLICT DO UPDATE SET\",\n      conflictFields: true\n    },\n    index: {\n      using: false,\n      where: true,\n      functionBased: true\n    },\n    transactionOptions: {\n      type: true\n    },\n    constraints: {\n      addConstraint: false,\n      dropConstraint: false\n    },\n    groupedLimit: false,\n    JSON: true\n  });\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new SQLiteQueryInterface(sequelize, this.queryGenerator);\n  }\n}\nSqliteDialect.prototype.defaultVersion = \"3.8.0\";\nSqliteDialect.prototype.Query = Query;\nSqliteDialect.prototype.DataTypes = DataTypes;\nSqliteDialect.prototype.name = \"sqlite\";\nSqliteDialect.prototype.TICK_CHAR = \"`\";\nSqliteDialect.prototype.TICK_CHAR_LEFT = SqliteDialect.prototype.TICK_CHAR;\nSqliteDialect.prototype.TICK_CHAR_RIGHT = SqliteDialect.prototype.TICK_CHAR;\nmodule.exports = SqliteDialect;\nmodule.exports.SqliteDialect = SqliteDialect;\nmodule.exports.default = SqliteDialect;\n//# sourceMappingURL=index.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/dialects/sqlite/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1432,
    "kind": "variable",
    "name": "_",
    "memberof": "lib/dialects/sqlite/index.js",
    "static": true,
    "longname": "lib/dialects/sqlite/index.js~_",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1433,
    "kind": "variable",
    "name": "AbstractDialect",
    "memberof": "lib/dialects/sqlite/index.js",
    "static": true,
    "longname": "lib/dialects/sqlite/index.js~AbstractDialect",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1434,
    "kind": "variable",
    "name": "ConnectionManager",
    "memberof": "lib/dialects/sqlite/index.js",
    "static": true,
    "longname": "lib/dialects/sqlite/index.js~ConnectionManager",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1435,
    "kind": "variable",
    "name": "Query",
    "memberof": "lib/dialects/sqlite/index.js",
    "static": true,
    "longname": "lib/dialects/sqlite/index.js~Query",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1436,
    "kind": "variable",
    "name": "QueryGenerator",
    "memberof": "lib/dialects/sqlite/index.js",
    "static": true,
    "longname": "lib/dialects/sqlite/index.js~QueryGenerator",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1437,
    "kind": "variable",
    "name": "DataTypes",
    "memberof": "lib/dialects/sqlite/index.js",
    "static": true,
    "longname": "lib/dialects/sqlite/index.js~DataTypes",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1438,
    "kind": "variable",
    "name": "SQLiteQueryInterface",
    "memberof": "lib/dialects/sqlite/index.js",
    "static": true,
    "longname": "lib/dialects/sqlite/index.js~SQLiteQueryInterface",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1439,
    "kind": "class",
    "name": "SqliteDialect",
    "memberof": "lib/dialects/sqlite/index.js",
    "static": true,
    "longname": "lib/dialects/sqlite/index.js~SqliteDialect",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false,
    "extends": [
      "AbstractDialect"
    ],
    "ignore": true
  },
  {
    "__docId__": 1440,
    "kind": "member",
    "name": "supports",
    "memberof": "lib/dialects/sqlite/index.js~SqliteDialect",
    "static": true,
    "longname": "lib/dialects/sqlite/index.js~SqliteDialect.supports",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1441,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/dialects/sqlite/index.js~SqliteDialect",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/sqlite/index.js~SqliteDialect#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 1442,
    "kind": "member",
    "name": "sequelize",
    "memberof": "lib/dialects/sqlite/index.js~SqliteDialect",
    "static": false,
    "longname": "lib/dialects/sqlite/index.js~SqliteDialect#sequelize",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1443,
    "kind": "member",
    "name": "connectionManager",
    "memberof": "lib/dialects/sqlite/index.js~SqliteDialect",
    "static": false,
    "longname": "lib/dialects/sqlite/index.js~SqliteDialect#connectionManager",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1444,
    "kind": "member",
    "name": "queryGenerator",
    "memberof": "lib/dialects/sqlite/index.js~SqliteDialect",
    "static": false,
    "longname": "lib/dialects/sqlite/index.js~SqliteDialect#queryGenerator",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1445,
    "kind": "member",
    "name": "queryInterface",
    "memberof": "lib/dialects/sqlite/index.js~SqliteDialect",
    "static": false,
    "longname": "lib/dialects/sqlite/index.js~SqliteDialect#queryInterface",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1446,
    "kind": "file",
    "name": "lib/dialects/sqlite/query-generator.js",
    "content": "\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nconst Utils = require(\"../../utils\");\nconst { Transaction } = require(\"../../transaction\");\nconst _ = require(\"lodash\");\nconst MySqlQueryGenerator = require(\"../mysql/query-generator\");\nconst AbstractQueryGenerator = require(\"../abstract/query-generator\");\nclass SQLiteQueryGenerator extends MySqlQueryGenerator {\n  createSchema() {\n    return \"SELECT name FROM `sqlite_master` WHERE type='table' and name!='sqlite_sequence';\";\n  }\n  showSchemasQuery() {\n    return \"SELECT name FROM `sqlite_master` WHERE type='table' and name!='sqlite_sequence';\";\n  }\n  versionQuery() {\n    return \"SELECT sqlite_version() as `version`\";\n  }\n  createTableQuery(tableName, attributes, options) {\n    options = options || {};\n    const primaryKeys = [];\n    const needsMultiplePrimaryKeys = Object.values(attributes).filter((definition) => definition.includes(\"PRIMARY KEY\")).length > 1;\n    const attrArray = [];\n    for (const attr in attributes) {\n      if (Object.prototype.hasOwnProperty.call(attributes, attr)) {\n        const dataType = attributes[attr];\n        const containsAutoIncrement = dataType.includes(\"AUTOINCREMENT\");\n        let dataTypeString = dataType;\n        if (dataType.includes(\"PRIMARY KEY\")) {\n          if (dataType.includes(\"INT\")) {\n            dataTypeString = containsAutoIncrement ? \"INTEGER PRIMARY KEY AUTOINCREMENT\" : \"INTEGER PRIMARY KEY\";\n            if (dataType.includes(\" REFERENCES\")) {\n              dataTypeString += dataType.slice(dataType.indexOf(\" REFERENCES\"));\n            }\n          }\n          if (needsMultiplePrimaryKeys) {\n            primaryKeys.push(attr);\n            if (dataType.includes(\"NOT NULL\")) {\n              dataTypeString = dataType.replace(\" PRIMARY KEY\", \"\");\n            } else {\n              dataTypeString = dataType.replace(\"PRIMARY KEY\", \"NOT NULL\");\n            }\n          }\n        }\n        attrArray.push(`${this.quoteIdentifier(attr)} ${dataTypeString}`);\n      }\n    }\n    const table = this.quoteTable(tableName);\n    let attrStr = attrArray.join(\", \");\n    const pkString = primaryKeys.map((pk) => this.quoteIdentifier(pk)).join(\", \");\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, (columns) => {\n        if (columns.customIndex) {\n          attrStr += `, UNIQUE (${columns.fields.map((field) => this.quoteIdentifier(field)).join(\", \")})`;\n        }\n      });\n    }\n    if (pkString.length > 0) {\n      attrStr += `, PRIMARY KEY (${pkString})`;\n    }\n    const sql = `CREATE TABLE IF NOT EXISTS ${table} (${attrStr});`;\n    return this.replaceBooleanDefaults(sql);\n  }\n  booleanValue(value) {\n    return value ? 1 : 0;\n  }\n  _checkValidJsonStatement(stmt) {\n    if (typeof stmt !== \"string\") {\n      return false;\n    }\n    const jsonFunctionRegex = /^\\s*(json(?:_[a-z]+){0,2})\\([^)]*\\)/i;\n    const tokenCaptureRegex = /^\\s*((?:([\"'`])(?:(?!\\2).|\\2{2})*\\2)|[\\s\\w]+|[()+,.;-])/i;\n    let currentIndex = 0;\n    let openingBrackets = 0;\n    let closingBrackets = 0;\n    let hasJsonFunction = false;\n    let hasInvalidToken = false;\n    while (currentIndex < stmt.length) {\n      const string = stmt.slice(currentIndex);\n      const functionMatches = jsonFunctionRegex.exec(string);\n      if (functionMatches) {\n        currentIndex += functionMatches[0].indexOf(\"(\");\n        hasJsonFunction = true;\n        continue;\n      }\n      const tokenMatches = tokenCaptureRegex.exec(string);\n      if (tokenMatches) {\n        const capturedToken = tokenMatches[1];\n        if (capturedToken === \"(\") {\n          openingBrackets++;\n        } else if (capturedToken === \")\") {\n          closingBrackets++;\n        } else if (capturedToken === \";\") {\n          hasInvalidToken = true;\n          break;\n        }\n        currentIndex += tokenMatches[0].length;\n        continue;\n      }\n      break;\n    }\n    hasInvalidToken |= openingBrackets !== closingBrackets;\n    if (hasJsonFunction && hasInvalidToken) {\n      throw new Error(`Invalid json statement: ${stmt}`);\n    }\n    return hasJsonFunction;\n  }\n  _toJSONValue(value) {\n    if (value instanceof Date) {\n      return value.toISOString();\n    }\n    if (Array.isArray(value) && value[0] instanceof Date) {\n      return value.map((val) => val.toISOString());\n    }\n    return value;\n  }\n  handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n    if (smth instanceof Utils.Json) {\n      return super.handleSequelizeMethod(smth, tableName, factory, options, prepend);\n    }\n    if (smth instanceof Utils.Cast && /timestamp/i.test(smth.type)) {\n      smth.type = \"datetime\";\n    }\n    return AbstractQueryGenerator.prototype.handleSequelizeMethod.call(this, smth, tableName, factory, options, prepend);\n  }\n  addColumnQuery(table, key, dataType) {\n    const attributes = {};\n    attributes[key] = dataType;\n    const fields = this.attributesToSQL(attributes, { context: \"addColumn\" });\n    const attribute = `${this.quoteIdentifier(key)} ${fields[key]}`;\n    const sql = `ALTER TABLE ${this.quoteTable(table)} ADD ${attribute};`;\n    return this.replaceBooleanDefaults(sql);\n  }\n  showTablesQuery() {\n    return \"SELECT name FROM `sqlite_master` WHERE type='table' and name!='sqlite_sequence';\";\n  }\n  updateQuery(tableName, attrValueHash, where, options, attributes) {\n    options = options || {};\n    _.defaults(options, this.options);\n    attrValueHash = Utils.removeNullValuesFromHash(attrValueHash, options.omitNull, options);\n    const modelAttributeMap = {};\n    const values = [];\n    const bind = [];\n    const bindParam = options.bindParam || this.bindParam(bind);\n    if (attributes) {\n      _.each(attributes, (attribute, key) => {\n        modelAttributeMap[key] = attribute;\n        if (attribute.field) {\n          modelAttributeMap[attribute.field] = attribute;\n        }\n      });\n    }\n    for (const key in attrValueHash) {\n      const value = attrValueHash[key];\n      if (value instanceof Utils.SequelizeMethod || options.bindParam === false) {\n        values.push(`${this.quoteIdentifier(key)}=${this.escape(value, modelAttributeMap && modelAttributeMap[key] || void 0, { context: \"UPDATE\" })}`);\n      } else {\n        values.push(`${this.quoteIdentifier(key)}=${this.format(value, modelAttributeMap && modelAttributeMap[key] || void 0, { context: \"UPDATE\" }, bindParam)}`);\n      }\n    }\n    let query;\n    const whereOptions = __spreadProps(__spreadValues({}, options), { bindParam });\n    if (options.limit) {\n      query = `UPDATE ${this.quoteTable(tableName)} SET ${values.join(\",\")} WHERE rowid IN (SELECT rowid FROM ${this.quoteTable(tableName)} ${this.whereQuery(where, whereOptions)} LIMIT ${this.escape(options.limit)})`;\n    } else {\n      query = `UPDATE ${this.quoteTable(tableName)} SET ${values.join(\",\")} ${this.whereQuery(where, whereOptions)}`;\n    }\n    return { query, bind };\n  }\n  truncateTableQuery(tableName, options = {}) {\n    return [\n      `DELETE FROM ${this.quoteTable(tableName)}`,\n      options.restartIdentity ? `; DELETE FROM ${this.quoteTable(\"sqlite_sequence\")} WHERE ${this.quoteIdentifier(\"name\")} = ${Utils.addTicks(Utils.removeTicks(this.quoteTable(tableName), \"`\"), \"'\")};` : \"\"\n    ].join(\"\");\n  }\n  deleteQuery(tableName, where, options = {}, model) {\n    _.defaults(options, this.options);\n    let whereClause = this.getWhereConditions(where, null, model, options);\n    if (whereClause) {\n      whereClause = `WHERE ${whereClause}`;\n    }\n    if (options.limit) {\n      whereClause = `WHERE rowid IN (SELECT rowid FROM ${this.quoteTable(tableName)} ${whereClause} LIMIT ${this.escape(options.limit)})`;\n    }\n    return `DELETE FROM ${this.quoteTable(tableName)} ${whereClause}`;\n  }\n  attributesToSQL(attributes) {\n    const result = {};\n    for (const name in attributes) {\n      const dataType = attributes[name];\n      const fieldName = dataType.field || name;\n      if (_.isObject(dataType)) {\n        let sql = dataType.type.toString();\n        if (Object.prototype.hasOwnProperty.call(dataType, \"allowNull\") && !dataType.allowNull) {\n          sql += \" NOT NULL\";\n        }\n        if (Utils.defaultValueSchemable(dataType.defaultValue)) {\n          sql += ` DEFAULT ${this.escape(dataType.defaultValue, dataType)}`;\n        }\n        if (dataType.unique === true) {\n          sql += \" UNIQUE\";\n        }\n        if (dataType.primaryKey) {\n          sql += \" PRIMARY KEY\";\n          if (dataType.autoIncrement) {\n            sql += \" AUTOINCREMENT\";\n          }\n        }\n        if (dataType.references) {\n          const referencesTable = this.quoteTable(dataType.references.model);\n          let referencesKey;\n          if (dataType.references.key) {\n            referencesKey = this.quoteIdentifier(dataType.references.key);\n          } else {\n            referencesKey = this.quoteIdentifier(\"id\");\n          }\n          sql += ` REFERENCES ${referencesTable} (${referencesKey})`;\n          if (dataType.onDelete) {\n            sql += ` ON DELETE ${dataType.onDelete.toUpperCase()}`;\n          }\n          if (dataType.onUpdate) {\n            sql += ` ON UPDATE ${dataType.onUpdate.toUpperCase()}`;\n          }\n        }\n        result[fieldName] = sql;\n      } else {\n        result[fieldName] = dataType;\n      }\n    }\n    return result;\n  }\n  showIndexesQuery(tableName) {\n    return `PRAGMA INDEX_LIST(${this.quoteTable(tableName)})`;\n  }\n  showConstraintsQuery(tableName, constraintName) {\n    let sql = `SELECT sql FROM sqlite_master WHERE tbl_name='${tableName}'`;\n    if (constraintName) {\n      sql += ` AND sql LIKE '%${constraintName}%'`;\n    }\n    return `${sql};`;\n  }\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    let indexName = indexNameOrAttributes;\n    if (typeof indexName !== \"string\") {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join(\"_\")}`);\n    }\n    return `DROP INDEX IF EXISTS ${this.quoteIdentifier(indexName)}`;\n  }\n  describeTableQuery(tableName, schema, schemaDelimiter) {\n    const table = {\n      _schema: schema,\n      _schemaDelimiter: schemaDelimiter,\n      tableName\n    };\n    return `PRAGMA TABLE_INFO(${this.quoteTable(this.addSchema(table))});`;\n  }\n  describeCreateTableQuery(tableName) {\n    return `SELECT sql FROM sqlite_master WHERE tbl_name='${tableName}';`;\n  }\n  removeColumnQuery(tableName, attributes) {\n    attributes = this.attributesToSQL(attributes);\n    let backupTableName;\n    if (typeof tableName === \"object\") {\n      backupTableName = {\n        tableName: `${tableName.tableName}_backup`,\n        schema: tableName.schema\n      };\n    } else {\n      backupTableName = `${tableName}_backup`;\n    }\n    const quotedTableName = this.quoteTable(tableName);\n    const quotedBackupTableName = this.quoteTable(backupTableName);\n    const attributeNames = Object.keys(attributes).map((attr) => this.quoteIdentifier(attr)).join(\", \");\n    return `${this.createTableQuery(backupTableName, attributes)}INSERT INTO ${quotedBackupTableName} SELECT ${attributeNames} FROM ${quotedTableName};DROP TABLE ${quotedTableName};${this.createTableQuery(tableName, attributes)}INSERT INTO ${quotedTableName} SELECT ${attributeNames} FROM ${quotedBackupTableName};DROP TABLE ${quotedBackupTableName};`;\n  }\n  _alterConstraintQuery(tableName, attributes, createTableSql) {\n    let backupTableName;\n    attributes = this.attributesToSQL(attributes);\n    if (typeof tableName === \"object\") {\n      backupTableName = {\n        tableName: `${tableName.tableName}_backup`,\n        schema: tableName.schema\n      };\n    } else {\n      backupTableName = `${tableName}_backup`;\n    }\n    const quotedTableName = this.quoteTable(tableName);\n    const quotedBackupTableName = this.quoteTable(backupTableName);\n    const attributeNames = Object.keys(attributes).map((attr) => this.quoteIdentifier(attr)).join(\", \");\n    return `${createTableSql.replace(`CREATE TABLE ${quotedTableName}`, `CREATE TABLE ${quotedBackupTableName}`).replace(`CREATE TABLE ${quotedTableName.replace(/`/g, '\"')}`, `CREATE TABLE ${quotedBackupTableName}`)}INSERT INTO ${quotedBackupTableName} SELECT ${attributeNames} FROM ${quotedTableName};DROP TABLE ${quotedTableName};ALTER TABLE ${quotedBackupTableName} RENAME TO ${quotedTableName};`;\n  }\n  renameColumnQuery(tableName, attrNameBefore, attrNameAfter, attributes) {\n    let backupTableName;\n    attributes = this.attributesToSQL(attributes);\n    if (typeof tableName === \"object\") {\n      backupTableName = {\n        tableName: `${tableName.tableName}_backup`,\n        schema: tableName.schema\n      };\n    } else {\n      backupTableName = `${tableName}_backup`;\n    }\n    const quotedTableName = this.quoteTable(tableName);\n    const quotedBackupTableName = this.quoteTable(backupTableName);\n    const attributeNamesImport = Object.keys(attributes).map((attr) => attrNameAfter === attr ? `${this.quoteIdentifier(attrNameBefore)} AS ${this.quoteIdentifier(attr)}` : this.quoteIdentifier(attr)).join(\", \");\n    const attributeNamesExport = Object.keys(attributes).map((attr) => this.quoteIdentifier(attr)).join(\", \");\n    return `${this.createTableQuery(backupTableName, attributes)}INSERT INTO ${quotedBackupTableName} SELECT ${attributeNamesImport} FROM ${quotedTableName};DROP TABLE ${quotedTableName};${this.createTableQuery(tableName, attributes)}INSERT INTO ${quotedTableName} SELECT ${attributeNamesExport} FROM ${quotedBackupTableName};DROP TABLE ${quotedBackupTableName};`;\n  }\n  startTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return `SAVEPOINT ${this.quoteIdentifier(transaction.name)};`;\n    }\n    return `BEGIN ${transaction.options.type} TRANSACTION;`;\n  }\n  setIsolationLevelQuery(value) {\n    switch (value) {\n      case Transaction.ISOLATION_LEVELS.REPEATABLE_READ:\n        return \"-- SQLite is not able to choose the isolation level REPEATABLE READ.\";\n      case Transaction.ISOLATION_LEVELS.READ_UNCOMMITTED:\n        return \"PRAGMA read_uncommitted = ON;\";\n      case Transaction.ISOLATION_LEVELS.READ_COMMITTED:\n        return \"PRAGMA read_uncommitted = OFF;\";\n      case Transaction.ISOLATION_LEVELS.SERIALIZABLE:\n        return \"-- SQLite's default isolation level is SERIALIZABLE. Nothing to do.\";\n      default:\n        throw new Error(`Unknown isolation level: ${value}`);\n    }\n  }\n  replaceBooleanDefaults(sql) {\n    return sql.replace(/DEFAULT '?false'?/g, \"DEFAULT 0\").replace(/DEFAULT '?true'?/g, \"DEFAULT 1\");\n  }\n  getForeignKeysQuery(tableName) {\n    return `PRAGMA foreign_key_list(${this.quoteTable(this.addSchema(tableName))})`;\n  }\n  quoteIdentifier(identifier, force) {\n    return Utils.addTicks(Utils.removeTicks(identifier, \"`\"), \"`\");\n  }\n  jsonPathExtractionQuery(column, path, isJson) {\n    const quotedColumn = this.isIdentifierQuoted(column) ? column : this.quoteIdentifier(column);\n    const pathStr = this.escape([\"$\"].concat(_.toPath(path)).join(\".\").replace(/\\.(\\d+)(?:(?=\\.)|$)/g, (__, digit) => `[${digit}]`));\n    return `json_extract(${quotedColumn},${pathStr})`;\n  }\n}\nmodule.exports = SQLiteQueryGenerator;\n//# sourceMappingURL=query-generator.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/dialects/sqlite/query-generator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1447,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/dialects/sqlite/query-generator.js",
    "static": true,
    "longname": "lib/dialects/sqlite/query-generator.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1448,
    "kind": "variable",
    "name": "__defProps",
    "memberof": "lib/dialects/sqlite/query-generator.js",
    "static": true,
    "longname": "lib/dialects/sqlite/query-generator.js~__defProps",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1449,
    "kind": "variable",
    "name": "__getOwnPropDescs",
    "memberof": "lib/dialects/sqlite/query-generator.js",
    "static": true,
    "longname": "lib/dialects/sqlite/query-generator.js~__getOwnPropDescs",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1450,
    "kind": "variable",
    "name": "__getOwnPropSymbols",
    "memberof": "lib/dialects/sqlite/query-generator.js",
    "static": true,
    "longname": "lib/dialects/sqlite/query-generator.js~__getOwnPropSymbols",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1451,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/dialects/sqlite/query-generator.js",
    "static": true,
    "longname": "lib/dialects/sqlite/query-generator.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1452,
    "kind": "variable",
    "name": "__propIsEnum",
    "memberof": "lib/dialects/sqlite/query-generator.js",
    "static": true,
    "longname": "lib/dialects/sqlite/query-generator.js~__propIsEnum",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1453,
    "kind": "function",
    "name": "__defNormalProp",
    "memberof": "lib/dialects/sqlite/query-generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/sqlite/query-generator.js~__defNormalProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1454,
    "kind": "function",
    "name": "__spreadValues",
    "memberof": "lib/dialects/sqlite/query-generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/sqlite/query-generator.js~__spreadValues",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1455,
    "kind": "function",
    "name": "__spreadProps",
    "memberof": "lib/dialects/sqlite/query-generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/sqlite/query-generator.js~__spreadProps",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1456,
    "kind": "variable",
    "name": "Utils",
    "memberof": "lib/dialects/sqlite/query-generator.js",
    "static": true,
    "longname": "lib/dialects/sqlite/query-generator.js~Utils",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1457,
    "kind": "variable",
    "name": "Transaction",
    "memberof": "lib/dialects/sqlite/query-generator.js",
    "static": true,
    "longname": "lib/dialects/sqlite/query-generator.js~Transaction",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1458,
    "kind": "variable",
    "name": "_",
    "memberof": "lib/dialects/sqlite/query-generator.js",
    "static": true,
    "longname": "lib/dialects/sqlite/query-generator.js~_",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1459,
    "kind": "variable",
    "name": "MySqlQueryGenerator",
    "memberof": "lib/dialects/sqlite/query-generator.js",
    "static": true,
    "longname": "lib/dialects/sqlite/query-generator.js~MySqlQueryGenerator",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1460,
    "kind": "variable",
    "name": "AbstractQueryGenerator",
    "memberof": "lib/dialects/sqlite/query-generator.js",
    "static": true,
    "longname": "lib/dialects/sqlite/query-generator.js~AbstractQueryGenerator",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1461,
    "kind": "class",
    "name": "SQLiteQueryGenerator",
    "memberof": "lib/dialects/sqlite/query-generator.js",
    "static": true,
    "longname": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/query-generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "interface": false,
    "extends": [
      "MySqlQueryGenerator"
    ],
    "ignore": true
  },
  {
    "__docId__": 1462,
    "kind": "method",
    "name": "createSchema",
    "memberof": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator#createSchema",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1463,
    "kind": "method",
    "name": "showSchemasQuery",
    "memberof": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator#showSchemasQuery",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1464,
    "kind": "method",
    "name": "versionQuery",
    "memberof": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator#versionQuery",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1465,
    "kind": "method",
    "name": "createTableQuery",
    "memberof": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator#createTableQuery",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributes",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1466,
    "kind": "method",
    "name": "booleanValue",
    "memberof": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator#booleanValue",
    "access": "public",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1467,
    "kind": "method",
    "name": "_checkValidJsonStatement",
    "memberof": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator#_checkValidJsonStatement",
    "access": "private",
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "stmt",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1468,
    "kind": "method",
    "name": "_toJSONValue",
    "memberof": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator#_toJSONValue",
    "access": "private",
    "description": null,
    "lineNumber": 125,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1469,
    "kind": "method",
    "name": "handleSequelizeMethod",
    "memberof": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator#handleSequelizeMethod",
    "access": "public",
    "description": null,
    "lineNumber": 134,
    "undocument": true,
    "params": [
      {
        "name": "smth",
        "types": [
          "*"
        ]
      },
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "factory",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      },
      {
        "name": "prepend",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1470,
    "kind": "method",
    "name": "addColumnQuery",
    "memberof": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator#addColumnQuery",
    "access": "public",
    "description": null,
    "lineNumber": 143,
    "undocument": true,
    "params": [
      {
        "name": "table",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "dataType",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1471,
    "kind": "method",
    "name": "showTablesQuery",
    "memberof": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator#showTablesQuery",
    "access": "public",
    "description": null,
    "lineNumber": 151,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1472,
    "kind": "method",
    "name": "updateQuery",
    "memberof": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator#updateQuery",
    "access": "public",
    "description": null,
    "lineNumber": 154,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attrValueHash",
        "types": [
          "*"
        ]
      },
      {
        "name": "where",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"query\": *, \"bind\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1473,
    "kind": "method",
    "name": "truncateTableQuery",
    "memberof": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator#truncateTableQuery",
    "access": "public",
    "description": null,
    "lineNumber": 187,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1474,
    "kind": "method",
    "name": "deleteQuery",
    "memberof": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator#deleteQuery",
    "access": "public",
    "description": null,
    "lineNumber": 193,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "where",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      },
      {
        "name": "model",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1475,
    "kind": "method",
    "name": "attributesToSQL",
    "memberof": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator#attributesToSQL",
    "access": "public",
    "description": null,
    "lineNumber": 204,
    "undocument": true,
    "params": [
      {
        "name": "attributes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1476,
    "kind": "method",
    "name": "showIndexesQuery",
    "memberof": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator#showIndexesQuery",
    "access": "public",
    "description": null,
    "lineNumber": 249,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1477,
    "kind": "method",
    "name": "showConstraintsQuery",
    "memberof": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator#showConstraintsQuery",
    "access": "public",
    "description": null,
    "lineNumber": 252,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "constraintName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1478,
    "kind": "method",
    "name": "removeIndexQuery",
    "memberof": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator#removeIndexQuery",
    "access": "public",
    "description": null,
    "lineNumber": 259,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "indexNameOrAttributes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1479,
    "kind": "method",
    "name": "describeTableQuery",
    "memberof": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator#describeTableQuery",
    "access": "public",
    "description": null,
    "lineNumber": 266,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "schema",
        "types": [
          "*"
        ]
      },
      {
        "name": "schemaDelimiter",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1480,
    "kind": "method",
    "name": "describeCreateTableQuery",
    "memberof": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator#describeCreateTableQuery",
    "access": "public",
    "description": null,
    "lineNumber": 274,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1481,
    "kind": "method",
    "name": "removeColumnQuery",
    "memberof": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator#removeColumnQuery",
    "access": "public",
    "description": null,
    "lineNumber": 277,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1482,
    "kind": "method",
    "name": "_alterConstraintQuery",
    "memberof": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator#_alterConstraintQuery",
    "access": "private",
    "description": null,
    "lineNumber": 293,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributes",
        "types": [
          "*"
        ]
      },
      {
        "name": "createTableSql",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 1483,
    "kind": "method",
    "name": "renameColumnQuery",
    "memberof": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator#renameColumnQuery",
    "access": "public",
    "description": null,
    "lineNumber": 309,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attrNameBefore",
        "types": [
          "*"
        ]
      },
      {
        "name": "attrNameAfter",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1484,
    "kind": "method",
    "name": "startTransactionQuery",
    "memberof": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator#startTransactionQuery",
    "access": "public",
    "description": null,
    "lineNumber": 326,
    "undocument": true,
    "params": [
      {
        "name": "transaction",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1485,
    "kind": "method",
    "name": "setIsolationLevelQuery",
    "memberof": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator#setIsolationLevelQuery",
    "access": "public",
    "description": null,
    "lineNumber": 332,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1486,
    "kind": "method",
    "name": "replaceBooleanDefaults",
    "memberof": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator#replaceBooleanDefaults",
    "access": "public",
    "description": null,
    "lineNumber": 346,
    "undocument": true,
    "params": [
      {
        "name": "sql",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1487,
    "kind": "method",
    "name": "getForeignKeysQuery",
    "memberof": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator#getForeignKeysQuery",
    "access": "public",
    "description": null,
    "lineNumber": 349,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1488,
    "kind": "method",
    "name": "quoteIdentifier",
    "memberof": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator#quoteIdentifier",
    "access": "public",
    "description": null,
    "lineNumber": 352,
    "undocument": true,
    "params": [
      {
        "name": "identifier",
        "types": [
          "*"
        ]
      },
      {
        "name": "force",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1489,
    "kind": "method",
    "name": "jsonPathExtractionQuery",
    "memberof": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/sqlite/query-generator.js~SQLiteQueryGenerator#jsonPathExtractionQuery",
    "access": "public",
    "description": null,
    "lineNumber": 355,
    "undocument": true,
    "params": [
      {
        "name": "column",
        "types": [
          "*"
        ]
      },
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "isJson",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1490,
    "kind": "file",
    "name": "lib/dialects/sqlite/query-interface.js",
    "content": "\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nconst sequelizeErrors = require(\"../../errors\");\nconst { QueryTypes } = require(\"../../query-types\");\nconst { QueryInterface } = require(\"../abstract/query-interface\");\nconst { cloneDeep } = require(\"../../utils\");\nconst _ = require(\"lodash\");\nclass SQLiteQueryInterface extends QueryInterface {\n  async removeColumn(tableName, attributeName, options) {\n    options = options || {};\n    const fields = await this.describeTable(tableName, options);\n    delete fields[attributeName];\n    const sql = this.queryGenerator.removeColumnQuery(tableName, fields);\n    const subQueries = sql.split(\";\").filter((q) => q !== \"\");\n    for (const subQuery of subQueries) {\n      await this.sequelize.query(`${subQuery};`, __spreadValues({ raw: true }, options));\n    }\n  }\n  async changeColumn(tableName, attributeName, dataTypeOrOptions, options) {\n    options = options || {};\n    const fields = await this.describeTable(tableName, options);\n    Object.assign(fields[attributeName], this.normalizeAttribute(dataTypeOrOptions));\n    const sql = this.queryGenerator.removeColumnQuery(tableName, fields);\n    const subQueries = sql.split(\";\").filter((q) => q !== \"\");\n    for (const subQuery of subQueries) {\n      await this.sequelize.query(`${subQuery};`, __spreadValues({ raw: true }, options));\n    }\n  }\n  async renameColumn(tableName, attrNameBefore, attrNameAfter, options) {\n    options = options || {};\n    const fields = await this.assertTableHasColumn(tableName, attrNameBefore, options);\n    fields[attrNameAfter] = __spreadValues({}, fields[attrNameBefore]);\n    delete fields[attrNameBefore];\n    const sql = this.queryGenerator.renameColumnQuery(tableName, attrNameBefore, attrNameAfter, fields);\n    const subQueries = sql.split(\";\").filter((q) => q !== \"\");\n    for (const subQuery of subQueries) {\n      await this.sequelize.query(`${subQuery};`, __spreadValues({ raw: true }, options));\n    }\n  }\n  async removeConstraint(tableName, constraintName, options) {\n    let createTableSql;\n    const constraints = await this.showConstraint(tableName, constraintName);\n    const constraint = constraints.find((constaint) => constaint.constraintName === constraintName);\n    if (!constraint) {\n      throw new sequelizeErrors.UnknownConstraintError({\n        message: `Constraint ${constraintName} on table ${tableName} does not exist`,\n        constraint: constraintName,\n        table: tableName\n      });\n    }\n    createTableSql = constraint.sql;\n    constraint.constraintName = this.queryGenerator.quoteIdentifier(constraint.constraintName);\n    let constraintSnippet = `, CONSTRAINT ${constraint.constraintName} ${constraint.constraintType} ${constraint.constraintCondition}`;\n    if (constraint.constraintType === \"FOREIGN KEY\") {\n      const referenceTableName = this.queryGenerator.quoteTable(constraint.referenceTableName);\n      constraint.referenceTableKeys = constraint.referenceTableKeys.map((columnName) => this.queryGenerator.quoteIdentifier(columnName));\n      const referenceTableKeys = constraint.referenceTableKeys.join(\", \");\n      constraintSnippet += ` REFERENCES ${referenceTableName} (${referenceTableKeys})`;\n      constraintSnippet += ` ON UPDATE ${constraint.updateAction}`;\n      constraintSnippet += ` ON DELETE ${constraint.deleteAction}`;\n    }\n    createTableSql = createTableSql.replace(constraintSnippet, \"\");\n    createTableSql += \";\";\n    const fields = await this.describeTable(tableName, options);\n    const sql = this.queryGenerator._alterConstraintQuery(tableName, fields, createTableSql);\n    const subQueries = sql.split(\";\").filter((q) => q !== \"\");\n    for (const subQuery of subQueries) {\n      await this.sequelize.query(`${subQuery};`, __spreadValues({ raw: true }, options));\n    }\n  }\n  async addConstraint(tableName, options) {\n    if (!options.fields) {\n      throw new Error(\"Fields must be specified through options.fields\");\n    }\n    if (!options.type) {\n      throw new Error(\"Constraint type must be specified through options.type\");\n    }\n    options = cloneDeep(options);\n    const constraintSnippet = this.queryGenerator.getConstraintSnippet(tableName, options);\n    const describeCreateTableSql = this.queryGenerator.describeCreateTableQuery(tableName);\n    const constraints = await this.sequelize.query(describeCreateTableSql, __spreadProps(__spreadValues({}, options), { type: QueryTypes.SELECT, raw: true }));\n    let sql = constraints[0].sql;\n    const index = sql.length - 1;\n    const createTableSql = `${sql.slice(0, Math.max(0, index))}, ${constraintSnippet})${sql.slice(index + 1)};`;\n    const fields = await this.describeTable(tableName, options);\n    sql = this.queryGenerator._alterConstraintQuery(tableName, fields, createTableSql);\n    const subQueries = sql.split(\";\").filter((q) => q !== \"\");\n    for (const subQuery of subQueries) {\n      await this.sequelize.query(`${subQuery};`, __spreadValues({ raw: true }, options));\n    }\n  }\n  async getForeignKeyReferencesForTable(tableName, options) {\n    const database = this.sequelize.config.database;\n    const query = this.queryGenerator.getForeignKeysQuery(tableName, database);\n    const result = await this.sequelize.query(query, options);\n    return result.map((row) => ({\n      tableName,\n      columnName: row.from,\n      referencedTableName: row.table,\n      referencedColumnName: row.to,\n      tableCatalog: database,\n      referencedTableCatalog: database\n    }));\n  }\n  async dropAllTables(options) {\n    options = options || {};\n    const skip = options.skip || [];\n    const tableNames = await this.showAllTables(options);\n    await this.sequelize.query(\"PRAGMA foreign_keys = OFF\", options);\n    await this._dropAllTables(tableNames, skip, options);\n    await this.sequelize.query(\"PRAGMA foreign_keys = ON\", options);\n  }\n  async describeTable(tableName, options) {\n    let schema = null;\n    let schemaDelimiter = null;\n    if (typeof options === \"string\") {\n      schema = options;\n    } else if (typeof options === \"object\" && options !== null) {\n      schema = options.schema || null;\n      schemaDelimiter = options.schemaDelimiter || null;\n    }\n    if (typeof tableName === \"object\" && tableName !== null) {\n      schema = tableName.schema;\n      tableName = tableName.tableName;\n    }\n    const sql = this.queryGenerator.describeTableQuery(tableName, schema, schemaDelimiter);\n    options = __spreadProps(__spreadValues({}, options), { type: QueryTypes.DESCRIBE });\n    const sqlIndexes = this.queryGenerator.showIndexesQuery(tableName);\n    try {\n      const data = await this.sequelize.query(sql, options);\n      if (_.isEmpty(data)) {\n        throw new Error(`No description found for \"${tableName}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n      const indexes = await this.sequelize.query(sqlIndexes, options);\n      for (const prop in data) {\n        data[prop].unique = false;\n      }\n      for (const index of indexes) {\n        for (const field of index.fields) {\n          if (index.unique !== void 0) {\n            data[field.attribute].unique = index.unique;\n          }\n        }\n      }\n      const foreignKeys = await this.getForeignKeyReferencesForTable(tableName, options);\n      for (const foreignKey of foreignKeys) {\n        data[foreignKey.columnName].references = {\n          model: foreignKey.referencedTableName,\n          key: foreignKey.referencedColumnName\n        };\n      }\n      return data;\n    } catch (error) {\n      if (error.original && error.original.code === \"ER_NO_SUCH_TABLE\") {\n        throw new Error(`No description found for \"${tableName}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n      throw error;\n    }\n  }\n}\nexports.SQLiteQueryInterface = SQLiteQueryInterface;\n//# sourceMappingURL=query-interface.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/dialects/sqlite/query-interface.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1491,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/dialects/sqlite/query-interface.js",
    "static": true,
    "longname": "lib/dialects/sqlite/query-interface.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1492,
    "kind": "variable",
    "name": "__defProps",
    "memberof": "lib/dialects/sqlite/query-interface.js",
    "static": true,
    "longname": "lib/dialects/sqlite/query-interface.js~__defProps",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1493,
    "kind": "variable",
    "name": "__getOwnPropDescs",
    "memberof": "lib/dialects/sqlite/query-interface.js",
    "static": true,
    "longname": "lib/dialects/sqlite/query-interface.js~__getOwnPropDescs",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1494,
    "kind": "variable",
    "name": "__getOwnPropSymbols",
    "memberof": "lib/dialects/sqlite/query-interface.js",
    "static": true,
    "longname": "lib/dialects/sqlite/query-interface.js~__getOwnPropSymbols",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1495,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/dialects/sqlite/query-interface.js",
    "static": true,
    "longname": "lib/dialects/sqlite/query-interface.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1496,
    "kind": "variable",
    "name": "__propIsEnum",
    "memberof": "lib/dialects/sqlite/query-interface.js",
    "static": true,
    "longname": "lib/dialects/sqlite/query-interface.js~__propIsEnum",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1497,
    "kind": "function",
    "name": "__defNormalProp",
    "memberof": "lib/dialects/sqlite/query-interface.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/sqlite/query-interface.js~__defNormalProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1498,
    "kind": "function",
    "name": "__spreadValues",
    "memberof": "lib/dialects/sqlite/query-interface.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/sqlite/query-interface.js~__spreadValues",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1499,
    "kind": "function",
    "name": "__spreadProps",
    "memberof": "lib/dialects/sqlite/query-interface.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/sqlite/query-interface.js~__spreadProps",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1500,
    "kind": "variable",
    "name": "sequelizeErrors",
    "memberof": "lib/dialects/sqlite/query-interface.js",
    "static": true,
    "longname": "lib/dialects/sqlite/query-interface.js~sequelizeErrors",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1501,
    "kind": "variable",
    "name": "QueryTypes",
    "memberof": "lib/dialects/sqlite/query-interface.js",
    "static": true,
    "longname": "lib/dialects/sqlite/query-interface.js~QueryTypes",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1502,
    "kind": "variable",
    "name": "QueryInterface",
    "memberof": "lib/dialects/sqlite/query-interface.js",
    "static": true,
    "longname": "lib/dialects/sqlite/query-interface.js~QueryInterface",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1503,
    "kind": "variable",
    "name": "cloneDeep",
    "memberof": "lib/dialects/sqlite/query-interface.js",
    "static": true,
    "longname": "lib/dialects/sqlite/query-interface.js~cloneDeep",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1504,
    "kind": "variable",
    "name": "_",
    "memberof": "lib/dialects/sqlite/query-interface.js",
    "static": true,
    "longname": "lib/dialects/sqlite/query-interface.js~_",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1505,
    "kind": "class",
    "name": "SQLiteQueryInterface",
    "memberof": "lib/dialects/sqlite/query-interface.js",
    "static": true,
    "longname": "lib/dialects/sqlite/query-interface.js~SQLiteQueryInterface",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/query-interface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "interface": false,
    "extends": [
      "QueryInterface"
    ],
    "ignore": true
  },
  {
    "__docId__": 1506,
    "kind": "method",
    "name": "removeColumn",
    "memberof": "lib/dialects/sqlite/query-interface.js~SQLiteQueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/sqlite/query-interface.js~SQLiteQueryInterface#removeColumn",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributeName",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 1507,
    "kind": "method",
    "name": "changeColumn",
    "memberof": "lib/dialects/sqlite/query-interface.js~SQLiteQueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/sqlite/query-interface.js~SQLiteQueryInterface#changeColumn",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributeName",
        "types": [
          "*"
        ]
      },
      {
        "name": "dataTypeOrOptions",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 1508,
    "kind": "method",
    "name": "renameColumn",
    "memberof": "lib/dialects/sqlite/query-interface.js~SQLiteQueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/sqlite/query-interface.js~SQLiteQueryInterface#renameColumn",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "attrNameBefore",
        "types": [
          "*"
        ]
      },
      {
        "name": "attrNameAfter",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 1509,
    "kind": "method",
    "name": "removeConstraint",
    "memberof": "lib/dialects/sqlite/query-interface.js~SQLiteQueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/sqlite/query-interface.js~SQLiteQueryInterface#removeConstraint",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "constraintName",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 1510,
    "kind": "method",
    "name": "addConstraint",
    "memberof": "lib/dialects/sqlite/query-interface.js~SQLiteQueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/sqlite/query-interface.js~SQLiteQueryInterface#addConstraint",
    "access": "public",
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 1511,
    "kind": "method",
    "name": "getForeignKeyReferencesForTable",
    "memberof": "lib/dialects/sqlite/query-interface.js~SQLiteQueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/sqlite/query-interface.js~SQLiteQueryInterface#getForeignKeyReferencesForTable",
    "access": "public",
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1512,
    "kind": "method",
    "name": "dropAllTables",
    "memberof": "lib/dialects/sqlite/query-interface.js~SQLiteQueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/sqlite/query-interface.js~SQLiteQueryInterface#dropAllTables",
    "access": "public",
    "description": null,
    "lineNumber": 123,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 1513,
    "kind": "method",
    "name": "describeTable",
    "memberof": "lib/dialects/sqlite/query-interface.js~SQLiteQueryInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/sqlite/query-interface.js~SQLiteQueryInterface#describeTable",
    "access": "public",
    "description": null,
    "lineNumber": 131,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1514,
    "kind": "file",
    "name": "lib/dialects/sqlite/query.js",
    "content": "\"use strict\";\nconst _ = require(\"lodash\");\nconst Utils = require(\"../../utils\");\nconst AbstractQuery = require(\"../abstract/query\");\nconst { QueryTypes } = require(\"../../query-types\");\nconst sequelizeErrors = require(\"../../errors\");\nconst parserStore = require(\"../parserStore\")(\"sqlite\");\nconst { logger } = require(\"../../utils/logger\");\nconst debug = logger.debugContext(\"sql:sqlite\");\nclass Query extends AbstractQuery {\n  getInsertIdField() {\n    return \"lastID\";\n  }\n  static formatBindParameters(sql, values, dialect) {\n    let bindParam;\n    if (Array.isArray(values)) {\n      bindParam = {};\n      for (const [i, v] of values.entries()) {\n        bindParam[`$${i + 1}`] = v;\n      }\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, { skipValueReplace: true })[0];\n    } else {\n      bindParam = {};\n      if (typeof values === \"object\") {\n        for (const k of Object.keys(values)) {\n          bindParam[`$${k}`] = values[k];\n        }\n      }\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, { skipValueReplace: true })[0];\n    }\n    return [sql, bindParam];\n  }\n  _collectModels(include, prefix) {\n    const ret = {};\n    if (include) {\n      for (const _include of include) {\n        let key;\n        if (!prefix) {\n          key = _include.as;\n        } else {\n          key = `${prefix}.${_include.as}`;\n        }\n        ret[key] = _include.model;\n        if (_include.include) {\n          _.merge(ret, this._collectModels(_include.include, key));\n        }\n      }\n    }\n    return ret;\n  }\n  _handleQueryResponse(metaData, columnTypes, err, results, errStack) {\n    if (err) {\n      err.sql = this.sql;\n      throw this.formatError(err, errStack);\n    }\n    let result = this.instance;\n    if (this.isInsertQuery(results, metaData) || this.isUpsertQuery()) {\n      this.handleInsertQuery(results, metaData);\n      if (!this.instance) {\n        if (metaData.constructor.name === \"Statement\" && this.model && this.model.autoIncrementAttribute && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute && this.model.rawAttributes[this.model.primaryKeyAttribute]) {\n          const startId = metaData[this.getInsertIdField()] - metaData.changes + 1;\n          result = [];\n          for (let i = startId; i < startId + metaData.changes; i++) {\n            result.push({ [this.model.rawAttributes[this.model.primaryKeyAttribute].field]: i });\n          }\n        } else {\n          result = metaData[this.getInsertIdField()];\n        }\n      }\n    }\n    if (this.isShowTablesQuery()) {\n      return results.map((row) => row.name);\n    }\n    if (this.isShowConstraintsQuery()) {\n      result = results;\n      if (results && results[0] && results[0].sql) {\n        result = this.parseConstraintsFromSql(results[0].sql);\n      }\n      return result;\n    }\n    if (this.isSelectQuery()) {\n      if (this.options.raw) {\n        return this.handleSelectQuery(results);\n      }\n      const prefixes = this._collectModels(this.options.include);\n      results = results.map((result2) => {\n        return _.mapValues(result2, (value, name) => {\n          let model;\n          if (name.includes(\".\")) {\n            const lastind = name.lastIndexOf(\".\");\n            model = prefixes[name.slice(0, Math.max(0, lastind))];\n            name = name.slice(lastind + 1);\n          } else {\n            model = this.options.model;\n          }\n          const tableName = model.getTableName().toString().replace(/`/g, \"\");\n          const tableTypes = columnTypes[tableName] || {};\n          if (tableTypes && !(name in tableTypes)) {\n            _.forOwn(model.rawAttributes, (attribute, key) => {\n              if (name === key && attribute.field) {\n                name = attribute.field;\n                return false;\n              }\n            });\n          }\n          return Object.prototype.hasOwnProperty.call(tableTypes, name) ? this.applyParsers(tableTypes[name], value) : value;\n        });\n      });\n      return this.handleSelectQuery(results);\n    }\n    if (this.isShowOrDescribeQuery()) {\n      return results;\n    }\n    if (this.sql.includes(\"PRAGMA INDEX_LIST\")) {\n      return this.handleShowIndexesQuery(results);\n    }\n    if (this.sql.includes(\"PRAGMA INDEX_INFO\")) {\n      return results;\n    }\n    if (this.sql.includes(\"PRAGMA TABLE_INFO\")) {\n      result = {};\n      let defaultValue;\n      for (const _result of results) {\n        if (_result.dflt_value === null) {\n          defaultValue = void 0;\n        } else if (_result.dflt_value === \"NULL\") {\n          defaultValue = null;\n        } else {\n          defaultValue = _result.dflt_value;\n        }\n        result[_result.name] = {\n          type: _result.type,\n          allowNull: _result.notnull === 0,\n          defaultValue,\n          primaryKey: _result.pk !== 0\n        };\n        if (result[_result.name].type === \"TINYINT(1)\") {\n          result[_result.name].defaultValue = { 0: false, 1: true }[result[_result.name].defaultValue];\n        }\n        if (typeof result[_result.name].defaultValue === \"string\") {\n          result[_result.name].defaultValue = result[_result.name].defaultValue.replace(/'/g, \"\");\n        }\n      }\n      return result;\n    }\n    if (this.sql.includes(\"PRAGMA foreign_keys;\")) {\n      return results[0];\n    }\n    if (this.sql.includes(\"PRAGMA foreign_keys\")) {\n      return results;\n    }\n    if (this.sql.includes(\"PRAGMA foreign_key_list\")) {\n      return results;\n    }\n    if ([QueryTypes.BULKUPDATE, QueryTypes.BULKDELETE].includes(this.options.type)) {\n      return metaData.changes;\n    }\n    if (this.options.type === QueryTypes.VERSION) {\n      return results[0].version;\n    }\n    if (this.options.type === QueryTypes.RAW) {\n      return [results, metaData];\n    }\n    if (this.isUpsertQuery()) {\n      return [result, null];\n    }\n    if (this.isUpdateQuery() || this.isInsertQuery()) {\n      return [result, metaData.changes];\n    }\n    return result;\n  }\n  async run(sql, parameters) {\n    const conn = this.connection;\n    this.sql = sql;\n    const method = this.getDatabaseMethod();\n    const complete = this._logQuery(sql, debug, parameters);\n    return new Promise((resolve, reject) => {\n      conn.serialize(async () => {\n        const columnTypes = {};\n        const errForStack = new Error();\n        const executeSql = () => {\n          if (sql.startsWith(\"-- \")) {\n            return resolve();\n          }\n          const query = this;\n          function afterExecute(executionError, results) {\n            try {\n              complete();\n              resolve(query._handleQueryResponse(this, columnTypes, executionError, results, errForStack.stack));\n              return;\n            } catch (error) {\n              reject(error);\n            }\n          }\n          if (!parameters) {\n            parameters = [];\n          }\n          conn[method](sql, parameters, afterExecute);\n          return null;\n        };\n        if (this.getDatabaseMethod() === \"all\") {\n          let tableNames = [];\n          if (this.options && this.options.tableNames) {\n            tableNames = this.options.tableNames;\n          } else if (/from `(.*?)`/i.test(this.sql)) {\n            tableNames.push(/from `(.*?)`/i.exec(this.sql)[1]);\n          }\n          tableNames = tableNames.filter((tableName) => !(tableName in columnTypes) && tableName !== \"sqlite_master\");\n          if (tableNames.length === 0) {\n            return executeSql();\n          }\n          await Promise.all(tableNames.map((tableName) => new Promise((resolve2) => {\n            tableName = tableName.replace(/`/g, \"\");\n            columnTypes[tableName] = {};\n            conn.all(`PRAGMA table_info(\\`${tableName}\\`)`, (err, results) => {\n              if (!err) {\n                for (const result of results) {\n                  columnTypes[tableName][result.name] = result.type;\n                }\n              }\n              resolve2();\n            });\n          })));\n        }\n        return executeSql();\n      });\n    });\n  }\n  parseConstraintsFromSql(sql) {\n    let constraints = sql.split(\"CONSTRAINT \");\n    let referenceTableName;\n    let referenceTableKeys;\n    let updateAction;\n    let deleteAction;\n    constraints.splice(0, 1);\n    constraints = constraints.map((constraintSql) => {\n      if (constraintSql.includes(\"REFERENCES\")) {\n        updateAction = constraintSql.match(/ON UPDATE (CASCADE|SET NULL|RESTRICT|NO ACTION|SET DEFAULT)/);\n        deleteAction = constraintSql.match(/ON DELETE (CASCADE|SET NULL|RESTRICT|NO ACTION|SET DEFAULT)/);\n        if (updateAction) {\n          updateAction = updateAction[1];\n        }\n        if (deleteAction) {\n          deleteAction = deleteAction[1];\n        }\n        const referencesRegex = /REFERENCES.+\\((?:[^()]+|\\((?:[^()]+|\\([^()]*\\))*\\))*\\)/;\n        const referenceConditions = constraintSql.match(referencesRegex)[0].split(\" \");\n        referenceTableName = Utils.removeTicks(referenceConditions[1]);\n        let columnNames = referenceConditions[2];\n        columnNames = columnNames.replace(/\\(|\\)/g, \"\").split(\", \");\n        referenceTableKeys = columnNames.map((column) => Utils.removeTicks(column));\n      }\n      const constraintCondition = constraintSql.match(/\\((?:[^()]+|\\((?:[^()]+|\\([^()]*\\))*\\))*\\)/)[0];\n      constraintSql = constraintSql.replace(/\\(.+\\)/, \"\");\n      const constraint = constraintSql.split(\" \");\n      if ([\"PRIMARY\", \"FOREIGN\"].includes(constraint[1])) {\n        constraint[1] += \" KEY\";\n      }\n      return {\n        constraintName: Utils.removeTicks(constraint[0]),\n        constraintType: constraint[1],\n        updateAction,\n        deleteAction,\n        sql: sql.replace(/\"/g, \"`\"),\n        constraintCondition,\n        referenceTableName,\n        referenceTableKeys\n      };\n    });\n    return constraints;\n  }\n  applyParsers(type, value) {\n    if (type.includes(\"(\")) {\n      type = type.slice(0, Math.max(0, type.indexOf(\"(\")));\n    }\n    type = type.replace(\"UNSIGNED\", \"\").replace(\"ZEROFILL\", \"\");\n    type = type.trim().toUpperCase();\n    const parse = parserStore.get(type);\n    if (value !== null && parse) {\n      return parse(value, { timezone: this.sequelize.options.timezone });\n    }\n    return value;\n  }\n  formatError(err, errStack) {\n    switch (err.code) {\n      case \"SQLITE_CONSTRAINT_UNIQUE\":\n      case \"SQLITE_CONSTRAINT_PRIMARYKEY\":\n      case \"SQLITE_CONSTRAINT_TRIGGER\":\n      case \"SQLITE_CONSTRAINT_FOREIGNKEY\":\n      case \"SQLITE_CONSTRAINT\": {\n        if (err.message.includes(\"FOREIGN KEY constraint failed\")) {\n          return new sequelizeErrors.ForeignKeyConstraintError({\n            parent: err,\n            stack: errStack\n          });\n        }\n        let fields = [];\n        let match = err.message.match(/columns (.*?) are/);\n        if (match !== null && match.length >= 2) {\n          fields = match[1].split(\", \");\n        } else {\n          match = err.message.match(/UNIQUE constraint failed: (.*)/);\n          if (match !== null && match.length >= 2) {\n            fields = match[1].split(\", \").map((columnWithTable) => columnWithTable.split(\".\")[1]);\n          }\n        }\n        const errors = [];\n        let message = \"Validation error\";\n        for (const field of fields) {\n          errors.push(new sequelizeErrors.ValidationErrorItem(this.getUniqueConstraintErrorMessage(field), \"unique violation\", field, this.instance && this.instance[field], this.instance, \"not_unique\"));\n        }\n        if (this.model) {\n          _.forOwn(this.model.uniqueKeys, (constraint) => {\n            if (_.isEqual(constraint.fields, fields) && Boolean(constraint.msg)) {\n              message = constraint.msg;\n              return false;\n            }\n          });\n        }\n        return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields, stack: errStack });\n      }\n      case \"SQLITE_BUSY\":\n        return new sequelizeErrors.TimeoutError(err, { stack: errStack });\n      default:\n        return new sequelizeErrors.DatabaseError(err, { stack: errStack });\n    }\n  }\n  async handleShowIndexesQuery(data) {\n    return Promise.all(data.reverse().map(async (item) => {\n      item.fields = [];\n      item.primary = false;\n      item.unique = Boolean(item.unique);\n      item.constraintName = item.name;\n      const columns = await this.run(`PRAGMA INDEX_INFO(\\`${item.name}\\`)`);\n      for (const column of columns) {\n        item.fields[column.seqno] = {\n          attribute: column.name,\n          length: void 0,\n          order: void 0\n        };\n      }\n      return item;\n    }));\n  }\n  getDatabaseMethod() {\n    if (this.isInsertQuery() || this.isUpdateQuery() || this.isUpsertQuery() || this.isBulkUpdateQuery() || this.sql.toLowerCase().includes(\"CREATE TEMPORARY TABLE\".toLowerCase()) || this.options.type === QueryTypes.BULKDELETE) {\n      return \"run\";\n    }\n    return \"all\";\n  }\n}\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n//# sourceMappingURL=query.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/dialects/sqlite/query.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1515,
    "kind": "variable",
    "name": "_",
    "memberof": "lib/dialects/sqlite/query.js",
    "static": true,
    "longname": "lib/dialects/sqlite/query.js~_",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1516,
    "kind": "variable",
    "name": "Utils",
    "memberof": "lib/dialects/sqlite/query.js",
    "static": true,
    "longname": "lib/dialects/sqlite/query.js~Utils",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1517,
    "kind": "variable",
    "name": "AbstractQuery",
    "memberof": "lib/dialects/sqlite/query.js",
    "static": true,
    "longname": "lib/dialects/sqlite/query.js~AbstractQuery",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1518,
    "kind": "variable",
    "name": "QueryTypes",
    "memberof": "lib/dialects/sqlite/query.js",
    "static": true,
    "longname": "lib/dialects/sqlite/query.js~QueryTypes",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1519,
    "kind": "variable",
    "name": "sequelizeErrors",
    "memberof": "lib/dialects/sqlite/query.js",
    "static": true,
    "longname": "lib/dialects/sqlite/query.js~sequelizeErrors",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1520,
    "kind": "variable",
    "name": "parserStore",
    "memberof": "lib/dialects/sqlite/query.js",
    "static": true,
    "longname": "lib/dialects/sqlite/query.js~parserStore",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1521,
    "kind": "variable",
    "name": "logger",
    "memberof": "lib/dialects/sqlite/query.js",
    "static": true,
    "longname": "lib/dialects/sqlite/query.js~logger",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1522,
    "kind": "variable",
    "name": "debug",
    "memberof": "lib/dialects/sqlite/query.js",
    "static": true,
    "longname": "lib/dialects/sqlite/query.js~debug",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1523,
    "kind": "class",
    "name": "Query",
    "memberof": "lib/dialects/sqlite/query.js",
    "static": true,
    "longname": "lib/dialects/sqlite/query.js~Query",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/dialects/sqlite/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "interface": false,
    "extends": [
      "AbstractQuery"
    ],
    "ignore": true
  },
  {
    "__docId__": 1524,
    "kind": "method",
    "name": "getInsertIdField",
    "memberof": "lib/dialects/sqlite/query.js~Query",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/sqlite/query.js~Query#getInsertIdField",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1525,
    "kind": "method",
    "name": "formatBindParameters",
    "memberof": "lib/dialects/sqlite/query.js~Query",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dialects/sqlite/query.js~Query.formatBindParameters",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "sql",
        "types": [
          "*"
        ]
      },
      {
        "name": "values",
        "types": [
          "*"
        ]
      },
      {
        "name": "dialect",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1526,
    "kind": "method",
    "name": "_collectModels",
    "memberof": "lib/dialects/sqlite/query.js~Query",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/sqlite/query.js~Query#_collectModels",
    "access": "private",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "include",
        "types": [
          "*"
        ]
      },
      {
        "name": "prefix",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1527,
    "kind": "method",
    "name": "_handleQueryResponse",
    "memberof": "lib/dialects/sqlite/query.js~Query",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/sqlite/query.js~Query#_handleQueryResponse",
    "access": "private",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "metaData",
        "types": [
          "*"
        ]
      },
      {
        "name": "columnTypes",
        "types": [
          "*"
        ]
      },
      {
        "name": "err",
        "types": [
          "*"
        ]
      },
      {
        "name": "results",
        "types": [
          "*"
        ]
      },
      {
        "name": "errStack",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1528,
    "kind": "method",
    "name": "run",
    "memberof": "lib/dialects/sqlite/query.js~Query",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/sqlite/query.js~Query#run",
    "access": "public",
    "description": null,
    "lineNumber": 172,
    "undocument": true,
    "params": [
      {
        "name": "sql",
        "types": [
          "*"
        ]
      },
      {
        "name": "parameters",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1529,
    "kind": "member",
    "name": "sql",
    "memberof": "lib/dialects/sqlite/query.js~Query",
    "static": false,
    "longname": "lib/dialects/sqlite/query.js~Query#sql",
    "access": "public",
    "description": null,
    "lineNumber": 174,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1530,
    "kind": "method",
    "name": "parseConstraintsFromSql",
    "memberof": "lib/dialects/sqlite/query.js~Query",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/sqlite/query.js~Query#parseConstraintsFromSql",
    "access": "public",
    "description": null,
    "lineNumber": 229,
    "undocument": true,
    "params": [
      {
        "name": "sql",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1531,
    "kind": "method",
    "name": "applyParsers",
    "memberof": "lib/dialects/sqlite/query.js~Query",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/sqlite/query.js~Query#applyParsers",
    "access": "public",
    "description": null,
    "lineNumber": 272,
    "undocument": true,
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1532,
    "kind": "method",
    "name": "formatError",
    "memberof": "lib/dialects/sqlite/query.js~Query",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/sqlite/query.js~Query#formatError",
    "access": "public",
    "description": null,
    "lineNumber": 284,
    "undocument": true,
    "params": [
      {
        "name": "err",
        "types": [
          "*"
        ]
      },
      {
        "name": "errStack",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1533,
    "kind": "method",
    "name": "handleShowIndexesQuery",
    "memberof": "lib/dialects/sqlite/query.js~Query",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/dialects/sqlite/query.js~Query#handleShowIndexesQuery",
    "access": "public",
    "description": null,
    "lineNumber": 328,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1534,
    "kind": "method",
    "name": "getDatabaseMethod",
    "memberof": "lib/dialects/sqlite/query.js~Query",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dialects/sqlite/query.js~Query#getDatabaseMethod",
    "access": "public",
    "description": null,
    "lineNumber": 345,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1535,
    "kind": "file",
    "name": "lib/errors/aggregate-error.js",
    "content": "var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __markAsModule = (target) => __defProp(target, \"__esModule\", { value: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __reExport = (target, module2, copyDefault, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2))\n      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== \"default\"))\n        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });\n  }\n  return target;\n};\nvar __toESM = (module2, isNodeMode) => {\n  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);\n};\nvar __toCommonJS = /* @__PURE__ */ ((cache) => {\n  return (module2, temp) => {\n    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);\n  };\n})(typeof WeakMap !== \"undefined\" ? /* @__PURE__ */ new WeakMap() : 0);\nvar aggregate_error_exports = {};\n__export(aggregate_error_exports, {\n  default: () => aggregate_error_default\n});\nvar import_base_error = __toESM(require(\"./base-error\"));\nclass AggregateError extends import_base_error.default {\n  errors;\n  constructor(errors) {\n    super();\n    this.errors = errors;\n    this.name = \"AggregateError\";\n  }\n  toString() {\n    const message = `AggregateError of:\n${this.errors.map((error) => error === this ? \"[Circular AggregateError]\" : error instanceof AggregateError ? String(error).replace(/\\n$/, \"\").replace(/^/gm, \"  \") : String(error).replace(/^/gm, \"    \").slice(2)).join(\"\\n\")}\n`;\n    return message;\n  }\n}\nvar aggregate_error_default = AggregateError;\nmodule.exports = __toCommonJS(aggregate_error_exports);\n//# sourceMappingURL=aggregate-error.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/errors/aggregate-error.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1536,
    "kind": "variable",
    "name": "__create",
    "memberof": "lib/errors/aggregate-error.js",
    "static": true,
    "longname": "lib/errors/aggregate-error.js~__create",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/aggregate-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1537,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/errors/aggregate-error.js",
    "static": true,
    "longname": "lib/errors/aggregate-error.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/aggregate-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1538,
    "kind": "variable",
    "name": "__getOwnPropDesc",
    "memberof": "lib/errors/aggregate-error.js",
    "static": true,
    "longname": "lib/errors/aggregate-error.js~__getOwnPropDesc",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/aggregate-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1539,
    "kind": "variable",
    "name": "__getOwnPropNames",
    "memberof": "lib/errors/aggregate-error.js",
    "static": true,
    "longname": "lib/errors/aggregate-error.js~__getOwnPropNames",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/aggregate-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1540,
    "kind": "variable",
    "name": "__getProtoOf",
    "memberof": "lib/errors/aggregate-error.js",
    "static": true,
    "longname": "lib/errors/aggregate-error.js~__getProtoOf",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/aggregate-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1541,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/errors/aggregate-error.js",
    "static": true,
    "longname": "lib/errors/aggregate-error.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/aggregate-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1542,
    "kind": "function",
    "name": "__markAsModule",
    "memberof": "lib/errors/aggregate-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/aggregate-error.js~__markAsModule",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/aggregate-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1543,
    "kind": "function",
    "name": "__export",
    "memberof": "lib/errors/aggregate-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/aggregate-error.js~__export",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/aggregate-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "all",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1544,
    "kind": "function",
    "name": "__reExport",
    "memberof": "lib/errors/aggregate-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/aggregate-error.js~__reExport",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/aggregate-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "copyDefault",
        "types": [
          "*"
        ]
      },
      {
        "name": "desc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1545,
    "kind": "function",
    "name": "__toESM",
    "memberof": "lib/errors/aggregate-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/aggregate-error.js~__toESM",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/aggregate-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "isNodeMode",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1546,
    "kind": "variable",
    "name": "__toCommonJS",
    "memberof": "lib/errors/aggregate-error.js",
    "static": true,
    "longname": "lib/errors/aggregate-error.js~__toCommonJS",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/aggregate-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1547,
    "kind": "variable",
    "name": "aggregate_error_exports",
    "memberof": "lib/errors/aggregate-error.js",
    "static": true,
    "longname": "lib/errors/aggregate-error.js~aggregate_error_exports",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/aggregate-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1548,
    "kind": "variable",
    "name": "import_base_error",
    "memberof": "lib/errors/aggregate-error.js",
    "static": true,
    "longname": "lib/errors/aggregate-error.js~import_base_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/aggregate-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1549,
    "kind": "class",
    "name": "AggregateError",
    "memberof": "lib/errors/aggregate-error.js",
    "static": true,
    "longname": "lib/errors/aggregate-error.js~AggregateError",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/aggregate-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "interface": false,
    "extends": [
      "import_base_error~import_base_error.default"
    ],
    "ignore": true
  },
  {
    "__docId__": 1550,
    "kind": "member",
    "name": "errors",
    "memberof": "lib/errors/aggregate-error.js~AggregateError",
    "static": false,
    "longname": "lib/errors/aggregate-error.js~AggregateError#errors",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1551,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/errors/aggregate-error.js~AggregateError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/errors/aggregate-error.js~AggregateError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 1553,
    "kind": "member",
    "name": "name",
    "memberof": "lib/errors/aggregate-error.js~AggregateError",
    "static": false,
    "longname": "lib/errors/aggregate-error.js~AggregateError#name",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1554,
    "kind": "method",
    "name": "toString",
    "memberof": "lib/errors/aggregate-error.js~AggregateError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/errors/aggregate-error.js~AggregateError#toString",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1555,
    "kind": "variable",
    "name": "aggregate_error_default",
    "memberof": "lib/errors/aggregate-error.js",
    "static": true,
    "longname": "lib/errors/aggregate-error.js~aggregate_error_default",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/aggregate-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1556,
    "kind": "file",
    "name": "lib/errors/association-error.js",
    "content": "var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __markAsModule = (target) => __defProp(target, \"__esModule\", { value: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __reExport = (target, module2, copyDefault, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2))\n      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== \"default\"))\n        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });\n  }\n  return target;\n};\nvar __toESM = (module2, isNodeMode) => {\n  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);\n};\nvar __toCommonJS = /* @__PURE__ */ ((cache) => {\n  return (module2, temp) => {\n    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);\n  };\n})(typeof WeakMap !== \"undefined\" ? /* @__PURE__ */ new WeakMap() : 0);\nvar association_error_exports = {};\n__export(association_error_exports, {\n  default: () => association_error_default\n});\nvar import_base_error = __toESM(require(\"./base-error\"));\nclass AssociationError extends import_base_error.default {\n  constructor(message) {\n    super(message);\n    this.name = \"SequelizeAssociationError\";\n  }\n}\nvar association_error_default = AssociationError;\nmodule.exports = __toCommonJS(association_error_exports);\n//# sourceMappingURL=association-error.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/errors/association-error.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1557,
    "kind": "variable",
    "name": "__create",
    "memberof": "lib/errors/association-error.js",
    "static": true,
    "longname": "lib/errors/association-error.js~__create",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/association-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1558,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/errors/association-error.js",
    "static": true,
    "longname": "lib/errors/association-error.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/association-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1559,
    "kind": "variable",
    "name": "__getOwnPropDesc",
    "memberof": "lib/errors/association-error.js",
    "static": true,
    "longname": "lib/errors/association-error.js~__getOwnPropDesc",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/association-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1560,
    "kind": "variable",
    "name": "__getOwnPropNames",
    "memberof": "lib/errors/association-error.js",
    "static": true,
    "longname": "lib/errors/association-error.js~__getOwnPropNames",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/association-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1561,
    "kind": "variable",
    "name": "__getProtoOf",
    "memberof": "lib/errors/association-error.js",
    "static": true,
    "longname": "lib/errors/association-error.js~__getProtoOf",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/association-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1562,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/errors/association-error.js",
    "static": true,
    "longname": "lib/errors/association-error.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/association-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1563,
    "kind": "function",
    "name": "__markAsModule",
    "memberof": "lib/errors/association-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/association-error.js~__markAsModule",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/association-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1564,
    "kind": "function",
    "name": "__export",
    "memberof": "lib/errors/association-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/association-error.js~__export",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/association-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "all",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1565,
    "kind": "function",
    "name": "__reExport",
    "memberof": "lib/errors/association-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/association-error.js~__reExport",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/association-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "copyDefault",
        "types": [
          "*"
        ]
      },
      {
        "name": "desc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1566,
    "kind": "function",
    "name": "__toESM",
    "memberof": "lib/errors/association-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/association-error.js~__toESM",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/association-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "isNodeMode",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1567,
    "kind": "variable",
    "name": "__toCommonJS",
    "memberof": "lib/errors/association-error.js",
    "static": true,
    "longname": "lib/errors/association-error.js~__toCommonJS",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/association-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1568,
    "kind": "variable",
    "name": "association_error_exports",
    "memberof": "lib/errors/association-error.js",
    "static": true,
    "longname": "lib/errors/association-error.js~association_error_exports",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/association-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1569,
    "kind": "variable",
    "name": "import_base_error",
    "memberof": "lib/errors/association-error.js",
    "static": true,
    "longname": "lib/errors/association-error.js~import_base_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/association-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1570,
    "kind": "class",
    "name": "AssociationError",
    "memberof": "lib/errors/association-error.js",
    "static": true,
    "longname": "lib/errors/association-error.js~AssociationError",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/association-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "interface": false,
    "extends": [
      "import_base_error~import_base_error.default"
    ],
    "ignore": true
  },
  {
    "__docId__": 1571,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/errors/association-error.js~AssociationError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/errors/association-error.js~AssociationError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 1572,
    "kind": "member",
    "name": "name",
    "memberof": "lib/errors/association-error.js~AssociationError",
    "static": false,
    "longname": "lib/errors/association-error.js~AssociationError#name",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1573,
    "kind": "variable",
    "name": "association_error_default",
    "memberof": "lib/errors/association-error.js",
    "static": true,
    "longname": "lib/errors/association-error.js~association_error_default",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/association-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1574,
    "kind": "file",
    "name": "lib/errors/base-error.js",
    "content": "var __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __markAsModule = (target) => __defProp(target, \"__esModule\", { value: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __reExport = (target, module2, copyDefault, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2))\n      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== \"default\"))\n        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });\n  }\n  return target;\n};\nvar __toCommonJS = /* @__PURE__ */ ((cache) => {\n  return (module2, temp) => {\n    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);\n  };\n})(typeof WeakMap !== \"undefined\" ? /* @__PURE__ */ new WeakMap() : 0);\nvar base_error_exports = {};\n__export(base_error_exports, {\n  default: () => base_error_default\n});\nclass BaseError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"SequelizeBaseError\";\n  }\n}\nvar base_error_default = BaseError;\nmodule.exports = __toCommonJS(base_error_exports);\n//# sourceMappingURL=base-error.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/errors/base-error.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1575,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/errors/base-error.js",
    "static": true,
    "longname": "lib/errors/base-error.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/base-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1576,
    "kind": "variable",
    "name": "__getOwnPropDesc",
    "memberof": "lib/errors/base-error.js",
    "static": true,
    "longname": "lib/errors/base-error.js~__getOwnPropDesc",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/base-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1577,
    "kind": "variable",
    "name": "__getOwnPropNames",
    "memberof": "lib/errors/base-error.js",
    "static": true,
    "longname": "lib/errors/base-error.js~__getOwnPropNames",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/base-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1578,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/errors/base-error.js",
    "static": true,
    "longname": "lib/errors/base-error.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/base-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1579,
    "kind": "function",
    "name": "__markAsModule",
    "memberof": "lib/errors/base-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/base-error.js~__markAsModule",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/base-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1580,
    "kind": "function",
    "name": "__export",
    "memberof": "lib/errors/base-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/base-error.js~__export",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/base-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "all",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1581,
    "kind": "function",
    "name": "__reExport",
    "memberof": "lib/errors/base-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/base-error.js~__reExport",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/base-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "copyDefault",
        "types": [
          "*"
        ]
      },
      {
        "name": "desc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1582,
    "kind": "variable",
    "name": "__toCommonJS",
    "memberof": "lib/errors/base-error.js",
    "static": true,
    "longname": "lib/errors/base-error.js~__toCommonJS",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/base-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1583,
    "kind": "variable",
    "name": "base_error_exports",
    "memberof": "lib/errors/base-error.js",
    "static": true,
    "longname": "lib/errors/base-error.js~base_error_exports",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/base-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1584,
    "kind": "class",
    "name": "BaseError",
    "memberof": "lib/errors/base-error.js",
    "static": true,
    "longname": "lib/errors/base-error.js~BaseError",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/base-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "interface": false,
    "extends": [
      "Error"
    ],
    "ignore": true
  },
  {
    "__docId__": 1585,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/errors/base-error.js~BaseError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/errors/base-error.js~BaseError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 1586,
    "kind": "member",
    "name": "name",
    "memberof": "lib/errors/base-error.js~BaseError",
    "static": false,
    "longname": "lib/errors/base-error.js~BaseError#name",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1587,
    "kind": "variable",
    "name": "base_error_default",
    "memberof": "lib/errors/base-error.js",
    "static": true,
    "longname": "lib/errors/base-error.js~base_error_default",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/base-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1588,
    "kind": "file",
    "name": "lib/errors/bulk-record-error.js",
    "content": "var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __markAsModule = (target) => __defProp(target, \"__esModule\", { value: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __reExport = (target, module2, copyDefault, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2))\n      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== \"default\"))\n        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });\n  }\n  return target;\n};\nvar __toESM = (module2, isNodeMode) => {\n  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);\n};\nvar __toCommonJS = /* @__PURE__ */ ((cache) => {\n  return (module2, temp) => {\n    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);\n  };\n})(typeof WeakMap !== \"undefined\" ? /* @__PURE__ */ new WeakMap() : 0);\nvar bulk_record_error_exports = {};\n__export(bulk_record_error_exports, {\n  default: () => bulk_record_error_default\n});\nvar import_base_error = __toESM(require(\"./base-error\"));\nclass BulkRecordError extends import_base_error.default {\n  errors;\n  record;\n  constructor(error, record) {\n    super(error.message);\n    this.name = \"SequelizeBulkRecordError\";\n    this.errors = error;\n    this.record = record;\n  }\n}\nvar bulk_record_error_default = BulkRecordError;\nmodule.exports = __toCommonJS(bulk_record_error_exports);\n//# sourceMappingURL=bulk-record-error.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/errors/bulk-record-error.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1589,
    "kind": "variable",
    "name": "__create",
    "memberof": "lib/errors/bulk-record-error.js",
    "static": true,
    "longname": "lib/errors/bulk-record-error.js~__create",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/bulk-record-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1590,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/errors/bulk-record-error.js",
    "static": true,
    "longname": "lib/errors/bulk-record-error.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/bulk-record-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1591,
    "kind": "variable",
    "name": "__getOwnPropDesc",
    "memberof": "lib/errors/bulk-record-error.js",
    "static": true,
    "longname": "lib/errors/bulk-record-error.js~__getOwnPropDesc",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/bulk-record-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1592,
    "kind": "variable",
    "name": "__getOwnPropNames",
    "memberof": "lib/errors/bulk-record-error.js",
    "static": true,
    "longname": "lib/errors/bulk-record-error.js~__getOwnPropNames",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/bulk-record-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1593,
    "kind": "variable",
    "name": "__getProtoOf",
    "memberof": "lib/errors/bulk-record-error.js",
    "static": true,
    "longname": "lib/errors/bulk-record-error.js~__getProtoOf",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/bulk-record-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1594,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/errors/bulk-record-error.js",
    "static": true,
    "longname": "lib/errors/bulk-record-error.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/bulk-record-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1595,
    "kind": "function",
    "name": "__markAsModule",
    "memberof": "lib/errors/bulk-record-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/bulk-record-error.js~__markAsModule",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/bulk-record-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1596,
    "kind": "function",
    "name": "__export",
    "memberof": "lib/errors/bulk-record-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/bulk-record-error.js~__export",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/bulk-record-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "all",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1597,
    "kind": "function",
    "name": "__reExport",
    "memberof": "lib/errors/bulk-record-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/bulk-record-error.js~__reExport",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/bulk-record-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "copyDefault",
        "types": [
          "*"
        ]
      },
      {
        "name": "desc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1598,
    "kind": "function",
    "name": "__toESM",
    "memberof": "lib/errors/bulk-record-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/bulk-record-error.js~__toESM",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/bulk-record-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "isNodeMode",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1599,
    "kind": "variable",
    "name": "__toCommonJS",
    "memberof": "lib/errors/bulk-record-error.js",
    "static": true,
    "longname": "lib/errors/bulk-record-error.js~__toCommonJS",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/bulk-record-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1600,
    "kind": "variable",
    "name": "bulk_record_error_exports",
    "memberof": "lib/errors/bulk-record-error.js",
    "static": true,
    "longname": "lib/errors/bulk-record-error.js~bulk_record_error_exports",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/bulk-record-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1601,
    "kind": "variable",
    "name": "import_base_error",
    "memberof": "lib/errors/bulk-record-error.js",
    "static": true,
    "longname": "lib/errors/bulk-record-error.js~import_base_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/bulk-record-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1602,
    "kind": "class",
    "name": "BulkRecordError",
    "memberof": "lib/errors/bulk-record-error.js",
    "static": true,
    "longname": "lib/errors/bulk-record-error.js~BulkRecordError",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/bulk-record-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "interface": false,
    "extends": [
      "import_base_error~import_base_error.default"
    ],
    "ignore": true
  },
  {
    "__docId__": 1603,
    "kind": "member",
    "name": "errors",
    "memberof": "lib/errors/bulk-record-error.js~BulkRecordError",
    "static": false,
    "longname": "lib/errors/bulk-record-error.js~BulkRecordError#errors",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1604,
    "kind": "member",
    "name": "record",
    "memberof": "lib/errors/bulk-record-error.js~BulkRecordError",
    "static": false,
    "longname": "lib/errors/bulk-record-error.js~BulkRecordError#record",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1605,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/errors/bulk-record-error.js~BulkRecordError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/errors/bulk-record-error.js~BulkRecordError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 1606,
    "kind": "member",
    "name": "name",
    "memberof": "lib/errors/bulk-record-error.js~BulkRecordError",
    "static": false,
    "longname": "lib/errors/bulk-record-error.js~BulkRecordError#name",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1609,
    "kind": "variable",
    "name": "bulk_record_error_default",
    "memberof": "lib/errors/bulk-record-error.js",
    "static": true,
    "longname": "lib/errors/bulk-record-error.js~bulk_record_error_default",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/bulk-record-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1610,
    "kind": "file",
    "name": "lib/errors/connection/access-denied-error.js",
    "content": "var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __markAsModule = (target) => __defProp(target, \"__esModule\", { value: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __reExport = (target, module2, copyDefault, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2))\n      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== \"default\"))\n        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });\n  }\n  return target;\n};\nvar __toESM = (module2, isNodeMode) => {\n  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);\n};\nvar __toCommonJS = /* @__PURE__ */ ((cache) => {\n  return (module2, temp) => {\n    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);\n  };\n})(typeof WeakMap !== \"undefined\" ? /* @__PURE__ */ new WeakMap() : 0);\nvar access_denied_error_exports = {};\n__export(access_denied_error_exports, {\n  default: () => access_denied_error_default\n});\nvar import_connection_error = __toESM(require(\"../connection-error\"));\nclass AccessDeniedError extends import_connection_error.default {\n  constructor(parent) {\n    super(parent);\n    this.name = \"SequelizeAccessDeniedError\";\n  }\n}\nvar access_denied_error_default = AccessDeniedError;\nmodule.exports = __toCommonJS(access_denied_error_exports);\n//# sourceMappingURL=access-denied-error.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/errors/connection/access-denied-error.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1611,
    "kind": "variable",
    "name": "__create",
    "memberof": "lib/errors/connection/access-denied-error.js",
    "static": true,
    "longname": "lib/errors/connection/access-denied-error.js~__create",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/access-denied-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1612,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/errors/connection/access-denied-error.js",
    "static": true,
    "longname": "lib/errors/connection/access-denied-error.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/access-denied-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1613,
    "kind": "variable",
    "name": "__getOwnPropDesc",
    "memberof": "lib/errors/connection/access-denied-error.js",
    "static": true,
    "longname": "lib/errors/connection/access-denied-error.js~__getOwnPropDesc",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/access-denied-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1614,
    "kind": "variable",
    "name": "__getOwnPropNames",
    "memberof": "lib/errors/connection/access-denied-error.js",
    "static": true,
    "longname": "lib/errors/connection/access-denied-error.js~__getOwnPropNames",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/access-denied-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1615,
    "kind": "variable",
    "name": "__getProtoOf",
    "memberof": "lib/errors/connection/access-denied-error.js",
    "static": true,
    "longname": "lib/errors/connection/access-denied-error.js~__getProtoOf",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/access-denied-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1616,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/errors/connection/access-denied-error.js",
    "static": true,
    "longname": "lib/errors/connection/access-denied-error.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/access-denied-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1617,
    "kind": "function",
    "name": "__markAsModule",
    "memberof": "lib/errors/connection/access-denied-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/connection/access-denied-error.js~__markAsModule",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/access-denied-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1618,
    "kind": "function",
    "name": "__export",
    "memberof": "lib/errors/connection/access-denied-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/connection/access-denied-error.js~__export",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/access-denied-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "all",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1619,
    "kind": "function",
    "name": "__reExport",
    "memberof": "lib/errors/connection/access-denied-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/connection/access-denied-error.js~__reExport",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/access-denied-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "copyDefault",
        "types": [
          "*"
        ]
      },
      {
        "name": "desc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1620,
    "kind": "function",
    "name": "__toESM",
    "memberof": "lib/errors/connection/access-denied-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/connection/access-denied-error.js~__toESM",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/access-denied-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "isNodeMode",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1621,
    "kind": "variable",
    "name": "__toCommonJS",
    "memberof": "lib/errors/connection/access-denied-error.js",
    "static": true,
    "longname": "lib/errors/connection/access-denied-error.js~__toCommonJS",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/access-denied-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1622,
    "kind": "variable",
    "name": "access_denied_error_exports",
    "memberof": "lib/errors/connection/access-denied-error.js",
    "static": true,
    "longname": "lib/errors/connection/access-denied-error.js~access_denied_error_exports",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/access-denied-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1623,
    "kind": "variable",
    "name": "import_connection_error",
    "memberof": "lib/errors/connection/access-denied-error.js",
    "static": true,
    "longname": "lib/errors/connection/access-denied-error.js~import_connection_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/access-denied-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1624,
    "kind": "class",
    "name": "AccessDeniedError",
    "memberof": "lib/errors/connection/access-denied-error.js",
    "static": true,
    "longname": "lib/errors/connection/access-denied-error.js~AccessDeniedError",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/access-denied-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "interface": false,
    "extends": [
      "import_connection_error~import_connection_error.default"
    ],
    "ignore": true
  },
  {
    "__docId__": 1625,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/errors/connection/access-denied-error.js~AccessDeniedError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/errors/connection/access-denied-error.js~AccessDeniedError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 1626,
    "kind": "member",
    "name": "name",
    "memberof": "lib/errors/connection/access-denied-error.js~AccessDeniedError",
    "static": false,
    "longname": "lib/errors/connection/access-denied-error.js~AccessDeniedError#name",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1627,
    "kind": "variable",
    "name": "access_denied_error_default",
    "memberof": "lib/errors/connection/access-denied-error.js",
    "static": true,
    "longname": "lib/errors/connection/access-denied-error.js~access_denied_error_default",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/access-denied-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1628,
    "kind": "file",
    "name": "lib/errors/connection/connection-acquire-timeout-error.js",
    "content": "var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __markAsModule = (target) => __defProp(target, \"__esModule\", { value: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __reExport = (target, module2, copyDefault, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2))\n      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== \"default\"))\n        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });\n  }\n  return target;\n};\nvar __toESM = (module2, isNodeMode) => {\n  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);\n};\nvar __toCommonJS = /* @__PURE__ */ ((cache) => {\n  return (module2, temp) => {\n    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);\n  };\n})(typeof WeakMap !== \"undefined\" ? /* @__PURE__ */ new WeakMap() : 0);\nvar connection_acquire_timeout_error_exports = {};\n__export(connection_acquire_timeout_error_exports, {\n  default: () => connection_acquire_timeout_error_default\n});\nvar import_connection_error = __toESM(require(\"../connection-error\"));\nclass ConnectionAcquireTimeoutError extends import_connection_error.default {\n  constructor(parent) {\n    super(parent);\n    this.name = \"SequelizeConnectionAcquireTimeoutError\";\n  }\n}\nvar connection_acquire_timeout_error_default = ConnectionAcquireTimeoutError;\nmodule.exports = __toCommonJS(connection_acquire_timeout_error_exports);\n//# sourceMappingURL=connection-acquire-timeout-error.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/errors/connection/connection-acquire-timeout-error.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1629,
    "kind": "variable",
    "name": "__create",
    "memberof": "lib/errors/connection/connection-acquire-timeout-error.js",
    "static": true,
    "longname": "lib/errors/connection/connection-acquire-timeout-error.js~__create",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/connection-acquire-timeout-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1630,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/errors/connection/connection-acquire-timeout-error.js",
    "static": true,
    "longname": "lib/errors/connection/connection-acquire-timeout-error.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/connection-acquire-timeout-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1631,
    "kind": "variable",
    "name": "__getOwnPropDesc",
    "memberof": "lib/errors/connection/connection-acquire-timeout-error.js",
    "static": true,
    "longname": "lib/errors/connection/connection-acquire-timeout-error.js~__getOwnPropDesc",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/connection-acquire-timeout-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1632,
    "kind": "variable",
    "name": "__getOwnPropNames",
    "memberof": "lib/errors/connection/connection-acquire-timeout-error.js",
    "static": true,
    "longname": "lib/errors/connection/connection-acquire-timeout-error.js~__getOwnPropNames",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/connection-acquire-timeout-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1633,
    "kind": "variable",
    "name": "__getProtoOf",
    "memberof": "lib/errors/connection/connection-acquire-timeout-error.js",
    "static": true,
    "longname": "lib/errors/connection/connection-acquire-timeout-error.js~__getProtoOf",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/connection-acquire-timeout-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1634,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/errors/connection/connection-acquire-timeout-error.js",
    "static": true,
    "longname": "lib/errors/connection/connection-acquire-timeout-error.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/connection-acquire-timeout-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1635,
    "kind": "function",
    "name": "__markAsModule",
    "memberof": "lib/errors/connection/connection-acquire-timeout-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/connection/connection-acquire-timeout-error.js~__markAsModule",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/connection-acquire-timeout-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1636,
    "kind": "function",
    "name": "__export",
    "memberof": "lib/errors/connection/connection-acquire-timeout-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/connection/connection-acquire-timeout-error.js~__export",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/connection-acquire-timeout-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "all",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1637,
    "kind": "function",
    "name": "__reExport",
    "memberof": "lib/errors/connection/connection-acquire-timeout-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/connection/connection-acquire-timeout-error.js~__reExport",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/connection-acquire-timeout-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "copyDefault",
        "types": [
          "*"
        ]
      },
      {
        "name": "desc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1638,
    "kind": "function",
    "name": "__toESM",
    "memberof": "lib/errors/connection/connection-acquire-timeout-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/connection/connection-acquire-timeout-error.js~__toESM",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/connection-acquire-timeout-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "isNodeMode",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1639,
    "kind": "variable",
    "name": "__toCommonJS",
    "memberof": "lib/errors/connection/connection-acquire-timeout-error.js",
    "static": true,
    "longname": "lib/errors/connection/connection-acquire-timeout-error.js~__toCommonJS",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/connection-acquire-timeout-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1640,
    "kind": "variable",
    "name": "connection_acquire_timeout_error_exports",
    "memberof": "lib/errors/connection/connection-acquire-timeout-error.js",
    "static": true,
    "longname": "lib/errors/connection/connection-acquire-timeout-error.js~connection_acquire_timeout_error_exports",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/connection-acquire-timeout-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1641,
    "kind": "variable",
    "name": "import_connection_error",
    "memberof": "lib/errors/connection/connection-acquire-timeout-error.js",
    "static": true,
    "longname": "lib/errors/connection/connection-acquire-timeout-error.js~import_connection_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/connection-acquire-timeout-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1642,
    "kind": "class",
    "name": "ConnectionAcquireTimeoutError",
    "memberof": "lib/errors/connection/connection-acquire-timeout-error.js",
    "static": true,
    "longname": "lib/errors/connection/connection-acquire-timeout-error.js~ConnectionAcquireTimeoutError",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/connection-acquire-timeout-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "interface": false,
    "extends": [
      "import_connection_error~import_connection_error.default"
    ],
    "ignore": true
  },
  {
    "__docId__": 1643,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/errors/connection/connection-acquire-timeout-error.js~ConnectionAcquireTimeoutError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/errors/connection/connection-acquire-timeout-error.js~ConnectionAcquireTimeoutError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 1644,
    "kind": "member",
    "name": "name",
    "memberof": "lib/errors/connection/connection-acquire-timeout-error.js~ConnectionAcquireTimeoutError",
    "static": false,
    "longname": "lib/errors/connection/connection-acquire-timeout-error.js~ConnectionAcquireTimeoutError#name",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1645,
    "kind": "variable",
    "name": "connection_acquire_timeout_error_default",
    "memberof": "lib/errors/connection/connection-acquire-timeout-error.js",
    "static": true,
    "longname": "lib/errors/connection/connection-acquire-timeout-error.js~connection_acquire_timeout_error_default",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/connection-acquire-timeout-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1646,
    "kind": "file",
    "name": "lib/errors/connection/connection-refused-error.js",
    "content": "var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __markAsModule = (target) => __defProp(target, \"__esModule\", { value: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __reExport = (target, module2, copyDefault, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2))\n      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== \"default\"))\n        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });\n  }\n  return target;\n};\nvar __toESM = (module2, isNodeMode) => {\n  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);\n};\nvar __toCommonJS = /* @__PURE__ */ ((cache) => {\n  return (module2, temp) => {\n    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);\n  };\n})(typeof WeakMap !== \"undefined\" ? /* @__PURE__ */ new WeakMap() : 0);\nvar connection_refused_error_exports = {};\n__export(connection_refused_error_exports, {\n  default: () => connection_refused_error_default\n});\nvar import_connection_error = __toESM(require(\"../connection-error\"));\nclass ConnectionRefusedError extends import_connection_error.default {\n  constructor(parent) {\n    super(parent);\n    this.name = \"SequelizeConnectionRefusedError\";\n  }\n}\nvar connection_refused_error_default = ConnectionRefusedError;\nmodule.exports = __toCommonJS(connection_refused_error_exports);\n//# sourceMappingURL=connection-refused-error.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/errors/connection/connection-refused-error.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1647,
    "kind": "variable",
    "name": "__create",
    "memberof": "lib/errors/connection/connection-refused-error.js",
    "static": true,
    "longname": "lib/errors/connection/connection-refused-error.js~__create",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/connection-refused-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1648,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/errors/connection/connection-refused-error.js",
    "static": true,
    "longname": "lib/errors/connection/connection-refused-error.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/connection-refused-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1649,
    "kind": "variable",
    "name": "__getOwnPropDesc",
    "memberof": "lib/errors/connection/connection-refused-error.js",
    "static": true,
    "longname": "lib/errors/connection/connection-refused-error.js~__getOwnPropDesc",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/connection-refused-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1650,
    "kind": "variable",
    "name": "__getOwnPropNames",
    "memberof": "lib/errors/connection/connection-refused-error.js",
    "static": true,
    "longname": "lib/errors/connection/connection-refused-error.js~__getOwnPropNames",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/connection-refused-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1651,
    "kind": "variable",
    "name": "__getProtoOf",
    "memberof": "lib/errors/connection/connection-refused-error.js",
    "static": true,
    "longname": "lib/errors/connection/connection-refused-error.js~__getProtoOf",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/connection-refused-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1652,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/errors/connection/connection-refused-error.js",
    "static": true,
    "longname": "lib/errors/connection/connection-refused-error.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/connection-refused-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1653,
    "kind": "function",
    "name": "__markAsModule",
    "memberof": "lib/errors/connection/connection-refused-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/connection/connection-refused-error.js~__markAsModule",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/connection-refused-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1654,
    "kind": "function",
    "name": "__export",
    "memberof": "lib/errors/connection/connection-refused-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/connection/connection-refused-error.js~__export",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/connection-refused-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "all",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1655,
    "kind": "function",
    "name": "__reExport",
    "memberof": "lib/errors/connection/connection-refused-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/connection/connection-refused-error.js~__reExport",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/connection-refused-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "copyDefault",
        "types": [
          "*"
        ]
      },
      {
        "name": "desc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1656,
    "kind": "function",
    "name": "__toESM",
    "memberof": "lib/errors/connection/connection-refused-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/connection/connection-refused-error.js~__toESM",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/connection-refused-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "isNodeMode",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1657,
    "kind": "variable",
    "name": "__toCommonJS",
    "memberof": "lib/errors/connection/connection-refused-error.js",
    "static": true,
    "longname": "lib/errors/connection/connection-refused-error.js~__toCommonJS",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/connection-refused-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1658,
    "kind": "variable",
    "name": "connection_refused_error_exports",
    "memberof": "lib/errors/connection/connection-refused-error.js",
    "static": true,
    "longname": "lib/errors/connection/connection-refused-error.js~connection_refused_error_exports",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/connection-refused-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1659,
    "kind": "variable",
    "name": "import_connection_error",
    "memberof": "lib/errors/connection/connection-refused-error.js",
    "static": true,
    "longname": "lib/errors/connection/connection-refused-error.js~import_connection_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/connection-refused-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1660,
    "kind": "class",
    "name": "ConnectionRefusedError",
    "memberof": "lib/errors/connection/connection-refused-error.js",
    "static": true,
    "longname": "lib/errors/connection/connection-refused-error.js~ConnectionRefusedError",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/connection-refused-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "interface": false,
    "extends": [
      "import_connection_error~import_connection_error.default"
    ],
    "ignore": true
  },
  {
    "__docId__": 1661,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/errors/connection/connection-refused-error.js~ConnectionRefusedError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/errors/connection/connection-refused-error.js~ConnectionRefusedError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 1662,
    "kind": "member",
    "name": "name",
    "memberof": "lib/errors/connection/connection-refused-error.js~ConnectionRefusedError",
    "static": false,
    "longname": "lib/errors/connection/connection-refused-error.js~ConnectionRefusedError#name",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1663,
    "kind": "variable",
    "name": "connection_refused_error_default",
    "memberof": "lib/errors/connection/connection-refused-error.js",
    "static": true,
    "longname": "lib/errors/connection/connection-refused-error.js~connection_refused_error_default",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/connection-refused-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1664,
    "kind": "file",
    "name": "lib/errors/connection/connection-timed-out-error.js",
    "content": "var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __markAsModule = (target) => __defProp(target, \"__esModule\", { value: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __reExport = (target, module2, copyDefault, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2))\n      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== \"default\"))\n        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });\n  }\n  return target;\n};\nvar __toESM = (module2, isNodeMode) => {\n  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);\n};\nvar __toCommonJS = /* @__PURE__ */ ((cache) => {\n  return (module2, temp) => {\n    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);\n  };\n})(typeof WeakMap !== \"undefined\" ? /* @__PURE__ */ new WeakMap() : 0);\nvar connection_timed_out_error_exports = {};\n__export(connection_timed_out_error_exports, {\n  default: () => connection_timed_out_error_default\n});\nvar import_connection_error = __toESM(require(\"../connection-error\"));\nclass ConnectionTimedOutError extends import_connection_error.default {\n  constructor(parent) {\n    super(parent);\n    this.name = \"SequelizeConnectionTimedOutError\";\n  }\n}\nvar connection_timed_out_error_default = ConnectionTimedOutError;\nmodule.exports = __toCommonJS(connection_timed_out_error_exports);\n//# sourceMappingURL=connection-timed-out-error.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/errors/connection/connection-timed-out-error.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1665,
    "kind": "variable",
    "name": "__create",
    "memberof": "lib/errors/connection/connection-timed-out-error.js",
    "static": true,
    "longname": "lib/errors/connection/connection-timed-out-error.js~__create",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/connection-timed-out-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1666,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/errors/connection/connection-timed-out-error.js",
    "static": true,
    "longname": "lib/errors/connection/connection-timed-out-error.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/connection-timed-out-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1667,
    "kind": "variable",
    "name": "__getOwnPropDesc",
    "memberof": "lib/errors/connection/connection-timed-out-error.js",
    "static": true,
    "longname": "lib/errors/connection/connection-timed-out-error.js~__getOwnPropDesc",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/connection-timed-out-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1668,
    "kind": "variable",
    "name": "__getOwnPropNames",
    "memberof": "lib/errors/connection/connection-timed-out-error.js",
    "static": true,
    "longname": "lib/errors/connection/connection-timed-out-error.js~__getOwnPropNames",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/connection-timed-out-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1669,
    "kind": "variable",
    "name": "__getProtoOf",
    "memberof": "lib/errors/connection/connection-timed-out-error.js",
    "static": true,
    "longname": "lib/errors/connection/connection-timed-out-error.js~__getProtoOf",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/connection-timed-out-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1670,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/errors/connection/connection-timed-out-error.js",
    "static": true,
    "longname": "lib/errors/connection/connection-timed-out-error.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/connection-timed-out-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1671,
    "kind": "function",
    "name": "__markAsModule",
    "memberof": "lib/errors/connection/connection-timed-out-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/connection/connection-timed-out-error.js~__markAsModule",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/connection-timed-out-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1672,
    "kind": "function",
    "name": "__export",
    "memberof": "lib/errors/connection/connection-timed-out-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/connection/connection-timed-out-error.js~__export",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/connection-timed-out-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "all",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1673,
    "kind": "function",
    "name": "__reExport",
    "memberof": "lib/errors/connection/connection-timed-out-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/connection/connection-timed-out-error.js~__reExport",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/connection-timed-out-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "copyDefault",
        "types": [
          "*"
        ]
      },
      {
        "name": "desc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1674,
    "kind": "function",
    "name": "__toESM",
    "memberof": "lib/errors/connection/connection-timed-out-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/connection/connection-timed-out-error.js~__toESM",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/connection-timed-out-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "isNodeMode",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1675,
    "kind": "variable",
    "name": "__toCommonJS",
    "memberof": "lib/errors/connection/connection-timed-out-error.js",
    "static": true,
    "longname": "lib/errors/connection/connection-timed-out-error.js~__toCommonJS",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/connection-timed-out-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1676,
    "kind": "variable",
    "name": "connection_timed_out_error_exports",
    "memberof": "lib/errors/connection/connection-timed-out-error.js",
    "static": true,
    "longname": "lib/errors/connection/connection-timed-out-error.js~connection_timed_out_error_exports",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/connection-timed-out-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1677,
    "kind": "variable",
    "name": "import_connection_error",
    "memberof": "lib/errors/connection/connection-timed-out-error.js",
    "static": true,
    "longname": "lib/errors/connection/connection-timed-out-error.js~import_connection_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/connection-timed-out-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1678,
    "kind": "class",
    "name": "ConnectionTimedOutError",
    "memberof": "lib/errors/connection/connection-timed-out-error.js",
    "static": true,
    "longname": "lib/errors/connection/connection-timed-out-error.js~ConnectionTimedOutError",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/connection-timed-out-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "interface": false,
    "extends": [
      "import_connection_error~import_connection_error.default"
    ],
    "ignore": true
  },
  {
    "__docId__": 1679,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/errors/connection/connection-timed-out-error.js~ConnectionTimedOutError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/errors/connection/connection-timed-out-error.js~ConnectionTimedOutError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 1680,
    "kind": "member",
    "name": "name",
    "memberof": "lib/errors/connection/connection-timed-out-error.js~ConnectionTimedOutError",
    "static": false,
    "longname": "lib/errors/connection/connection-timed-out-error.js~ConnectionTimedOutError#name",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1681,
    "kind": "variable",
    "name": "connection_timed_out_error_default",
    "memberof": "lib/errors/connection/connection-timed-out-error.js",
    "static": true,
    "longname": "lib/errors/connection/connection-timed-out-error.js~connection_timed_out_error_default",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/connection-timed-out-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1682,
    "kind": "file",
    "name": "lib/errors/connection/host-not-found-error.js",
    "content": "var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __markAsModule = (target) => __defProp(target, \"__esModule\", { value: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __reExport = (target, module2, copyDefault, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2))\n      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== \"default\"))\n        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });\n  }\n  return target;\n};\nvar __toESM = (module2, isNodeMode) => {\n  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);\n};\nvar __toCommonJS = /* @__PURE__ */ ((cache) => {\n  return (module2, temp) => {\n    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);\n  };\n})(typeof WeakMap !== \"undefined\" ? /* @__PURE__ */ new WeakMap() : 0);\nvar host_not_found_error_exports = {};\n__export(host_not_found_error_exports, {\n  default: () => host_not_found_error_default\n});\nvar import_connection_error = __toESM(require(\"../connection-error\"));\nclass HostNotFoundError extends import_connection_error.default {\n  constructor(parent) {\n    super(parent);\n    this.name = \"SequelizeHostNotFoundError\";\n  }\n}\nvar host_not_found_error_default = HostNotFoundError;\nmodule.exports = __toCommonJS(host_not_found_error_exports);\n//# sourceMappingURL=host-not-found-error.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/errors/connection/host-not-found-error.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1683,
    "kind": "variable",
    "name": "__create",
    "memberof": "lib/errors/connection/host-not-found-error.js",
    "static": true,
    "longname": "lib/errors/connection/host-not-found-error.js~__create",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/host-not-found-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1684,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/errors/connection/host-not-found-error.js",
    "static": true,
    "longname": "lib/errors/connection/host-not-found-error.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/host-not-found-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1685,
    "kind": "variable",
    "name": "__getOwnPropDesc",
    "memberof": "lib/errors/connection/host-not-found-error.js",
    "static": true,
    "longname": "lib/errors/connection/host-not-found-error.js~__getOwnPropDesc",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/host-not-found-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1686,
    "kind": "variable",
    "name": "__getOwnPropNames",
    "memberof": "lib/errors/connection/host-not-found-error.js",
    "static": true,
    "longname": "lib/errors/connection/host-not-found-error.js~__getOwnPropNames",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/host-not-found-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1687,
    "kind": "variable",
    "name": "__getProtoOf",
    "memberof": "lib/errors/connection/host-not-found-error.js",
    "static": true,
    "longname": "lib/errors/connection/host-not-found-error.js~__getProtoOf",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/host-not-found-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1688,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/errors/connection/host-not-found-error.js",
    "static": true,
    "longname": "lib/errors/connection/host-not-found-error.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/host-not-found-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1689,
    "kind": "function",
    "name": "__markAsModule",
    "memberof": "lib/errors/connection/host-not-found-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/connection/host-not-found-error.js~__markAsModule",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/host-not-found-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1690,
    "kind": "function",
    "name": "__export",
    "memberof": "lib/errors/connection/host-not-found-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/connection/host-not-found-error.js~__export",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/host-not-found-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "all",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1691,
    "kind": "function",
    "name": "__reExport",
    "memberof": "lib/errors/connection/host-not-found-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/connection/host-not-found-error.js~__reExport",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/host-not-found-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "copyDefault",
        "types": [
          "*"
        ]
      },
      {
        "name": "desc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1692,
    "kind": "function",
    "name": "__toESM",
    "memberof": "lib/errors/connection/host-not-found-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/connection/host-not-found-error.js~__toESM",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/host-not-found-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "isNodeMode",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1693,
    "kind": "variable",
    "name": "__toCommonJS",
    "memberof": "lib/errors/connection/host-not-found-error.js",
    "static": true,
    "longname": "lib/errors/connection/host-not-found-error.js~__toCommonJS",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/host-not-found-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1694,
    "kind": "variable",
    "name": "host_not_found_error_exports",
    "memberof": "lib/errors/connection/host-not-found-error.js",
    "static": true,
    "longname": "lib/errors/connection/host-not-found-error.js~host_not_found_error_exports",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/host-not-found-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1695,
    "kind": "variable",
    "name": "import_connection_error",
    "memberof": "lib/errors/connection/host-not-found-error.js",
    "static": true,
    "longname": "lib/errors/connection/host-not-found-error.js~import_connection_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/host-not-found-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1696,
    "kind": "class",
    "name": "HostNotFoundError",
    "memberof": "lib/errors/connection/host-not-found-error.js",
    "static": true,
    "longname": "lib/errors/connection/host-not-found-error.js~HostNotFoundError",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/host-not-found-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "interface": false,
    "extends": [
      "import_connection_error~import_connection_error.default"
    ],
    "ignore": true
  },
  {
    "__docId__": 1697,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/errors/connection/host-not-found-error.js~HostNotFoundError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/errors/connection/host-not-found-error.js~HostNotFoundError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 1698,
    "kind": "member",
    "name": "name",
    "memberof": "lib/errors/connection/host-not-found-error.js~HostNotFoundError",
    "static": false,
    "longname": "lib/errors/connection/host-not-found-error.js~HostNotFoundError#name",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1699,
    "kind": "variable",
    "name": "host_not_found_error_default",
    "memberof": "lib/errors/connection/host-not-found-error.js",
    "static": true,
    "longname": "lib/errors/connection/host-not-found-error.js~host_not_found_error_default",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/host-not-found-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1700,
    "kind": "file",
    "name": "lib/errors/connection/host-not-reachable-error.js",
    "content": "var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __markAsModule = (target) => __defProp(target, \"__esModule\", { value: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __reExport = (target, module2, copyDefault, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2))\n      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== \"default\"))\n        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });\n  }\n  return target;\n};\nvar __toESM = (module2, isNodeMode) => {\n  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);\n};\nvar __toCommonJS = /* @__PURE__ */ ((cache) => {\n  return (module2, temp) => {\n    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);\n  };\n})(typeof WeakMap !== \"undefined\" ? /* @__PURE__ */ new WeakMap() : 0);\nvar host_not_reachable_error_exports = {};\n__export(host_not_reachable_error_exports, {\n  default: () => host_not_reachable_error_default\n});\nvar import_connection_error = __toESM(require(\"../connection-error\"));\nclass HostNotReachableError extends import_connection_error.default {\n  constructor(parent) {\n    super(parent);\n    this.name = \"SequelizeHostNotReachableError\";\n  }\n}\nvar host_not_reachable_error_default = HostNotReachableError;\nmodule.exports = __toCommonJS(host_not_reachable_error_exports);\n//# sourceMappingURL=host-not-reachable-error.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/errors/connection/host-not-reachable-error.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1701,
    "kind": "variable",
    "name": "__create",
    "memberof": "lib/errors/connection/host-not-reachable-error.js",
    "static": true,
    "longname": "lib/errors/connection/host-not-reachable-error.js~__create",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/host-not-reachable-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1702,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/errors/connection/host-not-reachable-error.js",
    "static": true,
    "longname": "lib/errors/connection/host-not-reachable-error.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/host-not-reachable-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1703,
    "kind": "variable",
    "name": "__getOwnPropDesc",
    "memberof": "lib/errors/connection/host-not-reachable-error.js",
    "static": true,
    "longname": "lib/errors/connection/host-not-reachable-error.js~__getOwnPropDesc",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/host-not-reachable-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1704,
    "kind": "variable",
    "name": "__getOwnPropNames",
    "memberof": "lib/errors/connection/host-not-reachable-error.js",
    "static": true,
    "longname": "lib/errors/connection/host-not-reachable-error.js~__getOwnPropNames",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/host-not-reachable-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1705,
    "kind": "variable",
    "name": "__getProtoOf",
    "memberof": "lib/errors/connection/host-not-reachable-error.js",
    "static": true,
    "longname": "lib/errors/connection/host-not-reachable-error.js~__getProtoOf",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/host-not-reachable-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1706,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/errors/connection/host-not-reachable-error.js",
    "static": true,
    "longname": "lib/errors/connection/host-not-reachable-error.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/host-not-reachable-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1707,
    "kind": "function",
    "name": "__markAsModule",
    "memberof": "lib/errors/connection/host-not-reachable-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/connection/host-not-reachable-error.js~__markAsModule",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/host-not-reachable-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1708,
    "kind": "function",
    "name": "__export",
    "memberof": "lib/errors/connection/host-not-reachable-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/connection/host-not-reachable-error.js~__export",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/host-not-reachable-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "all",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1709,
    "kind": "function",
    "name": "__reExport",
    "memberof": "lib/errors/connection/host-not-reachable-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/connection/host-not-reachable-error.js~__reExport",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/host-not-reachable-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "copyDefault",
        "types": [
          "*"
        ]
      },
      {
        "name": "desc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1710,
    "kind": "function",
    "name": "__toESM",
    "memberof": "lib/errors/connection/host-not-reachable-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/connection/host-not-reachable-error.js~__toESM",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/host-not-reachable-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "isNodeMode",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1711,
    "kind": "variable",
    "name": "__toCommonJS",
    "memberof": "lib/errors/connection/host-not-reachable-error.js",
    "static": true,
    "longname": "lib/errors/connection/host-not-reachable-error.js~__toCommonJS",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/host-not-reachable-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1712,
    "kind": "variable",
    "name": "host_not_reachable_error_exports",
    "memberof": "lib/errors/connection/host-not-reachable-error.js",
    "static": true,
    "longname": "lib/errors/connection/host-not-reachable-error.js~host_not_reachable_error_exports",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/host-not-reachable-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1713,
    "kind": "variable",
    "name": "import_connection_error",
    "memberof": "lib/errors/connection/host-not-reachable-error.js",
    "static": true,
    "longname": "lib/errors/connection/host-not-reachable-error.js~import_connection_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/host-not-reachable-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1714,
    "kind": "class",
    "name": "HostNotReachableError",
    "memberof": "lib/errors/connection/host-not-reachable-error.js",
    "static": true,
    "longname": "lib/errors/connection/host-not-reachable-error.js~HostNotReachableError",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/host-not-reachable-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "interface": false,
    "extends": [
      "import_connection_error~import_connection_error.default"
    ],
    "ignore": true
  },
  {
    "__docId__": 1715,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/errors/connection/host-not-reachable-error.js~HostNotReachableError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/errors/connection/host-not-reachable-error.js~HostNotReachableError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 1716,
    "kind": "member",
    "name": "name",
    "memberof": "lib/errors/connection/host-not-reachable-error.js~HostNotReachableError",
    "static": false,
    "longname": "lib/errors/connection/host-not-reachable-error.js~HostNotReachableError#name",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1717,
    "kind": "variable",
    "name": "host_not_reachable_error_default",
    "memberof": "lib/errors/connection/host-not-reachable-error.js",
    "static": true,
    "longname": "lib/errors/connection/host-not-reachable-error.js~host_not_reachable_error_default",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/host-not-reachable-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1718,
    "kind": "file",
    "name": "lib/errors/connection/invalid-connection-error.js",
    "content": "var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __markAsModule = (target) => __defProp(target, \"__esModule\", { value: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __reExport = (target, module2, copyDefault, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2))\n      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== \"default\"))\n        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });\n  }\n  return target;\n};\nvar __toESM = (module2, isNodeMode) => {\n  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);\n};\nvar __toCommonJS = /* @__PURE__ */ ((cache) => {\n  return (module2, temp) => {\n    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);\n  };\n})(typeof WeakMap !== \"undefined\" ? /* @__PURE__ */ new WeakMap() : 0);\nvar invalid_connection_error_exports = {};\n__export(invalid_connection_error_exports, {\n  default: () => invalid_connection_error_default\n});\nvar import_connection_error = __toESM(require(\"../connection-error\"));\nclass InvalidConnectionError extends import_connection_error.default {\n  constructor(parent) {\n    super(parent);\n    this.name = \"SequelizeInvalidConnectionError\";\n  }\n}\nvar invalid_connection_error_default = InvalidConnectionError;\nmodule.exports = __toCommonJS(invalid_connection_error_exports);\n//# sourceMappingURL=invalid-connection-error.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/errors/connection/invalid-connection-error.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1719,
    "kind": "variable",
    "name": "__create",
    "memberof": "lib/errors/connection/invalid-connection-error.js",
    "static": true,
    "longname": "lib/errors/connection/invalid-connection-error.js~__create",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/invalid-connection-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1720,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/errors/connection/invalid-connection-error.js",
    "static": true,
    "longname": "lib/errors/connection/invalid-connection-error.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/invalid-connection-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1721,
    "kind": "variable",
    "name": "__getOwnPropDesc",
    "memberof": "lib/errors/connection/invalid-connection-error.js",
    "static": true,
    "longname": "lib/errors/connection/invalid-connection-error.js~__getOwnPropDesc",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/invalid-connection-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1722,
    "kind": "variable",
    "name": "__getOwnPropNames",
    "memberof": "lib/errors/connection/invalid-connection-error.js",
    "static": true,
    "longname": "lib/errors/connection/invalid-connection-error.js~__getOwnPropNames",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/invalid-connection-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1723,
    "kind": "variable",
    "name": "__getProtoOf",
    "memberof": "lib/errors/connection/invalid-connection-error.js",
    "static": true,
    "longname": "lib/errors/connection/invalid-connection-error.js~__getProtoOf",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/invalid-connection-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1724,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/errors/connection/invalid-connection-error.js",
    "static": true,
    "longname": "lib/errors/connection/invalid-connection-error.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/invalid-connection-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1725,
    "kind": "function",
    "name": "__markAsModule",
    "memberof": "lib/errors/connection/invalid-connection-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/connection/invalid-connection-error.js~__markAsModule",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/invalid-connection-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1726,
    "kind": "function",
    "name": "__export",
    "memberof": "lib/errors/connection/invalid-connection-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/connection/invalid-connection-error.js~__export",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/invalid-connection-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "all",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1727,
    "kind": "function",
    "name": "__reExport",
    "memberof": "lib/errors/connection/invalid-connection-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/connection/invalid-connection-error.js~__reExport",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/invalid-connection-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "copyDefault",
        "types": [
          "*"
        ]
      },
      {
        "name": "desc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1728,
    "kind": "function",
    "name": "__toESM",
    "memberof": "lib/errors/connection/invalid-connection-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/connection/invalid-connection-error.js~__toESM",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/invalid-connection-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "isNodeMode",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1729,
    "kind": "variable",
    "name": "__toCommonJS",
    "memberof": "lib/errors/connection/invalid-connection-error.js",
    "static": true,
    "longname": "lib/errors/connection/invalid-connection-error.js~__toCommonJS",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/invalid-connection-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1730,
    "kind": "variable",
    "name": "invalid_connection_error_exports",
    "memberof": "lib/errors/connection/invalid-connection-error.js",
    "static": true,
    "longname": "lib/errors/connection/invalid-connection-error.js~invalid_connection_error_exports",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/invalid-connection-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1731,
    "kind": "variable",
    "name": "import_connection_error",
    "memberof": "lib/errors/connection/invalid-connection-error.js",
    "static": true,
    "longname": "lib/errors/connection/invalid-connection-error.js~import_connection_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/invalid-connection-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1732,
    "kind": "class",
    "name": "InvalidConnectionError",
    "memberof": "lib/errors/connection/invalid-connection-error.js",
    "static": true,
    "longname": "lib/errors/connection/invalid-connection-error.js~InvalidConnectionError",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/invalid-connection-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "interface": false,
    "extends": [
      "import_connection_error~import_connection_error.default"
    ],
    "ignore": true
  },
  {
    "__docId__": 1733,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/errors/connection/invalid-connection-error.js~InvalidConnectionError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/errors/connection/invalid-connection-error.js~InvalidConnectionError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 1734,
    "kind": "member",
    "name": "name",
    "memberof": "lib/errors/connection/invalid-connection-error.js~InvalidConnectionError",
    "static": false,
    "longname": "lib/errors/connection/invalid-connection-error.js~InvalidConnectionError#name",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1735,
    "kind": "variable",
    "name": "invalid_connection_error_default",
    "memberof": "lib/errors/connection/invalid-connection-error.js",
    "static": true,
    "longname": "lib/errors/connection/invalid-connection-error.js~invalid_connection_error_default",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/connection/invalid-connection-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1736,
    "kind": "file",
    "name": "lib/errors/connection-error.js",
    "content": "var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __markAsModule = (target) => __defProp(target, \"__esModule\", { value: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __reExport = (target, module2, copyDefault, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2))\n      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== \"default\"))\n        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });\n  }\n  return target;\n};\nvar __toESM = (module2, isNodeMode) => {\n  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);\n};\nvar __toCommonJS = /* @__PURE__ */ ((cache) => {\n  return (module2, temp) => {\n    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);\n  };\n})(typeof WeakMap !== \"undefined\" ? /* @__PURE__ */ new WeakMap() : 0);\nvar connection_error_exports = {};\n__export(connection_error_exports, {\n  default: () => connection_error_default\n});\nvar import_base_error = __toESM(require(\"./base-error\"));\nclass ConnectionError extends import_base_error.default {\n  parent;\n  original;\n  constructor(parent) {\n    super(parent ? parent.message : \"\");\n    this.name = \"SequelizeConnectionError\";\n    this.parent = parent;\n    this.original = parent;\n  }\n}\nvar connection_error_default = ConnectionError;\nmodule.exports = __toCommonJS(connection_error_exports);\n//# sourceMappingURL=connection-error.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/errors/connection-error.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1737,
    "kind": "variable",
    "name": "__create",
    "memberof": "lib/errors/connection-error.js",
    "static": true,
    "longname": "lib/errors/connection-error.js~__create",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1738,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/errors/connection-error.js",
    "static": true,
    "longname": "lib/errors/connection-error.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1739,
    "kind": "variable",
    "name": "__getOwnPropDesc",
    "memberof": "lib/errors/connection-error.js",
    "static": true,
    "longname": "lib/errors/connection-error.js~__getOwnPropDesc",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1740,
    "kind": "variable",
    "name": "__getOwnPropNames",
    "memberof": "lib/errors/connection-error.js",
    "static": true,
    "longname": "lib/errors/connection-error.js~__getOwnPropNames",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1741,
    "kind": "variable",
    "name": "__getProtoOf",
    "memberof": "lib/errors/connection-error.js",
    "static": true,
    "longname": "lib/errors/connection-error.js~__getProtoOf",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1742,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/errors/connection-error.js",
    "static": true,
    "longname": "lib/errors/connection-error.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1743,
    "kind": "function",
    "name": "__markAsModule",
    "memberof": "lib/errors/connection-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/connection-error.js~__markAsModule",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1744,
    "kind": "function",
    "name": "__export",
    "memberof": "lib/errors/connection-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/connection-error.js~__export",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "all",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1745,
    "kind": "function",
    "name": "__reExport",
    "memberof": "lib/errors/connection-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/connection-error.js~__reExport",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "copyDefault",
        "types": [
          "*"
        ]
      },
      {
        "name": "desc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1746,
    "kind": "function",
    "name": "__toESM",
    "memberof": "lib/errors/connection-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/connection-error.js~__toESM",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "isNodeMode",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1747,
    "kind": "variable",
    "name": "__toCommonJS",
    "memberof": "lib/errors/connection-error.js",
    "static": true,
    "longname": "lib/errors/connection-error.js~__toCommonJS",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/connection-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1748,
    "kind": "variable",
    "name": "connection_error_exports",
    "memberof": "lib/errors/connection-error.js",
    "static": true,
    "longname": "lib/errors/connection-error.js~connection_error_exports",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/connection-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1749,
    "kind": "variable",
    "name": "import_base_error",
    "memberof": "lib/errors/connection-error.js",
    "static": true,
    "longname": "lib/errors/connection-error.js~import_base_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/connection-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1750,
    "kind": "class",
    "name": "ConnectionError",
    "memberof": "lib/errors/connection-error.js",
    "static": true,
    "longname": "lib/errors/connection-error.js~ConnectionError",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/connection-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "interface": false,
    "extends": [
      "import_base_error~import_base_error.default"
    ],
    "ignore": true
  },
  {
    "__docId__": 1751,
    "kind": "member",
    "name": "parent",
    "memberof": "lib/errors/connection-error.js~ConnectionError",
    "static": false,
    "longname": "lib/errors/connection-error.js~ConnectionError#parent",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1752,
    "kind": "member",
    "name": "original",
    "memberof": "lib/errors/connection-error.js~ConnectionError",
    "static": false,
    "longname": "lib/errors/connection-error.js~ConnectionError#original",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1753,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/errors/connection-error.js~ConnectionError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/errors/connection-error.js~ConnectionError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 1754,
    "kind": "member",
    "name": "name",
    "memberof": "lib/errors/connection-error.js~ConnectionError",
    "static": false,
    "longname": "lib/errors/connection-error.js~ConnectionError#name",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1757,
    "kind": "variable",
    "name": "connection_error_default",
    "memberof": "lib/errors/connection-error.js",
    "static": true,
    "longname": "lib/errors/connection-error.js~connection_error_default",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/connection-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1758,
    "kind": "file",
    "name": "lib/errors/database/exclusion-constraint-error.js",
    "content": "var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __markAsModule = (target) => __defProp(target, \"__esModule\", { value: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __reExport = (target, module2, copyDefault, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2))\n      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== \"default\"))\n        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });\n  }\n  return target;\n};\nvar __toESM = (module2, isNodeMode) => {\n  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);\n};\nvar __toCommonJS = /* @__PURE__ */ ((cache) => {\n  return (module2, temp) => {\n    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);\n  };\n})(typeof WeakMap !== \"undefined\" ? /* @__PURE__ */ new WeakMap() : 0);\nvar exclusion_constraint_error_exports = {};\n__export(exclusion_constraint_error_exports, {\n  default: () => exclusion_constraint_error_default\n});\nvar import_database_error = __toESM(require(\"../database-error\"));\nclass ExclusionConstraintError extends import_database_error.default {\n  constraint;\n  fields;\n  table;\n  constructor(options) {\n    options = options || {};\n    options.parent = options.parent || { sql: \"\", name: \"\", message: \"\" };\n    super(options.parent, { stack: options.stack });\n    this.message = options.message || options.parent.message || \"\";\n    this.name = \"SequelizeExclusionConstraintError\";\n    this.constraint = options.constraint;\n    this.fields = options.fields;\n    this.table = options.table;\n  }\n}\nvar exclusion_constraint_error_default = ExclusionConstraintError;\nmodule.exports = __toCommonJS(exclusion_constraint_error_exports);\n//# sourceMappingURL=exclusion-constraint-error.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/errors/database/exclusion-constraint-error.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1759,
    "kind": "variable",
    "name": "__create",
    "memberof": "lib/errors/database/exclusion-constraint-error.js",
    "static": true,
    "longname": "lib/errors/database/exclusion-constraint-error.js~__create",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database/exclusion-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1760,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/errors/database/exclusion-constraint-error.js",
    "static": true,
    "longname": "lib/errors/database/exclusion-constraint-error.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database/exclusion-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1761,
    "kind": "variable",
    "name": "__getOwnPropDesc",
    "memberof": "lib/errors/database/exclusion-constraint-error.js",
    "static": true,
    "longname": "lib/errors/database/exclusion-constraint-error.js~__getOwnPropDesc",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database/exclusion-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1762,
    "kind": "variable",
    "name": "__getOwnPropNames",
    "memberof": "lib/errors/database/exclusion-constraint-error.js",
    "static": true,
    "longname": "lib/errors/database/exclusion-constraint-error.js~__getOwnPropNames",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database/exclusion-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1763,
    "kind": "variable",
    "name": "__getProtoOf",
    "memberof": "lib/errors/database/exclusion-constraint-error.js",
    "static": true,
    "longname": "lib/errors/database/exclusion-constraint-error.js~__getProtoOf",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database/exclusion-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1764,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/errors/database/exclusion-constraint-error.js",
    "static": true,
    "longname": "lib/errors/database/exclusion-constraint-error.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database/exclusion-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1765,
    "kind": "function",
    "name": "__markAsModule",
    "memberof": "lib/errors/database/exclusion-constraint-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/database/exclusion-constraint-error.js~__markAsModule",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database/exclusion-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1766,
    "kind": "function",
    "name": "__export",
    "memberof": "lib/errors/database/exclusion-constraint-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/database/exclusion-constraint-error.js~__export",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database/exclusion-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "all",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1767,
    "kind": "function",
    "name": "__reExport",
    "memberof": "lib/errors/database/exclusion-constraint-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/database/exclusion-constraint-error.js~__reExport",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database/exclusion-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "copyDefault",
        "types": [
          "*"
        ]
      },
      {
        "name": "desc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1768,
    "kind": "function",
    "name": "__toESM",
    "memberof": "lib/errors/database/exclusion-constraint-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/database/exclusion-constraint-error.js~__toESM",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database/exclusion-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "isNodeMode",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1769,
    "kind": "variable",
    "name": "__toCommonJS",
    "memberof": "lib/errors/database/exclusion-constraint-error.js",
    "static": true,
    "longname": "lib/errors/database/exclusion-constraint-error.js~__toCommonJS",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database/exclusion-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1770,
    "kind": "variable",
    "name": "exclusion_constraint_error_exports",
    "memberof": "lib/errors/database/exclusion-constraint-error.js",
    "static": true,
    "longname": "lib/errors/database/exclusion-constraint-error.js~exclusion_constraint_error_exports",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/database/exclusion-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1771,
    "kind": "variable",
    "name": "import_database_error",
    "memberof": "lib/errors/database/exclusion-constraint-error.js",
    "static": true,
    "longname": "lib/errors/database/exclusion-constraint-error.js~import_database_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/database/exclusion-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1772,
    "kind": "class",
    "name": "ExclusionConstraintError",
    "memberof": "lib/errors/database/exclusion-constraint-error.js",
    "static": true,
    "longname": "lib/errors/database/exclusion-constraint-error.js~ExclusionConstraintError",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/database/exclusion-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "interface": false,
    "extends": [
      "import_database_error~import_database_error.default"
    ],
    "ignore": true
  },
  {
    "__docId__": 1773,
    "kind": "member",
    "name": "constraint",
    "memberof": "lib/errors/database/exclusion-constraint-error.js~ExclusionConstraintError",
    "static": false,
    "longname": "lib/errors/database/exclusion-constraint-error.js~ExclusionConstraintError#constraint",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1774,
    "kind": "member",
    "name": "fields",
    "memberof": "lib/errors/database/exclusion-constraint-error.js~ExclusionConstraintError",
    "static": false,
    "longname": "lib/errors/database/exclusion-constraint-error.js~ExclusionConstraintError#fields",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1775,
    "kind": "member",
    "name": "table",
    "memberof": "lib/errors/database/exclusion-constraint-error.js~ExclusionConstraintError",
    "static": false,
    "longname": "lib/errors/database/exclusion-constraint-error.js~ExclusionConstraintError#table",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1776,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/errors/database/exclusion-constraint-error.js~ExclusionConstraintError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/errors/database/exclusion-constraint-error.js~ExclusionConstraintError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 1777,
    "kind": "member",
    "name": "message",
    "memberof": "lib/errors/database/exclusion-constraint-error.js~ExclusionConstraintError",
    "static": false,
    "longname": "lib/errors/database/exclusion-constraint-error.js~ExclusionConstraintError#message",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1778,
    "kind": "member",
    "name": "name",
    "memberof": "lib/errors/database/exclusion-constraint-error.js~ExclusionConstraintError",
    "static": false,
    "longname": "lib/errors/database/exclusion-constraint-error.js~ExclusionConstraintError#name",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1782,
    "kind": "variable",
    "name": "exclusion_constraint_error_default",
    "memberof": "lib/errors/database/exclusion-constraint-error.js",
    "static": true,
    "longname": "lib/errors/database/exclusion-constraint-error.js~exclusion_constraint_error_default",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/database/exclusion-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1783,
    "kind": "file",
    "name": "lib/errors/database/foreign-key-constraint-error.js",
    "content": "var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __markAsModule = (target) => __defProp(target, \"__esModule\", { value: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __reExport = (target, module2, copyDefault, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2))\n      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== \"default\"))\n        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });\n  }\n  return target;\n};\nvar __toESM = (module2, isNodeMode) => {\n  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);\n};\nvar __toCommonJS = /* @__PURE__ */ ((cache) => {\n  return (module2, temp) => {\n    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);\n  };\n})(typeof WeakMap !== \"undefined\" ? /* @__PURE__ */ new WeakMap() : 0);\nvar foreign_key_constraint_error_exports = {};\n__export(foreign_key_constraint_error_exports, {\n  RelationshipType: () => RelationshipType,\n  default: () => foreign_key_constraint_error_default\n});\nvar import_database_error = __toESM(require(\"../database-error\"));\nvar RelationshipType = /* @__PURE__ */ ((RelationshipType2) => {\n  RelationshipType2[\"parent\"] = \"parent\";\n  RelationshipType2[\"child\"] = \"child\";\n  return RelationshipType2;\n})(RelationshipType || {});\nclass ForeignKeyConstraintError extends import_database_error.default {\n  table;\n  fields;\n  value;\n  index;\n  reltype;\n  constructor(options) {\n    options = options || {};\n    options.parent = options.parent || { sql: \"\", name: \"\", message: \"\" };\n    super(options.parent, { stack: options.stack });\n    this.name = \"SequelizeForeignKeyConstraintError\";\n    this.fields = options.fields;\n    this.table = options.table;\n    this.value = options.value;\n    this.index = options.index;\n    this.reltype = options.reltype;\n  }\n}\nvar foreign_key_constraint_error_default = ForeignKeyConstraintError;\nmodule.exports = __toCommonJS(foreign_key_constraint_error_exports);\n//# sourceMappingURL=foreign-key-constraint-error.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/errors/database/foreign-key-constraint-error.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1784,
    "kind": "variable",
    "name": "__create",
    "memberof": "lib/errors/database/foreign-key-constraint-error.js",
    "static": true,
    "longname": "lib/errors/database/foreign-key-constraint-error.js~__create",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database/foreign-key-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1785,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/errors/database/foreign-key-constraint-error.js",
    "static": true,
    "longname": "lib/errors/database/foreign-key-constraint-error.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database/foreign-key-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1786,
    "kind": "variable",
    "name": "__getOwnPropDesc",
    "memberof": "lib/errors/database/foreign-key-constraint-error.js",
    "static": true,
    "longname": "lib/errors/database/foreign-key-constraint-error.js~__getOwnPropDesc",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database/foreign-key-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1787,
    "kind": "variable",
    "name": "__getOwnPropNames",
    "memberof": "lib/errors/database/foreign-key-constraint-error.js",
    "static": true,
    "longname": "lib/errors/database/foreign-key-constraint-error.js~__getOwnPropNames",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database/foreign-key-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1788,
    "kind": "variable",
    "name": "__getProtoOf",
    "memberof": "lib/errors/database/foreign-key-constraint-error.js",
    "static": true,
    "longname": "lib/errors/database/foreign-key-constraint-error.js~__getProtoOf",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database/foreign-key-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1789,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/errors/database/foreign-key-constraint-error.js",
    "static": true,
    "longname": "lib/errors/database/foreign-key-constraint-error.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database/foreign-key-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1790,
    "kind": "function",
    "name": "__markAsModule",
    "memberof": "lib/errors/database/foreign-key-constraint-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/database/foreign-key-constraint-error.js~__markAsModule",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database/foreign-key-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1791,
    "kind": "function",
    "name": "__export",
    "memberof": "lib/errors/database/foreign-key-constraint-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/database/foreign-key-constraint-error.js~__export",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database/foreign-key-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "all",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1792,
    "kind": "function",
    "name": "__reExport",
    "memberof": "lib/errors/database/foreign-key-constraint-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/database/foreign-key-constraint-error.js~__reExport",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database/foreign-key-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "copyDefault",
        "types": [
          "*"
        ]
      },
      {
        "name": "desc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1793,
    "kind": "function",
    "name": "__toESM",
    "memberof": "lib/errors/database/foreign-key-constraint-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/database/foreign-key-constraint-error.js~__toESM",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database/foreign-key-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "isNodeMode",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1794,
    "kind": "variable",
    "name": "__toCommonJS",
    "memberof": "lib/errors/database/foreign-key-constraint-error.js",
    "static": true,
    "longname": "lib/errors/database/foreign-key-constraint-error.js~__toCommonJS",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database/foreign-key-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1795,
    "kind": "variable",
    "name": "foreign_key_constraint_error_exports",
    "memberof": "lib/errors/database/foreign-key-constraint-error.js",
    "static": true,
    "longname": "lib/errors/database/foreign-key-constraint-error.js~foreign_key_constraint_error_exports",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/database/foreign-key-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1796,
    "kind": "variable",
    "name": "import_database_error",
    "memberof": "lib/errors/database/foreign-key-constraint-error.js",
    "static": true,
    "longname": "lib/errors/database/foreign-key-constraint-error.js~import_database_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/database/foreign-key-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1797,
    "kind": "variable",
    "name": "RelationshipType",
    "memberof": "lib/errors/database/foreign-key-constraint-error.js",
    "static": true,
    "longname": "lib/errors/database/foreign-key-constraint-error.js~RelationshipType",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/database/foreign-key-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1798,
    "kind": "class",
    "name": "ForeignKeyConstraintError",
    "memberof": "lib/errors/database/foreign-key-constraint-error.js",
    "static": true,
    "longname": "lib/errors/database/foreign-key-constraint-error.js~ForeignKeyConstraintError",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/database/foreign-key-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "interface": false,
    "extends": [
      "import_database_error~import_database_error.default"
    ],
    "ignore": true
  },
  {
    "__docId__": 1799,
    "kind": "member",
    "name": "table",
    "memberof": "lib/errors/database/foreign-key-constraint-error.js~ForeignKeyConstraintError",
    "static": false,
    "longname": "lib/errors/database/foreign-key-constraint-error.js~ForeignKeyConstraintError#table",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1800,
    "kind": "member",
    "name": "fields",
    "memberof": "lib/errors/database/foreign-key-constraint-error.js~ForeignKeyConstraintError",
    "static": false,
    "longname": "lib/errors/database/foreign-key-constraint-error.js~ForeignKeyConstraintError#fields",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1801,
    "kind": "member",
    "name": "value",
    "memberof": "lib/errors/database/foreign-key-constraint-error.js~ForeignKeyConstraintError",
    "static": false,
    "longname": "lib/errors/database/foreign-key-constraint-error.js~ForeignKeyConstraintError#value",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1802,
    "kind": "member",
    "name": "index",
    "memberof": "lib/errors/database/foreign-key-constraint-error.js~ForeignKeyConstraintError",
    "static": false,
    "longname": "lib/errors/database/foreign-key-constraint-error.js~ForeignKeyConstraintError#index",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1803,
    "kind": "member",
    "name": "reltype",
    "memberof": "lib/errors/database/foreign-key-constraint-error.js~ForeignKeyConstraintError",
    "static": false,
    "longname": "lib/errors/database/foreign-key-constraint-error.js~ForeignKeyConstraintError#reltype",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1804,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/errors/database/foreign-key-constraint-error.js~ForeignKeyConstraintError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/errors/database/foreign-key-constraint-error.js~ForeignKeyConstraintError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 1805,
    "kind": "member",
    "name": "name",
    "memberof": "lib/errors/database/foreign-key-constraint-error.js~ForeignKeyConstraintError",
    "static": false,
    "longname": "lib/errors/database/foreign-key-constraint-error.js~ForeignKeyConstraintError#name",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1811,
    "kind": "variable",
    "name": "foreign_key_constraint_error_default",
    "memberof": "lib/errors/database/foreign-key-constraint-error.js",
    "static": true,
    "longname": "lib/errors/database/foreign-key-constraint-error.js~foreign_key_constraint_error_default",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/database/foreign-key-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1812,
    "kind": "file",
    "name": "lib/errors/database/timeout-error.js",
    "content": "var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __markAsModule = (target) => __defProp(target, \"__esModule\", { value: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __reExport = (target, module2, copyDefault, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2))\n      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== \"default\"))\n        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });\n  }\n  return target;\n};\nvar __toESM = (module2, isNodeMode) => {\n  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);\n};\nvar __toCommonJS = /* @__PURE__ */ ((cache) => {\n  return (module2, temp) => {\n    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);\n  };\n})(typeof WeakMap !== \"undefined\" ? /* @__PURE__ */ new WeakMap() : 0);\nvar timeout_error_exports = {};\n__export(timeout_error_exports, {\n  default: () => timeout_error_default\n});\nvar import_database_error = __toESM(require(\"../database-error\"));\nclass TimeoutError extends import_database_error.default {\n  constructor(parent, options = {}) {\n    super(parent, options);\n    this.name = \"SequelizeTimeoutError\";\n  }\n}\nvar timeout_error_default = TimeoutError;\nmodule.exports = __toCommonJS(timeout_error_exports);\n//# sourceMappingURL=timeout-error.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/errors/database/timeout-error.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1813,
    "kind": "variable",
    "name": "__create",
    "memberof": "lib/errors/database/timeout-error.js",
    "static": true,
    "longname": "lib/errors/database/timeout-error.js~__create",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database/timeout-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1814,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/errors/database/timeout-error.js",
    "static": true,
    "longname": "lib/errors/database/timeout-error.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database/timeout-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1815,
    "kind": "variable",
    "name": "__getOwnPropDesc",
    "memberof": "lib/errors/database/timeout-error.js",
    "static": true,
    "longname": "lib/errors/database/timeout-error.js~__getOwnPropDesc",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database/timeout-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1816,
    "kind": "variable",
    "name": "__getOwnPropNames",
    "memberof": "lib/errors/database/timeout-error.js",
    "static": true,
    "longname": "lib/errors/database/timeout-error.js~__getOwnPropNames",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database/timeout-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1817,
    "kind": "variable",
    "name": "__getProtoOf",
    "memberof": "lib/errors/database/timeout-error.js",
    "static": true,
    "longname": "lib/errors/database/timeout-error.js~__getProtoOf",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database/timeout-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1818,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/errors/database/timeout-error.js",
    "static": true,
    "longname": "lib/errors/database/timeout-error.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database/timeout-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1819,
    "kind": "function",
    "name": "__markAsModule",
    "memberof": "lib/errors/database/timeout-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/database/timeout-error.js~__markAsModule",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database/timeout-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1820,
    "kind": "function",
    "name": "__export",
    "memberof": "lib/errors/database/timeout-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/database/timeout-error.js~__export",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database/timeout-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "all",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1821,
    "kind": "function",
    "name": "__reExport",
    "memberof": "lib/errors/database/timeout-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/database/timeout-error.js~__reExport",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database/timeout-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "copyDefault",
        "types": [
          "*"
        ]
      },
      {
        "name": "desc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1822,
    "kind": "function",
    "name": "__toESM",
    "memberof": "lib/errors/database/timeout-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/database/timeout-error.js~__toESM",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database/timeout-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "isNodeMode",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1823,
    "kind": "variable",
    "name": "__toCommonJS",
    "memberof": "lib/errors/database/timeout-error.js",
    "static": true,
    "longname": "lib/errors/database/timeout-error.js~__toCommonJS",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database/timeout-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1824,
    "kind": "variable",
    "name": "timeout_error_exports",
    "memberof": "lib/errors/database/timeout-error.js",
    "static": true,
    "longname": "lib/errors/database/timeout-error.js~timeout_error_exports",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/database/timeout-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1825,
    "kind": "variable",
    "name": "import_database_error",
    "memberof": "lib/errors/database/timeout-error.js",
    "static": true,
    "longname": "lib/errors/database/timeout-error.js~import_database_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/database/timeout-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1826,
    "kind": "class",
    "name": "TimeoutError",
    "memberof": "lib/errors/database/timeout-error.js",
    "static": true,
    "longname": "lib/errors/database/timeout-error.js~TimeoutError",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/database/timeout-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "interface": false,
    "extends": [
      "import_database_error~import_database_error.default"
    ],
    "ignore": true
  },
  {
    "__docId__": 1827,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/errors/database/timeout-error.js~TimeoutError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/errors/database/timeout-error.js~TimeoutError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 1828,
    "kind": "member",
    "name": "name",
    "memberof": "lib/errors/database/timeout-error.js~TimeoutError",
    "static": false,
    "longname": "lib/errors/database/timeout-error.js~TimeoutError#name",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1829,
    "kind": "variable",
    "name": "timeout_error_default",
    "memberof": "lib/errors/database/timeout-error.js",
    "static": true,
    "longname": "lib/errors/database/timeout-error.js~timeout_error_default",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/database/timeout-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1830,
    "kind": "file",
    "name": "lib/errors/database/unknown-constraint-error.js",
    "content": "var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __markAsModule = (target) => __defProp(target, \"__esModule\", { value: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __reExport = (target, module2, copyDefault, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2))\n      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== \"default\"))\n        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });\n  }\n  return target;\n};\nvar __toESM = (module2, isNodeMode) => {\n  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);\n};\nvar __toCommonJS = /* @__PURE__ */ ((cache) => {\n  return (module2, temp) => {\n    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);\n  };\n})(typeof WeakMap !== \"undefined\" ? /* @__PURE__ */ new WeakMap() : 0);\nvar unknown_constraint_error_exports = {};\n__export(unknown_constraint_error_exports, {\n  default: () => unknown_constraint_error_default\n});\nvar import_database_error = __toESM(require(\"../database-error\"));\nclass UnknownConstraintError extends import_database_error.default {\n  constraint;\n  fields;\n  table;\n  constructor(options) {\n    options = options || {};\n    options.parent = options.parent || { sql: \"\", name: \"\", message: \"\" };\n    super(options.parent, { stack: options.stack });\n    this.name = \"SequelizeUnknownConstraintError\";\n    this.constraint = options.constraint;\n    this.fields = options.fields;\n    this.table = options.table;\n  }\n}\nvar unknown_constraint_error_default = UnknownConstraintError;\nmodule.exports = __toCommonJS(unknown_constraint_error_exports);\n//# sourceMappingURL=unknown-constraint-error.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/errors/database/unknown-constraint-error.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1831,
    "kind": "variable",
    "name": "__create",
    "memberof": "lib/errors/database/unknown-constraint-error.js",
    "static": true,
    "longname": "lib/errors/database/unknown-constraint-error.js~__create",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database/unknown-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1832,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/errors/database/unknown-constraint-error.js",
    "static": true,
    "longname": "lib/errors/database/unknown-constraint-error.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database/unknown-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1833,
    "kind": "variable",
    "name": "__getOwnPropDesc",
    "memberof": "lib/errors/database/unknown-constraint-error.js",
    "static": true,
    "longname": "lib/errors/database/unknown-constraint-error.js~__getOwnPropDesc",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database/unknown-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1834,
    "kind": "variable",
    "name": "__getOwnPropNames",
    "memberof": "lib/errors/database/unknown-constraint-error.js",
    "static": true,
    "longname": "lib/errors/database/unknown-constraint-error.js~__getOwnPropNames",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database/unknown-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1835,
    "kind": "variable",
    "name": "__getProtoOf",
    "memberof": "lib/errors/database/unknown-constraint-error.js",
    "static": true,
    "longname": "lib/errors/database/unknown-constraint-error.js~__getProtoOf",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database/unknown-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1836,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/errors/database/unknown-constraint-error.js",
    "static": true,
    "longname": "lib/errors/database/unknown-constraint-error.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database/unknown-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1837,
    "kind": "function",
    "name": "__markAsModule",
    "memberof": "lib/errors/database/unknown-constraint-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/database/unknown-constraint-error.js~__markAsModule",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database/unknown-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1838,
    "kind": "function",
    "name": "__export",
    "memberof": "lib/errors/database/unknown-constraint-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/database/unknown-constraint-error.js~__export",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database/unknown-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "all",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1839,
    "kind": "function",
    "name": "__reExport",
    "memberof": "lib/errors/database/unknown-constraint-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/database/unknown-constraint-error.js~__reExport",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database/unknown-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "copyDefault",
        "types": [
          "*"
        ]
      },
      {
        "name": "desc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1840,
    "kind": "function",
    "name": "__toESM",
    "memberof": "lib/errors/database/unknown-constraint-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/database/unknown-constraint-error.js~__toESM",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database/unknown-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "isNodeMode",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1841,
    "kind": "variable",
    "name": "__toCommonJS",
    "memberof": "lib/errors/database/unknown-constraint-error.js",
    "static": true,
    "longname": "lib/errors/database/unknown-constraint-error.js~__toCommonJS",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database/unknown-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1842,
    "kind": "variable",
    "name": "unknown_constraint_error_exports",
    "memberof": "lib/errors/database/unknown-constraint-error.js",
    "static": true,
    "longname": "lib/errors/database/unknown-constraint-error.js~unknown_constraint_error_exports",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/database/unknown-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1843,
    "kind": "variable",
    "name": "import_database_error",
    "memberof": "lib/errors/database/unknown-constraint-error.js",
    "static": true,
    "longname": "lib/errors/database/unknown-constraint-error.js~import_database_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/database/unknown-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1844,
    "kind": "class",
    "name": "UnknownConstraintError",
    "memberof": "lib/errors/database/unknown-constraint-error.js",
    "static": true,
    "longname": "lib/errors/database/unknown-constraint-error.js~UnknownConstraintError",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/database/unknown-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "interface": false,
    "extends": [
      "import_database_error~import_database_error.default"
    ],
    "ignore": true
  },
  {
    "__docId__": 1845,
    "kind": "member",
    "name": "constraint",
    "memberof": "lib/errors/database/unknown-constraint-error.js~UnknownConstraintError",
    "static": false,
    "longname": "lib/errors/database/unknown-constraint-error.js~UnknownConstraintError#constraint",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1846,
    "kind": "member",
    "name": "fields",
    "memberof": "lib/errors/database/unknown-constraint-error.js~UnknownConstraintError",
    "static": false,
    "longname": "lib/errors/database/unknown-constraint-error.js~UnknownConstraintError#fields",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1847,
    "kind": "member",
    "name": "table",
    "memberof": "lib/errors/database/unknown-constraint-error.js~UnknownConstraintError",
    "static": false,
    "longname": "lib/errors/database/unknown-constraint-error.js~UnknownConstraintError#table",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1848,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/errors/database/unknown-constraint-error.js~UnknownConstraintError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/errors/database/unknown-constraint-error.js~UnknownConstraintError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 1849,
    "kind": "member",
    "name": "name",
    "memberof": "lib/errors/database/unknown-constraint-error.js~UnknownConstraintError",
    "static": false,
    "longname": "lib/errors/database/unknown-constraint-error.js~UnknownConstraintError#name",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1853,
    "kind": "variable",
    "name": "unknown_constraint_error_default",
    "memberof": "lib/errors/database/unknown-constraint-error.js",
    "static": true,
    "longname": "lib/errors/database/unknown-constraint-error.js~unknown_constraint_error_default",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/database/unknown-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1854,
    "kind": "file",
    "name": "lib/errors/database-error.js",
    "content": "var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __markAsModule = (target) => __defProp(target, \"__esModule\", { value: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __reExport = (target, module2, copyDefault, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2))\n      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== \"default\"))\n        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });\n  }\n  return target;\n};\nvar __toESM = (module2, isNodeMode) => {\n  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);\n};\nvar __toCommonJS = /* @__PURE__ */ ((cache) => {\n  return (module2, temp) => {\n    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);\n  };\n})(typeof WeakMap !== \"undefined\" ? /* @__PURE__ */ new WeakMap() : 0);\nvar database_error_exports = {};\n__export(database_error_exports, {\n  default: () => database_error_default\n});\nvar import_base_error = __toESM(require(\"./base-error\"));\nclass DatabaseError extends import_base_error.default {\n  parent;\n  original;\n  sql;\n  parameters;\n  constructor(parent, options = {}) {\n    super(parent.message);\n    var _a;\n    this.name = \"SequelizeDatabaseError\";\n    this.parent = parent;\n    this.original = parent;\n    this.sql = parent.sql;\n    this.parameters = (_a = parent.parameters) != null ? _a : {};\n    if (options.stack) {\n      this.stack = options.stack;\n    }\n  }\n}\nvar database_error_default = DatabaseError;\nmodule.exports = __toCommonJS(database_error_exports);\n//# sourceMappingURL=database-error.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/errors/database-error.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1855,
    "kind": "variable",
    "name": "__create",
    "memberof": "lib/errors/database-error.js",
    "static": true,
    "longname": "lib/errors/database-error.js~__create",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1856,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/errors/database-error.js",
    "static": true,
    "longname": "lib/errors/database-error.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1857,
    "kind": "variable",
    "name": "__getOwnPropDesc",
    "memberof": "lib/errors/database-error.js",
    "static": true,
    "longname": "lib/errors/database-error.js~__getOwnPropDesc",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1858,
    "kind": "variable",
    "name": "__getOwnPropNames",
    "memberof": "lib/errors/database-error.js",
    "static": true,
    "longname": "lib/errors/database-error.js~__getOwnPropNames",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1859,
    "kind": "variable",
    "name": "__getProtoOf",
    "memberof": "lib/errors/database-error.js",
    "static": true,
    "longname": "lib/errors/database-error.js~__getProtoOf",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1860,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/errors/database-error.js",
    "static": true,
    "longname": "lib/errors/database-error.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1861,
    "kind": "function",
    "name": "__markAsModule",
    "memberof": "lib/errors/database-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/database-error.js~__markAsModule",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1862,
    "kind": "function",
    "name": "__export",
    "memberof": "lib/errors/database-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/database-error.js~__export",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "all",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1863,
    "kind": "function",
    "name": "__reExport",
    "memberof": "lib/errors/database-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/database-error.js~__reExport",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "copyDefault",
        "types": [
          "*"
        ]
      },
      {
        "name": "desc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1864,
    "kind": "function",
    "name": "__toESM",
    "memberof": "lib/errors/database-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/database-error.js~__toESM",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "isNodeMode",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1865,
    "kind": "variable",
    "name": "__toCommonJS",
    "memberof": "lib/errors/database-error.js",
    "static": true,
    "longname": "lib/errors/database-error.js~__toCommonJS",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/database-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1866,
    "kind": "variable",
    "name": "database_error_exports",
    "memberof": "lib/errors/database-error.js",
    "static": true,
    "longname": "lib/errors/database-error.js~database_error_exports",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/database-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1867,
    "kind": "variable",
    "name": "import_base_error",
    "memberof": "lib/errors/database-error.js",
    "static": true,
    "longname": "lib/errors/database-error.js~import_base_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/database-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1868,
    "kind": "class",
    "name": "DatabaseError",
    "memberof": "lib/errors/database-error.js",
    "static": true,
    "longname": "lib/errors/database-error.js~DatabaseError",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/database-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "interface": false,
    "extends": [
      "import_base_error~import_base_error.default"
    ],
    "ignore": true
  },
  {
    "__docId__": 1869,
    "kind": "member",
    "name": "parent",
    "memberof": "lib/errors/database-error.js~DatabaseError",
    "static": false,
    "longname": "lib/errors/database-error.js~DatabaseError#parent",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1870,
    "kind": "member",
    "name": "original",
    "memberof": "lib/errors/database-error.js~DatabaseError",
    "static": false,
    "longname": "lib/errors/database-error.js~DatabaseError#original",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1871,
    "kind": "member",
    "name": "sql",
    "memberof": "lib/errors/database-error.js~DatabaseError",
    "static": false,
    "longname": "lib/errors/database-error.js~DatabaseError#sql",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1872,
    "kind": "member",
    "name": "parameters",
    "memberof": "lib/errors/database-error.js~DatabaseError",
    "static": false,
    "longname": "lib/errors/database-error.js~DatabaseError#parameters",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1873,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/errors/database-error.js~DatabaseError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/errors/database-error.js~DatabaseError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 1874,
    "kind": "member",
    "name": "name",
    "memberof": "lib/errors/database-error.js~DatabaseError",
    "static": false,
    "longname": "lib/errors/database-error.js~DatabaseError#name",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1879,
    "kind": "member",
    "name": "stack",
    "memberof": "lib/errors/database-error.js~DatabaseError",
    "static": false,
    "longname": "lib/errors/database-error.js~DatabaseError#stack",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1880,
    "kind": "variable",
    "name": "database_error_default",
    "memberof": "lib/errors/database-error.js",
    "static": true,
    "longname": "lib/errors/database-error.js~database_error_default",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/database-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1881,
    "kind": "file",
    "name": "lib/errors/eager-loading-error.js",
    "content": "var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __markAsModule = (target) => __defProp(target, \"__esModule\", { value: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __reExport = (target, module2, copyDefault, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2))\n      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== \"default\"))\n        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });\n  }\n  return target;\n};\nvar __toESM = (module2, isNodeMode) => {\n  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);\n};\nvar __toCommonJS = /* @__PURE__ */ ((cache) => {\n  return (module2, temp) => {\n    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);\n  };\n})(typeof WeakMap !== \"undefined\" ? /* @__PURE__ */ new WeakMap() : 0);\nvar eager_loading_error_exports = {};\n__export(eager_loading_error_exports, {\n  default: () => eager_loading_error_default\n});\nvar import_base_error = __toESM(require(\"./base-error\"));\nclass EagerLoadingError extends import_base_error.default {\n  constructor(message) {\n    super(message);\n    this.name = \"SequelizeEagerLoadingError\";\n  }\n}\nvar eager_loading_error_default = EagerLoadingError;\nmodule.exports = __toCommonJS(eager_loading_error_exports);\n//# sourceMappingURL=eager-loading-error.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/errors/eager-loading-error.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1882,
    "kind": "variable",
    "name": "__create",
    "memberof": "lib/errors/eager-loading-error.js",
    "static": true,
    "longname": "lib/errors/eager-loading-error.js~__create",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/eager-loading-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1883,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/errors/eager-loading-error.js",
    "static": true,
    "longname": "lib/errors/eager-loading-error.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/eager-loading-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1884,
    "kind": "variable",
    "name": "__getOwnPropDesc",
    "memberof": "lib/errors/eager-loading-error.js",
    "static": true,
    "longname": "lib/errors/eager-loading-error.js~__getOwnPropDesc",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/eager-loading-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1885,
    "kind": "variable",
    "name": "__getOwnPropNames",
    "memberof": "lib/errors/eager-loading-error.js",
    "static": true,
    "longname": "lib/errors/eager-loading-error.js~__getOwnPropNames",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/eager-loading-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1886,
    "kind": "variable",
    "name": "__getProtoOf",
    "memberof": "lib/errors/eager-loading-error.js",
    "static": true,
    "longname": "lib/errors/eager-loading-error.js~__getProtoOf",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/eager-loading-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1887,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/errors/eager-loading-error.js",
    "static": true,
    "longname": "lib/errors/eager-loading-error.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/eager-loading-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1888,
    "kind": "function",
    "name": "__markAsModule",
    "memberof": "lib/errors/eager-loading-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/eager-loading-error.js~__markAsModule",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/eager-loading-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1889,
    "kind": "function",
    "name": "__export",
    "memberof": "lib/errors/eager-loading-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/eager-loading-error.js~__export",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/eager-loading-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "all",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1890,
    "kind": "function",
    "name": "__reExport",
    "memberof": "lib/errors/eager-loading-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/eager-loading-error.js~__reExport",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/eager-loading-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "copyDefault",
        "types": [
          "*"
        ]
      },
      {
        "name": "desc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1891,
    "kind": "function",
    "name": "__toESM",
    "memberof": "lib/errors/eager-loading-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/eager-loading-error.js~__toESM",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/eager-loading-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "isNodeMode",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1892,
    "kind": "variable",
    "name": "__toCommonJS",
    "memberof": "lib/errors/eager-loading-error.js",
    "static": true,
    "longname": "lib/errors/eager-loading-error.js~__toCommonJS",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/eager-loading-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1893,
    "kind": "variable",
    "name": "eager_loading_error_exports",
    "memberof": "lib/errors/eager-loading-error.js",
    "static": true,
    "longname": "lib/errors/eager-loading-error.js~eager_loading_error_exports",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/eager-loading-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1894,
    "kind": "variable",
    "name": "import_base_error",
    "memberof": "lib/errors/eager-loading-error.js",
    "static": true,
    "longname": "lib/errors/eager-loading-error.js~import_base_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/eager-loading-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1895,
    "kind": "class",
    "name": "EagerLoadingError",
    "memberof": "lib/errors/eager-loading-error.js",
    "static": true,
    "longname": "lib/errors/eager-loading-error.js~EagerLoadingError",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/eager-loading-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "interface": false,
    "extends": [
      "import_base_error~import_base_error.default"
    ],
    "ignore": true
  },
  {
    "__docId__": 1896,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/errors/eager-loading-error.js~EagerLoadingError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/errors/eager-loading-error.js~EagerLoadingError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 1897,
    "kind": "member",
    "name": "name",
    "memberof": "lib/errors/eager-loading-error.js~EagerLoadingError",
    "static": false,
    "longname": "lib/errors/eager-loading-error.js~EagerLoadingError#name",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1898,
    "kind": "variable",
    "name": "eager_loading_error_default",
    "memberof": "lib/errors/eager-loading-error.js",
    "static": true,
    "longname": "lib/errors/eager-loading-error.js~eager_loading_error_default",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/eager-loading-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1899,
    "kind": "file",
    "name": "lib/errors/empty-result-error.js",
    "content": "var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __markAsModule = (target) => __defProp(target, \"__esModule\", { value: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __reExport = (target, module2, copyDefault, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2))\n      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== \"default\"))\n        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });\n  }\n  return target;\n};\nvar __toESM = (module2, isNodeMode) => {\n  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);\n};\nvar __toCommonJS = /* @__PURE__ */ ((cache) => {\n  return (module2, temp) => {\n    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);\n  };\n})(typeof WeakMap !== \"undefined\" ? /* @__PURE__ */ new WeakMap() : 0);\nvar empty_result_error_exports = {};\n__export(empty_result_error_exports, {\n  default: () => empty_result_error_default\n});\nvar import_base_error = __toESM(require(\"./base-error\"));\nclass EmptyResultError extends import_base_error.default {\n  constructor(message) {\n    super(message);\n    this.name = \"SequelizeEmptyResultError\";\n  }\n}\nvar empty_result_error_default = EmptyResultError;\nmodule.exports = __toCommonJS(empty_result_error_exports);\n//# sourceMappingURL=empty-result-error.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/errors/empty-result-error.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1900,
    "kind": "variable",
    "name": "__create",
    "memberof": "lib/errors/empty-result-error.js",
    "static": true,
    "longname": "lib/errors/empty-result-error.js~__create",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/empty-result-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1901,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/errors/empty-result-error.js",
    "static": true,
    "longname": "lib/errors/empty-result-error.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/empty-result-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1902,
    "kind": "variable",
    "name": "__getOwnPropDesc",
    "memberof": "lib/errors/empty-result-error.js",
    "static": true,
    "longname": "lib/errors/empty-result-error.js~__getOwnPropDesc",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/empty-result-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1903,
    "kind": "variable",
    "name": "__getOwnPropNames",
    "memberof": "lib/errors/empty-result-error.js",
    "static": true,
    "longname": "lib/errors/empty-result-error.js~__getOwnPropNames",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/empty-result-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1904,
    "kind": "variable",
    "name": "__getProtoOf",
    "memberof": "lib/errors/empty-result-error.js",
    "static": true,
    "longname": "lib/errors/empty-result-error.js~__getProtoOf",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/empty-result-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1905,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/errors/empty-result-error.js",
    "static": true,
    "longname": "lib/errors/empty-result-error.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/empty-result-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1906,
    "kind": "function",
    "name": "__markAsModule",
    "memberof": "lib/errors/empty-result-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/empty-result-error.js~__markAsModule",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/empty-result-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1907,
    "kind": "function",
    "name": "__export",
    "memberof": "lib/errors/empty-result-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/empty-result-error.js~__export",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/empty-result-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "all",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1908,
    "kind": "function",
    "name": "__reExport",
    "memberof": "lib/errors/empty-result-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/empty-result-error.js~__reExport",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/empty-result-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "copyDefault",
        "types": [
          "*"
        ]
      },
      {
        "name": "desc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1909,
    "kind": "function",
    "name": "__toESM",
    "memberof": "lib/errors/empty-result-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/empty-result-error.js~__toESM",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/empty-result-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "isNodeMode",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1910,
    "kind": "variable",
    "name": "__toCommonJS",
    "memberof": "lib/errors/empty-result-error.js",
    "static": true,
    "longname": "lib/errors/empty-result-error.js~__toCommonJS",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/empty-result-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1911,
    "kind": "variable",
    "name": "empty_result_error_exports",
    "memberof": "lib/errors/empty-result-error.js",
    "static": true,
    "longname": "lib/errors/empty-result-error.js~empty_result_error_exports",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/empty-result-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1912,
    "kind": "variable",
    "name": "import_base_error",
    "memberof": "lib/errors/empty-result-error.js",
    "static": true,
    "longname": "lib/errors/empty-result-error.js~import_base_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/empty-result-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1913,
    "kind": "class",
    "name": "EmptyResultError",
    "memberof": "lib/errors/empty-result-error.js",
    "static": true,
    "longname": "lib/errors/empty-result-error.js~EmptyResultError",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/empty-result-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "interface": false,
    "extends": [
      "import_base_error~import_base_error.default"
    ],
    "ignore": true
  },
  {
    "__docId__": 1914,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/errors/empty-result-error.js~EmptyResultError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/errors/empty-result-error.js~EmptyResultError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 1915,
    "kind": "member",
    "name": "name",
    "memberof": "lib/errors/empty-result-error.js~EmptyResultError",
    "static": false,
    "longname": "lib/errors/empty-result-error.js~EmptyResultError#name",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1916,
    "kind": "variable",
    "name": "empty_result_error_default",
    "memberof": "lib/errors/empty-result-error.js",
    "static": true,
    "longname": "lib/errors/empty-result-error.js~empty_result_error_default",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/empty-result-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1917,
    "kind": "file",
    "name": "lib/errors/index.js",
    "content": "var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __markAsModule = (target) => __defProp(target, \"__esModule\", { value: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __reExport = (target, module2, copyDefault, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2))\n      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== \"default\"))\n        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });\n  }\n  return target;\n};\nvar __toESM = (module2, isNodeMode) => {\n  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);\n};\nvar __toCommonJS = /* @__PURE__ */ ((cache) => {\n  return (module2, temp) => {\n    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);\n  };\n})(typeof WeakMap !== \"undefined\" ? /* @__PURE__ */ new WeakMap() : 0);\nvar errors_exports = {};\n__export(errors_exports, {\n  AccessDeniedError: () => import_access_denied_error.default,\n  AggregateError: () => import_aggregate_error.default,\n  AssociationError: () => import_association_error.default,\n  AsyncQueueError: () => import_async_queue.AsyncQueueError,\n  BaseError: () => import_base_error.default,\n  BulkRecordError: () => import_bulk_record_error.default,\n  ConnectionAcquireTimeoutError: () => import_connection_acquire_timeout_error.default,\n  ConnectionError: () => import_connection_error.default,\n  ConnectionRefusedError: () => import_connection_refused_error.default,\n  ConnectionTimedOutError: () => import_connection_timed_out_error.default,\n  DatabaseError: () => import_database_error.default,\n  EagerLoadingError: () => import_eager_loading_error.default,\n  EmptyResultError: () => import_empty_result_error.default,\n  ExclusionConstraintError: () => import_exclusion_constraint_error.default,\n  ForeignKeyConstraintError: () => import_foreign_key_constraint_error.default,\n  HostNotFoundError: () => import_host_not_found_error.default,\n  HostNotReachableError: () => import_host_not_reachable_error.default,\n  InstanceError: () => import_instance_error.default,\n  InvalidConnectionError: () => import_invalid_connection_error.default,\n  OptimisticLockError: () => import_optimistic_lock_error.default,\n  QueryError: () => import_query_error.default,\n  SequelizeScopeError: () => import_sequelize_scope_error.default,\n  TimeoutError: () => import_timeout_error.default,\n  UniqueConstraintError: () => import_unique_constraint_error.default,\n  UnknownConstraintError: () => import_unknown_constraint_error.default,\n  ValidationError: () => import_validation_error.default,\n  ValidationErrorItem: () => import_validation_error.ValidationErrorItem,\n  ValidationErrorItemOrigin: () => import_validation_error.ValidationErrorItemOrigin,\n  ValidationErrorItemType: () => import_validation_error.ValidationErrorItemType\n});\nvar import_base_error = __toESM(require(\"./base-error\"));\nvar import_database_error = __toESM(require(\"./database-error\"));\nvar import_aggregate_error = __toESM(require(\"./aggregate-error\"));\nvar import_association_error = __toESM(require(\"./association-error\"));\nvar import_bulk_record_error = __toESM(require(\"./bulk-record-error\"));\nvar import_connection_error = __toESM(require(\"./connection-error\"));\nvar import_eager_loading_error = __toESM(require(\"./eager-loading-error\"));\nvar import_empty_result_error = __toESM(require(\"./empty-result-error\"));\nvar import_instance_error = __toESM(require(\"./instance-error\"));\nvar import_optimistic_lock_error = __toESM(require(\"./optimistic-lock-error\"));\nvar import_query_error = __toESM(require(\"./query-error\"));\nvar import_sequelize_scope_error = __toESM(require(\"./sequelize-scope-error\"));\nvar import_validation_error = __toESM(require(\"./validation-error\"));\nvar import_access_denied_error = __toESM(require(\"./connection/access-denied-error\"));\nvar import_connection_acquire_timeout_error = __toESM(require(\"./connection/connection-acquire-timeout-error\"));\nvar import_connection_refused_error = __toESM(require(\"./connection/connection-refused-error\"));\nvar import_connection_timed_out_error = __toESM(require(\"./connection/connection-timed-out-error\"));\nvar import_host_not_found_error = __toESM(require(\"./connection/host-not-found-error\"));\nvar import_host_not_reachable_error = __toESM(require(\"./connection/host-not-reachable-error\"));\nvar import_invalid_connection_error = __toESM(require(\"./connection/invalid-connection-error\"));\nvar import_exclusion_constraint_error = __toESM(require(\"./database/exclusion-constraint-error\"));\nvar import_foreign_key_constraint_error = __toESM(require(\"./database/foreign-key-constraint-error\"));\nvar import_timeout_error = __toESM(require(\"./database/timeout-error\"));\nvar import_unknown_constraint_error = __toESM(require(\"./database/unknown-constraint-error\"));\nvar import_unique_constraint_error = __toESM(require(\"./validation/unique-constraint-error\"));\nvar import_async_queue = require(\"../dialects/mssql/async-queue\");\nmodule.exports = __toCommonJS(errors_exports);\n//# sourceMappingURL=index.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/errors/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1918,
    "kind": "variable",
    "name": "__create",
    "memberof": "lib/errors/index.js",
    "static": true,
    "longname": "lib/errors/index.js~__create",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1919,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/errors/index.js",
    "static": true,
    "longname": "lib/errors/index.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1920,
    "kind": "variable",
    "name": "__getOwnPropDesc",
    "memberof": "lib/errors/index.js",
    "static": true,
    "longname": "lib/errors/index.js~__getOwnPropDesc",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1921,
    "kind": "variable",
    "name": "__getOwnPropNames",
    "memberof": "lib/errors/index.js",
    "static": true,
    "longname": "lib/errors/index.js~__getOwnPropNames",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1922,
    "kind": "variable",
    "name": "__getProtoOf",
    "memberof": "lib/errors/index.js",
    "static": true,
    "longname": "lib/errors/index.js~__getProtoOf",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1923,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/errors/index.js",
    "static": true,
    "longname": "lib/errors/index.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1924,
    "kind": "function",
    "name": "__markAsModule",
    "memberof": "lib/errors/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/index.js~__markAsModule",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1925,
    "kind": "function",
    "name": "__export",
    "memberof": "lib/errors/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/index.js~__export",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "all",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1926,
    "kind": "function",
    "name": "__reExport",
    "memberof": "lib/errors/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/index.js~__reExport",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "copyDefault",
        "types": [
          "*"
        ]
      },
      {
        "name": "desc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1927,
    "kind": "function",
    "name": "__toESM",
    "memberof": "lib/errors/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/index.js~__toESM",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "isNodeMode",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1928,
    "kind": "variable",
    "name": "__toCommonJS",
    "memberof": "lib/errors/index.js",
    "static": true,
    "longname": "lib/errors/index.js~__toCommonJS",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1929,
    "kind": "variable",
    "name": "errors_exports",
    "memberof": "lib/errors/index.js",
    "static": true,
    "longname": "lib/errors/index.js~errors_exports",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1930,
    "kind": "variable",
    "name": "import_base_error",
    "memberof": "lib/errors/index.js",
    "static": true,
    "longname": "lib/errors/index.js~import_base_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1931,
    "kind": "variable",
    "name": "import_database_error",
    "memberof": "lib/errors/index.js",
    "static": true,
    "longname": "lib/errors/index.js~import_database_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1932,
    "kind": "variable",
    "name": "import_aggregate_error",
    "memberof": "lib/errors/index.js",
    "static": true,
    "longname": "lib/errors/index.js~import_aggregate_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1933,
    "kind": "variable",
    "name": "import_association_error",
    "memberof": "lib/errors/index.js",
    "static": true,
    "longname": "lib/errors/index.js~import_association_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1934,
    "kind": "variable",
    "name": "import_bulk_record_error",
    "memberof": "lib/errors/index.js",
    "static": true,
    "longname": "lib/errors/index.js~import_bulk_record_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1935,
    "kind": "variable",
    "name": "import_connection_error",
    "memberof": "lib/errors/index.js",
    "static": true,
    "longname": "lib/errors/index.js~import_connection_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1936,
    "kind": "variable",
    "name": "import_eager_loading_error",
    "memberof": "lib/errors/index.js",
    "static": true,
    "longname": "lib/errors/index.js~import_eager_loading_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1937,
    "kind": "variable",
    "name": "import_empty_result_error",
    "memberof": "lib/errors/index.js",
    "static": true,
    "longname": "lib/errors/index.js~import_empty_result_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1938,
    "kind": "variable",
    "name": "import_instance_error",
    "memberof": "lib/errors/index.js",
    "static": true,
    "longname": "lib/errors/index.js~import_instance_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1939,
    "kind": "variable",
    "name": "import_optimistic_lock_error",
    "memberof": "lib/errors/index.js",
    "static": true,
    "longname": "lib/errors/index.js~import_optimistic_lock_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1940,
    "kind": "variable",
    "name": "import_query_error",
    "memberof": "lib/errors/index.js",
    "static": true,
    "longname": "lib/errors/index.js~import_query_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1941,
    "kind": "variable",
    "name": "import_sequelize_scope_error",
    "memberof": "lib/errors/index.js",
    "static": true,
    "longname": "lib/errors/index.js~import_sequelize_scope_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1942,
    "kind": "variable",
    "name": "import_validation_error",
    "memberof": "lib/errors/index.js",
    "static": true,
    "longname": "lib/errors/index.js~import_validation_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1943,
    "kind": "variable",
    "name": "import_access_denied_error",
    "memberof": "lib/errors/index.js",
    "static": true,
    "longname": "lib/errors/index.js~import_access_denied_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1944,
    "kind": "variable",
    "name": "import_connection_acquire_timeout_error",
    "memberof": "lib/errors/index.js",
    "static": true,
    "longname": "lib/errors/index.js~import_connection_acquire_timeout_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1945,
    "kind": "variable",
    "name": "import_connection_refused_error",
    "memberof": "lib/errors/index.js",
    "static": true,
    "longname": "lib/errors/index.js~import_connection_refused_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1946,
    "kind": "variable",
    "name": "import_connection_timed_out_error",
    "memberof": "lib/errors/index.js",
    "static": true,
    "longname": "lib/errors/index.js~import_connection_timed_out_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1947,
    "kind": "variable",
    "name": "import_host_not_found_error",
    "memberof": "lib/errors/index.js",
    "static": true,
    "longname": "lib/errors/index.js~import_host_not_found_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1948,
    "kind": "variable",
    "name": "import_host_not_reachable_error",
    "memberof": "lib/errors/index.js",
    "static": true,
    "longname": "lib/errors/index.js~import_host_not_reachable_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1949,
    "kind": "variable",
    "name": "import_invalid_connection_error",
    "memberof": "lib/errors/index.js",
    "static": true,
    "longname": "lib/errors/index.js~import_invalid_connection_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1950,
    "kind": "variable",
    "name": "import_exclusion_constraint_error",
    "memberof": "lib/errors/index.js",
    "static": true,
    "longname": "lib/errors/index.js~import_exclusion_constraint_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1951,
    "kind": "variable",
    "name": "import_foreign_key_constraint_error",
    "memberof": "lib/errors/index.js",
    "static": true,
    "longname": "lib/errors/index.js~import_foreign_key_constraint_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1952,
    "kind": "variable",
    "name": "import_timeout_error",
    "memberof": "lib/errors/index.js",
    "static": true,
    "longname": "lib/errors/index.js~import_timeout_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1953,
    "kind": "variable",
    "name": "import_unknown_constraint_error",
    "memberof": "lib/errors/index.js",
    "static": true,
    "longname": "lib/errors/index.js~import_unknown_constraint_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1954,
    "kind": "variable",
    "name": "import_unique_constraint_error",
    "memberof": "lib/errors/index.js",
    "static": true,
    "longname": "lib/errors/index.js~import_unique_constraint_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1955,
    "kind": "variable",
    "name": "import_async_queue",
    "memberof": "lib/errors/index.js",
    "static": true,
    "longname": "lib/errors/index.js~import_async_queue",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1956,
    "kind": "file",
    "name": "lib/errors/instance-error.js",
    "content": "var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __markAsModule = (target) => __defProp(target, \"__esModule\", { value: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __reExport = (target, module2, copyDefault, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2))\n      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== \"default\"))\n        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });\n  }\n  return target;\n};\nvar __toESM = (module2, isNodeMode) => {\n  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);\n};\nvar __toCommonJS = /* @__PURE__ */ ((cache) => {\n  return (module2, temp) => {\n    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);\n  };\n})(typeof WeakMap !== \"undefined\" ? /* @__PURE__ */ new WeakMap() : 0);\nvar instance_error_exports = {};\n__export(instance_error_exports, {\n  default: () => instance_error_default\n});\nvar import_base_error = __toESM(require(\"./base-error\"));\nclass InstanceError extends import_base_error.default {\n  constructor(message) {\n    super(message);\n    this.name = \"SequelizeInstanceError\";\n  }\n}\nvar instance_error_default = InstanceError;\nmodule.exports = __toCommonJS(instance_error_exports);\n//# sourceMappingURL=instance-error.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/errors/instance-error.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1957,
    "kind": "variable",
    "name": "__create",
    "memberof": "lib/errors/instance-error.js",
    "static": true,
    "longname": "lib/errors/instance-error.js~__create",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/instance-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1958,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/errors/instance-error.js",
    "static": true,
    "longname": "lib/errors/instance-error.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/instance-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1959,
    "kind": "variable",
    "name": "__getOwnPropDesc",
    "memberof": "lib/errors/instance-error.js",
    "static": true,
    "longname": "lib/errors/instance-error.js~__getOwnPropDesc",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/instance-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1960,
    "kind": "variable",
    "name": "__getOwnPropNames",
    "memberof": "lib/errors/instance-error.js",
    "static": true,
    "longname": "lib/errors/instance-error.js~__getOwnPropNames",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/instance-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1961,
    "kind": "variable",
    "name": "__getProtoOf",
    "memberof": "lib/errors/instance-error.js",
    "static": true,
    "longname": "lib/errors/instance-error.js~__getProtoOf",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/instance-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1962,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/errors/instance-error.js",
    "static": true,
    "longname": "lib/errors/instance-error.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/instance-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1963,
    "kind": "function",
    "name": "__markAsModule",
    "memberof": "lib/errors/instance-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/instance-error.js~__markAsModule",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/instance-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1964,
    "kind": "function",
    "name": "__export",
    "memberof": "lib/errors/instance-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/instance-error.js~__export",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/instance-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "all",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1965,
    "kind": "function",
    "name": "__reExport",
    "memberof": "lib/errors/instance-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/instance-error.js~__reExport",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/instance-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "copyDefault",
        "types": [
          "*"
        ]
      },
      {
        "name": "desc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1966,
    "kind": "function",
    "name": "__toESM",
    "memberof": "lib/errors/instance-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/instance-error.js~__toESM",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/instance-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "isNodeMode",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1967,
    "kind": "variable",
    "name": "__toCommonJS",
    "memberof": "lib/errors/instance-error.js",
    "static": true,
    "longname": "lib/errors/instance-error.js~__toCommonJS",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/instance-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1968,
    "kind": "variable",
    "name": "instance_error_exports",
    "memberof": "lib/errors/instance-error.js",
    "static": true,
    "longname": "lib/errors/instance-error.js~instance_error_exports",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/instance-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1969,
    "kind": "variable",
    "name": "import_base_error",
    "memberof": "lib/errors/instance-error.js",
    "static": true,
    "longname": "lib/errors/instance-error.js~import_base_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/instance-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1970,
    "kind": "class",
    "name": "InstanceError",
    "memberof": "lib/errors/instance-error.js",
    "static": true,
    "longname": "lib/errors/instance-error.js~InstanceError",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/instance-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "interface": false,
    "extends": [
      "import_base_error~import_base_error.default"
    ],
    "ignore": true
  },
  {
    "__docId__": 1971,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/errors/instance-error.js~InstanceError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/errors/instance-error.js~InstanceError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 1972,
    "kind": "member",
    "name": "name",
    "memberof": "lib/errors/instance-error.js~InstanceError",
    "static": false,
    "longname": "lib/errors/instance-error.js~InstanceError#name",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1973,
    "kind": "variable",
    "name": "instance_error_default",
    "memberof": "lib/errors/instance-error.js",
    "static": true,
    "longname": "lib/errors/instance-error.js~instance_error_default",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/instance-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1974,
    "kind": "file",
    "name": "lib/errors/optimistic-lock-error.js",
    "content": "var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __markAsModule = (target) => __defProp(target, \"__esModule\", { value: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __reExport = (target, module2, copyDefault, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2))\n      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== \"default\"))\n        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });\n  }\n  return target;\n};\nvar __toESM = (module2, isNodeMode) => {\n  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);\n};\nvar __toCommonJS = /* @__PURE__ */ ((cache) => {\n  return (module2, temp) => {\n    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);\n  };\n})(typeof WeakMap !== \"undefined\" ? /* @__PURE__ */ new WeakMap() : 0);\nvar optimistic_lock_error_exports = {};\n__export(optimistic_lock_error_exports, {\n  default: () => optimistic_lock_error_default\n});\nvar import_base_error = __toESM(require(\"./base-error\"));\nclass OptimisticLockError extends import_base_error.default {\n  modelName;\n  values;\n  where;\n  constructor(options) {\n    options = options || {};\n    options.message = options.message || `Attempting to update a stale model instance: ${options.modelName}`;\n    super(options.message);\n    this.name = \"SequelizeOptimisticLockError\";\n    this.modelName = options.modelName;\n    this.values = options.values;\n    this.where = options.where;\n  }\n}\nvar optimistic_lock_error_default = OptimisticLockError;\nmodule.exports = __toCommonJS(optimistic_lock_error_exports);\n//# sourceMappingURL=optimistic-lock-error.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/errors/optimistic-lock-error.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1975,
    "kind": "variable",
    "name": "__create",
    "memberof": "lib/errors/optimistic-lock-error.js",
    "static": true,
    "longname": "lib/errors/optimistic-lock-error.js~__create",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/optimistic-lock-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1976,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/errors/optimistic-lock-error.js",
    "static": true,
    "longname": "lib/errors/optimistic-lock-error.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/optimistic-lock-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1977,
    "kind": "variable",
    "name": "__getOwnPropDesc",
    "memberof": "lib/errors/optimistic-lock-error.js",
    "static": true,
    "longname": "lib/errors/optimistic-lock-error.js~__getOwnPropDesc",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/optimistic-lock-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1978,
    "kind": "variable",
    "name": "__getOwnPropNames",
    "memberof": "lib/errors/optimistic-lock-error.js",
    "static": true,
    "longname": "lib/errors/optimistic-lock-error.js~__getOwnPropNames",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/optimistic-lock-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1979,
    "kind": "variable",
    "name": "__getProtoOf",
    "memberof": "lib/errors/optimistic-lock-error.js",
    "static": true,
    "longname": "lib/errors/optimistic-lock-error.js~__getProtoOf",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/optimistic-lock-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1980,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/errors/optimistic-lock-error.js",
    "static": true,
    "longname": "lib/errors/optimistic-lock-error.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/optimistic-lock-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1981,
    "kind": "function",
    "name": "__markAsModule",
    "memberof": "lib/errors/optimistic-lock-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/optimistic-lock-error.js~__markAsModule",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/optimistic-lock-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1982,
    "kind": "function",
    "name": "__export",
    "memberof": "lib/errors/optimistic-lock-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/optimistic-lock-error.js~__export",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/optimistic-lock-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "all",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1983,
    "kind": "function",
    "name": "__reExport",
    "memberof": "lib/errors/optimistic-lock-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/optimistic-lock-error.js~__reExport",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/optimistic-lock-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "copyDefault",
        "types": [
          "*"
        ]
      },
      {
        "name": "desc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1984,
    "kind": "function",
    "name": "__toESM",
    "memberof": "lib/errors/optimistic-lock-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/optimistic-lock-error.js~__toESM",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/optimistic-lock-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "isNodeMode",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1985,
    "kind": "variable",
    "name": "__toCommonJS",
    "memberof": "lib/errors/optimistic-lock-error.js",
    "static": true,
    "longname": "lib/errors/optimistic-lock-error.js~__toCommonJS",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/optimistic-lock-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1986,
    "kind": "variable",
    "name": "optimistic_lock_error_exports",
    "memberof": "lib/errors/optimistic-lock-error.js",
    "static": true,
    "longname": "lib/errors/optimistic-lock-error.js~optimistic_lock_error_exports",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/optimistic-lock-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1987,
    "kind": "variable",
    "name": "import_base_error",
    "memberof": "lib/errors/optimistic-lock-error.js",
    "static": true,
    "longname": "lib/errors/optimistic-lock-error.js~import_base_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/optimistic-lock-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1988,
    "kind": "class",
    "name": "OptimisticLockError",
    "memberof": "lib/errors/optimistic-lock-error.js",
    "static": true,
    "longname": "lib/errors/optimistic-lock-error.js~OptimisticLockError",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/optimistic-lock-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "interface": false,
    "extends": [
      "import_base_error~import_base_error.default"
    ],
    "ignore": true
  },
  {
    "__docId__": 1989,
    "kind": "member",
    "name": "modelName",
    "memberof": "lib/errors/optimistic-lock-error.js~OptimisticLockError",
    "static": false,
    "longname": "lib/errors/optimistic-lock-error.js~OptimisticLockError#modelName",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1990,
    "kind": "member",
    "name": "values",
    "memberof": "lib/errors/optimistic-lock-error.js~OptimisticLockError",
    "static": false,
    "longname": "lib/errors/optimistic-lock-error.js~OptimisticLockError#values",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1991,
    "kind": "member",
    "name": "where",
    "memberof": "lib/errors/optimistic-lock-error.js~OptimisticLockError",
    "static": false,
    "longname": "lib/errors/optimistic-lock-error.js~OptimisticLockError#where",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1992,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/errors/optimistic-lock-error.js~OptimisticLockError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/errors/optimistic-lock-error.js~OptimisticLockError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 1993,
    "kind": "member",
    "name": "name",
    "memberof": "lib/errors/optimistic-lock-error.js~OptimisticLockError",
    "static": false,
    "longname": "lib/errors/optimistic-lock-error.js~OptimisticLockError#name",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1997,
    "kind": "variable",
    "name": "optimistic_lock_error_default",
    "memberof": "lib/errors/optimistic-lock-error.js",
    "static": true,
    "longname": "lib/errors/optimistic-lock-error.js~optimistic_lock_error_default",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/optimistic-lock-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1998,
    "kind": "file",
    "name": "lib/errors/query-error.js",
    "content": "var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __markAsModule = (target) => __defProp(target, \"__esModule\", { value: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __reExport = (target, module2, copyDefault, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2))\n      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== \"default\"))\n        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });\n  }\n  return target;\n};\nvar __toESM = (module2, isNodeMode) => {\n  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);\n};\nvar __toCommonJS = /* @__PURE__ */ ((cache) => {\n  return (module2, temp) => {\n    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);\n  };\n})(typeof WeakMap !== \"undefined\" ? /* @__PURE__ */ new WeakMap() : 0);\nvar query_error_exports = {};\n__export(query_error_exports, {\n  default: () => query_error_default\n});\nvar import_base_error = __toESM(require(\"./base-error\"));\nclass QueryError extends import_base_error.default {\n  constructor(message) {\n    super(message);\n    this.name = \"SequelizeQueryError\";\n  }\n}\nvar query_error_default = QueryError;\nmodule.exports = __toCommonJS(query_error_exports);\n//# sourceMappingURL=query-error.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/errors/query-error.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1999,
    "kind": "variable",
    "name": "__create",
    "memberof": "lib/errors/query-error.js",
    "static": true,
    "longname": "lib/errors/query-error.js~__create",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/query-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2000,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/errors/query-error.js",
    "static": true,
    "longname": "lib/errors/query-error.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/query-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2001,
    "kind": "variable",
    "name": "__getOwnPropDesc",
    "memberof": "lib/errors/query-error.js",
    "static": true,
    "longname": "lib/errors/query-error.js~__getOwnPropDesc",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/query-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2002,
    "kind": "variable",
    "name": "__getOwnPropNames",
    "memberof": "lib/errors/query-error.js",
    "static": true,
    "longname": "lib/errors/query-error.js~__getOwnPropNames",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/query-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2003,
    "kind": "variable",
    "name": "__getProtoOf",
    "memberof": "lib/errors/query-error.js",
    "static": true,
    "longname": "lib/errors/query-error.js~__getProtoOf",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/query-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2004,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/errors/query-error.js",
    "static": true,
    "longname": "lib/errors/query-error.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/query-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2005,
    "kind": "function",
    "name": "__markAsModule",
    "memberof": "lib/errors/query-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/query-error.js~__markAsModule",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/query-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2006,
    "kind": "function",
    "name": "__export",
    "memberof": "lib/errors/query-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/query-error.js~__export",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/query-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "all",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2007,
    "kind": "function",
    "name": "__reExport",
    "memberof": "lib/errors/query-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/query-error.js~__reExport",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/query-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "copyDefault",
        "types": [
          "*"
        ]
      },
      {
        "name": "desc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2008,
    "kind": "function",
    "name": "__toESM",
    "memberof": "lib/errors/query-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/query-error.js~__toESM",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/query-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "isNodeMode",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2009,
    "kind": "variable",
    "name": "__toCommonJS",
    "memberof": "lib/errors/query-error.js",
    "static": true,
    "longname": "lib/errors/query-error.js~__toCommonJS",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/query-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2010,
    "kind": "variable",
    "name": "query_error_exports",
    "memberof": "lib/errors/query-error.js",
    "static": true,
    "longname": "lib/errors/query-error.js~query_error_exports",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/query-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2011,
    "kind": "variable",
    "name": "import_base_error",
    "memberof": "lib/errors/query-error.js",
    "static": true,
    "longname": "lib/errors/query-error.js~import_base_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/query-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2012,
    "kind": "class",
    "name": "QueryError",
    "memberof": "lib/errors/query-error.js",
    "static": true,
    "longname": "lib/errors/query-error.js~QueryError",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/query-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "interface": false,
    "extends": [
      "import_base_error~import_base_error.default"
    ],
    "ignore": true
  },
  {
    "__docId__": 2013,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/errors/query-error.js~QueryError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/errors/query-error.js~QueryError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 2014,
    "kind": "member",
    "name": "name",
    "memberof": "lib/errors/query-error.js~QueryError",
    "static": false,
    "longname": "lib/errors/query-error.js~QueryError#name",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2015,
    "kind": "variable",
    "name": "query_error_default",
    "memberof": "lib/errors/query-error.js",
    "static": true,
    "longname": "lib/errors/query-error.js~query_error_default",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/query-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2016,
    "kind": "file",
    "name": "lib/errors/sequelize-scope-error.js",
    "content": "var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __markAsModule = (target) => __defProp(target, \"__esModule\", { value: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __reExport = (target, module2, copyDefault, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2))\n      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== \"default\"))\n        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });\n  }\n  return target;\n};\nvar __toESM = (module2, isNodeMode) => {\n  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);\n};\nvar __toCommonJS = /* @__PURE__ */ ((cache) => {\n  return (module2, temp) => {\n    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);\n  };\n})(typeof WeakMap !== \"undefined\" ? /* @__PURE__ */ new WeakMap() : 0);\nvar sequelize_scope_error_exports = {};\n__export(sequelize_scope_error_exports, {\n  default: () => sequelize_scope_error_default\n});\nvar import_base_error = __toESM(require(\"./base-error\"));\nclass SequelizeScopeError extends import_base_error.default {\n  constructor(message) {\n    super(message);\n    this.name = \"SequelizeScopeError\";\n  }\n}\nvar sequelize_scope_error_default = SequelizeScopeError;\nmodule.exports = __toCommonJS(sequelize_scope_error_exports);\n//# sourceMappingURL=sequelize-scope-error.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/errors/sequelize-scope-error.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2017,
    "kind": "variable",
    "name": "__create",
    "memberof": "lib/errors/sequelize-scope-error.js",
    "static": true,
    "longname": "lib/errors/sequelize-scope-error.js~__create",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/sequelize-scope-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2018,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/errors/sequelize-scope-error.js",
    "static": true,
    "longname": "lib/errors/sequelize-scope-error.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/sequelize-scope-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2019,
    "kind": "variable",
    "name": "__getOwnPropDesc",
    "memberof": "lib/errors/sequelize-scope-error.js",
    "static": true,
    "longname": "lib/errors/sequelize-scope-error.js~__getOwnPropDesc",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/sequelize-scope-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2020,
    "kind": "variable",
    "name": "__getOwnPropNames",
    "memberof": "lib/errors/sequelize-scope-error.js",
    "static": true,
    "longname": "lib/errors/sequelize-scope-error.js~__getOwnPropNames",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/sequelize-scope-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2021,
    "kind": "variable",
    "name": "__getProtoOf",
    "memberof": "lib/errors/sequelize-scope-error.js",
    "static": true,
    "longname": "lib/errors/sequelize-scope-error.js~__getProtoOf",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/sequelize-scope-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2022,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/errors/sequelize-scope-error.js",
    "static": true,
    "longname": "lib/errors/sequelize-scope-error.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/sequelize-scope-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2023,
    "kind": "function",
    "name": "__markAsModule",
    "memberof": "lib/errors/sequelize-scope-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/sequelize-scope-error.js~__markAsModule",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/sequelize-scope-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2024,
    "kind": "function",
    "name": "__export",
    "memberof": "lib/errors/sequelize-scope-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/sequelize-scope-error.js~__export",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/sequelize-scope-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "all",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2025,
    "kind": "function",
    "name": "__reExport",
    "memberof": "lib/errors/sequelize-scope-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/sequelize-scope-error.js~__reExport",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/sequelize-scope-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "copyDefault",
        "types": [
          "*"
        ]
      },
      {
        "name": "desc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2026,
    "kind": "function",
    "name": "__toESM",
    "memberof": "lib/errors/sequelize-scope-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/sequelize-scope-error.js~__toESM",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/sequelize-scope-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "isNodeMode",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2027,
    "kind": "variable",
    "name": "__toCommonJS",
    "memberof": "lib/errors/sequelize-scope-error.js",
    "static": true,
    "longname": "lib/errors/sequelize-scope-error.js~__toCommonJS",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/sequelize-scope-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2028,
    "kind": "variable",
    "name": "sequelize_scope_error_exports",
    "memberof": "lib/errors/sequelize-scope-error.js",
    "static": true,
    "longname": "lib/errors/sequelize-scope-error.js~sequelize_scope_error_exports",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/sequelize-scope-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2029,
    "kind": "variable",
    "name": "import_base_error",
    "memberof": "lib/errors/sequelize-scope-error.js",
    "static": true,
    "longname": "lib/errors/sequelize-scope-error.js~import_base_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/sequelize-scope-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2030,
    "kind": "class",
    "name": "SequelizeScopeError",
    "memberof": "lib/errors/sequelize-scope-error.js",
    "static": true,
    "longname": "lib/errors/sequelize-scope-error.js~SequelizeScopeError",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/sequelize-scope-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "interface": false,
    "extends": [
      "import_base_error~import_base_error.default"
    ],
    "ignore": true
  },
  {
    "__docId__": 2031,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/errors/sequelize-scope-error.js~SequelizeScopeError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/errors/sequelize-scope-error.js~SequelizeScopeError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 2032,
    "kind": "member",
    "name": "name",
    "memberof": "lib/errors/sequelize-scope-error.js~SequelizeScopeError",
    "static": false,
    "longname": "lib/errors/sequelize-scope-error.js~SequelizeScopeError#name",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2033,
    "kind": "variable",
    "name": "sequelize_scope_error_default",
    "memberof": "lib/errors/sequelize-scope-error.js",
    "static": true,
    "longname": "lib/errors/sequelize-scope-error.js~sequelize_scope_error_default",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/sequelize-scope-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2034,
    "kind": "file",
    "name": "lib/errors/validation/unique-constraint-error.js",
    "content": "var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __markAsModule = (target) => __defProp(target, \"__esModule\", { value: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __reExport = (target, module2, copyDefault, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2))\n      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== \"default\"))\n        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });\n  }\n  return target;\n};\nvar __toESM = (module2, isNodeMode) => {\n  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);\n};\nvar __toCommonJS = /* @__PURE__ */ ((cache) => {\n  return (module2, temp) => {\n    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);\n  };\n})(typeof WeakMap !== \"undefined\" ? /* @__PURE__ */ new WeakMap() : 0);\nvar unique_constraint_error_exports = {};\n__export(unique_constraint_error_exports, {\n  default: () => unique_constraint_error_default\n});\nvar import_validation_error = __toESM(require(\"../validation-error\"));\nclass UniqueConstraintError extends import_validation_error.default {\n  parent;\n  original;\n  fields;\n  sql;\n  constructor(options) {\n    var _a, _b, _c;\n    options = options != null ? options : {};\n    options.parent = (_a = options.parent) != null ? _a : { sql: \"\", name: \"\", message: \"\" };\n    options.message = options.message || options.parent.message || \"Validation Error\";\n    options.errors = (_b = options.errors) != null ? _b : [];\n    super(options.message, options.errors, { stack: options.stack });\n    this.name = \"SequelizeUniqueConstraintError\";\n    this.fields = (_c = options.fields) != null ? _c : {};\n    this.parent = options.parent;\n    this.original = options.parent;\n    this.sql = options.parent.sql;\n  }\n}\nvar unique_constraint_error_default = UniqueConstraintError;\nmodule.exports = __toCommonJS(unique_constraint_error_exports);\n//# sourceMappingURL=unique-constraint-error.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/errors/validation/unique-constraint-error.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2035,
    "kind": "variable",
    "name": "__create",
    "memberof": "lib/errors/validation/unique-constraint-error.js",
    "static": true,
    "longname": "lib/errors/validation/unique-constraint-error.js~__create",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/validation/unique-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2036,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/errors/validation/unique-constraint-error.js",
    "static": true,
    "longname": "lib/errors/validation/unique-constraint-error.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/validation/unique-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2037,
    "kind": "variable",
    "name": "__getOwnPropDesc",
    "memberof": "lib/errors/validation/unique-constraint-error.js",
    "static": true,
    "longname": "lib/errors/validation/unique-constraint-error.js~__getOwnPropDesc",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/validation/unique-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2038,
    "kind": "variable",
    "name": "__getOwnPropNames",
    "memberof": "lib/errors/validation/unique-constraint-error.js",
    "static": true,
    "longname": "lib/errors/validation/unique-constraint-error.js~__getOwnPropNames",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/validation/unique-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2039,
    "kind": "variable",
    "name": "__getProtoOf",
    "memberof": "lib/errors/validation/unique-constraint-error.js",
    "static": true,
    "longname": "lib/errors/validation/unique-constraint-error.js~__getProtoOf",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/validation/unique-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2040,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/errors/validation/unique-constraint-error.js",
    "static": true,
    "longname": "lib/errors/validation/unique-constraint-error.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/validation/unique-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2041,
    "kind": "function",
    "name": "__markAsModule",
    "memberof": "lib/errors/validation/unique-constraint-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/validation/unique-constraint-error.js~__markAsModule",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/validation/unique-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2042,
    "kind": "function",
    "name": "__export",
    "memberof": "lib/errors/validation/unique-constraint-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/validation/unique-constraint-error.js~__export",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/validation/unique-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "all",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2043,
    "kind": "function",
    "name": "__reExport",
    "memberof": "lib/errors/validation/unique-constraint-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/validation/unique-constraint-error.js~__reExport",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/validation/unique-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "copyDefault",
        "types": [
          "*"
        ]
      },
      {
        "name": "desc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2044,
    "kind": "function",
    "name": "__toESM",
    "memberof": "lib/errors/validation/unique-constraint-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/validation/unique-constraint-error.js~__toESM",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/validation/unique-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "isNodeMode",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2045,
    "kind": "variable",
    "name": "__toCommonJS",
    "memberof": "lib/errors/validation/unique-constraint-error.js",
    "static": true,
    "longname": "lib/errors/validation/unique-constraint-error.js~__toCommonJS",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/validation/unique-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2046,
    "kind": "variable",
    "name": "unique_constraint_error_exports",
    "memberof": "lib/errors/validation/unique-constraint-error.js",
    "static": true,
    "longname": "lib/errors/validation/unique-constraint-error.js~unique_constraint_error_exports",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/validation/unique-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2047,
    "kind": "variable",
    "name": "import_validation_error",
    "memberof": "lib/errors/validation/unique-constraint-error.js",
    "static": true,
    "longname": "lib/errors/validation/unique-constraint-error.js~import_validation_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/validation/unique-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2048,
    "kind": "class",
    "name": "UniqueConstraintError",
    "memberof": "lib/errors/validation/unique-constraint-error.js",
    "static": true,
    "longname": "lib/errors/validation/unique-constraint-error.js~UniqueConstraintError",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/validation/unique-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "interface": false,
    "extends": [
      "import_validation_error~import_validation_error.default"
    ],
    "ignore": true
  },
  {
    "__docId__": 2049,
    "kind": "member",
    "name": "parent",
    "memberof": "lib/errors/validation/unique-constraint-error.js~UniqueConstraintError",
    "static": false,
    "longname": "lib/errors/validation/unique-constraint-error.js~UniqueConstraintError#parent",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2050,
    "kind": "member",
    "name": "original",
    "memberof": "lib/errors/validation/unique-constraint-error.js~UniqueConstraintError",
    "static": false,
    "longname": "lib/errors/validation/unique-constraint-error.js~UniqueConstraintError#original",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2051,
    "kind": "member",
    "name": "fields",
    "memberof": "lib/errors/validation/unique-constraint-error.js~UniqueConstraintError",
    "static": false,
    "longname": "lib/errors/validation/unique-constraint-error.js~UniqueConstraintError#fields",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2052,
    "kind": "member",
    "name": "sql",
    "memberof": "lib/errors/validation/unique-constraint-error.js~UniqueConstraintError",
    "static": false,
    "longname": "lib/errors/validation/unique-constraint-error.js~UniqueConstraintError#sql",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2053,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/errors/validation/unique-constraint-error.js~UniqueConstraintError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/errors/validation/unique-constraint-error.js~UniqueConstraintError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 2054,
    "kind": "member",
    "name": "name",
    "memberof": "lib/errors/validation/unique-constraint-error.js~UniqueConstraintError",
    "static": false,
    "longname": "lib/errors/validation/unique-constraint-error.js~UniqueConstraintError#name",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2059,
    "kind": "variable",
    "name": "unique_constraint_error_default",
    "memberof": "lib/errors/validation/unique-constraint-error.js",
    "static": true,
    "longname": "lib/errors/validation/unique-constraint-error.js~unique_constraint_error_default",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/validation/unique-constraint-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2060,
    "kind": "file",
    "name": "lib/errors/validation-error.js",
    "content": "var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __markAsModule = (target) => __defProp(target, \"__esModule\", { value: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __reExport = (target, module2, copyDefault, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2))\n      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== \"default\"))\n        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });\n  }\n  return target;\n};\nvar __toESM = (module2, isNodeMode) => {\n  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);\n};\nvar __toCommonJS = /* @__PURE__ */ ((cache) => {\n  return (module2, temp) => {\n    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);\n  };\n})(typeof WeakMap !== \"undefined\" ? /* @__PURE__ */ new WeakMap() : 0);\nvar validation_error_exports = {};\n__export(validation_error_exports, {\n  ValidationErrorItem: () => ValidationErrorItem,\n  ValidationErrorItemOrigin: () => ValidationErrorItemOrigin,\n  ValidationErrorItemType: () => ValidationErrorItemType,\n  default: () => validation_error_default\n});\nvar import_base_error = __toESM(require(\"./base-error\"));\nvar ValidationErrorItemType = /* @__PURE__ */ ((ValidationErrorItemType2) => {\n  ValidationErrorItemType2[\"notnull violation\"] = \"CORE\";\n  ValidationErrorItemType2[\"string violation\"] = \"CORE\";\n  ValidationErrorItemType2[\"unique violation\"] = \"DB\";\n  ValidationErrorItemType2[\"validation error\"] = \"FUNCTION\";\n  return ValidationErrorItemType2;\n})(ValidationErrorItemType || {});\nvar ValidationErrorItemOrigin = /* @__PURE__ */ ((ValidationErrorItemOrigin2) => {\n  ValidationErrorItemOrigin2[\"CORE\"] = \"CORE\";\n  ValidationErrorItemOrigin2[\"DB\"] = \"DB\";\n  ValidationErrorItemOrigin2[\"FUNCTION\"] = \"FUNCTION\";\n  return ValidationErrorItemOrigin2;\n})(ValidationErrorItemOrigin || {});\nclass ValidationErrorItem {\n  static TypeStringMap = ValidationErrorItemType;\n  static Origins = ValidationErrorItemOrigin;\n  message;\n  type;\n  path;\n  value;\n  origin;\n  instance;\n  validatorKey;\n  validatorName;\n  validatorArgs;\n  constructor(message, type, path, value, instance, validatorKey, fnName, fnArgs) {\n    this.message = message || \"\";\n    this.type = null;\n    this.path = path || null;\n    this.value = value !== void 0 ? value : null;\n    this.origin = null;\n    this.instance = instance || null;\n    this.validatorKey = validatorKey || null;\n    this.validatorName = fnName || null;\n    this.validatorArgs = fnArgs || [];\n    if (type) {\n      if (this.isValidationErrorItemOrigin(type)) {\n        this.origin = type;\n      } else {\n        const lowercaseType = this.normalizeString(type);\n        const realType = ValidationErrorItemType[lowercaseType];\n        if (realType && ValidationErrorItemOrigin[realType]) {\n          this.origin = realType;\n          this.type = type;\n        }\n      }\n    }\n  }\n  isValidationErrorItemOrigin(origin) {\n    return ValidationErrorItemOrigin[origin] !== void 0;\n  }\n  normalizeString(str) {\n    return str.toLowerCase().trim();\n  }\n  getValidatorKey(useTypeAsNS, NSSeparator) {\n    const useTANS = useTypeAsNS === void 0 || Boolean(useTypeAsNS);\n    const NSSep = NSSeparator === void 0 ? \".\" : NSSeparator;\n    const type = this.origin;\n    const key = this.validatorKey || this.validatorName;\n    const useNS = useTANS && type && ValidationErrorItemOrigin[type];\n    if (useNS && (typeof NSSep !== \"string\" || NSSep.length === 0)) {\n      throw new Error(\"Invalid namespace separator given, must be a non-empty string\");\n    }\n    if (!(typeof key === \"string\" && key.length > 0)) {\n      return \"\";\n    }\n    return (useNS ? [this.origin, key].join(NSSep) : key).toLowerCase().trim();\n  }\n}\nclass ValidationError extends import_base_error.default {\n  errors;\n  constructor(message, errors, options = {}) {\n    super(message);\n    this.name = \"SequelizeValidationError\";\n    this.errors = errors || [];\n    if (message) {\n      this.message = message;\n    } else if (this.errors.length > 0 && this.errors[0].message) {\n      this.message = this.errors.map((err) => `${err.type || err.origin}: ${err.message}`).join(\",\\n\");\n    }\n    if (options.stack) {\n      this.stack = options.stack;\n    }\n  }\n  get(path) {\n    const out = [];\n    for (const error of this.errors) {\n      if (error.path === path) {\n        out.push(error);\n      }\n    }\n    return out;\n  }\n}\nvar validation_error_default = ValidationError;\nmodule.exports = __toCommonJS(validation_error_exports);\n//# sourceMappingURL=validation-error.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/errors/validation-error.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2061,
    "kind": "variable",
    "name": "__create",
    "memberof": "lib/errors/validation-error.js",
    "static": true,
    "longname": "lib/errors/validation-error.js~__create",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/validation-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2062,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/errors/validation-error.js",
    "static": true,
    "longname": "lib/errors/validation-error.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/validation-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2063,
    "kind": "variable",
    "name": "__getOwnPropDesc",
    "memberof": "lib/errors/validation-error.js",
    "static": true,
    "longname": "lib/errors/validation-error.js~__getOwnPropDesc",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/validation-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2064,
    "kind": "variable",
    "name": "__getOwnPropNames",
    "memberof": "lib/errors/validation-error.js",
    "static": true,
    "longname": "lib/errors/validation-error.js~__getOwnPropNames",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/validation-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2065,
    "kind": "variable",
    "name": "__getProtoOf",
    "memberof": "lib/errors/validation-error.js",
    "static": true,
    "longname": "lib/errors/validation-error.js~__getProtoOf",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/validation-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2066,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/errors/validation-error.js",
    "static": true,
    "longname": "lib/errors/validation-error.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/validation-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2067,
    "kind": "function",
    "name": "__markAsModule",
    "memberof": "lib/errors/validation-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/validation-error.js~__markAsModule",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/validation-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2068,
    "kind": "function",
    "name": "__export",
    "memberof": "lib/errors/validation-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/validation-error.js~__export",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/validation-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "all",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2069,
    "kind": "function",
    "name": "__reExport",
    "memberof": "lib/errors/validation-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/validation-error.js~__reExport",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/validation-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "copyDefault",
        "types": [
          "*"
        ]
      },
      {
        "name": "desc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2070,
    "kind": "function",
    "name": "__toESM",
    "memberof": "lib/errors/validation-error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/errors/validation-error.js~__toESM",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/validation-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "isNodeMode",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2071,
    "kind": "variable",
    "name": "__toCommonJS",
    "memberof": "lib/errors/validation-error.js",
    "static": true,
    "longname": "lib/errors/validation-error.js~__toCommonJS",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/errors/validation-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2072,
    "kind": "variable",
    "name": "validation_error_exports",
    "memberof": "lib/errors/validation-error.js",
    "static": true,
    "longname": "lib/errors/validation-error.js~validation_error_exports",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/validation-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2073,
    "kind": "variable",
    "name": "import_base_error",
    "memberof": "lib/errors/validation-error.js",
    "static": true,
    "longname": "lib/errors/validation-error.js~import_base_error",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/validation-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2074,
    "kind": "variable",
    "name": "ValidationErrorItemType",
    "memberof": "lib/errors/validation-error.js",
    "static": true,
    "longname": "lib/errors/validation-error.js~ValidationErrorItemType",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/validation-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2075,
    "kind": "variable",
    "name": "ValidationErrorItemOrigin",
    "memberof": "lib/errors/validation-error.js",
    "static": true,
    "longname": "lib/errors/validation-error.js~ValidationErrorItemOrigin",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/validation-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2076,
    "kind": "class",
    "name": "ValidationErrorItem",
    "memberof": "lib/errors/validation-error.js",
    "static": true,
    "longname": "lib/errors/validation-error.js~ValidationErrorItem",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/validation-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 2077,
    "kind": "member",
    "name": "TypeStringMap",
    "memberof": "lib/errors/validation-error.js~ValidationErrorItem",
    "static": true,
    "longname": "lib/errors/validation-error.js~ValidationErrorItem.TypeStringMap",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2078,
    "kind": "member",
    "name": "Origins",
    "memberof": "lib/errors/validation-error.js~ValidationErrorItem",
    "static": true,
    "longname": "lib/errors/validation-error.js~ValidationErrorItem.Origins",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2079,
    "kind": "member",
    "name": "message",
    "memberof": "lib/errors/validation-error.js~ValidationErrorItem",
    "static": false,
    "longname": "lib/errors/validation-error.js~ValidationErrorItem#message",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2080,
    "kind": "member",
    "name": "type",
    "memberof": "lib/errors/validation-error.js~ValidationErrorItem",
    "static": false,
    "longname": "lib/errors/validation-error.js~ValidationErrorItem#type",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2081,
    "kind": "member",
    "name": "path",
    "memberof": "lib/errors/validation-error.js~ValidationErrorItem",
    "static": false,
    "longname": "lib/errors/validation-error.js~ValidationErrorItem#path",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2082,
    "kind": "member",
    "name": "value",
    "memberof": "lib/errors/validation-error.js~ValidationErrorItem",
    "static": false,
    "longname": "lib/errors/validation-error.js~ValidationErrorItem#value",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2083,
    "kind": "member",
    "name": "origin",
    "memberof": "lib/errors/validation-error.js~ValidationErrorItem",
    "static": false,
    "longname": "lib/errors/validation-error.js~ValidationErrorItem#origin",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2084,
    "kind": "member",
    "name": "instance",
    "memberof": "lib/errors/validation-error.js~ValidationErrorItem",
    "static": false,
    "longname": "lib/errors/validation-error.js~ValidationErrorItem#instance",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2085,
    "kind": "member",
    "name": "validatorKey",
    "memberof": "lib/errors/validation-error.js~ValidationErrorItem",
    "static": false,
    "longname": "lib/errors/validation-error.js~ValidationErrorItem#validatorKey",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2086,
    "kind": "member",
    "name": "validatorName",
    "memberof": "lib/errors/validation-error.js~ValidationErrorItem",
    "static": false,
    "longname": "lib/errors/validation-error.js~ValidationErrorItem#validatorName",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2087,
    "kind": "member",
    "name": "validatorArgs",
    "memberof": "lib/errors/validation-error.js~ValidationErrorItem",
    "static": false,
    "longname": "lib/errors/validation-error.js~ValidationErrorItem#validatorArgs",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2088,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/errors/validation-error.js~ValidationErrorItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/errors/validation-error.js~ValidationErrorItem#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 2101,
    "kind": "method",
    "name": "isValidationErrorItemOrigin",
    "memberof": "lib/errors/validation-error.js~ValidationErrorItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/errors/validation-error.js~ValidationErrorItem#isValidationErrorItemOrigin",
    "access": "public",
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "params": [
      {
        "name": "origin",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2102,
    "kind": "method",
    "name": "normalizeString",
    "memberof": "lib/errors/validation-error.js~ValidationErrorItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/errors/validation-error.js~ValidationErrorItem#normalizeString",
    "access": "public",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "params": [
      {
        "name": "str",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2103,
    "kind": "method",
    "name": "getValidatorKey",
    "memberof": "lib/errors/validation-error.js~ValidationErrorItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/errors/validation-error.js~ValidationErrorItem#getValidatorKey",
    "access": "public",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "params": [
      {
        "name": "useTypeAsNS",
        "types": [
          "*"
        ]
      },
      {
        "name": "NSSeparator",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2104,
    "kind": "class",
    "name": "ValidationError",
    "memberof": "lib/errors/validation-error.js",
    "static": true,
    "longname": "lib/errors/validation-error.js~ValidationError",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/validation-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "interface": false,
    "extends": [
      "import_base_error~import_base_error.default"
    ],
    "ignore": true
  },
  {
    "__docId__": 2105,
    "kind": "member",
    "name": "errors",
    "memberof": "lib/errors/validation-error.js~ValidationError",
    "static": false,
    "longname": "lib/errors/validation-error.js~ValidationError#errors",
    "access": "public",
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2106,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/errors/validation-error.js~ValidationError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/errors/validation-error.js~ValidationError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 2107,
    "kind": "member",
    "name": "name",
    "memberof": "lib/errors/validation-error.js~ValidationError",
    "static": false,
    "longname": "lib/errors/validation-error.js~ValidationError#name",
    "access": "public",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2109,
    "kind": "member",
    "name": "message",
    "memberof": "lib/errors/validation-error.js~ValidationError",
    "static": false,
    "longname": "lib/errors/validation-error.js~ValidationError#message",
    "access": "public",
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2111,
    "kind": "member",
    "name": "stack",
    "memberof": "lib/errors/validation-error.js~ValidationError",
    "static": false,
    "longname": "lib/errors/validation-error.js~ValidationError#stack",
    "access": "public",
    "description": null,
    "lineNumber": 117,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2112,
    "kind": "method",
    "name": "get",
    "memberof": "lib/errors/validation-error.js~ValidationError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/errors/validation-error.js~ValidationError#get",
    "access": "public",
    "description": null,
    "lineNumber": 120,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2113,
    "kind": "variable",
    "name": "validation_error_default",
    "memberof": "lib/errors/validation-error.js",
    "static": true,
    "longname": "lib/errors/validation-error.js~validation_error_default",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/errors/validation-error.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2114,
    "kind": "file",
    "name": "lib/generic/falsy.js",
    "content": "var __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __markAsModule = (target) => __defProp(target, \"__esModule\", { value: true });\nvar __reExport = (target, module2, copyDefault, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2))\n      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== \"default\"))\n        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });\n  }\n  return target;\n};\nvar __toCommonJS = /* @__PURE__ */ ((cache) => {\n  return (module2, temp) => {\n    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);\n  };\n})(typeof WeakMap !== \"undefined\" ? /* @__PURE__ */ new WeakMap() : 0);\nvar falsy_exports = {};\nmodule.exports = __toCommonJS(falsy_exports);\n//# sourceMappingURL=falsy.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/generic/falsy.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2115,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/generic/falsy.js",
    "static": true,
    "longname": "lib/generic/falsy.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/generic/falsy.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2116,
    "kind": "variable",
    "name": "__getOwnPropDesc",
    "memberof": "lib/generic/falsy.js",
    "static": true,
    "longname": "lib/generic/falsy.js~__getOwnPropDesc",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/generic/falsy.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2117,
    "kind": "variable",
    "name": "__getOwnPropNames",
    "memberof": "lib/generic/falsy.js",
    "static": true,
    "longname": "lib/generic/falsy.js~__getOwnPropNames",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/generic/falsy.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2118,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/generic/falsy.js",
    "static": true,
    "longname": "lib/generic/falsy.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/generic/falsy.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2119,
    "kind": "function",
    "name": "__markAsModule",
    "memberof": "lib/generic/falsy.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/generic/falsy.js~__markAsModule",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/generic/falsy.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2120,
    "kind": "function",
    "name": "__reExport",
    "memberof": "lib/generic/falsy.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/generic/falsy.js~__reExport",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/generic/falsy.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "copyDefault",
        "types": [
          "*"
        ]
      },
      {
        "name": "desc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2121,
    "kind": "variable",
    "name": "__toCommonJS",
    "memberof": "lib/generic/falsy.js",
    "static": true,
    "longname": "lib/generic/falsy.js~__toCommonJS",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/generic/falsy.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2122,
    "kind": "variable",
    "name": "falsy_exports",
    "memberof": "lib/generic/falsy.js",
    "static": true,
    "longname": "lib/generic/falsy.js~falsy_exports",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/generic/falsy.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2123,
    "kind": "file",
    "name": "lib/generic/sql-fragment.js",
    "content": "var __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __markAsModule = (target) => __defProp(target, \"__esModule\", { value: true });\nvar __reExport = (target, module2, copyDefault, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2))\n      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== \"default\"))\n        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });\n  }\n  return target;\n};\nvar __toCommonJS = /* @__PURE__ */ ((cache) => {\n  return (module2, temp) => {\n    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);\n  };\n})(typeof WeakMap !== \"undefined\" ? /* @__PURE__ */ new WeakMap() : 0);\nvar sql_fragment_exports = {};\nmodule.exports = __toCommonJS(sql_fragment_exports);\n//# sourceMappingURL=sql-fragment.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/generic/sql-fragment.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2124,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/generic/sql-fragment.js",
    "static": true,
    "longname": "lib/generic/sql-fragment.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/generic/sql-fragment.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2125,
    "kind": "variable",
    "name": "__getOwnPropDesc",
    "memberof": "lib/generic/sql-fragment.js",
    "static": true,
    "longname": "lib/generic/sql-fragment.js~__getOwnPropDesc",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/generic/sql-fragment.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2126,
    "kind": "variable",
    "name": "__getOwnPropNames",
    "memberof": "lib/generic/sql-fragment.js",
    "static": true,
    "longname": "lib/generic/sql-fragment.js~__getOwnPropNames",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/generic/sql-fragment.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2127,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/generic/sql-fragment.js",
    "static": true,
    "longname": "lib/generic/sql-fragment.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/generic/sql-fragment.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2128,
    "kind": "function",
    "name": "__markAsModule",
    "memberof": "lib/generic/sql-fragment.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/generic/sql-fragment.js~__markAsModule",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/generic/sql-fragment.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2129,
    "kind": "function",
    "name": "__reExport",
    "memberof": "lib/generic/sql-fragment.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/generic/sql-fragment.js~__reExport",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/generic/sql-fragment.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "copyDefault",
        "types": [
          "*"
        ]
      },
      {
        "name": "desc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2130,
    "kind": "variable",
    "name": "__toCommonJS",
    "memberof": "lib/generic/sql-fragment.js",
    "static": true,
    "longname": "lib/generic/sql-fragment.js~__toCommonJS",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/generic/sql-fragment.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2131,
    "kind": "variable",
    "name": "sql_fragment_exports",
    "memberof": "lib/generic/sql-fragment.js",
    "static": true,
    "longname": "lib/generic/sql-fragment.js~sql_fragment_exports",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/generic/sql-fragment.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2132,
    "kind": "file",
    "name": "lib/hooks.js",
    "content": "\"use strict\";\nconst _ = require(\"lodash\");\nconst { logger } = require(\"./utils/logger\");\nconst debug = logger.debugContext(\"hooks\");\nconst hookTypes = {\n  beforeValidate: { params: 2 },\n  afterValidate: { params: 2 },\n  validationFailed: { params: 3 },\n  beforeCreate: { params: 2 },\n  afterCreate: { params: 2 },\n  beforeDestroy: { params: 2 },\n  afterDestroy: { params: 2 },\n  beforeRestore: { params: 2 },\n  afterRestore: { params: 2 },\n  beforeUpdate: { params: 2 },\n  afterUpdate: { params: 2 },\n  beforeSave: { params: 2, proxies: [\"beforeUpdate\", \"beforeCreate\"] },\n  afterSave: { params: 2, proxies: [\"afterUpdate\", \"afterCreate\"] },\n  beforeUpsert: { params: 2 },\n  afterUpsert: { params: 2 },\n  beforeBulkCreate: { params: 2 },\n  afterBulkCreate: { params: 2 },\n  beforeBulkDestroy: { params: 1 },\n  afterBulkDestroy: { params: 1 },\n  beforeBulkRestore: { params: 1 },\n  afterBulkRestore: { params: 1 },\n  beforeBulkUpdate: { params: 1 },\n  afterBulkUpdate: { params: 1 },\n  beforeFind: { params: 1 },\n  beforeFindAfterExpandIncludeAll: { params: 1 },\n  beforeFindAfterOptions: { params: 1 },\n  afterFind: { params: 2 },\n  beforeCount: { params: 1 },\n  beforeDefine: { params: 2, sync: true, noModel: true },\n  afterDefine: { params: 1, sync: true, noModel: true },\n  beforeInit: { params: 2, sync: true, noModel: true },\n  afterInit: { params: 1, sync: true, noModel: true },\n  beforeAssociate: { params: 2, sync: true },\n  afterAssociate: { params: 2, sync: true },\n  beforeConnect: { params: 1, noModel: true },\n  afterConnect: { params: 2, noModel: true },\n  beforeDisconnect: { params: 1, noModel: true },\n  afterDisconnect: { params: 1, noModel: true },\n  beforeSync: { params: 1 },\n  afterSync: { params: 1 },\n  beforeBulkSync: { params: 1 },\n  afterBulkSync: { params: 1 },\n  beforeQuery: { params: 2 },\n  afterQuery: { params: 2 }\n};\nexports.hooks = hookTypes;\nconst getProxiedHooks = (hookType) => hookTypes[hookType].proxies ? hookTypes[hookType].proxies.concat(hookType) : [hookType];\nfunction getHooks(hooked, hookType) {\n  return (hooked.options.hooks || {})[hookType] || [];\n}\nconst Hooks = {\n  _setupHooks(hooks) {\n    this.options.hooks = {};\n    _.map(hooks || {}, (hooksArray, hookName) => {\n      if (!Array.isArray(hooksArray)) {\n        hooksArray = [hooksArray];\n      }\n      for (const hookFn of hooksArray) {\n        this.addHook(hookName, hookFn);\n      }\n    });\n  },\n  async runHooks(hooks, ...hookArgs) {\n    if (!hooks) {\n      throw new Error(\"runHooks requires at least 1 argument\");\n    }\n    let hookType;\n    if (typeof hooks === \"string\") {\n      hookType = hooks;\n      hooks = getHooks(this, hookType);\n      if (this.sequelize) {\n        hooks = hooks.concat(getHooks(this.sequelize, hookType));\n      }\n    }\n    if (!Array.isArray(hooks)) {\n      hooks = [hooks];\n    }\n    if (hookTypes[hookType] && hookTypes[hookType].sync) {\n      for (let hook of hooks) {\n        if (typeof hook === \"object\") {\n          hook = hook.fn;\n        }\n        debug(`running hook(sync) ${hookType}`);\n        hook.apply(this, hookArgs);\n      }\n      return;\n    }\n    for (let hook of hooks) {\n      if (typeof hook === \"object\") {\n        hook = hook.fn;\n      }\n      debug(`running hook ${hookType}`);\n      await hook.apply(this, hookArgs);\n    }\n  },\n  addHook(hookType, name, fn) {\n    if (typeof name === \"function\") {\n      fn = name;\n      name = null;\n    }\n    debug(`adding hook ${hookType}`);\n    hookType = getProxiedHooks(hookType);\n    for (const type of hookType) {\n      const hooks = getHooks(this, type);\n      hooks.push(name ? { name, fn } : fn);\n      this.options.hooks[type] = hooks;\n    }\n    return this;\n  },\n  removeHook(hookType, name) {\n    const isReference = typeof name === \"function\";\n    if (!this.hasHook(hookType)) {\n      return this;\n    }\n    debug(`removing hook ${hookType}`);\n    hookType = getProxiedHooks(hookType);\n    for (const type of hookType) {\n      this.options.hooks[type] = this.options.hooks[type].filter((hook) => {\n        if (isReference && typeof hook === \"function\") {\n          return hook !== name;\n        }\n        if (!isReference && typeof hook === \"object\") {\n          return hook.name !== name;\n        }\n        return true;\n      });\n    }\n    return this;\n  },\n  hasHook(hookType) {\n    return this.options.hooks[hookType] && this.options.hooks[hookType].length > 0;\n  }\n};\nHooks.hasHooks = Hooks.hasHook;\nfunction applyTo(target, isModel = false) {\n  _.mixin(target, Hooks);\n  for (const hook of Object.keys(hookTypes)) {\n    if (isModel && hookTypes[hook].noModel) {\n      continue;\n    }\n    target[hook] = function(name, callback) {\n      return this.addHook(hook, name, callback);\n    };\n  }\n}\nexports.applyTo = applyTo;\n//# sourceMappingURL=hooks.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/hooks.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2133,
    "kind": "variable",
    "name": "_",
    "memberof": "lib/hooks.js",
    "static": true,
    "longname": "lib/hooks.js~_",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/hooks.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2134,
    "kind": "variable",
    "name": "logger",
    "memberof": "lib/hooks.js",
    "static": true,
    "longname": "lib/hooks.js~logger",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/hooks.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2135,
    "kind": "variable",
    "name": "debug",
    "memberof": "lib/hooks.js",
    "static": true,
    "longname": "lib/hooks.js~debug",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/hooks.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2136,
    "kind": "variable",
    "name": "hookTypes",
    "memberof": "lib/hooks.js",
    "static": true,
    "longname": "lib/hooks.js~hookTypes",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/hooks.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "{\"beforeValidate\": *, \"afterValidate\": *, \"validationFailed\": *, \"beforeCreate\": *, \"afterCreate\": *, \"beforeDestroy\": *, \"afterDestroy\": *, \"beforeRestore\": *, \"afterRestore\": *, \"beforeUpdate\": *, \"afterUpdate\": *, \"beforeSave\": *, \"afterSave\": *, \"beforeUpsert\": *, \"afterUpsert\": *, \"beforeBulkCreate\": *, \"afterBulkCreate\": *, \"beforeBulkDestroy\": *, \"afterBulkDestroy\": *, \"beforeBulkRestore\": *, \"afterBulkRestore\": *, \"beforeBulkUpdate\": *, \"afterBulkUpdate\": *, \"beforeFind\": *, \"beforeFindAfterExpandIncludeAll\": *, \"beforeFindAfterOptions\": *, \"afterFind\": *, \"beforeCount\": *, \"beforeDefine\": *, \"afterDefine\": *, \"beforeInit\": *, \"afterInit\": *, \"beforeAssociate\": *, \"afterAssociate\": *, \"beforeConnect\": *, \"afterConnect\": *, \"beforeDisconnect\": *, \"afterDisconnect\": *, \"beforeSync\": *, \"afterSync\": *, \"beforeBulkSync\": *, \"afterBulkSync\": *, \"beforeQuery\": *, \"afterQuery\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2137,
    "kind": "function",
    "name": "getProxiedHooks",
    "memberof": "lib/hooks.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/hooks.js~getProxiedHooks",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/hooks.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [
      {
        "name": "hookType",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 2138,
    "kind": "function",
    "name": "getHooks",
    "memberof": "lib/hooks.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/hooks.js~getHooks",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/hooks.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "params": [
      {
        "name": "hooked",
        "types": [
          "*"
        ]
      },
      {
        "name": "hookType",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2139,
    "kind": "variable",
    "name": "Hooks",
    "memberof": "lib/hooks.js",
    "static": true,
    "longname": "lib/hooks.js~Hooks",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/hooks.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "{\"_setupHooks\": function, \"runHooks\": function, \"addHook\": function, \"removeHook\": function, \"hasHook\": function}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2140,
    "kind": "function",
    "name": "applyTo",
    "memberof": "lib/hooks.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/hooks.js~applyTo",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/hooks.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 140,
    "undocument": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "isModel",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 2141,
    "kind": "file",
    "name": "lib/index-hints.js",
    "content": "var __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __markAsModule = (target) => __defProp(target, \"__esModule\", { value: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __reExport = (target, module2, copyDefault, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2))\n      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== \"default\"))\n        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });\n  }\n  return target;\n};\nvar __toCommonJS = /* @__PURE__ */ ((cache) => {\n  return (module2, temp) => {\n    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);\n  };\n})(typeof WeakMap !== \"undefined\" ? /* @__PURE__ */ new WeakMap() : 0);\nvar index_hints_exports = {};\n__export(index_hints_exports, {\n  IndexHints: () => IndexHints\n});\nvar IndexHints = /* @__PURE__ */ ((IndexHints2) => {\n  IndexHints2[\"USE\"] = \"USE\";\n  IndexHints2[\"FORCE\"] = \"FORCE\";\n  IndexHints2[\"IGNORE\"] = \"IGNORE\";\n  return IndexHints2;\n})(IndexHints || {});\nmodule.exports = __toCommonJS(index_hints_exports);\n//# sourceMappingURL=index-hints.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/index-hints.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2142,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/index-hints.js",
    "static": true,
    "longname": "lib/index-hints.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/index-hints.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2143,
    "kind": "variable",
    "name": "__getOwnPropDesc",
    "memberof": "lib/index-hints.js",
    "static": true,
    "longname": "lib/index-hints.js~__getOwnPropDesc",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/index-hints.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2144,
    "kind": "variable",
    "name": "__getOwnPropNames",
    "memberof": "lib/index-hints.js",
    "static": true,
    "longname": "lib/index-hints.js~__getOwnPropNames",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/index-hints.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2145,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/index-hints.js",
    "static": true,
    "longname": "lib/index-hints.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/index-hints.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2146,
    "kind": "function",
    "name": "__markAsModule",
    "memberof": "lib/index-hints.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/index-hints.js~__markAsModule",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/index-hints.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2147,
    "kind": "function",
    "name": "__export",
    "memberof": "lib/index-hints.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/index-hints.js~__export",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/index-hints.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "all",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2148,
    "kind": "function",
    "name": "__reExport",
    "memberof": "lib/index-hints.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/index-hints.js~__reExport",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/index-hints.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "copyDefault",
        "types": [
          "*"
        ]
      },
      {
        "name": "desc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2149,
    "kind": "variable",
    "name": "__toCommonJS",
    "memberof": "lib/index-hints.js",
    "static": true,
    "longname": "lib/index-hints.js~__toCommonJS",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/index-hints.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2150,
    "kind": "variable",
    "name": "index_hints_exports",
    "memberof": "lib/index-hints.js",
    "static": true,
    "longname": "lib/index-hints.js~index_hints_exports",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/index-hints.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2151,
    "kind": "variable",
    "name": "IndexHints",
    "memberof": "lib/index-hints.js",
    "static": true,
    "longname": "lib/index-hints.js~IndexHints",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/index-hints.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2152,
    "kind": "file",
    "name": "lib/index.js",
    "content": "\"use strict\";\nmodule.exports = require(\"./sequelize\");\n//# sourceMappingURL=index.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2153,
    "kind": "file",
    "name": "lib/instance-validator.js",
    "content": "\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nconst _ = require(\"lodash\");\nconst Utils = require(\"./utils\");\nconst sequelizeError = require(\"./errors\");\nconst DataTypes = require(\"./data-types\");\nconst BelongsTo = require(\"./associations/belongs-to\");\nconst validator = require(\"./utils/validator-extras\").validator;\nconst { promisify } = require(\"util\");\nclass InstanceValidator {\n  constructor(modelInstance, options) {\n    options = __spreadValues({\n      hooks: true\n    }, options);\n    if (options.fields && !options.skip) {\n      options.skip = _.difference(Object.keys(modelInstance.constructor.rawAttributes), options.fields);\n    } else {\n      options.skip = options.skip || [];\n    }\n    this.options = options;\n    this.modelInstance = modelInstance;\n    this.validator = validator;\n    this.errors = [];\n    this.inProgress = false;\n  }\n  async _validate() {\n    if (this.inProgress) {\n      throw new Error(\"Validations already in progress.\");\n    }\n    this.inProgress = true;\n    await Promise.all([\n      this._perAttributeValidators(),\n      this._customValidators()\n    ]);\n    if (this.errors.length > 0) {\n      throw new sequelizeError.ValidationError(null, this.errors);\n    }\n  }\n  async validate() {\n    return await (this.options.hooks ? this._validateAndRunHooks() : this._validate());\n  }\n  async _validateAndRunHooks() {\n    const runHooks = this.modelInstance.constructor.runHooks.bind(this.modelInstance.constructor);\n    await runHooks(\"beforeValidate\", this.modelInstance, this.options);\n    try {\n      await this._validate();\n    } catch (error) {\n      const newError = await runHooks(\"validationFailed\", this.modelInstance, this.options, error);\n      throw newError || error;\n    }\n    await runHooks(\"afterValidate\", this.modelInstance, this.options);\n    return this.modelInstance;\n  }\n  async _perAttributeValidators() {\n    const validators = [];\n    _.forIn(this.modelInstance.rawAttributes, (rawAttribute, field) => {\n      if (this.options.skip.includes(field)) {\n        return;\n      }\n      const value = this.modelInstance.dataValues[field];\n      if (value instanceof Utils.SequelizeMethod) {\n        return;\n      }\n      if (!rawAttribute._autoGenerated && !rawAttribute.autoIncrement) {\n        this._validateSchema(rawAttribute, field, value);\n      }\n      if (Object.prototype.hasOwnProperty.call(this.modelInstance.validators, field)) {\n        validators.push(this._singleAttrValidate(value, field, rawAttribute.allowNull));\n      }\n    });\n    return await Promise.all(validators);\n  }\n  async _customValidators() {\n    const validators = [];\n    _.each(this.modelInstance.constructor.options.validate, (validator2, validatorType) => {\n      if (this.options.skip.includes(validatorType)) {\n        return;\n      }\n      const valprom = this._invokeCustomValidator(validator2, validatorType).catch(() => {\n      });\n      validators.push(valprom);\n    });\n    return await Promise.all(validators);\n  }\n  async _singleAttrValidate(value, field, allowNull) {\n    if ((value === null || value === void 0) && !allowNull) {\n      return;\n    }\n    const validators = [];\n    _.forIn(this.modelInstance.validators[field], (test, validatorType) => {\n      if ([\"isUrl\", \"isURL\", \"isEmail\"].includes(validatorType)) {\n        if (typeof test === \"object\" && test !== null && test.msg) {\n          test = {\n            msg: test.msg\n          };\n        } else if (test === true) {\n          test = {};\n        }\n      }\n      if (typeof test === \"function\") {\n        validators.push(this._invokeCustomValidator(test, validatorType, true, value, field));\n        return;\n      }\n      if (value === null || value === void 0) {\n        return;\n      }\n      const validatorPromise = this._invokeBuiltinValidator(value, test, validatorType, field);\n      validatorPromise.catch(() => {\n      });\n      validators.push(validatorPromise);\n    });\n    return Promise.all(validators.map((validator2) => validator2.catch((error) => {\n      const isBuiltIn = Boolean(error.validatorName);\n      this._pushError(isBuiltIn, field, error, value, error.validatorName, error.validatorArgs);\n    })));\n  }\n  async _invokeCustomValidator(validator2, validatorType, optAttrDefined, optValue, optField) {\n    let isAsync = false;\n    const validatorArity = validator2.length;\n    let asyncArity = 1;\n    let errorKey = validatorType;\n    let invokeArgs;\n    if (optAttrDefined) {\n      asyncArity = 2;\n      invokeArgs = optValue;\n      errorKey = optField;\n    }\n    if (validatorArity === asyncArity) {\n      isAsync = true;\n    }\n    if (isAsync) {\n      try {\n        if (optAttrDefined) {\n          return await promisify(validator2.bind(this.modelInstance, invokeArgs))();\n        }\n        return await promisify(validator2.bind(this.modelInstance))();\n      } catch (error) {\n        return this._pushError(false, errorKey, error, optValue, validatorType);\n      }\n    }\n    try {\n      return await validator2.call(this.modelInstance, invokeArgs);\n    } catch (error) {\n      return this._pushError(false, errorKey, error, optValue, validatorType);\n    }\n  }\n  async _invokeBuiltinValidator(value, test, validatorType, field) {\n    const valueString = String(value);\n    if (typeof validator[validatorType] !== \"function\") {\n      throw new TypeError(`Invalid validator function: ${validatorType}`);\n    }\n    const validatorArgs = this._extractValidatorArgs(test, validatorType, field);\n    if (!validator[validatorType](valueString, ...validatorArgs)) {\n      throw Object.assign(new Error(test.msg || `Validation ${validatorType} on ${field} failed`), { validatorName: validatorType, validatorArgs });\n    }\n  }\n  _extractValidatorArgs(test, validatorType, field) {\n    let validatorArgs = test.args || test;\n    const isLocalizedValidator = typeof validatorArgs !== \"string\" && [\"isAlpha\", \"isAlphanumeric\", \"isMobilePhone\"].includes(validatorType);\n    if (!Array.isArray(validatorArgs)) {\n      if (validatorType === \"isImmutable\") {\n        validatorArgs = [validatorArgs, field, this.modelInstance];\n      } else if (isLocalizedValidator || validatorType === \"isIP\") {\n        validatorArgs = [];\n      } else {\n        validatorArgs = [validatorArgs];\n      }\n    } else {\n      validatorArgs = [...validatorArgs];\n    }\n    return validatorArgs;\n  }\n  _validateSchema(rawAttribute, field, value) {\n    if (rawAttribute.allowNull === false && (value === null || value === void 0)) {\n      const association = Object.values(this.modelInstance.constructor.associations).find((association2) => association2 instanceof BelongsTo && association2.foreignKey === rawAttribute.fieldName);\n      if (!association || !this.modelInstance.get(association.associationAccessor)) {\n        const validators = this.modelInstance.validators[field];\n        const errMsg = _.get(validators, \"notNull.msg\", `${this.modelInstance.constructor.name}.${field} cannot be null`);\n        this.errors.push(new sequelizeError.ValidationErrorItem(errMsg, \"notNull Violation\", field, value, this.modelInstance, \"is_null\"));\n      }\n    }\n    if ((rawAttribute.type instanceof DataTypes.STRING || rawAttribute.type instanceof DataTypes.TEXT || rawAttribute.type instanceof DataTypes.CITEXT) && (Array.isArray(value) || _.isObject(value) && !(value instanceof Utils.SequelizeMethod) && !Buffer.isBuffer(value))) {\n      this.errors.push(new sequelizeError.ValidationErrorItem(`${field} cannot be an array or an object`, \"string violation\", field, value, this.modelInstance, \"not_a_string\"));\n    }\n  }\n  _pushError(isBuiltin, errorKey, rawError, value, fnName, fnArgs) {\n    const message = rawError.message || rawError || \"Validation error\";\n    const error = new sequelizeError.ValidationErrorItem(message, \"Validation error\", errorKey, value, this.modelInstance, fnName, isBuiltin ? fnName : void 0, isBuiltin ? fnArgs : void 0);\n    error[InstanceValidator.RAW_KEY_NAME] = rawError;\n    this.errors.push(error);\n  }\n}\nInstanceValidator.RAW_KEY_NAME = \"original\";\nmodule.exports = InstanceValidator;\nmodule.exports.InstanceValidator = InstanceValidator;\nmodule.exports.default = InstanceValidator;\n//# sourceMappingURL=instance-validator.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/instance-validator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2154,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/instance-validator.js",
    "static": true,
    "longname": "lib/instance-validator.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/instance-validator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2155,
    "kind": "variable",
    "name": "__getOwnPropSymbols",
    "memberof": "lib/instance-validator.js",
    "static": true,
    "longname": "lib/instance-validator.js~__getOwnPropSymbols",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/instance-validator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2156,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/instance-validator.js",
    "static": true,
    "longname": "lib/instance-validator.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/instance-validator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2157,
    "kind": "variable",
    "name": "__propIsEnum",
    "memberof": "lib/instance-validator.js",
    "static": true,
    "longname": "lib/instance-validator.js~__propIsEnum",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/instance-validator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2158,
    "kind": "function",
    "name": "__defNormalProp",
    "memberof": "lib/instance-validator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/instance-validator.js~__defNormalProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/instance-validator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2159,
    "kind": "function",
    "name": "__spreadValues",
    "memberof": "lib/instance-validator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/instance-validator.js~__spreadValues",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/instance-validator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2160,
    "kind": "variable",
    "name": "_",
    "memberof": "lib/instance-validator.js",
    "static": true,
    "longname": "lib/instance-validator.js~_",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/instance-validator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2161,
    "kind": "variable",
    "name": "Utils",
    "memberof": "lib/instance-validator.js",
    "static": true,
    "longname": "lib/instance-validator.js~Utils",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/instance-validator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2162,
    "kind": "variable",
    "name": "sequelizeError",
    "memberof": "lib/instance-validator.js",
    "static": true,
    "longname": "lib/instance-validator.js~sequelizeError",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/instance-validator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2163,
    "kind": "variable",
    "name": "DataTypes",
    "memberof": "lib/instance-validator.js",
    "static": true,
    "longname": "lib/instance-validator.js~DataTypes",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/instance-validator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2164,
    "kind": "variable",
    "name": "BelongsTo",
    "memberof": "lib/instance-validator.js",
    "static": true,
    "longname": "lib/instance-validator.js~BelongsTo",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/instance-validator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2165,
    "kind": "variable",
    "name": "validator",
    "memberof": "lib/instance-validator.js",
    "static": true,
    "longname": "lib/instance-validator.js~validator",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/instance-validator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2166,
    "kind": "variable",
    "name": "promisify",
    "memberof": "lib/instance-validator.js",
    "static": true,
    "longname": "lib/instance-validator.js~promisify",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/instance-validator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2167,
    "kind": "class",
    "name": "InstanceValidator",
    "memberof": "lib/instance-validator.js",
    "static": true,
    "longname": "lib/instance-validator.js~InstanceValidator",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/instance-validator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 2168,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/instance-validator.js~InstanceValidator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/instance-validator.js~InstanceValidator#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 2169,
    "kind": "member",
    "name": "options",
    "memberof": "lib/instance-validator.js~InstanceValidator",
    "static": false,
    "longname": "lib/instance-validator.js~InstanceValidator#options",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2170,
    "kind": "member",
    "name": "modelInstance",
    "memberof": "lib/instance-validator.js~InstanceValidator",
    "static": false,
    "longname": "lib/instance-validator.js~InstanceValidator#modelInstance",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2171,
    "kind": "member",
    "name": "validator",
    "memberof": "lib/instance-validator.js~InstanceValidator",
    "static": false,
    "longname": "lib/instance-validator.js~InstanceValidator#validator",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2172,
    "kind": "member",
    "name": "errors",
    "memberof": "lib/instance-validator.js~InstanceValidator",
    "static": false,
    "longname": "lib/instance-validator.js~InstanceValidator#errors",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2173,
    "kind": "member",
    "name": "inProgress",
    "memberof": "lib/instance-validator.js~InstanceValidator",
    "static": false,
    "longname": "lib/instance-validator.js~InstanceValidator#inProgress",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2174,
    "kind": "method",
    "name": "_validate",
    "memberof": "lib/instance-validator.js~InstanceValidator",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/instance-validator.js~InstanceValidator#_validate",
    "access": "private",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 2176,
    "kind": "method",
    "name": "validate",
    "memberof": "lib/instance-validator.js~InstanceValidator",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/instance-validator.js~InstanceValidator#validate",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2177,
    "kind": "method",
    "name": "_validateAndRunHooks",
    "memberof": "lib/instance-validator.js~InstanceValidator",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/instance-validator.js~InstanceValidator#_validateAndRunHooks",
    "access": "private",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2178,
    "kind": "method",
    "name": "_perAttributeValidators",
    "memberof": "lib/instance-validator.js~InstanceValidator",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/instance-validator.js~InstanceValidator#_perAttributeValidators",
    "access": "private",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2179,
    "kind": "method",
    "name": "_customValidators",
    "memberof": "lib/instance-validator.js~InstanceValidator",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/instance-validator.js~InstanceValidator#_customValidators",
    "access": "private",
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2180,
    "kind": "method",
    "name": "_singleAttrValidate",
    "memberof": "lib/instance-validator.js~InstanceValidator",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/instance-validator.js~InstanceValidator#_singleAttrValidate",
    "access": "private",
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "field",
        "types": [
          "*"
        ]
      },
      {
        "name": "allowNull",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2181,
    "kind": "method",
    "name": "_invokeCustomValidator",
    "memberof": "lib/instance-validator.js~InstanceValidator",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/instance-validator.js~InstanceValidator#_invokeCustomValidator",
    "access": "private",
    "description": null,
    "lineNumber": 132,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "validator2",
        "types": [
          "*"
        ]
      },
      {
        "name": "validatorType",
        "types": [
          "*"
        ]
      },
      {
        "name": "optAttrDefined",
        "types": [
          "*"
        ]
      },
      {
        "name": "optValue",
        "types": [
          "*"
        ]
      },
      {
        "name": "optField",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2182,
    "kind": "method",
    "name": "_invokeBuiltinValidator",
    "memberof": "lib/instance-validator.js~InstanceValidator",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/instance-validator.js~InstanceValidator#_invokeBuiltinValidator",
    "access": "private",
    "description": null,
    "lineNumber": 162,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "test",
        "types": [
          "*"
        ]
      },
      {
        "name": "validatorType",
        "types": [
          "*"
        ]
      },
      {
        "name": "field",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2183,
    "kind": "method",
    "name": "_extractValidatorArgs",
    "memberof": "lib/instance-validator.js~InstanceValidator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/instance-validator.js~InstanceValidator#_extractValidatorArgs",
    "access": "private",
    "description": null,
    "lineNumber": 172,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "test",
        "types": [
          "*"
        ]
      },
      {
        "name": "validatorType",
        "types": [
          "*"
        ]
      },
      {
        "name": "field",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2184,
    "kind": "method",
    "name": "_validateSchema",
    "memberof": "lib/instance-validator.js~InstanceValidator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/instance-validator.js~InstanceValidator#_validateSchema",
    "access": "private",
    "description": null,
    "lineNumber": 188,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "rawAttribute",
        "types": [
          "*"
        ]
      },
      {
        "name": "field",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2185,
    "kind": "method",
    "name": "_pushError",
    "memberof": "lib/instance-validator.js~InstanceValidator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/instance-validator.js~InstanceValidator#_pushError",
    "access": "private",
    "description": null,
    "lineNumber": 201,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "isBuiltin",
        "types": [
          "*"
        ]
      },
      {
        "name": "errorKey",
        "types": [
          "*"
        ]
      },
      {
        "name": "rawError",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "fnName",
        "types": [
          "*"
        ]
      },
      {
        "name": "fnArgs",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2186,
    "kind": "file",
    "name": "lib/model-manager.js",
    "content": "\"use strict\";\nconst Toposort = require(\"toposort-class\");\nconst _ = require(\"lodash\");\nclass ModelManager {\n  constructor(sequelize) {\n    this.models = [];\n    this.sequelize = sequelize;\n  }\n  addModel(model) {\n    this.models.push(model);\n    this.sequelize.models[model.name] = model;\n    return model;\n  }\n  removeModel(modelToRemove) {\n    this.models = this.models.filter((model) => model.name !== modelToRemove.name);\n    delete this.sequelize.models[modelToRemove.name];\n  }\n  getModel(against, options) {\n    options = _.defaults(options || {}, {\n      attribute: \"name\"\n    });\n    return this.models.find((model) => model[options.attribute] === against);\n  }\n  get all() {\n    return this.models;\n  }\n  forEachModel(iterator, options) {\n    const models = {};\n    const sorter = new Toposort();\n    let sorted;\n    let dep;\n    options = _.defaults(options || {}, {\n      reverse: true\n    });\n    for (const model of this.models) {\n      let deps = [];\n      let tableName = model.getTableName();\n      if (_.isObject(tableName)) {\n        tableName = `${tableName.schema}.${tableName.tableName}`;\n      }\n      models[tableName] = model;\n      for (const attrName in model.rawAttributes) {\n        if (Object.prototype.hasOwnProperty.call(model.rawAttributes, attrName)) {\n          const attribute = model.rawAttributes[attrName];\n          if (attribute.references) {\n            dep = attribute.references.model;\n            if (_.isObject(dep)) {\n              dep = `${dep.schema}.${dep.tableName}`;\n            }\n            deps.push(dep);\n          }\n        }\n      }\n      deps = deps.filter((dep2) => tableName !== dep2);\n      sorter.add(tableName, deps);\n    }\n    sorted = sorter.sort();\n    if (options.reverse) {\n      sorted = sorted.reverse();\n    }\n    for (const name of sorted) {\n      iterator(models[name], name);\n    }\n  }\n}\nmodule.exports = ModelManager;\nmodule.exports.ModelManager = ModelManager;\nmodule.exports.default = ModelManager;\n//# sourceMappingURL=model-manager.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/model-manager.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2187,
    "kind": "variable",
    "name": "Toposort",
    "memberof": "lib/model-manager.js",
    "static": true,
    "longname": "lib/model-manager.js~Toposort",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/model-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2188,
    "kind": "variable",
    "name": "_",
    "memberof": "lib/model-manager.js",
    "static": true,
    "longname": "lib/model-manager.js~_",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/model-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2189,
    "kind": "class",
    "name": "ModelManager",
    "memberof": "lib/model-manager.js",
    "static": true,
    "longname": "lib/model-manager.js~ModelManager",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/model-manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 2190,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/model-manager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/model-manager.js~ModelManager#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 2191,
    "kind": "member",
    "name": "models",
    "memberof": "lib/model-manager.js~ModelManager",
    "static": false,
    "longname": "lib/model-manager.js~ModelManager#models",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2192,
    "kind": "member",
    "name": "sequelize",
    "memberof": "lib/model-manager.js~ModelManager",
    "static": false,
    "longname": "lib/model-manager.js~ModelManager#sequelize",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2193,
    "kind": "method",
    "name": "addModel",
    "memberof": "lib/model-manager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/model-manager.js~ModelManager#addModel",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "model",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2194,
    "kind": "method",
    "name": "removeModel",
    "memberof": "lib/model-manager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/model-manager.js~ModelManager#removeModel",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "modelToRemove",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 2196,
    "kind": "method",
    "name": "getModel",
    "memberof": "lib/model-manager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/model-manager.js~ModelManager#getModel",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "against",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2197,
    "kind": "get",
    "name": "all",
    "memberof": "lib/model-manager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/model-manager.js~ModelManager#all",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2198,
    "kind": "method",
    "name": "forEachModel",
    "memberof": "lib/model-manager.js~ModelManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/model-manager.js~ModelManager#forEachModel",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [
      {
        "name": "iterator",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 2199,
    "kind": "file",
    "name": "lib/model.js",
    "content": "\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nconst assert = require(\"assert\");\nconst _ = require(\"lodash\");\nconst Dottie = require(\"dottie\");\nconst Utils = require(\"./utils\");\nconst { logger } = require(\"./utils/logger\");\nconst BelongsTo = require(\"./associations/belongs-to\");\nconst BelongsToMany = require(\"./associations/belongs-to-many\");\nconst InstanceValidator = require(\"./instance-validator\");\nconst { QueryTypes } = require(\"./query-types\");\nconst sequelizeErrors = require(\"./errors\");\nconst Association = require(\"./associations/base\");\nconst HasMany = require(\"./associations/has-many\");\nconst DataTypes = require(\"./data-types\");\nconst Hooks = require(\"./hooks\");\nconst associationsMixin = require(\"./associations/mixin\");\nconst { Op } = require(\"./operators\");\nconst { noDoubleNestedGroup } = require(\"./utils/deprecations\");\nconst validQueryKeywords = /* @__PURE__ */ new Set([\n  \"where\",\n  \"attributes\",\n  \"paranoid\",\n  \"include\",\n  \"order\",\n  \"limit\",\n  \"offset\",\n  \"transaction\",\n  \"lock\",\n  \"raw\",\n  \"logging\",\n  \"benchmark\",\n  \"having\",\n  \"searchPath\",\n  \"rejectOnEmpty\",\n  \"plain\",\n  \"scope\",\n  \"group\",\n  \"through\",\n  \"defaults\",\n  \"distinct\",\n  \"primary\",\n  \"exception\",\n  \"type\",\n  \"hooks\",\n  \"force\",\n  \"name\"\n]);\nconst nonCascadingOptions = [\"include\", \"attributes\", \"originalAttributes\", \"order\", \"where\", \"limit\", \"offset\", \"plain\", \"group\", \"having\"];\nclass Model {\n  static get queryInterface() {\n    return this.sequelize.getQueryInterface();\n  }\n  static get queryGenerator() {\n    return this.queryInterface.queryGenerator;\n  }\n  get sequelize() {\n    return this.constructor.sequelize;\n  }\n  constructor(values = {}, options = {}) {\n    if (!this.constructor._overwrittenAttributesChecked) {\n      this.constructor._overwrittenAttributesChecked = true;\n      setTimeout(() => {\n        const overwrittenAttributes = [];\n        for (const key of Object.keys(this.constructor._attributeManipulation)) {\n          if (Object.prototype.hasOwnProperty.call(this, key)) {\n            overwrittenAttributes.push(key);\n          }\n        }\n        if (overwrittenAttributes.length > 0) {\n          logger.warn(`Model ${JSON.stringify(this.constructor.name)} is declaring public class fields for attribute(s): ${overwrittenAttributes.map((attr) => JSON.stringify(attr)).join(\", \")}.\nThese class fields are shadowing Sequelize's attribute getters & setters.\nSee https://sequelize.org/main/manual/model-basics.html#caveat-with-public-class-fields`);\n        }\n      }, 0);\n    }\n    options = __spreadValues({\n      isNewRecord: true,\n      _schema: this.constructor._schema,\n      _schemaDelimiter: this.constructor._schemaDelimiter\n    }, options);\n    if (options.attributes) {\n      options.attributes = options.attributes.map((attribute) => Array.isArray(attribute) ? attribute[1] : attribute);\n    }\n    if (!options.includeValidated) {\n      this.constructor._conformIncludes(options, this.constructor);\n      if (options.include) {\n        this.constructor._expandIncludeAll(options);\n        this.constructor._validateIncludedElements(options);\n      }\n    }\n    this.dataValues = {};\n    this._previousDataValues = {};\n    this.uniqno = 1;\n    this._changed = /* @__PURE__ */ new Set();\n    this._options = options;\n    this.isNewRecord = options.isNewRecord;\n    this._initValues(values, options);\n  }\n  _initValues(values, options) {\n    let defaults;\n    let key;\n    values = __spreadValues({}, values);\n    if (options.isNewRecord) {\n      defaults = {};\n      if (this.constructor._hasDefaultValues) {\n        defaults = _.mapValues(this.constructor._defaultValues, (valueFn) => {\n          const value = valueFn();\n          return value && value instanceof Utils.SequelizeMethod ? value : _.cloneDeep(value);\n        });\n      }\n      if (this.constructor.primaryKeyAttributes.length > 0) {\n        for (const primaryKeyAttribute of this.constructor.primaryKeyAttributes) {\n          if (!Object.prototype.hasOwnProperty.call(defaults, primaryKeyAttribute)) {\n            defaults[primaryKeyAttribute] = null;\n          }\n        }\n      }\n      if (this.constructor._timestampAttributes.createdAt && defaults[this.constructor._timestampAttributes.createdAt]) {\n        this.dataValues[this.constructor._timestampAttributes.createdAt] = Utils.toDefaultValue(defaults[this.constructor._timestampAttributes.createdAt], this.sequelize.options.dialect);\n        delete defaults[this.constructor._timestampAttributes.createdAt];\n      }\n      if (this.constructor._timestampAttributes.updatedAt && defaults[this.constructor._timestampAttributes.updatedAt]) {\n        this.dataValues[this.constructor._timestampAttributes.updatedAt] = Utils.toDefaultValue(defaults[this.constructor._timestampAttributes.updatedAt], this.sequelize.options.dialect);\n        delete defaults[this.constructor._timestampAttributes.updatedAt];\n      }\n      if (this.constructor._timestampAttributes.deletedAt && defaults[this.constructor._timestampAttributes.deletedAt]) {\n        this.dataValues[this.constructor._timestampAttributes.deletedAt] = Utils.toDefaultValue(defaults[this.constructor._timestampAttributes.deletedAt], this.sequelize.options.dialect);\n        delete defaults[this.constructor._timestampAttributes.deletedAt];\n      }\n      for (key in defaults) {\n        if (values[key] === void 0) {\n          this.set(key, Utils.toDefaultValue(defaults[key], this.sequelize.options.dialect), { raw: true });\n          delete values[key];\n        }\n      }\n    }\n    this.set(values, options);\n  }\n  static _paranoidClause(model, options = {}) {\n    if (options.include) {\n      for (const include of options.include) {\n        this._paranoidClause(include.model, include);\n      }\n    }\n    if (_.get(options, \"groupedLimit.on.options.paranoid\")) {\n      const throughModel = _.get(options, \"groupedLimit.on.through.model\");\n      if (throughModel) {\n        options.groupedLimit.through = this._paranoidClause(throughModel, options.groupedLimit.through);\n      }\n    }\n    if (!model.options.timestamps || !model.options.paranoid || options.paranoid === false) {\n      return options;\n    }\n    const deletedAtCol = model._timestampAttributes.deletedAt;\n    const deletedAtAttribute = model.rawAttributes[deletedAtCol];\n    const deletedAtObject = {};\n    let deletedAtDefaultValue = Object.prototype.hasOwnProperty.call(deletedAtAttribute, \"defaultValue\") ? deletedAtAttribute.defaultValue : null;\n    deletedAtDefaultValue = deletedAtDefaultValue || {\n      [Op.eq]: null\n    };\n    deletedAtObject[deletedAtAttribute.field || deletedAtCol] = deletedAtDefaultValue;\n    if (Utils.isWhereEmpty(options.where)) {\n      options.where = deletedAtObject;\n    } else {\n      options.where = { [Op.and]: [deletedAtObject, options.where] };\n    }\n    return options;\n  }\n  static _addDefaultAttributes() {\n    const tail = {};\n    let head = {};\n    if (!_.some(this.rawAttributes, \"primaryKey\")) {\n      if (\"id\" in this.rawAttributes) {\n        throw new Error(`A column called 'id' was added to the attributes of '${this.tableName}' but not marked with 'primaryKey: true'`);\n      }\n      head = {\n        id: {\n          type: new DataTypes.INTEGER(),\n          allowNull: false,\n          primaryKey: true,\n          autoIncrement: true,\n          _autoGenerated: true\n        }\n      };\n    }\n    if (this._timestampAttributes.createdAt) {\n      tail[this._timestampAttributes.createdAt] = {\n        type: DataTypes.DATE,\n        allowNull: false,\n        _autoGenerated: true\n      };\n    }\n    if (this._timestampAttributes.updatedAt) {\n      tail[this._timestampAttributes.updatedAt] = {\n        type: DataTypes.DATE,\n        allowNull: false,\n        _autoGenerated: true\n      };\n    }\n    if (this._timestampAttributes.deletedAt) {\n      tail[this._timestampAttributes.deletedAt] = {\n        type: DataTypes.DATE,\n        _autoGenerated: true\n      };\n    }\n    if (this._versionAttribute) {\n      tail[this._versionAttribute] = {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        defaultValue: 0,\n        _autoGenerated: true\n      };\n    }\n    const newRawAttributes = __spreadValues(__spreadValues({}, head), this.rawAttributes);\n    _.each(tail, (value, attr) => {\n      if (newRawAttributes[attr] === void 0) {\n        newRawAttributes[attr] = value;\n      }\n    });\n    this.rawAttributes = newRawAttributes;\n    if (Object.keys(this.primaryKeys).length === 0) {\n      this.primaryKeys.id = this.rawAttributes.id;\n    }\n  }\n  static getAttributes() {\n    return this.rawAttributes;\n  }\n  static _findAutoIncrementAttribute() {\n    this.autoIncrementAttribute = null;\n    for (const name in this.rawAttributes) {\n      if (Object.prototype.hasOwnProperty.call(this.rawAttributes, name)) {\n        const definition = this.rawAttributes[name];\n        if (definition && definition.autoIncrement) {\n          if (this.autoIncrementAttribute) {\n            throw new Error(\"Invalid Instance definition. Only one autoincrement field allowed.\");\n          }\n          this.autoIncrementAttribute = name;\n        }\n      }\n    }\n  }\n  static _conformIncludes(options, self) {\n    if (!options.include) {\n      return;\n    }\n    if (!Array.isArray(options.include)) {\n      options.include = [options.include];\n    } else if (options.include.length === 0) {\n      delete options.include;\n      return;\n    }\n    options.include = options.include.map((include) => this._conformInclude(include, self));\n  }\n  static _transformStringAssociation(include, self) {\n    if (self && typeof include === \"string\") {\n      if (!Object.prototype.hasOwnProperty.call(self.associations, include)) {\n        throw new Error(`Association with alias \"${include}\" does not exist on ${self.name}`);\n      }\n      return self.associations[include];\n    }\n    return include;\n  }\n  static _conformInclude(include, self) {\n    if (include) {\n      let model;\n      if (include._pseudo) {\n        return include;\n      }\n      include = this._transformStringAssociation(include, self);\n      if (include instanceof Association) {\n        if (self && include.target.name === self.name) {\n          model = include.source;\n        } else {\n          model = include.target;\n        }\n        return { model, association: include, as: include.as };\n      }\n      if (include.prototype && include.prototype instanceof Model) {\n        return { model: include };\n      }\n      if (_.isPlainObject(include)) {\n        if (include.association) {\n          include.association = this._transformStringAssociation(include.association, self);\n          if (self && include.association.target.name === self.name) {\n            model = include.association.source;\n          } else {\n            model = include.association.target;\n          }\n          if (!include.model) {\n            include.model = model;\n          }\n          if (!include.as) {\n            include.as = include.association.as;\n          }\n          this._conformIncludes(include, model);\n          return include;\n        }\n        if (include.model) {\n          this._conformIncludes(include, include.model);\n          return include;\n        }\n        if (include.all) {\n          this._conformIncludes(include);\n          return include;\n        }\n      }\n    }\n    throw new Error(\"Include unexpected. Element has to be either a Model, an Association or an object.\");\n  }\n  static _expandIncludeAllElement(includes, include) {\n    let all = include.all;\n    delete include.all;\n    if (all !== true) {\n      if (!Array.isArray(all)) {\n        all = [all];\n      }\n      const validTypes = {\n        BelongsTo: true,\n        HasOne: true,\n        HasMany: true,\n        One: [\"BelongsTo\", \"HasOne\"],\n        Has: [\"HasOne\", \"HasMany\"],\n        Many: [\"HasMany\"]\n      };\n      for (let i = 0; i < all.length; i++) {\n        const type = all[i];\n        if (type === \"All\") {\n          all = true;\n          break;\n        }\n        const types = validTypes[type];\n        if (!types) {\n          throw new sequelizeErrors.EagerLoadingError(`include all '${type}' is not valid - must be BelongsTo, HasOne, HasMany, One, Has, Many or All`);\n        }\n        if (types !== true) {\n          all.splice(i, 1);\n          i--;\n          for (const type_ of types) {\n            if (!all.includes(type_)) {\n              all.unshift(type_);\n              i++;\n            }\n          }\n        }\n      }\n    }\n    const nested = include.nested;\n    if (nested) {\n      delete include.nested;\n      if (!include.include) {\n        include.include = [];\n      } else if (!Array.isArray(include.include)) {\n        include.include = [include.include];\n      }\n    }\n    const used = [];\n    (function addAllIncludes(parent, includes2) {\n      _.forEach(parent.associations, (association) => {\n        if (all !== true && !all.includes(association.associationType)) {\n          return;\n        }\n        const model = association.target;\n        const as = association.options.as;\n        const predicate = { model };\n        if (as) {\n          predicate.as = as;\n        }\n        if (_.some(includes2, predicate)) {\n          return;\n        }\n        if (nested && used.includes(model)) {\n          return;\n        }\n        used.push(parent);\n        const thisInclude = Utils.cloneDeep(include);\n        thisInclude.model = model;\n        if (as) {\n          thisInclude.as = as;\n        }\n        includes2.push(thisInclude);\n        if (nested) {\n          addAllIncludes(model, thisInclude.include);\n          if (thisInclude.include.length === 0) {\n            delete thisInclude.include;\n          }\n        }\n      });\n      used.pop();\n    })(this, includes);\n  }\n  static _validateIncludedElements(options, tableNames) {\n    if (!options.model) {\n      options.model = this;\n    }\n    tableNames = tableNames || {};\n    options.includeNames = [];\n    options.includeMap = {};\n    options.hasSingleAssociation = false;\n    options.hasMultiAssociation = false;\n    if (!options.parent) {\n      options.topModel = options.model;\n      options.topLimit = options.limit;\n    }\n    options.include = options.include.map((include) => {\n      include = this._conformInclude(include);\n      include.parent = options;\n      include.topLimit = options.topLimit;\n      this._validateIncludedElement.call(options.model, include, tableNames, options);\n      if (include.duplicating === void 0) {\n        include.duplicating = include.association.isMultiAssociation;\n      }\n      include.hasDuplicating = include.hasDuplicating || include.duplicating;\n      include.hasRequired = include.hasRequired || include.required;\n      options.hasDuplicating = options.hasDuplicating || include.hasDuplicating;\n      options.hasRequired = options.hasRequired || include.required;\n      options.hasWhere = options.hasWhere || include.hasWhere || Boolean(include.where);\n      return include;\n    });\n    for (const include of options.include) {\n      include.hasParentWhere = options.hasParentWhere || Boolean(options.where);\n      include.hasParentRequired = options.hasParentRequired || Boolean(options.required);\n      if (include.subQuery !== false && options.hasDuplicating && options.topLimit) {\n        if (include.duplicating) {\n          include.subQuery = include.subQuery || false;\n          include.subQueryFilter = include.hasRequired;\n        } else {\n          include.subQuery = include.hasRequired;\n          include.subQueryFilter = false;\n        }\n      } else {\n        include.subQuery = include.subQuery || false;\n        if (include.duplicating) {\n          include.subQueryFilter = include.subQuery;\n        } else {\n          include.subQueryFilter = false;\n          include.subQuery = include.subQuery || include.hasParentRequired && include.hasRequired && !include.separate;\n        }\n      }\n      options.includeMap[include.as] = include;\n      options.includeNames.push(include.as);\n      if (options.topModel === options.model && options.subQuery === void 0 && options.topLimit) {\n        if (include.subQuery) {\n          options.subQuery = include.subQuery;\n        } else if (include.hasDuplicating) {\n          options.subQuery = true;\n        }\n      }\n      options.hasIncludeWhere = options.hasIncludeWhere || include.hasIncludeWhere || Boolean(include.where);\n      options.hasIncludeRequired = options.hasIncludeRequired || include.hasIncludeRequired || Boolean(include.required);\n      if (include.association.isMultiAssociation || include.hasMultiAssociation) {\n        options.hasMultiAssociation = true;\n      }\n      if (include.association.isSingleAssociation || include.hasSingleAssociation) {\n        options.hasSingleAssociation = true;\n      }\n    }\n    if (options.topModel === options.model && options.subQuery === void 0) {\n      options.subQuery = false;\n    }\n    return options;\n  }\n  static _validateIncludedElement(include, tableNames, options) {\n    tableNames[include.model.getTableName()] = true;\n    if (include.attributes && !options.raw) {\n      include.model._expandAttributes(include);\n      include.originalAttributes = include.model._injectDependentVirtualAttributes(include.attributes);\n      include = Utils.mapFinderOptions(include, include.model);\n      if (include.attributes.length > 0) {\n        _.each(include.model.primaryKeys, (attr, key) => {\n          if (!include.attributes.some((includeAttr) => {\n            if (attr.field !== key) {\n              return Array.isArray(includeAttr) && includeAttr[0] === attr.field && includeAttr[1] === key;\n            }\n            return includeAttr === key;\n          })) {\n            include.attributes.unshift(key);\n          }\n        });\n      }\n    } else {\n      include = Utils.mapFinderOptions(include, include.model);\n    }\n    if (include._pseudo) {\n      if (!include.attributes) {\n        include.attributes = Object.keys(include.model.tableAttributes);\n      }\n      return Utils.mapFinderOptions(include, include.model);\n    }\n    const association = include.association || this._getIncludedAssociation(include.model, include.as);\n    include.association = association;\n    include.as = association.as;\n    if (include.association.through && Object(include.association.through.model) === include.association.through.model) {\n      if (!include.include) {\n        include.include = [];\n      }\n      const through = include.association.through;\n      include.through = _.defaults(include.through || {}, {\n        model: through.model,\n        as: through.model.name,\n        association: {\n          isSingleAssociation: true\n        },\n        _pseudo: true,\n        parent: include\n      });\n      if (through.scope) {\n        include.through.where = include.through.where ? { [Op.and]: [include.through.where, through.scope] } : through.scope;\n      }\n      include.include.push(include.through);\n      tableNames[through.tableName] = true;\n    }\n    let model;\n    if (include.model.scoped === true) {\n      model = include.model;\n    } else {\n      model = include.association.target.name === include.model.name ? include.association.target : include.association.source;\n    }\n    model._injectScope(include);\n    if (!include.attributes) {\n      include.attributes = Object.keys(include.model.tableAttributes);\n    }\n    include = Utils.mapFinderOptions(include, include.model);\n    if (include.required === void 0) {\n      include.required = Boolean(include.where);\n    }\n    if (include.association.scope) {\n      include.where = include.where ? { [Op.and]: [include.where, include.association.scope] } : include.association.scope;\n    }\n    if (include.limit && include.separate === void 0) {\n      include.separate = true;\n    }\n    if (include.separate === true) {\n      if (!(include.association instanceof HasMany)) {\n        throw new TypeError(\"Only HasMany associations support include.separate\");\n      }\n      include.duplicating = false;\n      if (options.attributes && options.attributes.length > 0 && !_.flattenDepth(options.attributes, 2).includes(association.sourceKey)) {\n        options.attributes.push(association.sourceKey);\n      }\n      if (include.attributes && include.attributes.length > 0 && !_.flattenDepth(include.attributes, 2).includes(association.foreignKey)) {\n        include.attributes.push(association.foreignKey);\n      }\n    }\n    if (Object.prototype.hasOwnProperty.call(include, \"include\")) {\n      this._validateIncludedElements.call(include.model, include, tableNames);\n    }\n    return include;\n  }\n  static _getIncludedAssociation(targetModel, targetAlias) {\n    const associations = this.getAssociations(targetModel);\n    let association = null;\n    if (associations.length === 0) {\n      throw new sequelizeErrors.EagerLoadingError(`${targetModel.name} is not associated to ${this.name}!`);\n    }\n    if (associations.length === 1) {\n      association = this.getAssociationForAlias(targetModel, targetAlias);\n      if (association) {\n        return association;\n      }\n      if (targetAlias) {\n        const existingAliases = this.getAssociations(targetModel).map((association2) => association2.as);\n        throw new sequelizeErrors.EagerLoadingError(`${targetModel.name} is associated to ${this.name} using an alias. You've included an alias (${targetAlias}), but it does not match the alias(es) defined in your association (${existingAliases.join(\", \")}).`);\n      }\n      throw new sequelizeErrors.EagerLoadingError(`${targetModel.name} is associated to ${this.name} using an alias. You must use the 'as' keyword to specify the alias within your include statement.`);\n    }\n    association = this.getAssociationForAlias(targetModel, targetAlias);\n    if (!association) {\n      throw new sequelizeErrors.EagerLoadingError(`${targetModel.name} is associated to ${this.name} multiple times. To identify the correct association, you must use the 'as' keyword to specify the alias of the association you want to include.`);\n    }\n    return association;\n  }\n  static _expandIncludeAll(options) {\n    const includes = options.include;\n    if (!includes) {\n      return;\n    }\n    for (let index = 0; index < includes.length; index++) {\n      const include = includes[index];\n      if (include.all) {\n        includes.splice(index, 1);\n        index--;\n        this._expandIncludeAllElement(includes, include);\n      }\n    }\n    for (const include of includes) {\n      this._expandIncludeAll.call(include.model, include);\n    }\n  }\n  static _conformIndex(index) {\n    if (!index.fields) {\n      throw new Error('Missing \"fields\" property for index definition');\n    }\n    index = _.defaults(index, {\n      type: \"\",\n      parser: null\n    });\n    if (index.type && index.type.toLowerCase() === \"unique\") {\n      index.unique = true;\n      delete index.type;\n    }\n    return index;\n  }\n  static _uniqIncludes(options) {\n    if (!options.include) {\n      return;\n    }\n    options.include = _(options.include).groupBy((include) => `${include.model && include.model.name}-${include.as}`).map((includes) => this._assignOptions(...includes)).value();\n  }\n  static _baseMerge(...args) {\n    _.assignWith(...args);\n    this._conformIncludes(args[0], this);\n    this._uniqIncludes(args[0]);\n    return args[0];\n  }\n  static _mergeFunction(objValue, srcValue, key) {\n    if (Array.isArray(objValue) && Array.isArray(srcValue)) {\n      return _.union(objValue, srcValue);\n    }\n    if ([\"where\", \"having\"].includes(key)) {\n      if (srcValue instanceof Utils.SequelizeMethod) {\n        srcValue = { [Op.and]: srcValue };\n      }\n      if (_.isPlainObject(objValue) && _.isPlainObject(srcValue)) {\n        return Object.assign(objValue, srcValue);\n      }\n    } else if (key === \"attributes\" && _.isPlainObject(objValue) && _.isPlainObject(srcValue)) {\n      return _.assignWith(objValue, srcValue, (objValue2, srcValue2) => {\n        if (Array.isArray(objValue2) && Array.isArray(srcValue2)) {\n          return _.union(objValue2, srcValue2);\n        }\n      });\n    }\n    if (srcValue) {\n      return Utils.cloneDeep(srcValue, true);\n    }\n    return srcValue === void 0 ? objValue : srcValue;\n  }\n  static _assignOptions(...args) {\n    return this._baseMerge(...args, this._mergeFunction);\n  }\n  static _defaultsOptions(target, opts) {\n    return this._baseMerge(target, opts, (srcValue, objValue, key) => {\n      return this._mergeFunction(objValue, srcValue, key);\n    });\n  }\n  static init(attributes, options = {}) {\n    if (!options.sequelize) {\n      throw new Error(\"No Sequelize instance passed\");\n    }\n    this.sequelize = options.sequelize;\n    const globalOptions = this.sequelize.options;\n    options = Utils.merge(_.cloneDeep(globalOptions.define), options);\n    if (!options.modelName) {\n      options.modelName = this.name;\n    }\n    options = Utils.merge({\n      name: {\n        plural: Utils.pluralize(options.modelName),\n        singular: Utils.singularize(options.modelName)\n      },\n      indexes: [],\n      omitNull: globalOptions.omitNull,\n      schema: globalOptions.schema\n    }, options);\n    this.sequelize.runHooks(\"beforeDefine\", attributes, options);\n    if (options.modelName !== this.name) {\n      Object.defineProperty(this, \"name\", { value: options.modelName });\n    }\n    delete options.modelName;\n    this.options = __spreadValues({\n      timestamps: true,\n      validate: {},\n      freezeTableName: false,\n      underscored: false,\n      paranoid: false,\n      rejectOnEmpty: false,\n      whereCollection: null,\n      schema: null,\n      schemaDelimiter: \"\",\n      defaultScope: {},\n      scopes: {},\n      indexes: []\n    }, options);\n    if (this.sequelize.isDefined(this.name)) {\n      this.sequelize.modelManager.removeModel(this.sequelize.modelManager.getModel(this.name));\n    }\n    this.associations = {};\n    this._setupHooks(options.hooks);\n    this.underscored = this.options.underscored;\n    if (!this.options.tableName) {\n      this.tableName = this.options.freezeTableName ? this.name : Utils.underscoredIf(Utils.pluralize(this.name), this.underscored);\n    } else {\n      this.tableName = this.options.tableName;\n    }\n    this._schema = this.options.schema;\n    this._schemaDelimiter = this.options.schemaDelimiter;\n    _.each(options.validate, (validator, validatorType) => {\n      if (Object.prototype.hasOwnProperty.call(attributes, validatorType)) {\n        throw new Error(`A model validator function must not have the same name as a field. Model: ${this.name}, field/validation name: ${validatorType}`);\n      }\n      if (typeof validator !== \"function\") {\n        throw new TypeError(`Members of the validate option must be functions. Model: ${this.name}, error with validate member ${validatorType}`);\n      }\n    });\n    this.rawAttributes = _.mapValues(attributes, (attribute, name) => {\n      attribute = this.sequelize.normalizeAttribute(attribute);\n      if (attribute.type === void 0) {\n        throw new Error(`Unrecognized datatype for attribute \"${this.name}.${name}\"`);\n      }\n      if (attribute.allowNull !== false && _.get(attribute, \"validate.notNull\")) {\n        throw new Error(`Invalid definition for \"${this.name}.${name}\", \"notNull\" validator is only allowed with \"allowNull:false\"`);\n      }\n      if (_.get(attribute, \"references.model.prototype\") instanceof Model) {\n        attribute.references.model = attribute.references.model.getTableName();\n      }\n      return attribute;\n    });\n    const tableName = this.getTableName();\n    this._indexes = this.options.indexes.map((index) => Utils.nameIndex(this._conformIndex(index), tableName));\n    this.primaryKeys = {};\n    this._readOnlyAttributes = /* @__PURE__ */ new Set();\n    this._timestampAttributes = {};\n    if (this.options.timestamps) {\n      for (const key of [\"createdAt\", \"updatedAt\", \"deletedAt\"]) {\n        if (![\"undefined\", \"string\", \"boolean\"].includes(typeof this.options[key])) {\n          throw new Error(`Value for \"${key}\" option must be a string or a boolean, got ${typeof this.options[key]}`);\n        }\n        if (this.options[key] === \"\") {\n          throw new Error(`Value for \"${key}\" option cannot be an empty string`);\n        }\n      }\n      if (this.options.createdAt !== false) {\n        this._timestampAttributes.createdAt = typeof this.options.createdAt === \"string\" ? this.options.createdAt : \"createdAt\";\n        this._readOnlyAttributes.add(this._timestampAttributes.createdAt);\n      }\n      if (this.options.updatedAt !== false) {\n        this._timestampAttributes.updatedAt = typeof this.options.updatedAt === \"string\" ? this.options.updatedAt : \"updatedAt\";\n        this._readOnlyAttributes.add(this._timestampAttributes.updatedAt);\n      }\n      if (this.options.paranoid && this.options.deletedAt !== false) {\n        this._timestampAttributes.deletedAt = typeof this.options.deletedAt === \"string\" ? this.options.deletedAt : \"deletedAt\";\n        this._readOnlyAttributes.add(this._timestampAttributes.deletedAt);\n      }\n    }\n    if (this.options.version) {\n      this._versionAttribute = typeof this.options.version === \"string\" ? this.options.version : \"version\";\n      this._readOnlyAttributes.add(this._versionAttribute);\n    }\n    this._hasReadOnlyAttributes = this._readOnlyAttributes.size > 0;\n    this._addDefaultAttributes();\n    this.refreshAttributes();\n    this._findAutoIncrementAttribute();\n    this._scope = this.options.defaultScope;\n    this._scopeNames = [\"defaultScope\"];\n    this.sequelize.modelManager.addModel(this);\n    this.sequelize.runHooks(\"afterDefine\", this);\n    return this;\n  }\n  static refreshAttributes() {\n    const attributeManipulation = {};\n    this.prototype._customGetters = {};\n    this.prototype._customSetters = {};\n    for (const type of [\"get\", \"set\"]) {\n      const opt = `${type}terMethods`;\n      const funcs = __spreadValues({}, this.options[opt]);\n      const _custom = type === \"get\" ? this.prototype._customGetters : this.prototype._customSetters;\n      _.each(funcs, (method, attribute) => {\n        _custom[attribute] = method;\n        if (type === \"get\") {\n          funcs[attribute] = function() {\n            return this.get(attribute);\n          };\n        }\n        if (type === \"set\") {\n          funcs[attribute] = function(value) {\n            return this.set(attribute, value);\n          };\n        }\n      });\n      _.each(this.rawAttributes, (options, attribute) => {\n        if (Object.prototype.hasOwnProperty.call(options, type)) {\n          _custom[attribute] = options[type];\n        }\n        if (type === \"get\") {\n          funcs[attribute] = function() {\n            return this.get(attribute);\n          };\n        }\n        if (type === \"set\") {\n          funcs[attribute] = function(value) {\n            return this.set(attribute, value);\n          };\n        }\n      });\n      _.each(funcs, (fct, name) => {\n        if (!attributeManipulation[name]) {\n          attributeManipulation[name] = {\n            configurable: true\n          };\n        }\n        attributeManipulation[name][type] = fct;\n      });\n    }\n    this._dataTypeChanges = {};\n    this._dataTypeSanitizers = {};\n    this._hasBooleanAttributes = false;\n    this._hasDateAttributes = false;\n    this._jsonAttributes = /* @__PURE__ */ new Set();\n    this._virtualAttributes = /* @__PURE__ */ new Set();\n    this._defaultValues = {};\n    this.prototype.validators = {};\n    this.fieldRawAttributesMap = {};\n    this.primaryKeys = {};\n    this.uniqueKeys = {};\n    _.each(this.rawAttributes, (definition, name) => {\n      definition.type = this.sequelize.normalizeDataType(definition.type);\n      definition.Model = this;\n      definition.fieldName = name;\n      definition._modelAttribute = true;\n      if (definition.field === void 0) {\n        definition.field = Utils.underscoredIf(name, this.underscored);\n      }\n      if (definition.primaryKey === true) {\n        this.primaryKeys[name] = definition;\n      }\n      this.fieldRawAttributesMap[definition.field] = definition;\n      if (definition.type._sanitize) {\n        this._dataTypeSanitizers[name] = definition.type._sanitize;\n      }\n      if (definition.type._isChanged) {\n        this._dataTypeChanges[name] = definition.type._isChanged;\n      }\n      if (definition.type instanceof DataTypes.BOOLEAN) {\n        this._hasBooleanAttributes = true;\n      } else if (definition.type instanceof DataTypes.DATE || definition.type instanceof DataTypes.DATEONLY) {\n        this._hasDateAttributes = true;\n      } else if (definition.type instanceof DataTypes.JSON) {\n        this._jsonAttributes.add(name);\n      } else if (definition.type instanceof DataTypes.VIRTUAL) {\n        this._virtualAttributes.add(name);\n      }\n      if (Object.prototype.hasOwnProperty.call(definition, \"defaultValue\")) {\n        this._defaultValues[name] = () => Utils.toDefaultValue(definition.defaultValue, this.sequelize.options.dialect);\n      }\n      if (Object.prototype.hasOwnProperty.call(definition, \"unique\") && definition.unique) {\n        let idxName;\n        if (typeof definition.unique === \"object\" && Object.prototype.hasOwnProperty.call(definition.unique, \"name\")) {\n          idxName = definition.unique.name;\n        } else if (typeof definition.unique === \"string\") {\n          idxName = definition.unique;\n        } else {\n          idxName = `${this.tableName}_${name}_unique`;\n        }\n        const idx = this.uniqueKeys[idxName] || { fields: [] };\n        idx.fields.push(definition.field);\n        idx.msg = idx.msg || definition.unique.msg || null;\n        idx.name = idxName || false;\n        idx.column = name;\n        idx.customIndex = definition.unique !== true;\n        this.uniqueKeys[idxName] = idx;\n      }\n      if (Object.prototype.hasOwnProperty.call(definition, \"validate\")) {\n        this.prototype.validators[name] = definition.validate;\n      }\n      if (definition.index === true && definition.type instanceof DataTypes.JSONB) {\n        this._indexes.push(Utils.nameIndex(this._conformIndex({\n          fields: [definition.field || name],\n          using: \"gin\"\n        }), this.getTableName()));\n        delete definition.index;\n      }\n    });\n    this.fieldAttributeMap = _.reduce(this.fieldRawAttributesMap, (map, value, key) => {\n      if (key !== value.fieldName) {\n        map[key] = value.fieldName;\n      }\n      return map;\n    }, {});\n    this._hasJsonAttributes = this._jsonAttributes.size > 0;\n    this._hasVirtualAttributes = this._virtualAttributes.size > 0;\n    this._hasDefaultValues = !_.isEmpty(this._defaultValues);\n    this.tableAttributes = _.omitBy(this.rawAttributes, (_a, key) => this._virtualAttributes.has(key));\n    this.prototype._hasCustomGetters = Object.keys(this.prototype._customGetters).length;\n    this.prototype._hasCustomSetters = Object.keys(this.prototype._customSetters).length;\n    for (const key of Object.keys(attributeManipulation)) {\n      if (Object.prototype.hasOwnProperty.call(Model.prototype, key)) {\n        this.sequelize.log(`Not overriding built-in method from model attribute: ${key}`);\n        continue;\n      }\n      Object.defineProperty(this.prototype, key, attributeManipulation[key]);\n    }\n    this.prototype.rawAttributes = this.rawAttributes;\n    this.prototype._isAttribute = (key) => Object.prototype.hasOwnProperty.call(this.prototype.rawAttributes, key);\n    this.primaryKeyAttributes = Object.keys(this.primaryKeys);\n    this.primaryKeyAttribute = this.primaryKeyAttributes[0];\n    if (this.primaryKeyAttribute) {\n      this.primaryKeyField = this.rawAttributes[this.primaryKeyAttribute].field || this.primaryKeyAttribute;\n    }\n    this._hasPrimaryKeys = this.primaryKeyAttributes.length > 0;\n    this._isPrimaryKey = (key) => this.primaryKeyAttributes.includes(key);\n    this._attributeManipulation = attributeManipulation;\n  }\n  static removeAttribute(attribute) {\n    delete this.rawAttributes[attribute];\n    this.refreshAttributes();\n  }\n  static async sync(options) {\n    options = __spreadValues(__spreadValues({}, this.options), options);\n    options.hooks = options.hooks === void 0 ? true : Boolean(options.hooks);\n    const attributes = this.tableAttributes;\n    const rawAttributes = this.fieldRawAttributesMap;\n    if (options.hooks) {\n      await this.runHooks(\"beforeSync\", options);\n    }\n    if (options.force) {\n      await this.drop(options);\n    }\n    const tableName = this.getTableName(options);\n    await this.queryInterface.createTable(tableName, attributes, options, this);\n    if (options.alter) {\n      const tableInfos = await Promise.all([\n        this.queryInterface.describeTable(tableName, options),\n        this.queryInterface.getForeignKeyReferencesForTable(tableName, options)\n      ]);\n      const columns = tableInfos[0];\n      const foreignKeyReferences = tableInfos[1];\n      const removedConstraints = {};\n      for (const columnName in attributes) {\n        if (!Object.prototype.hasOwnProperty.call(attributes, columnName)) {\n          continue;\n        }\n        if (!columns[columnName] && !columns[attributes[columnName].field]) {\n          await this.queryInterface.addColumn(tableName, attributes[columnName].field || columnName, attributes[columnName], options);\n        }\n      }\n      if (options.alter === true || typeof options.alter === \"object\" && options.alter.drop !== false) {\n        for (const columnName in columns) {\n          if (!Object.prototype.hasOwnProperty.call(columns, columnName)) {\n            continue;\n          }\n          const currentAttribute = rawAttributes[columnName];\n          if (!currentAttribute) {\n            await this.queryInterface.removeColumn(tableName, columnName, options);\n            continue;\n          }\n          if (currentAttribute.primaryKey) {\n            continue;\n          }\n          const references = currentAttribute.references;\n          if (currentAttribute.references) {\n            const database = this.sequelize.config.database;\n            const schema = this.sequelize.config.schema;\n            for (const foreignKeyReference of foreignKeyReferences) {\n              const constraintName = foreignKeyReference.constraintName;\n              if (Boolean(constraintName) && foreignKeyReference.tableCatalog === database && (schema ? foreignKeyReference.tableSchema === schema : true) && foreignKeyReference.referencedTableName === references.model && foreignKeyReference.referencedColumnName === references.key && (schema ? foreignKeyReference.referencedTableSchema === schema : true) && !removedConstraints[constraintName]) {\n                await this.queryInterface.removeConstraint(tableName, constraintName, options);\n                removedConstraints[constraintName] = true;\n              }\n            }\n          }\n          await this.queryInterface.changeColumn(tableName, columnName, currentAttribute, options);\n        }\n      }\n    }\n    let indexes = await this.queryInterface.showIndex(tableName, options);\n    indexes = this._indexes.filter((item1) => !indexes.some((item2) => item1.name === item2.name)).sort((index1, index2) => {\n      if (this.sequelize.options.dialect === \"postgres\") {\n        if (index1.concurrently === true) {\n          return 1;\n        }\n        if (index2.concurrently === true) {\n          return -1;\n        }\n      }\n      return 0;\n    });\n    for (const index of indexes) {\n      await this.queryInterface.addIndex(tableName, __spreadValues(__spreadValues({}, options), index));\n    }\n    if (options.hooks) {\n      await this.runHooks(\"afterSync\", options);\n    }\n    return this;\n  }\n  static async drop(options) {\n    return await this.queryInterface.dropTable(this.getTableName(options), options);\n  }\n  static async dropSchema(schema) {\n    return await this.queryInterface.dropSchema(schema);\n  }\n  static schema(schema, options) {\n    const clone = class extends this {\n    };\n    Object.defineProperty(clone, \"name\", { value: this.name });\n    clone._schema = schema;\n    if (options) {\n      if (typeof options === \"string\") {\n        clone._schemaDelimiter = options;\n      } else if (options.schemaDelimiter) {\n        clone._schemaDelimiter = options.schemaDelimiter;\n      }\n    }\n    return clone;\n  }\n  static getTableName() {\n    return this.queryGenerator.addSchema(this);\n  }\n  static unscoped() {\n    return this.scope();\n  }\n  static addScope(name, scope, options) {\n    options = __spreadValues({ override: false }, options);\n    if ((name === \"defaultScope\" && Object.keys(this.options.defaultScope).length > 0 || name in this.options.scopes) && options.override === false) {\n      throw new Error(`The scope ${name} already exists. Pass { override: true } as options to silence this error`);\n    }\n    if (name === \"defaultScope\") {\n      this.options.defaultScope = this._scope = scope;\n    } else {\n      this.options.scopes[name] = scope;\n    }\n  }\n  static scope(option) {\n    const self = class extends this {\n    };\n    let scope;\n    let scopeName;\n    Object.defineProperty(self, \"name\", { value: this.name });\n    self._scope = {};\n    self._scopeNames = [];\n    self.scoped = true;\n    if (!option) {\n      return self;\n    }\n    const options = _.flatten(arguments);\n    for (const option2 of options) {\n      scope = null;\n      scopeName = null;\n      if (_.isPlainObject(option2)) {\n        if (option2.method) {\n          if (Array.isArray(option2.method) && Boolean(self.options.scopes[option2.method[0]])) {\n            scopeName = option2.method[0];\n            scope = self.options.scopes[scopeName].apply(self, option2.method.slice(1));\n          } else if (self.options.scopes[option2.method]) {\n            scopeName = option2.method;\n            scope = self.options.scopes[scopeName].apply(self);\n          }\n        } else {\n          scope = option2;\n        }\n      } else if (option2 === \"defaultScope\" && _.isPlainObject(self.options.defaultScope)) {\n        scope = self.options.defaultScope;\n      } else {\n        scopeName = option2;\n        scope = self.options.scopes[scopeName];\n        if (typeof scope === \"function\") {\n          scope = scope();\n        }\n      }\n      if (scope) {\n        this._conformIncludes(scope, this);\n        this._assignOptions(self._scope, Utils.cloneDeep(scope));\n        self._scopeNames.push(scopeName ? scopeName : \"defaultScope\");\n      } else {\n        throw new sequelizeErrors.SequelizeScopeError(`Invalid scope ${scopeName} called.`);\n      }\n    }\n    return self;\n  }\n  static async findAll(options) {\n    if (options !== void 0 && !_.isPlainObject(options)) {\n      throw new sequelizeErrors.QueryError(\"The argument passed to findAll must be an options object, use findByPk if you wish to pass a single primary key value\");\n    }\n    if (options !== void 0 && options.attributes && !Array.isArray(options.attributes) && !_.isPlainObject(options.attributes)) {\n      throw new sequelizeErrors.QueryError(\"The attributes option must be an array of column names or an object\");\n    }\n    this.warnOnInvalidOptions(options, Object.keys(this.rawAttributes));\n    const tableNames = {};\n    tableNames[this.getTableName(options)] = true;\n    options = Utils.cloneDeep(options);\n    _.defaults(options, { hooks: true });\n    options.rejectOnEmpty = Object.prototype.hasOwnProperty.call(options, \"rejectOnEmpty\") ? options.rejectOnEmpty : this.options.rejectOnEmpty;\n    this._injectScope(options);\n    if (options.hooks) {\n      await this.runHooks(\"beforeFind\", options);\n    }\n    this._conformIncludes(options, this);\n    this._expandAttributes(options);\n    this._expandIncludeAll(options);\n    if (options.hooks) {\n      await this.runHooks(\"beforeFindAfterExpandIncludeAll\", options);\n    }\n    options.originalAttributes = this._injectDependentVirtualAttributes(options.attributes);\n    if (options.include) {\n      options.hasJoin = true;\n      this._validateIncludedElements(options, tableNames);\n      if (options.attributes && !options.raw && this.primaryKeyAttribute && !options.attributes.includes(this.primaryKeyAttribute) && (!options.group || !options.hasSingleAssociation || options.hasMultiAssociation)) {\n        options.attributes = [this.primaryKeyAttribute].concat(options.attributes);\n      }\n    }\n    if (!options.attributes) {\n      options.attributes = Object.keys(this.rawAttributes);\n      options.originalAttributes = this._injectDependentVirtualAttributes(options.attributes);\n    }\n    this.options.whereCollection = options.where || null;\n    Utils.mapFinderOptions(options, this);\n    options = this._paranoidClause(this, options);\n    if (options.hooks) {\n      await this.runHooks(\"beforeFindAfterOptions\", options);\n    }\n    const selectOptions = __spreadProps(__spreadValues({}, options), { tableNames: Object.keys(tableNames) });\n    const results = await this.queryInterface.select(this, this.getTableName(selectOptions), selectOptions);\n    if (options.hooks) {\n      await this.runHooks(\"afterFind\", results, options);\n    }\n    if (_.isEmpty(results) && options.rejectOnEmpty) {\n      if (typeof options.rejectOnEmpty === \"function\") {\n        throw new options.rejectOnEmpty();\n      }\n      if (typeof options.rejectOnEmpty === \"object\") {\n        throw options.rejectOnEmpty;\n      }\n      throw new sequelizeErrors.EmptyResultError();\n    }\n    return await Model._findSeparate(results, options);\n  }\n  static warnOnInvalidOptions(options, validColumnNames) {\n    if (!_.isPlainObject(options)) {\n      return;\n    }\n    const unrecognizedOptions = Object.keys(options).filter((k) => !validQueryKeywords.has(k));\n    const unexpectedModelAttributes = _.intersection(unrecognizedOptions, validColumnNames);\n    if (!options.where && unexpectedModelAttributes.length > 0) {\n      logger.warn(`Model attributes (${unexpectedModelAttributes.join(\", \")}) passed into finder method options of model ${this.name}, but the options.where object is empty. Did you forget to use options.where?`);\n    }\n  }\n  static _injectDependentVirtualAttributes(attributes) {\n    if (!this._hasVirtualAttributes) {\n      return attributes;\n    }\n    if (!attributes || !Array.isArray(attributes)) {\n      return attributes;\n    }\n    for (const attribute of attributes) {\n      if (this._virtualAttributes.has(attribute) && this.rawAttributes[attribute].type.fields) {\n        attributes = attributes.concat(this.rawAttributes[attribute].type.fields);\n      }\n    }\n    attributes = _.uniq(attributes);\n    return attributes;\n  }\n  static async _findSeparate(results, options) {\n    if (!options.include || options.raw || !results) {\n      return results;\n    }\n    const original = results;\n    if (options.plain) {\n      results = [results];\n    }\n    if (!Array.isArray(results) || results.length === 0) {\n      return original;\n    }\n    await Promise.all(options.include.map(async (include) => {\n      if (!include.separate) {\n        return await Model._findSeparate(results.reduce((memo, result) => {\n          let associations = result.get(include.association.as);\n          if (!associations) {\n            return memo;\n          }\n          if (!Array.isArray(associations)) {\n            associations = [associations];\n          }\n          for (let i = 0, len = associations.length; i !== len; ++i) {\n            memo.push(associations[i]);\n          }\n          return memo;\n        }, []), __spreadProps(__spreadValues({}, _.omit(options, \"include\", \"attributes\", \"order\", \"where\", \"limit\", \"offset\", \"plain\", \"scope\")), {\n          include: include.include || []\n        }));\n      }\n      const map = await include.association.get(results, __spreadValues(__spreadValues({}, _.omit(options, nonCascadingOptions)), _.omit(include, [\"parent\", \"association\", \"as\", \"originalAttributes\"])));\n      for (const result of results) {\n        result.set(include.association.as, map[result.get(include.association.sourceKey)], { raw: true });\n      }\n    }));\n    return original;\n  }\n  static async findByPk(param, options) {\n    if ([null, void 0].includes(param)) {\n      return null;\n    }\n    options = Utils.cloneDeep(options) || {};\n    if (typeof param === \"number\" || typeof param === \"string\" || Buffer.isBuffer(param)) {\n      options.where = {\n        [this.primaryKeyAttribute]: param\n      };\n    } else {\n      throw new TypeError(`Argument passed to findByPk is invalid: ${param}`);\n    }\n    return await Model.findOne.call(this, options);\n  }\n  static async findOne(options) {\n    if (options !== void 0 && !_.isPlainObject(options)) {\n      throw new Error(\"The argument passed to findOne must be an options object, use findByPk if you wish to pass a single primary key value\");\n    }\n    options = Utils.cloneDeep(options);\n    if (options.limit === void 0) {\n      const uniqueSingleColumns = _.chain(this.uniqueKeys).values().filter((c) => c.fields.length === 1).map(\"column\").value();\n      if (!options.where || !_.some(options.where, (value, key) => (key === this.primaryKeyAttribute || uniqueSingleColumns.includes(key)) && (Utils.isPrimitive(value) || Buffer.isBuffer(value)))) {\n        options.limit = 1;\n      }\n    }\n    return await Model.findAll.call(this, _.defaults(options, {\n      plain: true\n    }));\n  }\n  static async aggregate(attribute, aggregateFunction, options) {\n    options = Utils.cloneDeep(options);\n    const prevAttributes = options.attributes;\n    this._injectScope(options);\n    options.attributes = prevAttributes;\n    this._conformIncludes(options, this);\n    if (options.include) {\n      this._expandIncludeAll(options);\n      this._validateIncludedElements(options);\n    }\n    const attrOptions = this.rawAttributes[attribute];\n    const field = attrOptions && attrOptions.field || attribute;\n    let aggregateColumn = this.sequelize.col(field);\n    if (options.distinct) {\n      aggregateColumn = this.sequelize.fn(\"DISTINCT\", aggregateColumn);\n    }\n    let { group } = options;\n    if (Array.isArray(group) && Array.isArray(group[0])) {\n      noDoubleNestedGroup();\n      group = group.flat();\n    }\n    options.attributes = _.unionBy(options.attributes, group, [[this.sequelize.fn(aggregateFunction, aggregateColumn), aggregateFunction]], (a) => Array.isArray(a) ? a[1] : a);\n    if (!options.dataType) {\n      if (attrOptions) {\n        options.dataType = attrOptions.type;\n      } else {\n        options.dataType = new DataTypes.FLOAT();\n      }\n    } else {\n      options.dataType = this.sequelize.normalizeDataType(options.dataType);\n    }\n    Utils.mapOptionFieldNames(options, this);\n    options = this._paranoidClause(this, options);\n    const value = await this.queryInterface.rawSelect(this.getTableName(options), options, aggregateFunction, this);\n    return value;\n  }\n  static async count(options) {\n    options = Utils.cloneDeep(options);\n    options = _.defaults(options, { hooks: true });\n    options.raw = true;\n    if (options.hooks) {\n      await this.runHooks(\"beforeCount\", options);\n    }\n    let col = options.col || \"*\";\n    if (options.include) {\n      col = `${this.name}.${options.col || this.primaryKeyField}`;\n    }\n    if (options.distinct && col === \"*\") {\n      col = this.primaryKeyField;\n    }\n    options.plain = !options.group;\n    options.dataType = new DataTypes.INTEGER();\n    options.includeIgnoreAttributes = false;\n    options.limit = null;\n    options.offset = null;\n    options.order = null;\n    const result = await this.aggregate(col, \"count\", options);\n    if (Array.isArray(result)) {\n      return result.map((item) => __spreadProps(__spreadValues({}, item), {\n        count: Number(item.count)\n      }));\n    }\n    return result;\n  }\n  static async findAndCountAll(options) {\n    if (options !== void 0 && !_.isPlainObject(options)) {\n      throw new Error(\"The argument passed to findAndCountAll must be an options object, use findByPk if you wish to pass a single primary key value\");\n    }\n    const countOptions = Utils.cloneDeep(options);\n    if (countOptions.attributes) {\n      countOptions.attributes = void 0;\n    }\n    const [count, rows] = await Promise.all([\n      this.count(countOptions),\n      this.findAll(options)\n    ]);\n    return {\n      count,\n      rows: count === 0 ? [] : rows\n    };\n  }\n  static async max(field, options) {\n    return await this.aggregate(field, \"max\", options);\n  }\n  static async min(field, options) {\n    return await this.aggregate(field, \"min\", options);\n  }\n  static async sum(field, options) {\n    return await this.aggregate(field, \"sum\", options);\n  }\n  static build(values, options) {\n    if (Array.isArray(values)) {\n      return this.bulkBuild(values, options);\n    }\n    return new this(values, options);\n  }\n  static bulkBuild(valueSets, options) {\n    options = __spreadValues({ isNewRecord: true }, options);\n    if (!options.includeValidated) {\n      this._conformIncludes(options, this);\n      if (options.include) {\n        this._expandIncludeAll(options);\n        this._validateIncludedElements(options);\n      }\n    }\n    if (options.attributes) {\n      options.attributes = options.attributes.map((attribute) => Array.isArray(attribute) ? attribute[1] : attribute);\n    }\n    return valueSets.map((values) => this.build(values, options));\n  }\n  static async create(values, options) {\n    options = Utils.cloneDeep(options || {});\n    return await this.build(values, {\n      isNewRecord: true,\n      attributes: options.fields,\n      include: options.include,\n      raw: options.raw,\n      silent: options.silent\n    }).save(options);\n  }\n  static async findOrBuild(options) {\n    if (!options || !options.where || arguments.length > 1) {\n      throw new Error(\"Missing where attribute in the options parameter passed to findOrBuild. Please note that the API has changed, and is now options only (an object with where, defaults keys, transaction etc.)\");\n    }\n    let values;\n    let instance = await this.findOne(options);\n    if (instance === null) {\n      values = __spreadValues({}, options.defaults);\n      if (_.isPlainObject(options.where)) {\n        values = Utils.defaults(values, options.where);\n      }\n      instance = this.build(values, options);\n      return [instance, true];\n    }\n    return [instance, false];\n  }\n  static async findOrCreate(options) {\n    if (!options || !options.where || arguments.length > 1) {\n      throw new Error(\"Missing where attribute in the options parameter passed to findOrCreate. Please note that the API has changed, and is now options only (an object with where, defaults keys, transaction etc.)\");\n    }\n    options = __spreadValues({}, options);\n    if (options.defaults) {\n      const defaults = Object.keys(options.defaults);\n      const unknownDefaults = defaults.filter((name) => !this.rawAttributes[name]);\n      if (unknownDefaults.length > 0) {\n        logger.warn(`Unknown attributes (${unknownDefaults}) passed to defaults option of findOrCreate`);\n      }\n    }\n    if (options.transaction === void 0 && this.sequelize.constructor._cls) {\n      const t = this.sequelize.constructor._cls.get(\"transaction\");\n      if (t) {\n        options.transaction = t;\n      }\n    }\n    const internalTransaction = !options.transaction;\n    let values;\n    let transaction;\n    try {\n      const t = await this.sequelize.transaction(options);\n      transaction = t;\n      options.transaction = t;\n      const found = await this.findOne(Utils.defaults({ transaction }, options));\n      if (found !== null) {\n        return [found, false];\n      }\n      values = __spreadValues({}, options.defaults);\n      if (_.isPlainObject(options.where)) {\n        values = Utils.defaults(values, options.where);\n      }\n      options.exception = true;\n      options.returning = true;\n      try {\n        const created = await this.create(values, options);\n        if (created.get(this.primaryKeyAttribute, { raw: true }) === null) {\n          throw new sequelizeErrors.UniqueConstraintError();\n        }\n        return [created, true];\n      } catch (error) {\n        if (!(error instanceof sequelizeErrors.UniqueConstraintError)) {\n          throw error;\n        }\n        const flattenedWhere = Utils.flattenObjectDeep(options.where);\n        const flattenedWhereKeys = Object.keys(flattenedWhere).map((name) => _.last(name.split(\".\")));\n        const whereFields = flattenedWhereKeys.map((name) => _.get(this.rawAttributes, `${name}.field`, name));\n        const defaultFields = options.defaults && Object.keys(options.defaults).filter((name) => this.rawAttributes[name]).map((name) => this.rawAttributes[name].field || name);\n        const errFieldKeys = Object.keys(error.fields);\n        const errFieldsWhereIntersects = Utils.intersects(errFieldKeys, whereFields);\n        if (defaultFields && !errFieldsWhereIntersects && Utils.intersects(errFieldKeys, defaultFields)) {\n          throw error;\n        }\n        if (errFieldsWhereIntersects) {\n          _.each(error.fields, (value, key) => {\n            const name = this.fieldRawAttributesMap[key].fieldName;\n            if (value.toString() !== options.where[name].toString()) {\n              throw new Error(`${this.name}#findOrCreate: value used for ${name} was not equal for both the find and the create calls, '${options.where[name]}' vs '${value}'`);\n            }\n          });\n        }\n        const otherCreated = await this.findOne(Utils.defaults({\n          transaction: internalTransaction ? null : transaction\n        }, options));\n        if (otherCreated === null) {\n          throw error;\n        }\n        return [otherCreated, false];\n      }\n    } finally {\n      if (internalTransaction && transaction) {\n        await transaction.commit();\n      }\n    }\n  }\n  static async findCreateFind(options) {\n    if (!options || !options.where) {\n      throw new Error(\"Missing where attribute in the options parameter passed to findCreateFind.\");\n    }\n    let values = __spreadValues({}, options.defaults);\n    if (_.isPlainObject(options.where)) {\n      values = Utils.defaults(values, options.where);\n    }\n    const found = await this.findOne(options);\n    if (found) {\n      return [found, false];\n    }\n    try {\n      const createOptions = __spreadValues({}, options);\n      if (this.sequelize.options.dialect === \"postgres\" && options.transaction) {\n        createOptions.ignoreDuplicates = true;\n      }\n      const created = await this.create(values, createOptions);\n      return [created, true];\n    } catch (error) {\n      if (!(error instanceof sequelizeErrors.UniqueConstraintError || error instanceof sequelizeErrors.EmptyResultError)) {\n        throw error;\n      }\n      const foundAgain = await this.findOne(options);\n      return [foundAgain, false];\n    }\n  }\n  static async upsert(values, options) {\n    options = __spreadValues({\n      hooks: true,\n      returning: true,\n      validate: true\n    }, Utils.cloneDeep(options));\n    const createdAtAttr = this._timestampAttributes.createdAt;\n    const updatedAtAttr = this._timestampAttributes.updatedAt;\n    const hasPrimary = this.primaryKeyField in values || this.primaryKeyAttribute in values;\n    const instance = this.build(values);\n    options.model = this;\n    options.instance = instance;\n    const changed = [...instance._changed];\n    if (!options.fields) {\n      options.fields = changed;\n    }\n    if (options.validate) {\n      await instance.validate(options);\n    }\n    const updatedDataValues = _.pick(instance.dataValues, changed);\n    const insertValues = Utils.mapValueFieldNames(instance.dataValues, Object.keys(instance.rawAttributes), this);\n    const updateValues = Utils.mapValueFieldNames(updatedDataValues, options.fields, this);\n    const now = Utils.now(this.sequelize.options.dialect);\n    if (createdAtAttr && !insertValues[createdAtAttr]) {\n      const field = this.rawAttributes[createdAtAttr].field || createdAtAttr;\n      insertValues[field] = this._getDefaultTimestamp(createdAtAttr) || now;\n    }\n    if (updatedAtAttr && !insertValues[updatedAtAttr]) {\n      const field = this.rawAttributes[updatedAtAttr].field || updatedAtAttr;\n      insertValues[field] = updateValues[field] = this._getDefaultTimestamp(updatedAtAttr) || now;\n    }\n    if (this.sequelize.options.dialect === \"db2\") {\n      this.uniqno = this.sequelize.dialect.queryGenerator.addUniqueFields(insertValues, this.rawAttributes, this.uniqno);\n    }\n    if (!hasPrimary && this.primaryKeyAttribute && !this.rawAttributes[this.primaryKeyAttribute].defaultValue) {\n      delete insertValues[this.primaryKeyField];\n      delete updateValues[this.primaryKeyField];\n    }\n    if (options.hooks) {\n      await this.runHooks(\"beforeUpsert\", values, options);\n    }\n    const result = await this.queryInterface.upsert(this.getTableName(options), insertValues, updateValues, instance.where(), options);\n    const [record] = result;\n    record.isNewRecord = false;\n    if (options.hooks) {\n      await this.runHooks(\"afterUpsert\", result, options);\n      return result;\n    }\n    return result;\n  }\n  static async bulkCreate(records, options = {}) {\n    if (records.length === 0) {\n      return [];\n    }\n    const dialect = this.sequelize.options.dialect;\n    const now = Utils.now(this.sequelize.options.dialect);\n    options = Utils.cloneDeep(options);\n    options.model = this;\n    if (!options.includeValidated) {\n      this._conformIncludes(options, this);\n      if (options.include) {\n        this._expandIncludeAll(options);\n        this._validateIncludedElements(options);\n      }\n    }\n    const instances = records.map((values) => this.build(values, { isNewRecord: true, include: options.include }));\n    const recursiveBulkCreate = async (instances2, options2) => {\n      options2 = __spreadValues({\n        validate: false,\n        hooks: true,\n        individualHooks: false,\n        ignoreDuplicates: false\n      }, options2);\n      if (options2.returning === void 0) {\n        if (options2.association) {\n          options2.returning = false;\n        } else {\n          options2.returning = true;\n        }\n      }\n      if (options2.ignoreDuplicates && [\"mssql\", \"db2\"].includes(dialect)) {\n        throw new Error(`${dialect} does not support the ignoreDuplicates option.`);\n      }\n      if (options2.updateOnDuplicate && (dialect !== \"mysql\" && dialect !== \"mariadb\" && dialect !== \"sqlite\" && dialect !== \"postgres\")) {\n        throw new Error(`${dialect} does not support the updateOnDuplicate option.`);\n      }\n      const model = options2.model;\n      options2.fields = options2.fields || Object.keys(model.rawAttributes);\n      const createdAtAttr = model._timestampAttributes.createdAt;\n      const updatedAtAttr = model._timestampAttributes.updatedAt;\n      if (options2.updateOnDuplicate !== void 0) {\n        if (Array.isArray(options2.updateOnDuplicate) && options2.updateOnDuplicate.length > 0) {\n          options2.updateOnDuplicate = _.intersection(_.without(Object.keys(model.tableAttributes), createdAtAttr), options2.updateOnDuplicate);\n        } else {\n          throw new Error(\"updateOnDuplicate option only supports non-empty array.\");\n        }\n      }\n      if (options2.hooks) {\n        await model.runHooks(\"beforeBulkCreate\", instances2, options2);\n      }\n      if (options2.validate) {\n        const errors = [];\n        const validateOptions = __spreadValues({}, options2);\n        validateOptions.hooks = options2.individualHooks;\n        await Promise.all(instances2.map(async (instance) => {\n          try {\n            await instance.validate(validateOptions);\n          } catch (error) {\n            errors.push(new sequelizeErrors.BulkRecordError(error, instance));\n          }\n        }));\n        delete options2.skip;\n        if (errors.length > 0) {\n          throw new sequelizeErrors.AggregateError(errors);\n        }\n      }\n      if (options2.individualHooks) {\n        await Promise.all(instances2.map(async (instance) => {\n          const individualOptions = __spreadProps(__spreadValues({}, options2), {\n            validate: false,\n            hooks: true\n          });\n          delete individualOptions.fields;\n          delete individualOptions.individualHooks;\n          delete individualOptions.ignoreDuplicates;\n          await instance.save(individualOptions);\n        }));\n      } else {\n        if (options2.include && options2.include.length > 0) {\n          await Promise.all(options2.include.filter((include) => include.association instanceof BelongsTo).map(async (include) => {\n            const associationInstances = [];\n            const associationInstanceIndexToInstanceMap = [];\n            for (const instance of instances2) {\n              const associationInstance = instance.get(include.as);\n              if (associationInstance) {\n                associationInstances.push(associationInstance);\n                associationInstanceIndexToInstanceMap.push(instance);\n              }\n            }\n            if (associationInstances.length === 0) {\n              return;\n            }\n            const includeOptions = _(Utils.cloneDeep(include)).omit([\"association\"]).defaults({\n              transaction: options2.transaction,\n              logging: options2.logging\n            }).value();\n            const createdAssociationInstances = await recursiveBulkCreate(associationInstances, includeOptions);\n            for (const idx in createdAssociationInstances) {\n              const associationInstance = createdAssociationInstances[idx];\n              const instance = associationInstanceIndexToInstanceMap[idx];\n              await include.association.set(instance, associationInstance, { save: false, logging: options2.logging });\n            }\n          }));\n        }\n        records = instances2.map((instance) => {\n          const values = instance.dataValues;\n          if (createdAtAttr && !values[createdAtAttr]) {\n            values[createdAtAttr] = now;\n            if (!options2.fields.includes(createdAtAttr)) {\n              options2.fields.push(createdAtAttr);\n            }\n          }\n          if (updatedAtAttr && !values[updatedAtAttr]) {\n            values[updatedAtAttr] = now;\n            if (!options2.fields.includes(updatedAtAttr)) {\n              options2.fields.push(updatedAtAttr);\n            }\n          }\n          const out = Utils.mapValueFieldNames(values, options2.fields, model);\n          for (const key of model._virtualAttributes) {\n            delete out[key];\n          }\n          return out;\n        });\n        const fieldMappedAttributes = {};\n        for (const attr in model.tableAttributes) {\n          fieldMappedAttributes[model.rawAttributes[attr].field || attr] = model.rawAttributes[attr];\n        }\n        if (options2.updateOnDuplicate) {\n          options2.updateOnDuplicate = options2.updateOnDuplicate.map((attr) => model.rawAttributes[attr].field || attr);\n          const upsertKeys = [];\n          for (const i of model._indexes) {\n            if (i.unique && !i.where) {\n              upsertKeys.push(...i.fields);\n            }\n          }\n          const firstUniqueKey = Object.values(model.uniqueKeys).find((c) => c.fields.length > 0);\n          if (firstUniqueKey && firstUniqueKey.fields) {\n            upsertKeys.push(...firstUniqueKey.fields);\n          }\n          options2.upsertKeys = upsertKeys.length > 0 ? upsertKeys : Object.values(model.primaryKeys).map((x) => x.field);\n        }\n        if (options2.returning && Array.isArray(options2.returning)) {\n          options2.returning = options2.returning.map((attr) => _.get(model.rawAttributes[attr], \"field\", attr));\n        }\n        const results = await model.queryInterface.bulkInsert(model.getTableName(options2), records, options2, fieldMappedAttributes);\n        if (Array.isArray(results)) {\n          for (const [i, result] of results.entries()) {\n            const instance = instances2[i];\n            for (const key in result) {\n              if (!instance || key === model.primaryKeyAttribute && instance.get(model.primaryKeyAttribute) && [\"mysql\", \"mariadb\", \"sqlite\"].includes(dialect)) {\n                continue;\n              }\n              if (Object.prototype.hasOwnProperty.call(result, key)) {\n                const record = result[key];\n                const attr = _.find(model.rawAttributes, (attribute) => attribute.fieldName === key || attribute.field === key);\n                instance.dataValues[attr && attr.fieldName || key] = record;\n              }\n            }\n          }\n        }\n      }\n      if (options2.include && options2.include.length > 0) {\n        await Promise.all(options2.include.filter((include) => !(include.association instanceof BelongsTo || include.parent && include.parent.association instanceof BelongsToMany)).map(async (include) => {\n          const associationInstances = [];\n          const associationInstanceIndexToInstanceMap = [];\n          for (const instance of instances2) {\n            let associated = instance.get(include.as);\n            if (!Array.isArray(associated)) {\n              associated = [associated];\n            }\n            for (const associationInstance of associated) {\n              if (associationInstance) {\n                if (!(include.association instanceof BelongsToMany)) {\n                  associationInstance.set(include.association.foreignKey, instance.get(include.association.sourceKey || instance.constructor.primaryKeyAttribute, { raw: true }), { raw: true });\n                  Object.assign(associationInstance, include.association.scope);\n                }\n                associationInstances.push(associationInstance);\n                associationInstanceIndexToInstanceMap.push(instance);\n              }\n            }\n          }\n          if (associationInstances.length === 0) {\n            return;\n          }\n          const includeOptions = _(Utils.cloneDeep(include)).omit([\"association\"]).defaults({\n            transaction: options2.transaction,\n            logging: options2.logging\n          }).value();\n          const createdAssociationInstances = await recursiveBulkCreate(associationInstances, includeOptions);\n          if (include.association instanceof BelongsToMany) {\n            const valueSets = [];\n            for (const idx in createdAssociationInstances) {\n              const associationInstance = createdAssociationInstances[idx];\n              const instance = associationInstanceIndexToInstanceMap[idx];\n              const values = __spreadValues({\n                [include.association.foreignKey]: instance.get(instance.constructor.primaryKeyAttribute, { raw: true }),\n                [include.association.otherKey]: associationInstance.get(associationInstance.constructor.primaryKeyAttribute, { raw: true })\n              }, include.association.through.scope);\n              if (associationInstance[include.association.through.model.name]) {\n                for (const attr of Object.keys(include.association.through.model.rawAttributes)) {\n                  if (include.association.through.model.rawAttributes[attr]._autoGenerated || attr === include.association.foreignKey || attr === include.association.otherKey || typeof associationInstance[include.association.through.model.name][attr] === void 0) {\n                    continue;\n                  }\n                  values[attr] = associationInstance[include.association.through.model.name][attr];\n                }\n              }\n              valueSets.push(values);\n            }\n            const throughOptions = _(Utils.cloneDeep(include)).omit([\"association\", \"attributes\"]).defaults({\n              transaction: options2.transaction,\n              logging: options2.logging\n            }).value();\n            throughOptions.model = include.association.throughModel;\n            const throughInstances = include.association.throughModel.bulkBuild(valueSets, throughOptions);\n            await recursiveBulkCreate(throughInstances, throughOptions);\n          }\n        }));\n      }\n      for (const instance of instances2) {\n        for (const attr in model.rawAttributes) {\n          if (model.rawAttributes[attr].field && instance.dataValues[model.rawAttributes[attr].field] !== void 0 && model.rawAttributes[attr].field !== attr) {\n            instance.dataValues[attr] = instance.dataValues[model.rawAttributes[attr].field];\n            delete instance.dataValues[model.rawAttributes[attr].field];\n          }\n          instance._previousDataValues[attr] = instance.dataValues[attr];\n          instance.changed(attr, false);\n        }\n        instance.isNewRecord = false;\n      }\n      if (options2.hooks) {\n        await model.runHooks(\"afterBulkCreate\", instances2, options2);\n      }\n      return instances2;\n    };\n    return await recursiveBulkCreate(instances, options);\n  }\n  static async truncate(options) {\n    options = Utils.cloneDeep(options) || {};\n    options.truncate = true;\n    return await this.destroy(options);\n  }\n  static async destroy(options) {\n    options = Utils.cloneDeep(options);\n    this._injectScope(options);\n    if (!options || !(options.where || options.truncate)) {\n      throw new Error(\"Missing where or truncate attribute in the options parameter of model.destroy.\");\n    }\n    if (!options.truncate && !_.isPlainObject(options.where) && !Array.isArray(options.where) && !(options.where instanceof Utils.SequelizeMethod)) {\n      throw new Error(\"Expected plain object, array or sequelize method in the options.where parameter of model.destroy.\");\n    }\n    options = _.defaults(options, {\n      hooks: true,\n      individualHooks: false,\n      force: false,\n      cascade: false,\n      restartIdentity: false\n    });\n    options.type = QueryTypes.BULKDELETE;\n    Utils.mapOptionFieldNames(options, this);\n    options.model = this;\n    if (options.hooks) {\n      await this.runHooks(\"beforeBulkDestroy\", options);\n    }\n    let instances;\n    if (options.individualHooks) {\n      instances = await this.findAll({ where: options.where, transaction: options.transaction, logging: options.logging, benchmark: options.benchmark });\n      await Promise.all(instances.map((instance) => this.runHooks(\"beforeDestroy\", instance, options)));\n    }\n    let result;\n    if (this._timestampAttributes.deletedAt && !options.force) {\n      options.type = QueryTypes.BULKUPDATE;\n      const attrValueHash = {};\n      const deletedAtAttribute = this.rawAttributes[this._timestampAttributes.deletedAt];\n      const field = this.rawAttributes[this._timestampAttributes.deletedAt].field;\n      const where = {\n        [field]: Object.prototype.hasOwnProperty.call(deletedAtAttribute, \"defaultValue\") ? deletedAtAttribute.defaultValue : null\n      };\n      attrValueHash[field] = Utils.now(this.sequelize.options.dialect);\n      result = await this.queryInterface.bulkUpdate(this.getTableName(options), attrValueHash, Object.assign(where, options.where), options, this.rawAttributes);\n    } else {\n      result = await this.queryInterface.bulkDelete(this.getTableName(options), options.where, options, this);\n    }\n    if (options.individualHooks) {\n      await Promise.all(instances.map((instance) => this.runHooks(\"afterDestroy\", instance, options)));\n    }\n    if (options.hooks) {\n      await this.runHooks(\"afterBulkDestroy\", options);\n    }\n    return result;\n  }\n  static async restore(options) {\n    if (!this._timestampAttributes.deletedAt) {\n      throw new Error(\"Model is not paranoid\");\n    }\n    options = __spreadValues({\n      hooks: true,\n      individualHooks: false\n    }, options);\n    options.type = QueryTypes.RAW;\n    options.model = this;\n    Utils.mapOptionFieldNames(options, this);\n    if (options.hooks) {\n      await this.runHooks(\"beforeBulkRestore\", options);\n    }\n    let instances;\n    if (options.individualHooks) {\n      instances = await this.findAll({ where: options.where, transaction: options.transaction, logging: options.logging, benchmark: options.benchmark, paranoid: false });\n      await Promise.all(instances.map((instance) => this.runHooks(\"beforeRestore\", instance, options)));\n    }\n    const attrValueHash = {};\n    const deletedAtCol = this._timestampAttributes.deletedAt;\n    const deletedAtAttribute = this.rawAttributes[deletedAtCol];\n    const deletedAtDefaultValue = Object.prototype.hasOwnProperty.call(deletedAtAttribute, \"defaultValue\") ? deletedAtAttribute.defaultValue : null;\n    attrValueHash[deletedAtAttribute.field || deletedAtCol] = deletedAtDefaultValue;\n    options.omitNull = false;\n    const result = await this.queryInterface.bulkUpdate(this.getTableName(options), attrValueHash, options.where, options, this.rawAttributes);\n    if (options.individualHooks) {\n      await Promise.all(instances.map((instance) => this.runHooks(\"afterRestore\", instance, options)));\n    }\n    if (options.hooks) {\n      await this.runHooks(\"afterBulkRestore\", options);\n    }\n    return result;\n  }\n  static async update(values, options) {\n    options = Utils.cloneDeep(options);\n    this._injectScope(options);\n    this._optionsMustContainWhere(options);\n    options = this._paranoidClause(this, _.defaults(options, {\n      validate: true,\n      hooks: true,\n      individualHooks: false,\n      returning: false,\n      force: false,\n      sideEffects: true\n    }));\n    options.type = QueryTypes.BULKUPDATE;\n    values = _.omitBy(values, (value) => value === void 0);\n    if (options.fields && Array.isArray(options.fields)) {\n      for (const key of Object.keys(values)) {\n        if (!options.fields.includes(key)) {\n          delete values[key];\n        }\n      }\n    } else {\n      const updatedAtAttr = this._timestampAttributes.updatedAt;\n      options.fields = _.intersection(Object.keys(values), Object.keys(this.tableAttributes));\n      if (updatedAtAttr && !options.fields.includes(updatedAtAttr)) {\n        options.fields.push(updatedAtAttr);\n      }\n    }\n    if (this._timestampAttributes.updatedAt && !options.silent) {\n      values[this._timestampAttributes.updatedAt] = this._getDefaultTimestamp(this._timestampAttributes.updatedAt) || Utils.now(this.sequelize.options.dialect);\n    }\n    options.model = this;\n    let valuesUse;\n    if (options.validate) {\n      const build = this.build(values);\n      build.set(this._timestampAttributes.updatedAt, values[this._timestampAttributes.updatedAt], { raw: true });\n      if (options.sideEffects) {\n        Object.assign(values, _.pick(build.get(), build.changed()));\n        options.fields = _.union(options.fields, Object.keys(values));\n      }\n      options.skip = _.difference(Object.keys(this.rawAttributes), Object.keys(values));\n      const attributes = await build.validate(options);\n      options.skip = void 0;\n      if (attributes && attributes.dataValues) {\n        values = _.pick(attributes.dataValues, Object.keys(values));\n      }\n    }\n    if (options.hooks) {\n      options.attributes = values;\n      await this.runHooks(\"beforeBulkUpdate\", options);\n      values = options.attributes;\n      delete options.attributes;\n    }\n    valuesUse = values;\n    let instances;\n    let updateDoneRowByRow = false;\n    if (options.individualHooks) {\n      instances = await this.findAll({\n        where: options.where,\n        transaction: options.transaction,\n        logging: options.logging,\n        benchmark: options.benchmark,\n        paranoid: options.paranoid\n      });\n      if (instances.length > 0) {\n        let changedValues;\n        let different = false;\n        instances = await Promise.all(instances.map(async (instance) => {\n          Object.assign(instance.dataValues, values);\n          _.forIn(valuesUse, (newValue, attr) => {\n            if (newValue !== instance._previousDataValues[attr]) {\n              instance.setDataValue(attr, newValue);\n            }\n          });\n          await this.runHooks(\"beforeUpdate\", instance, options);\n          if (!different) {\n            const thisChangedValues = {};\n            _.forIn(instance.dataValues, (newValue, attr) => {\n              if (newValue !== instance._previousDataValues[attr]) {\n                thisChangedValues[attr] = newValue;\n              }\n            });\n            if (!changedValues) {\n              changedValues = thisChangedValues;\n            } else {\n              different = !_.isEqual(changedValues, thisChangedValues);\n            }\n          }\n          return instance;\n        }));\n        if (!different) {\n          const keys = Object.keys(changedValues);\n          if (keys.length > 0) {\n            valuesUse = changedValues;\n            options.fields = _.union(options.fields, keys);\n          }\n        } else {\n          instances = await Promise.all(instances.map(async (instance) => {\n            const individualOptions = __spreadProps(__spreadValues({}, options), {\n              hooks: false,\n              validate: false\n            });\n            delete individualOptions.individualHooks;\n            return instance.save(individualOptions);\n          }));\n          updateDoneRowByRow = true;\n        }\n      }\n    }\n    let result;\n    if (updateDoneRowByRow) {\n      result = [instances.length, instances];\n    } else if (_.isEmpty(valuesUse) || Object.keys(valuesUse).length === 1 && valuesUse[this._timestampAttributes.updatedAt]) {\n      result = [0];\n    } else {\n      valuesUse = Utils.mapValueFieldNames(valuesUse, options.fields, this);\n      options = Utils.mapOptionFieldNames(options, this);\n      options.hasTrigger = this.options ? this.options.hasTrigger : false;\n      const affectedRows = await this.queryInterface.bulkUpdate(this.getTableName(options), valuesUse, options.where, options, this.tableAttributes);\n      if (options.returning) {\n        result = [affectedRows.length, affectedRows];\n        instances = affectedRows;\n      } else {\n        result = [affectedRows];\n      }\n    }\n    if (options.individualHooks) {\n      await Promise.all(instances.map((instance) => this.runHooks(\"afterUpdate\", instance, options)));\n      result[1] = instances;\n    }\n    if (options.hooks) {\n      options.attributes = values;\n      await this.runHooks(\"afterBulkUpdate\", options);\n      delete options.attributes;\n    }\n    return result;\n  }\n  static async describe(schema, options) {\n    return await this.queryInterface.describeTable(this.tableName, __spreadValues({ schema: schema || this._schema || void 0 }, options));\n  }\n  static _getDefaultTimestamp(attr) {\n    if (Boolean(this.rawAttributes[attr]) && Boolean(this.rawAttributes[attr].defaultValue)) {\n      return Utils.toDefaultValue(this.rawAttributes[attr].defaultValue, this.sequelize.options.dialect);\n    }\n  }\n  static _expandAttributes(options) {\n    if (!_.isPlainObject(options.attributes)) {\n      return;\n    }\n    let attributes = Object.keys(this.rawAttributes);\n    if (options.attributes.exclude) {\n      attributes = attributes.filter((elem) => !options.attributes.exclude.includes(elem));\n    }\n    if (options.attributes.include) {\n      attributes = attributes.concat(options.attributes.include);\n    }\n    options.attributes = attributes;\n  }\n  static _injectScope(options) {\n    const scope = Utils.cloneDeep(this._scope);\n    this._defaultsOptions(options, scope);\n  }\n  static [Symbol.for(\"nodejs.util.inspect.custom\")]() {\n    return this.name;\n  }\n  static hasAlias(alias) {\n    return Object.prototype.hasOwnProperty.call(this.associations, alias);\n  }\n  static async increment(fields, options) {\n    options = options || {};\n    if (typeof fields === \"string\") {\n      fields = [fields];\n    }\n    if (Array.isArray(fields)) {\n      fields = fields.map((f) => {\n        if (this.rawAttributes[f] && this.rawAttributes[f].field && this.rawAttributes[f].field !== f) {\n          return this.rawAttributes[f].field;\n        }\n        return f;\n      });\n    } else if (fields && typeof fields === \"object\") {\n      fields = Object.keys(fields).reduce((rawFields, f) => {\n        if (this.rawAttributes[f] && this.rawAttributes[f].field && this.rawAttributes[f].field !== f) {\n          rawFields[this.rawAttributes[f].field] = fields[f];\n        } else {\n          rawFields[f] = fields[f];\n        }\n        return rawFields;\n      }, {});\n    }\n    this._injectScope(options);\n    this._optionsMustContainWhere(options);\n    options = Utils.defaults({}, options, {\n      by: 1,\n      where: {},\n      increment: true\n    });\n    const isSubtraction = !options.increment;\n    Utils.mapOptionFieldNames(options, this);\n    const where = __spreadValues({}, options.where);\n    let incrementAmountsByField = {};\n    if (Array.isArray(fields)) {\n      incrementAmountsByField = {};\n      for (const field of fields) {\n        incrementAmountsByField[field] = options.by;\n      }\n    } else {\n      incrementAmountsByField = fields;\n    }\n    if (this._versionAttribute) {\n      incrementAmountsByField[this._versionAttribute] = isSubtraction ? -1 : 1;\n    }\n    const extraAttributesToBeUpdated = {};\n    const updatedAtAttr = this._timestampAttributes.updatedAt;\n    if (!options.silent && updatedAtAttr && !incrementAmountsByField[updatedAtAttr]) {\n      const attrName = this.rawAttributes[updatedAtAttr].field || updatedAtAttr;\n      extraAttributesToBeUpdated[attrName] = this._getDefaultTimestamp(updatedAtAttr) || Utils.now(this.sequelize.options.dialect);\n    }\n    const tableName = this.getTableName(options);\n    let affectedRows;\n    if (isSubtraction) {\n      affectedRows = await this.queryInterface.decrement(this, tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options);\n    } else {\n      affectedRows = await this.queryInterface.increment(this, tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options);\n    }\n    if (options.returning) {\n      return [affectedRows, affectedRows.length];\n    }\n    return [affectedRows];\n  }\n  static async decrement(fields, options) {\n    return this.increment(fields, __spreadProps(__spreadValues({\n      by: 1\n    }, options), {\n      increment: false\n    }));\n  }\n  static _optionsMustContainWhere(options) {\n    assert(options && options.where, \"Missing where attribute in the options parameter\");\n    assert(_.isPlainObject(options.where) || Array.isArray(options.where) || options.where instanceof Utils.SequelizeMethod, \"Expected plain object, array or sequelize method in the options.where parameter\");\n  }\n  where(checkVersion) {\n    const where = this.constructor.primaryKeyAttributes.reduce((result, attribute) => {\n      result[attribute] = this.get(attribute, { raw: true });\n      return result;\n    }, {});\n    if (_.size(where) === 0) {\n      return this.constructor.options.whereCollection;\n    }\n    const versionAttr = this.constructor._versionAttribute;\n    if (checkVersion && versionAttr) {\n      where[versionAttr] = this.get(versionAttr, { raw: true });\n    }\n    return Utils.mapWhereFieldNames(where, this.constructor);\n  }\n  toString() {\n    return `[object SequelizeInstance:${this.constructor.name}]`;\n  }\n  getDataValue(key) {\n    return this.dataValues[key];\n  }\n  setDataValue(key, value) {\n    const originalValue = this._previousDataValues[key];\n    if (!_.isEqual(value, originalValue)) {\n      this.changed(key, true);\n    }\n    this.dataValues[key] = value;\n  }\n  get(key, options) {\n    if (options === void 0 && typeof key === \"object\") {\n      options = key;\n      key = void 0;\n    }\n    options = options || {};\n    if (key) {\n      if (Object.prototype.hasOwnProperty.call(this._customGetters, key) && !options.raw) {\n        return this._customGetters[key].call(this, key, options);\n      }\n      if (options.plain && this._options.include && this._options.includeNames.includes(key)) {\n        if (Array.isArray(this.dataValues[key])) {\n          return this.dataValues[key].map((instance) => instance.get(options));\n        }\n        if (this.dataValues[key] instanceof Model) {\n          return this.dataValues[key].get(options);\n        }\n        return this.dataValues[key];\n      }\n      return this.dataValues[key];\n    }\n    if (this._hasCustomGetters || options.plain && this._options.include || options.clone) {\n      const values = {};\n      let _key;\n      if (this._hasCustomGetters) {\n        for (_key in this._customGetters) {\n          if (this._options.attributes && !this._options.attributes.includes(_key)) {\n            continue;\n          }\n          if (Object.prototype.hasOwnProperty.call(this._customGetters, _key)) {\n            values[_key] = this.get(_key, options);\n          }\n        }\n      }\n      for (_key in this.dataValues) {\n        if (!Object.prototype.hasOwnProperty.call(values, _key) && Object.prototype.hasOwnProperty.call(this.dataValues, _key)) {\n          values[_key] = this.get(_key, options);\n        }\n      }\n      return values;\n    }\n    return this.dataValues;\n  }\n  set(key, value, options) {\n    let values;\n    let originalValue;\n    if (typeof key === \"object\" && key !== null) {\n      values = key;\n      options = value || {};\n      if (options.reset) {\n        this.dataValues = {};\n        for (const key2 in values) {\n          this.changed(key2, false);\n        }\n      }\n      if (options.raw && !(this._options && this._options.include) && !(options && options.attributes) && !this.constructor._hasDateAttributes && !this.constructor._hasBooleanAttributes) {\n        if (Object.keys(this.dataValues).length > 0) {\n          Object.assign(this.dataValues, values);\n        } else {\n          this.dataValues = values;\n        }\n        this._previousDataValues = __spreadValues({}, this.dataValues);\n      } else {\n        if (options.attributes) {\n          const setKeys = (data) => {\n            for (const k of data) {\n              if (values[k] === void 0) {\n                continue;\n              }\n              this.set(k, values[k], options);\n            }\n          };\n          setKeys(options.attributes);\n          if (this.constructor._hasVirtualAttributes) {\n            setKeys(this.constructor._virtualAttributes);\n          }\n          if (this._options.includeNames) {\n            setKeys(this._options.includeNames);\n          }\n        } else {\n          for (const key2 in values) {\n            this.set(key2, values[key2], options);\n          }\n        }\n        if (options.raw) {\n          this._previousDataValues = __spreadValues({}, this.dataValues);\n        }\n      }\n      return this;\n    }\n    if (!options) {\n      options = {};\n    }\n    if (!options.raw) {\n      originalValue = this.dataValues[key];\n    }\n    if (!options.raw && this._customSetters[key]) {\n      this._customSetters[key].call(this, value, key);\n      const newValue = this.dataValues[key];\n      if (!_.isEqual(newValue, originalValue)) {\n        this._previousDataValues[key] = originalValue;\n        this.changed(key, true);\n      }\n    } else {\n      if (this._options && this._options.include && this._options.includeNames.includes(key)) {\n        this._setInclude(key, value, options);\n        return this;\n      }\n      if (!options.raw) {\n        if (!this._isAttribute(key)) {\n          if (key.includes(\".\") && this.constructor._jsonAttributes.has(key.split(\".\")[0])) {\n            const previousNestedValue = Dottie.get(this.dataValues, key);\n            if (!_.isEqual(previousNestedValue, value)) {\n              Dottie.set(this.dataValues, key, value);\n              this.changed(key.split(\".\")[0], true);\n            }\n          }\n          return this;\n        }\n        if (this.constructor._hasPrimaryKeys && originalValue && this.constructor._isPrimaryKey(key)) {\n          return this;\n        }\n        if (!this.isNewRecord && this.constructor._hasReadOnlyAttributes && this.constructor._readOnlyAttributes.has(key)) {\n          return this;\n        }\n      }\n      if (!(value instanceof Utils.SequelizeMethod) && Object.prototype.hasOwnProperty.call(this.constructor._dataTypeSanitizers, key)) {\n        value = this.constructor._dataTypeSanitizers[key].call(this, value, options);\n      }\n      if (!options.raw && (value instanceof Utils.SequelizeMethod || !(value instanceof Utils.SequelizeMethod) && this.constructor._dataTypeChanges[key] && this.constructor._dataTypeChanges[key].call(this, value, originalValue, options) || !this.constructor._dataTypeChanges[key] && !_.isEqual(value, originalValue))) {\n        this._previousDataValues[key] = originalValue;\n        this.changed(key, true);\n      }\n      this.dataValues[key] = value;\n    }\n    return this;\n  }\n  setAttributes(updates) {\n    return this.set(updates);\n  }\n  changed(key, value) {\n    if (key === void 0) {\n      if (this._changed.size > 0) {\n        return [...this._changed];\n      }\n      return false;\n    }\n    if (value === true) {\n      this._changed.add(key);\n      return this;\n    }\n    if (value === false) {\n      this._changed.delete(key);\n      return this;\n    }\n    return this._changed.has(key);\n  }\n  previous(key) {\n    if (key) {\n      return this._previousDataValues[key];\n    }\n    return _.pickBy(this._previousDataValues, (value, key2) => this.changed(key2));\n  }\n  _setInclude(key, value, options) {\n    if (!Array.isArray(value)) {\n      value = [value];\n    }\n    if (value[0] instanceof Model) {\n      value = value.map((instance) => instance.dataValues);\n    }\n    const include = this._options.includeMap[key];\n    const association = include.association;\n    const accessor = key;\n    const primaryKeyAttribute = include.model.primaryKeyAttribute;\n    const childOptions = {\n      isNewRecord: this.isNewRecord,\n      include: include.include,\n      includeNames: include.includeNames,\n      includeMap: include.includeMap,\n      includeValidated: true,\n      raw: options.raw,\n      attributes: include.originalAttributes\n    };\n    let isEmpty;\n    if (include.originalAttributes === void 0 || include.originalAttributes.length > 0) {\n      if (association.isSingleAssociation) {\n        if (Array.isArray(value)) {\n          value = value[0];\n        }\n        isEmpty = value && value[primaryKeyAttribute] === null || value === null;\n        this[accessor] = this.dataValues[accessor] = isEmpty ? null : include.model.build(value, childOptions);\n      } else {\n        isEmpty = value[0] && value[0][primaryKeyAttribute] === null;\n        this[accessor] = this.dataValues[accessor] = isEmpty ? [] : include.model.bulkBuild(value, childOptions);\n      }\n    }\n  }\n  async save(options) {\n    if (arguments.length > 1) {\n      throw new Error(\"The second argument was removed in favor of the options object.\");\n    }\n    options = Utils.cloneDeep(options);\n    options = _.defaults(options, {\n      hooks: true,\n      validate: true\n    });\n    if (!options.fields) {\n      if (this.isNewRecord) {\n        options.fields = Object.keys(this.constructor.rawAttributes);\n      } else {\n        options.fields = _.intersection(this.changed(), Object.keys(this.constructor.rawAttributes));\n      }\n      options.defaultFields = options.fields;\n    }\n    if (options.returning === void 0) {\n      if (options.association) {\n        options.returning = false;\n      } else if (this.isNewRecord) {\n        options.returning = true;\n      }\n    }\n    const primaryKeyName = this.constructor.primaryKeyAttribute;\n    const primaryKeyAttribute = primaryKeyName && this.constructor.rawAttributes[primaryKeyName];\n    const createdAtAttr = this.constructor._timestampAttributes.createdAt;\n    const versionAttr = this.constructor._versionAttribute;\n    const hook = this.isNewRecord ? \"Create\" : \"Update\";\n    const wasNewRecord = this.isNewRecord;\n    const now = Utils.now(this.sequelize.options.dialect);\n    let updatedAtAttr = this.constructor._timestampAttributes.updatedAt;\n    if (updatedAtAttr && options.fields.length > 0 && !options.fields.includes(updatedAtAttr)) {\n      options.fields.push(updatedAtAttr);\n    }\n    if (versionAttr && options.fields.length > 0 && !options.fields.includes(versionAttr)) {\n      options.fields.push(versionAttr);\n    }\n    if (options.silent === true && !(this.isNewRecord && this.get(updatedAtAttr, { raw: true }))) {\n      _.remove(options.fields, (val) => val === updatedAtAttr);\n      updatedAtAttr = false;\n    }\n    if (this.isNewRecord === true) {\n      if (createdAtAttr && !options.fields.includes(createdAtAttr)) {\n        options.fields.push(createdAtAttr);\n      }\n      if (primaryKeyAttribute && primaryKeyAttribute.defaultValue && !options.fields.includes(primaryKeyName)) {\n        options.fields.unshift(primaryKeyName);\n      }\n    }\n    if (this.isNewRecord === false && primaryKeyName && this.get(primaryKeyName, { raw: true }) === void 0) {\n      throw new Error(\"You attempted to save an instance with no primary key, this is not allowed since it would result in a global update\");\n    }\n    if (updatedAtAttr && !options.silent && options.fields.includes(updatedAtAttr)) {\n      this.dataValues[updatedAtAttr] = this.constructor._getDefaultTimestamp(updatedAtAttr) || now;\n    }\n    if (this.isNewRecord && createdAtAttr && !this.dataValues[createdAtAttr]) {\n      this.dataValues[createdAtAttr] = this.constructor._getDefaultTimestamp(createdAtAttr) || now;\n    }\n    if (this.sequelize.options.dialect === \"db2\" && this.isNewRecord) {\n      this.uniqno = this.sequelize.dialect.queryGenerator.addUniqueFields(this.dataValues, this.constructor.rawAttributes, this.uniqno);\n    }\n    if (options.validate) {\n      await this.validate(options);\n    }\n    if (options.hooks) {\n      const beforeHookValues = _.pick(this.dataValues, options.fields);\n      let ignoreChanged = _.difference(this.changed(), options.fields);\n      let hookChanged;\n      let afterHookValues;\n      if (updatedAtAttr && options.fields.includes(updatedAtAttr)) {\n        ignoreChanged = _.without(ignoreChanged, updatedAtAttr);\n      }\n      await this.constructor.runHooks(`before${hook}`, this, options);\n      if (options.defaultFields && !this.isNewRecord) {\n        afterHookValues = _.pick(this.dataValues, _.difference(this.changed(), ignoreChanged));\n        hookChanged = [];\n        for (const key of Object.keys(afterHookValues)) {\n          if (afterHookValues[key] !== beforeHookValues[key]) {\n            hookChanged.push(key);\n          }\n        }\n        options.fields = _.uniq(options.fields.concat(hookChanged));\n      }\n      if (hookChanged && options.validate) {\n        options.skip = _.difference(Object.keys(this.constructor.rawAttributes), hookChanged);\n        await this.validate(options);\n        delete options.skip;\n      }\n    }\n    if (options.fields.length > 0 && this.isNewRecord && this._options.include && this._options.include.length > 0) {\n      await Promise.all(this._options.include.filter((include) => include.association instanceof BelongsTo).map(async (include) => {\n        const instance = this.get(include.as);\n        if (!instance) {\n          return;\n        }\n        const includeOptions = _(Utils.cloneDeep(include)).omit([\"association\"]).defaults({\n          transaction: options.transaction,\n          logging: options.logging,\n          parentRecord: this\n        }).value();\n        await instance.save(includeOptions);\n        await this[include.association.accessors.set](instance, { save: false, logging: options.logging });\n      }));\n    }\n    const realFields = options.fields.filter((field) => !this.constructor._virtualAttributes.has(field));\n    if (realFields.length === 0) {\n      return this;\n    }\n    if (!this.changed() && !this.isNewRecord) {\n      return this;\n    }\n    const versionFieldName = _.get(this.constructor.rawAttributes[versionAttr], \"field\") || versionAttr;\n    const values = Utils.mapValueFieldNames(this.dataValues, options.fields, this.constructor);\n    let query = null;\n    let args = [];\n    let where;\n    if (this.isNewRecord) {\n      query = \"insert\";\n      args = [this, this.constructor.getTableName(options), values, options];\n    } else {\n      where = this.where(true);\n      if (versionAttr) {\n        values[versionFieldName] = Number.parseInt(values[versionFieldName], 10) + 1;\n      }\n      query = \"update\";\n      args = [this, this.constructor.getTableName(options), values, where, options];\n    }\n    const [result, rowsUpdated] = await this.constructor.queryInterface[query](...args);\n    if (versionAttr) {\n      if (rowsUpdated < 1) {\n        throw new sequelizeErrors.OptimisticLockError({\n          modelName: this.constructor.name,\n          values,\n          where\n        });\n      } else {\n        result.dataValues[versionAttr] = values[versionFieldName];\n      }\n    }\n    for (const attr of Object.keys(this.constructor.rawAttributes)) {\n      if (this.constructor.rawAttributes[attr].field && values[this.constructor.rawAttributes[attr].field] !== void 0 && this.constructor.rawAttributes[attr].field !== attr) {\n        values[attr] = values[this.constructor.rawAttributes[attr].field];\n        delete values[this.constructor.rawAttributes[attr].field];\n      }\n    }\n    Object.assign(values, result.dataValues);\n    Object.assign(result.dataValues, values);\n    if (wasNewRecord && this._options.include && this._options.include.length > 0) {\n      await Promise.all(this._options.include.filter((include) => !(include.association instanceof BelongsTo || include.parent && include.parent.association instanceof BelongsToMany)).map(async (include) => {\n        let instances = this.get(include.as);\n        if (!instances) {\n          return;\n        }\n        if (!Array.isArray(instances)) {\n          instances = [instances];\n        }\n        const includeOptions = _(Utils.cloneDeep(include)).omit([\"association\"]).defaults({\n          transaction: options.transaction,\n          logging: options.logging,\n          parentRecord: this\n        }).value();\n        await Promise.all(instances.map(async (instance) => {\n          if (include.association instanceof BelongsToMany) {\n            await instance.save(includeOptions);\n            const values0 = __spreadValues({\n              [include.association.foreignKey]: this.get(this.constructor.primaryKeyAttribute, { raw: true }),\n              [include.association.otherKey]: instance.get(instance.constructor.primaryKeyAttribute, { raw: true })\n            }, include.association.through.scope);\n            if (instance[include.association.through.model.name]) {\n              for (const attr of Object.keys(include.association.through.model.rawAttributes)) {\n                if (include.association.through.model.rawAttributes[attr]._autoGenerated || attr === include.association.foreignKey || attr === include.association.otherKey || typeof instance[include.association.through.model.name][attr] === void 0) {\n                  continue;\n                }\n                values0[attr] = instance[include.association.through.model.name][attr];\n              }\n            }\n            await include.association.throughModel.create(values0, includeOptions);\n          } else {\n            instance.set(include.association.foreignKey, this.get(include.association.sourceKey || this.constructor.primaryKeyAttribute, { raw: true }), { raw: true });\n            Object.assign(instance, include.association.scope);\n            await instance.save(includeOptions);\n          }\n        }));\n      }));\n    }\n    if (options.hooks) {\n      await this.constructor.runHooks(`after${hook}`, result, options);\n    }\n    for (const field of options.fields) {\n      result._previousDataValues[field] = result.dataValues[field];\n      this.changed(field, false);\n    }\n    this.isNewRecord = false;\n    return result;\n  }\n  async reload(options) {\n    options = Utils.defaults({\n      where: this.where()\n    }, options, {\n      include: this._options.include || void 0\n    });\n    const reloaded = await this.constructor.findOne(options);\n    if (!reloaded) {\n      throw new sequelizeErrors.InstanceError(\"Instance could not be reloaded because it does not exist anymore (find call returned null)\");\n    }\n    this._options = reloaded._options;\n    this.set(reloaded.dataValues, {\n      raw: true,\n      reset: !options.attributes\n    });\n    return this;\n  }\n  async validate(options) {\n    return new InstanceValidator(this, options).validate();\n  }\n  async update(values, options) {\n    values = _.omitBy(values, (value) => value === void 0);\n    const changedBefore = this.changed() || [];\n    options = options || {};\n    if (Array.isArray(options)) {\n      options = { fields: options };\n    }\n    options = Utils.cloneDeep(options);\n    const setOptions = Utils.cloneDeep(options);\n    setOptions.attributes = options.fields;\n    this.set(values, setOptions);\n    const sideEffects = _.without(this.changed(), ...changedBefore);\n    const fields = _.union(Object.keys(values), sideEffects);\n    if (!options.fields) {\n      options.fields = _.intersection(fields, this.changed());\n      options.defaultFields = options.fields;\n    }\n    return await this.save(options);\n  }\n  async destroy(options) {\n    options = __spreadValues({\n      hooks: true,\n      force: false\n    }, options);\n    if (options.hooks) {\n      await this.constructor.runHooks(\"beforeDestroy\", this, options);\n    }\n    const where = this.where(true);\n    let result;\n    if (this.constructor._timestampAttributes.deletedAt && options.force === false) {\n      const attributeName = this.constructor._timestampAttributes.deletedAt;\n      const attribute = this.constructor.rawAttributes[attributeName];\n      const defaultValue = Object.prototype.hasOwnProperty.call(attribute, \"defaultValue\") ? attribute.defaultValue : null;\n      const currentValue = this.getDataValue(attributeName);\n      const undefinedOrNull = currentValue == null && defaultValue == null;\n      if (undefinedOrNull || _.isEqual(currentValue, defaultValue)) {\n        this.setDataValue(attributeName, new Date());\n      }\n      result = await this.save(__spreadProps(__spreadValues({}, options), { hooks: false }));\n    } else {\n      result = await this.constructor.queryInterface.delete(this, this.constructor.getTableName(options), where, __spreadValues({ type: QueryTypes.DELETE, limit: null }, options));\n    }\n    if (options.hooks) {\n      await this.constructor.runHooks(\"afterDestroy\", this, options);\n    }\n    return result;\n  }\n  isSoftDeleted() {\n    if (!this.constructor._timestampAttributes.deletedAt) {\n      throw new Error(\"Model is not paranoid\");\n    }\n    const deletedAtAttribute = this.constructor.rawAttributes[this.constructor._timestampAttributes.deletedAt];\n    const defaultValue = Object.prototype.hasOwnProperty.call(deletedAtAttribute, \"defaultValue\") ? deletedAtAttribute.defaultValue : null;\n    const deletedAt = this.get(this.constructor._timestampAttributes.deletedAt) || null;\n    const isSet = deletedAt !== defaultValue;\n    return isSet;\n  }\n  async restore(options) {\n    if (!this.constructor._timestampAttributes.deletedAt) {\n      throw new Error(\"Model is not paranoid\");\n    }\n    options = __spreadValues({\n      hooks: true,\n      force: false\n    }, options);\n    if (options.hooks) {\n      await this.constructor.runHooks(\"beforeRestore\", this, options);\n    }\n    const deletedAtCol = this.constructor._timestampAttributes.deletedAt;\n    const deletedAtAttribute = this.constructor.rawAttributes[deletedAtCol];\n    const deletedAtDefaultValue = Object.prototype.hasOwnProperty.call(deletedAtAttribute, \"defaultValue\") ? deletedAtAttribute.defaultValue : null;\n    this.setDataValue(deletedAtCol, deletedAtDefaultValue);\n    const result = await this.save(__spreadProps(__spreadValues({}, options), { hooks: false, omitNull: false }));\n    if (options.hooks) {\n      await this.constructor.runHooks(\"afterRestore\", this, options);\n      return result;\n    }\n    return result;\n  }\n  async increment(fields, options) {\n    const identifier = this.where();\n    options = Utils.cloneDeep(options);\n    options.where = __spreadValues(__spreadValues({}, options.where), identifier);\n    options.instance = this;\n    await this.constructor.increment(fields, options);\n    return this;\n  }\n  async decrement(fields, options) {\n    return this.increment(fields, __spreadProps(__spreadValues({\n      by: 1\n    }, options), {\n      increment: false\n    }));\n  }\n  equals(other) {\n    if (!other || !other.constructor) {\n      return false;\n    }\n    if (!(other instanceof this.constructor)) {\n      return false;\n    }\n    return this.constructor.primaryKeyAttributes.every((attribute) => this.get(attribute, { raw: true }) === other.get(attribute, { raw: true }));\n  }\n  equalsOneOf(others) {\n    return others.some((other) => this.equals(other));\n  }\n  setValidators(attribute, validators) {\n    this.validators[attribute] = validators;\n  }\n  toJSON() {\n    return _.cloneDeep(this.get({\n      plain: true\n    }));\n  }\n  static hasMany(target, options) {\n  }\n  static belongsToMany(target, options) {\n  }\n  static hasOne(target, options) {\n  }\n  static belongsTo(target, options) {\n  }\n}\nObject.assign(Model, associationsMixin);\nHooks.applyTo(Model, true);\nmodule.exports = Model;\n//# sourceMappingURL=model.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/model.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2200,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/model.js",
    "static": true,
    "longname": "lib/model.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/model.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2201,
    "kind": "variable",
    "name": "__defProps",
    "memberof": "lib/model.js",
    "static": true,
    "longname": "lib/model.js~__defProps",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/model.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2202,
    "kind": "variable",
    "name": "__getOwnPropDescs",
    "memberof": "lib/model.js",
    "static": true,
    "longname": "lib/model.js~__getOwnPropDescs",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/model.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2203,
    "kind": "variable",
    "name": "__getOwnPropSymbols",
    "memberof": "lib/model.js",
    "static": true,
    "longname": "lib/model.js~__getOwnPropSymbols",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/model.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2204,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/model.js",
    "static": true,
    "longname": "lib/model.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/model.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2205,
    "kind": "variable",
    "name": "__propIsEnum",
    "memberof": "lib/model.js",
    "static": true,
    "longname": "lib/model.js~__propIsEnum",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/model.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2206,
    "kind": "function",
    "name": "__defNormalProp",
    "memberof": "lib/model.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model.js~__defNormalProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/model.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2207,
    "kind": "function",
    "name": "__spreadValues",
    "memberof": "lib/model.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model.js~__spreadValues",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/model.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2208,
    "kind": "function",
    "name": "__spreadProps",
    "memberof": "lib/model.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model.js~__spreadProps",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/model.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2209,
    "kind": "variable",
    "name": "assert",
    "memberof": "lib/model.js",
    "static": true,
    "longname": "lib/model.js~assert",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/model.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2210,
    "kind": "variable",
    "name": "_",
    "memberof": "lib/model.js",
    "static": true,
    "longname": "lib/model.js~_",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/model.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2211,
    "kind": "variable",
    "name": "Dottie",
    "memberof": "lib/model.js",
    "static": true,
    "longname": "lib/model.js~Dottie",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/model.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2212,
    "kind": "variable",
    "name": "Utils",
    "memberof": "lib/model.js",
    "static": true,
    "longname": "lib/model.js~Utils",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/model.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2213,
    "kind": "variable",
    "name": "logger",
    "memberof": "lib/model.js",
    "static": true,
    "longname": "lib/model.js~logger",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/model.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2214,
    "kind": "variable",
    "name": "BelongsTo",
    "memberof": "lib/model.js",
    "static": true,
    "longname": "lib/model.js~BelongsTo",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/model.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2215,
    "kind": "variable",
    "name": "BelongsToMany",
    "memberof": "lib/model.js",
    "static": true,
    "longname": "lib/model.js~BelongsToMany",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/model.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2216,
    "kind": "variable",
    "name": "InstanceValidator",
    "memberof": "lib/model.js",
    "static": true,
    "longname": "lib/model.js~InstanceValidator",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/model.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2217,
    "kind": "variable",
    "name": "QueryTypes",
    "memberof": "lib/model.js",
    "static": true,
    "longname": "lib/model.js~QueryTypes",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/model.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2218,
    "kind": "variable",
    "name": "sequelizeErrors",
    "memberof": "lib/model.js",
    "static": true,
    "longname": "lib/model.js~sequelizeErrors",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/model.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2219,
    "kind": "variable",
    "name": "Association",
    "memberof": "lib/model.js",
    "static": true,
    "longname": "lib/model.js~Association",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/model.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2220,
    "kind": "variable",
    "name": "HasMany",
    "memberof": "lib/model.js",
    "static": true,
    "longname": "lib/model.js~HasMany",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/model.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2221,
    "kind": "variable",
    "name": "DataTypes",
    "memberof": "lib/model.js",
    "static": true,
    "longname": "lib/model.js~DataTypes",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/model.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2222,
    "kind": "variable",
    "name": "Hooks",
    "memberof": "lib/model.js",
    "static": true,
    "longname": "lib/model.js~Hooks",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/model.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2223,
    "kind": "variable",
    "name": "associationsMixin",
    "memberof": "lib/model.js",
    "static": true,
    "longname": "lib/model.js~associationsMixin",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/model.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2224,
    "kind": "variable",
    "name": "Op",
    "memberof": "lib/model.js",
    "static": true,
    "longname": "lib/model.js~Op",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/model.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2225,
    "kind": "variable",
    "name": "noDoubleNestedGroup",
    "memberof": "lib/model.js",
    "static": true,
    "longname": "lib/model.js~noDoubleNestedGroup",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/model.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2226,
    "kind": "variable",
    "name": "validQueryKeywords",
    "memberof": "lib/model.js",
    "static": true,
    "longname": "lib/model.js~validQueryKeywords",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/model.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2227,
    "kind": "variable",
    "name": "nonCascadingOptions",
    "memberof": "lib/model.js",
    "static": true,
    "longname": "lib/model.js~nonCascadingOptions",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/model.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2228,
    "kind": "class",
    "name": "Model",
    "memberof": "lib/model.js",
    "static": true,
    "longname": "lib/model.js~Model",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/model.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 2229,
    "kind": "get",
    "name": "queryInterface",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model.js~Model.queryInterface",
    "access": "public",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2230,
    "kind": "get",
    "name": "queryGenerator",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model.js~Model.queryGenerator",
    "access": "public",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2231,
    "kind": "get",
    "name": "sequelize",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/model.js~Model#sequelize",
    "access": "public",
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2232,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/model.js~Model#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 2233,
    "kind": "member",
    "name": "dataValues",
    "memberof": "lib/model.js~Model",
    "static": false,
    "longname": "lib/model.js~Model#dataValues",
    "access": "public",
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2234,
    "kind": "member",
    "name": "_previousDataValues",
    "memberof": "lib/model.js~Model",
    "static": false,
    "longname": "lib/model.js~Model#_previousDataValues",
    "access": "private",
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 2235,
    "kind": "member",
    "name": "uniqno",
    "memberof": "lib/model.js~Model",
    "static": false,
    "longname": "lib/model.js~Model#uniqno",
    "access": "public",
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2236,
    "kind": "member",
    "name": "_changed",
    "memberof": "lib/model.js~Model",
    "static": false,
    "longname": "lib/model.js~Model#_changed",
    "access": "private",
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2237,
    "kind": "member",
    "name": "_options",
    "memberof": "lib/model.js~Model",
    "static": false,
    "longname": "lib/model.js~Model#_options",
    "access": "private",
    "description": null,
    "lineNumber": 114,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2238,
    "kind": "member",
    "name": "isNewRecord",
    "memberof": "lib/model.js~Model",
    "static": false,
    "longname": "lib/model.js~Model#isNewRecord",
    "access": "public",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2239,
    "kind": "method",
    "name": "_initValues",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/model.js~Model#_initValues",
    "access": "private",
    "description": null,
    "lineNumber": 118,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "values",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2240,
    "kind": "method",
    "name": "_paranoidClause",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model.js~Model._paranoidClause",
    "access": "private",
    "description": null,
    "lineNumber": 158,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "model",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2241,
    "kind": "method",
    "name": "_addDefaultAttributes",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model.js~Model._addDefaultAttributes",
    "access": "private",
    "description": null,
    "lineNumber": 188,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 2242,
    "kind": "member",
    "name": "rawAttributes",
    "memberof": "lib/model.js~Model",
    "static": true,
    "longname": "lib/model.js~Model.rawAttributes",
    "access": "public",
    "description": null,
    "lineNumber": 239,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2243,
    "kind": "method",
    "name": "getAttributes",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model.js~Model.getAttributes",
    "access": "public",
    "description": null,
    "lineNumber": 244,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2244,
    "kind": "method",
    "name": "_findAutoIncrementAttribute",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model.js~Model._findAutoIncrementAttribute",
    "access": "private",
    "description": null,
    "lineNumber": 247,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 2245,
    "kind": "member",
    "name": "autoIncrementAttribute",
    "memberof": "lib/model.js~Model",
    "static": true,
    "longname": "lib/model.js~Model.autoIncrementAttribute",
    "access": "public",
    "description": null,
    "lineNumber": 248,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2247,
    "kind": "method",
    "name": "_conformIncludes",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model.js~Model._conformIncludes",
    "access": "private",
    "description": null,
    "lineNumber": 261,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      },
      {
        "name": "self",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2248,
    "kind": "method",
    "name": "_transformStringAssociation",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model.js~Model._transformStringAssociation",
    "access": "private",
    "description": null,
    "lineNumber": 273,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "include",
        "types": [
          "*"
        ]
      },
      {
        "name": "self",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2249,
    "kind": "method",
    "name": "_conformInclude",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model.js~Model._conformInclude",
    "access": "private",
    "description": null,
    "lineNumber": 282,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "include",
        "types": [
          "*"
        ]
      },
      {
        "name": "self",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2250,
    "kind": "method",
    "name": "_expandIncludeAllElement",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model.js~Model._expandIncludeAllElement",
    "access": "private",
    "description": null,
    "lineNumber": 329,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "includes",
        "types": [
          "*"
        ]
      },
      {
        "name": "include",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2251,
    "kind": "method",
    "name": "_validateIncludedElements",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model.js~Model._validateIncludedElements",
    "access": "private",
    "description": null,
    "lineNumber": 410,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      },
      {
        "name": "tableNames",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2252,
    "kind": "method",
    "name": "_validateIncludedElement",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model.js~Model._validateIncludedElement",
    "access": "private",
    "description": null,
    "lineNumber": 481,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "include",
        "types": [
          "*"
        ]
      },
      {
        "name": "tableNames",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2253,
    "kind": "method",
    "name": "_getIncludedAssociation",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model.js~Model._getIncludedAssociation",
    "access": "private",
    "description": null,
    "lineNumber": 568,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "targetModel",
        "types": [
          "*"
        ]
      },
      {
        "name": "targetAlias",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2254,
    "kind": "method",
    "name": "_expandIncludeAll",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model.js~Model._expandIncludeAll",
    "access": "private",
    "description": null,
    "lineNumber": 591,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2255,
    "kind": "method",
    "name": "_conformIndex",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model.js~Model._conformIndex",
    "access": "private",
    "description": null,
    "lineNumber": 608,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2256,
    "kind": "method",
    "name": "_uniqIncludes",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model.js~Model._uniqIncludes",
    "access": "private",
    "description": null,
    "lineNumber": 622,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2257,
    "kind": "method",
    "name": "_baseMerge",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model.js~Model._baseMerge",
    "access": "private",
    "description": null,
    "lineNumber": 628,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2258,
    "kind": "method",
    "name": "_mergeFunction",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model.js~Model._mergeFunction",
    "access": "private",
    "description": null,
    "lineNumber": 634,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "objValue",
        "types": [
          "*"
        ]
      },
      {
        "name": "srcValue",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2259,
    "kind": "method",
    "name": "_assignOptions",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model.js~Model._assignOptions",
    "access": "private",
    "description": null,
    "lineNumber": 657,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2260,
    "kind": "method",
    "name": "_defaultsOptions",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model.js~Model._defaultsOptions",
    "access": "private",
    "description": null,
    "lineNumber": 660,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "opts",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2261,
    "kind": "method",
    "name": "init",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model.js~Model.init",
    "access": "public",
    "description": null,
    "lineNumber": 665,
    "undocument": true,
    "params": [
      {
        "name": "attributes",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2262,
    "kind": "member",
    "name": "sequelize",
    "memberof": "lib/model.js~Model",
    "static": true,
    "longname": "lib/model.js~Model.sequelize",
    "access": "public",
    "description": null,
    "lineNumber": 669,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2263,
    "kind": "member",
    "name": "options",
    "memberof": "lib/model.js~Model",
    "static": true,
    "longname": "lib/model.js~Model.options",
    "access": "public",
    "description": null,
    "lineNumber": 689,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2264,
    "kind": "member",
    "name": "associations",
    "memberof": "lib/model.js~Model",
    "static": true,
    "longname": "lib/model.js~Model.associations",
    "access": "public",
    "description": null,
    "lineNumber": 706,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2265,
    "kind": "member",
    "name": "underscored",
    "memberof": "lib/model.js~Model",
    "static": true,
    "longname": "lib/model.js~Model.underscored",
    "access": "public",
    "description": null,
    "lineNumber": 708,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2266,
    "kind": "member",
    "name": "tableName",
    "memberof": "lib/model.js~Model",
    "static": true,
    "longname": "lib/model.js~Model.tableName",
    "access": "public",
    "description": null,
    "lineNumber": 710,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2268,
    "kind": "member",
    "name": "_schema",
    "memberof": "lib/model.js~Model",
    "static": true,
    "longname": "lib/model.js~Model._schema",
    "access": "private",
    "description": null,
    "lineNumber": 714,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2269,
    "kind": "member",
    "name": "_schemaDelimiter",
    "memberof": "lib/model.js~Model",
    "static": true,
    "longname": "lib/model.js~Model._schemaDelimiter",
    "access": "private",
    "description": null,
    "lineNumber": 715,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2271,
    "kind": "member",
    "name": "_indexes",
    "memberof": "lib/model.js~Model",
    "static": true,
    "longname": "lib/model.js~Model._indexes",
    "access": "private",
    "description": null,
    "lineNumber": 738,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2272,
    "kind": "member",
    "name": "primaryKeys",
    "memberof": "lib/model.js~Model",
    "static": true,
    "longname": "lib/model.js~Model.primaryKeys",
    "access": "public",
    "description": null,
    "lineNumber": 739,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2273,
    "kind": "member",
    "name": "_readOnlyAttributes",
    "memberof": "lib/model.js~Model",
    "static": true,
    "longname": "lib/model.js~Model._readOnlyAttributes",
    "access": "private",
    "description": null,
    "lineNumber": 740,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2274,
    "kind": "member",
    "name": "_timestampAttributes",
    "memberof": "lib/model.js~Model",
    "static": true,
    "longname": "lib/model.js~Model._timestampAttributes",
    "access": "private",
    "description": null,
    "lineNumber": 741,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 2275,
    "kind": "member",
    "name": "_versionAttribute",
    "memberof": "lib/model.js~Model",
    "static": true,
    "longname": "lib/model.js~Model._versionAttribute",
    "access": "private",
    "description": null,
    "lineNumber": 765,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2276,
    "kind": "member",
    "name": "_hasReadOnlyAttributes",
    "memberof": "lib/model.js~Model",
    "static": true,
    "longname": "lib/model.js~Model._hasReadOnlyAttributes",
    "access": "private",
    "description": null,
    "lineNumber": 768,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2277,
    "kind": "member",
    "name": "_scope",
    "memberof": "lib/model.js~Model",
    "static": true,
    "longname": "lib/model.js~Model._scope",
    "access": "private",
    "description": null,
    "lineNumber": 772,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2278,
    "kind": "member",
    "name": "_scopeNames",
    "memberof": "lib/model.js~Model",
    "static": true,
    "longname": "lib/model.js~Model._scopeNames",
    "access": "private",
    "description": null,
    "lineNumber": 773,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 2279,
    "kind": "method",
    "name": "refreshAttributes",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model.js~Model.refreshAttributes",
    "access": "public",
    "description": null,
    "lineNumber": 778,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 2280,
    "kind": "member",
    "name": "_dataTypeChanges",
    "memberof": "lib/model.js~Model",
    "static": true,
    "longname": "lib/model.js~Model._dataTypeChanges",
    "access": "private",
    "description": null,
    "lineNumber": 823,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 2281,
    "kind": "member",
    "name": "_dataTypeSanitizers",
    "memberof": "lib/model.js~Model",
    "static": true,
    "longname": "lib/model.js~Model._dataTypeSanitizers",
    "access": "private",
    "description": null,
    "lineNumber": 824,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 2282,
    "kind": "member",
    "name": "_hasBooleanAttributes",
    "memberof": "lib/model.js~Model",
    "static": true,
    "longname": "lib/model.js~Model._hasBooleanAttributes",
    "access": "private",
    "description": null,
    "lineNumber": 825,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 2283,
    "kind": "member",
    "name": "_hasDateAttributes",
    "memberof": "lib/model.js~Model",
    "static": true,
    "longname": "lib/model.js~Model._hasDateAttributes",
    "access": "private",
    "description": null,
    "lineNumber": 826,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 2284,
    "kind": "member",
    "name": "_jsonAttributes",
    "memberof": "lib/model.js~Model",
    "static": true,
    "longname": "lib/model.js~Model._jsonAttributes",
    "access": "private",
    "description": null,
    "lineNumber": 827,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2285,
    "kind": "member",
    "name": "_virtualAttributes",
    "memberof": "lib/model.js~Model",
    "static": true,
    "longname": "lib/model.js~Model._virtualAttributes",
    "access": "private",
    "description": null,
    "lineNumber": 828,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2286,
    "kind": "member",
    "name": "_defaultValues",
    "memberof": "lib/model.js~Model",
    "static": true,
    "longname": "lib/model.js~Model._defaultValues",
    "access": "private",
    "description": null,
    "lineNumber": 829,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 2287,
    "kind": "member",
    "name": "fieldRawAttributesMap",
    "memberof": "lib/model.js~Model",
    "static": true,
    "longname": "lib/model.js~Model.fieldRawAttributesMap",
    "access": "public",
    "description": null,
    "lineNumber": 831,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2289,
    "kind": "member",
    "name": "uniqueKeys",
    "memberof": "lib/model.js~Model",
    "static": true,
    "longname": "lib/model.js~Model.uniqueKeys",
    "access": "public",
    "description": null,
    "lineNumber": 833,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2292,
    "kind": "member",
    "name": "fieldAttributeMap",
    "memberof": "lib/model.js~Model",
    "static": true,
    "longname": "lib/model.js~Model.fieldAttributeMap",
    "access": "public",
    "description": null,
    "lineNumber": 892,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2293,
    "kind": "member",
    "name": "_hasJsonAttributes",
    "memberof": "lib/model.js~Model",
    "static": true,
    "longname": "lib/model.js~Model._hasJsonAttributes",
    "access": "private",
    "description": null,
    "lineNumber": 898,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2294,
    "kind": "member",
    "name": "_hasVirtualAttributes",
    "memberof": "lib/model.js~Model",
    "static": true,
    "longname": "lib/model.js~Model._hasVirtualAttributes",
    "access": "private",
    "description": null,
    "lineNumber": 899,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2295,
    "kind": "member",
    "name": "_hasDefaultValues",
    "memberof": "lib/model.js~Model",
    "static": true,
    "longname": "lib/model.js~Model._hasDefaultValues",
    "access": "private",
    "description": null,
    "lineNumber": 900,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2296,
    "kind": "member",
    "name": "tableAttributes",
    "memberof": "lib/model.js~Model",
    "static": true,
    "longname": "lib/model.js~Model.tableAttributes",
    "access": "public",
    "description": null,
    "lineNumber": 901,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2297,
    "kind": "member",
    "name": "primaryKeyAttributes",
    "memberof": "lib/model.js~Model",
    "static": true,
    "longname": "lib/model.js~Model.primaryKeyAttributes",
    "access": "public",
    "description": null,
    "lineNumber": 913,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2298,
    "kind": "member",
    "name": "primaryKeyAttribute",
    "memberof": "lib/model.js~Model",
    "static": true,
    "longname": "lib/model.js~Model.primaryKeyAttribute",
    "access": "public",
    "description": null,
    "lineNumber": 914,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2299,
    "kind": "member",
    "name": "primaryKeyField",
    "memberof": "lib/model.js~Model",
    "static": true,
    "longname": "lib/model.js~Model.primaryKeyField",
    "access": "public",
    "description": null,
    "lineNumber": 916,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2300,
    "kind": "member",
    "name": "_hasPrimaryKeys",
    "memberof": "lib/model.js~Model",
    "static": true,
    "longname": "lib/model.js~Model._hasPrimaryKeys",
    "access": "private",
    "description": null,
    "lineNumber": 918,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2301,
    "kind": "member",
    "name": "_isPrimaryKey",
    "memberof": "lib/model.js~Model",
    "static": true,
    "longname": "lib/model.js~Model._isPrimaryKey",
    "access": "private",
    "description": null,
    "lineNumber": 919,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2302,
    "kind": "member",
    "name": "_attributeManipulation",
    "memberof": "lib/model.js~Model",
    "static": true,
    "longname": "lib/model.js~Model._attributeManipulation",
    "access": "private",
    "description": null,
    "lineNumber": 920,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2303,
    "kind": "method",
    "name": "removeAttribute",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model.js~Model.removeAttribute",
    "access": "public",
    "description": null,
    "lineNumber": 922,
    "undocument": true,
    "params": [
      {
        "name": "attribute",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 2304,
    "kind": "method",
    "name": "sync",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/model.js~Model.sync",
    "access": "public",
    "description": null,
    "lineNumber": 926,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2305,
    "kind": "method",
    "name": "drop",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/model.js~Model.drop",
    "access": "public",
    "description": null,
    "lineNumber": 1004,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2306,
    "kind": "method",
    "name": "dropSchema",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/model.js~Model.dropSchema",
    "access": "public",
    "description": null,
    "lineNumber": 1007,
    "undocument": true,
    "params": [
      {
        "name": "schema",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2307,
    "kind": "method",
    "name": "schema",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model.js~Model.schema",
    "access": "public",
    "description": null,
    "lineNumber": 1010,
    "undocument": true,
    "params": [
      {
        "name": "schema",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2308,
    "kind": "method",
    "name": "getTableName",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model.js~Model.getTableName",
    "access": "public",
    "description": null,
    "lineNumber": 1024,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2309,
    "kind": "method",
    "name": "unscoped",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model.js~Model.unscoped",
    "access": "public",
    "description": null,
    "lineNumber": 1027,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2310,
    "kind": "method",
    "name": "addScope",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model.js~Model.addScope",
    "access": "public",
    "description": null,
    "lineNumber": 1030,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "scope",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 2311,
    "kind": "method",
    "name": "scope",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model.js~Model.scope",
    "access": "public",
    "description": null,
    "lineNumber": 1041,
    "undocument": true,
    "params": [
      {
        "name": "option",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2312,
    "kind": "method",
    "name": "findAll",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/model.js~Model.findAll",
    "access": "public",
    "description": null,
    "lineNumber": 1088,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2313,
    "kind": "method",
    "name": "warnOnInvalidOptions",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model.js~Model.warnOnInvalidOptions",
    "access": "public",
    "description": null,
    "lineNumber": 1145,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      },
      {
        "name": "validColumnNames",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 2314,
    "kind": "method",
    "name": "_injectDependentVirtualAttributes",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model.js~Model._injectDependentVirtualAttributes",
    "access": "private",
    "description": null,
    "lineNumber": 1155,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "attributes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2315,
    "kind": "method",
    "name": "_findSeparate",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/model.js~Model._findSeparate",
    "access": "private",
    "description": null,
    "lineNumber": 1170,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "results",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2316,
    "kind": "method",
    "name": "findByPk",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/model.js~Model.findByPk",
    "access": "public",
    "description": null,
    "lineNumber": 1206,
    "undocument": true,
    "params": [
      {
        "name": "param",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2317,
    "kind": "method",
    "name": "findOne",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/model.js~Model.findOne",
    "access": "public",
    "description": null,
    "lineNumber": 1220,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2318,
    "kind": "method",
    "name": "aggregate",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/model.js~Model.aggregate",
    "access": "public",
    "description": null,
    "lineNumber": 1235,
    "undocument": true,
    "params": [
      {
        "name": "attribute",
        "types": [
          "*"
        ]
      },
      {
        "name": "aggregateFunction",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2319,
    "kind": "method",
    "name": "count",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/model.js~Model.count",
    "access": "public",
    "description": null,
    "lineNumber": 1271,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2320,
    "kind": "method",
    "name": "findAndCountAll",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/model.js~Model.findAndCountAll",
    "access": "public",
    "description": null,
    "lineNumber": 1299,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"count\": *, \"rows\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2321,
    "kind": "method",
    "name": "max",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/model.js~Model.max",
    "access": "public",
    "description": null,
    "lineNumber": 1316,
    "undocument": true,
    "params": [
      {
        "name": "field",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2322,
    "kind": "method",
    "name": "min",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/model.js~Model.min",
    "access": "public",
    "description": null,
    "lineNumber": 1319,
    "undocument": true,
    "params": [
      {
        "name": "field",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2323,
    "kind": "method",
    "name": "sum",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/model.js~Model.sum",
    "access": "public",
    "description": null,
    "lineNumber": 1322,
    "undocument": true,
    "params": [
      {
        "name": "field",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2324,
    "kind": "method",
    "name": "build",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model.js~Model.build",
    "access": "public",
    "description": null,
    "lineNumber": 1325,
    "undocument": true,
    "params": [
      {
        "name": "values",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2325,
    "kind": "method",
    "name": "bulkBuild",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model.js~Model.bulkBuild",
    "access": "public",
    "description": null,
    "lineNumber": 1331,
    "undocument": true,
    "params": [
      {
        "name": "valueSets",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2326,
    "kind": "method",
    "name": "create",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/model.js~Model.create",
    "access": "public",
    "description": null,
    "lineNumber": 1345,
    "undocument": true,
    "params": [
      {
        "name": "values",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2327,
    "kind": "method",
    "name": "findOrBuild",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/model.js~Model.findOrBuild",
    "access": "public",
    "description": null,
    "lineNumber": 1355,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2328,
    "kind": "method",
    "name": "findOrCreate",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/model.js~Model.findOrCreate",
    "access": "public",
    "description": null,
    "lineNumber": 1371,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2329,
    "kind": "method",
    "name": "findCreateFind",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/model.js~Model.findCreateFind",
    "access": "public",
    "description": null,
    "lineNumber": 1447,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2330,
    "kind": "method",
    "name": "upsert",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/model.js~Model.upsert",
    "access": "public",
    "description": null,
    "lineNumber": 1474,
    "undocument": true,
    "params": [
      {
        "name": "values",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2331,
    "kind": "member",
    "name": "uniqno",
    "memberof": "lib/model.js~Model",
    "static": true,
    "longname": "lib/model.js~Model.uniqno",
    "access": "public",
    "description": null,
    "lineNumber": 1506,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2332,
    "kind": "method",
    "name": "bulkCreate",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/model.js~Model.bulkCreate",
    "access": "public",
    "description": null,
    "lineNumber": 1524,
    "undocument": true,
    "params": [
      {
        "name": "records",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2333,
    "kind": "method",
    "name": "truncate",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/model.js~Model.truncate",
    "access": "public",
    "description": null,
    "lineNumber": 1761,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2334,
    "kind": "method",
    "name": "destroy",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/model.js~Model.destroy",
    "access": "public",
    "description": null,
    "lineNumber": 1766,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2335,
    "kind": "method",
    "name": "restore",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/model.js~Model.restore",
    "access": "public",
    "description": null,
    "lineNumber": 1815,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2336,
    "kind": "method",
    "name": "update",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/model.js~Model.update",
    "access": "public",
    "description": null,
    "lineNumber": 1849,
    "undocument": true,
    "params": [
      {
        "name": "values",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2337,
    "kind": "method",
    "name": "describe",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/model.js~Model.describe",
    "access": "public",
    "description": null,
    "lineNumber": 1985,
    "undocument": true,
    "params": [
      {
        "name": "schema",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2338,
    "kind": "method",
    "name": "_getDefaultTimestamp",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model.js~Model._getDefaultTimestamp",
    "access": "private",
    "description": null,
    "lineNumber": 1988,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "attr",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2339,
    "kind": "method",
    "name": "_expandAttributes",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model.js~Model._expandAttributes",
    "access": "private",
    "description": null,
    "lineNumber": 1993,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2340,
    "kind": "method",
    "name": "_injectScope",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model.js~Model._injectScope",
    "access": "private",
    "description": null,
    "lineNumber": 2006,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2341,
    "kind": "method",
    "name": "[Symbol.for(\"nodejs.util.inspect.custom\")]",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model.js~Model.[Symbol.for(\"nodejs.util.inspect.custom\")]",
    "access": "public",
    "description": null,
    "lineNumber": 2010,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2342,
    "kind": "method",
    "name": "hasAlias",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model.js~Model.hasAlias",
    "access": "public",
    "description": null,
    "lineNumber": 2013,
    "undocument": true,
    "params": [
      {
        "name": "alias",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2343,
    "kind": "method",
    "name": "increment",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/model.js~Model.increment",
    "access": "public",
    "description": null,
    "lineNumber": 2016,
    "undocument": true,
    "params": [
      {
        "name": "fields",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2344,
    "kind": "method",
    "name": "decrement",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/model.js~Model.decrement",
    "access": "public",
    "description": null,
    "lineNumber": 2078,
    "undocument": true,
    "params": [
      {
        "name": "fields",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2345,
    "kind": "method",
    "name": "_optionsMustContainWhere",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model.js~Model._optionsMustContainWhere",
    "access": "private",
    "description": null,
    "lineNumber": 2085,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2346,
    "kind": "method",
    "name": "where",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/model.js~Model#where",
    "access": "public",
    "description": null,
    "lineNumber": 2089,
    "undocument": true,
    "params": [
      {
        "name": "checkVersion",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2347,
    "kind": "method",
    "name": "toString",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/model.js~Model#toString",
    "access": "public",
    "description": null,
    "lineNumber": 2103,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2348,
    "kind": "method",
    "name": "getDataValue",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/model.js~Model#getDataValue",
    "access": "public",
    "description": null,
    "lineNumber": 2106,
    "undocument": true,
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2349,
    "kind": "method",
    "name": "setDataValue",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/model.js~Model#setDataValue",
    "access": "public",
    "description": null,
    "lineNumber": 2109,
    "undocument": true,
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 2350,
    "kind": "method",
    "name": "get",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/model.js~Model#get",
    "access": "public",
    "description": null,
    "lineNumber": 2116,
    "undocument": true,
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2351,
    "kind": "method",
    "name": "set",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/model.js~Model#set",
    "access": "public",
    "description": null,
    "lineNumber": 2159,
    "undocument": true,
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2356,
    "kind": "method",
    "name": "setAttributes",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/model.js~Model#setAttributes",
    "access": "public",
    "description": null,
    "lineNumber": 2253,
    "undocument": true,
    "params": [
      {
        "name": "updates",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2357,
    "kind": "method",
    "name": "changed",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/model.js~Model#changed",
    "access": "public",
    "description": null,
    "lineNumber": 2256,
    "undocument": true,
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2358,
    "kind": "method",
    "name": "previous",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/model.js~Model#previous",
    "access": "public",
    "description": null,
    "lineNumber": 2273,
    "undocument": true,
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2359,
    "kind": "method",
    "name": "_setInclude",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/model.js~Model#_setInclude",
    "access": "private",
    "description": null,
    "lineNumber": 2279,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2360,
    "kind": "member",
    "name": "[accessor]",
    "memberof": "lib/model.js~Model",
    "static": false,
    "longname": "lib/model.js~Model#[accessor]",
    "access": "public",
    "description": null,
    "lineNumber": 2306,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2362,
    "kind": "method",
    "name": "save",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/model.js~Model#save",
    "access": "public",
    "description": null,
    "lineNumber": 2313,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2365,
    "kind": "method",
    "name": "reload",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/model.js~Model#reload",
    "access": "public",
    "description": null,
    "lineNumber": 2509,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2367,
    "kind": "method",
    "name": "validate",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/model.js~Model#validate",
    "access": "public",
    "description": null,
    "lineNumber": 2526,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2368,
    "kind": "method",
    "name": "update",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/model.js~Model#update",
    "access": "public",
    "description": null,
    "lineNumber": 2529,
    "undocument": true,
    "params": [
      {
        "name": "values",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2369,
    "kind": "method",
    "name": "destroy",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/model.js~Model#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 2548,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2370,
    "kind": "method",
    "name": "isSoftDeleted",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/model.js~Model#isSoftDeleted",
    "access": "public",
    "description": null,
    "lineNumber": 2576,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2371,
    "kind": "method",
    "name": "restore",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/model.js~Model#restore",
    "access": "public",
    "description": null,
    "lineNumber": 2586,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2372,
    "kind": "method",
    "name": "increment",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/model.js~Model#increment",
    "access": "public",
    "description": null,
    "lineNumber": 2608,
    "undocument": true,
    "params": [
      {
        "name": "fields",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2373,
    "kind": "method",
    "name": "decrement",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/model.js~Model#decrement",
    "access": "public",
    "description": null,
    "lineNumber": 2616,
    "undocument": true,
    "params": [
      {
        "name": "fields",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2374,
    "kind": "method",
    "name": "equals",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/model.js~Model#equals",
    "access": "public",
    "description": null,
    "lineNumber": 2623,
    "undocument": true,
    "params": [
      {
        "name": "other",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2375,
    "kind": "method",
    "name": "equalsOneOf",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/model.js~Model#equalsOneOf",
    "access": "public",
    "description": null,
    "lineNumber": 2632,
    "undocument": true,
    "params": [
      {
        "name": "others",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2376,
    "kind": "method",
    "name": "setValidators",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/model.js~Model#setValidators",
    "access": "public",
    "description": null,
    "lineNumber": 2635,
    "undocument": true,
    "params": [
      {
        "name": "attribute",
        "types": [
          "*"
        ]
      },
      {
        "name": "validators",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 2377,
    "kind": "method",
    "name": "toJSON",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/model.js~Model#toJSON",
    "access": "public",
    "description": null,
    "lineNumber": 2638,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2378,
    "kind": "method",
    "name": "hasMany",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model.js~Model.hasMany",
    "access": "public",
    "description": null,
    "lineNumber": 2643,
    "undocument": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 2379,
    "kind": "method",
    "name": "belongsToMany",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model.js~Model.belongsToMany",
    "access": "public",
    "description": null,
    "lineNumber": 2645,
    "undocument": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 2380,
    "kind": "method",
    "name": "hasOne",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model.js~Model.hasOne",
    "access": "public",
    "description": null,
    "lineNumber": 2647,
    "undocument": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 2381,
    "kind": "method",
    "name": "belongsTo",
    "memberof": "lib/model.js~Model",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/model.js~Model.belongsTo",
    "access": "public",
    "description": null,
    "lineNumber": 2649,
    "undocument": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 2382,
    "kind": "file",
    "name": "lib/operators.js",
    "content": "var __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __markAsModule = (target) => __defProp(target, \"__esModule\", { value: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __reExport = (target, module2, copyDefault, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2))\n      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== \"default\"))\n        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });\n  }\n  return target;\n};\nvar __toCommonJS = /* @__PURE__ */ ((cache) => {\n  return (module2, temp) => {\n    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);\n  };\n})(typeof WeakMap !== \"undefined\" ? /* @__PURE__ */ new WeakMap() : 0);\nvar operators_exports = {};\n__export(operators_exports, {\n  Op: () => Op\n});\nconst Op = {\n  eq: Symbol.for(\"eq\"),\n  ne: Symbol.for(\"ne\"),\n  gte: Symbol.for(\"gte\"),\n  gt: Symbol.for(\"gt\"),\n  lte: Symbol.for(\"lte\"),\n  lt: Symbol.for(\"lt\"),\n  not: Symbol.for(\"not\"),\n  is: Symbol.for(\"is\"),\n  in: Symbol.for(\"in\"),\n  notIn: Symbol.for(\"notIn\"),\n  like: Symbol.for(\"like\"),\n  notLike: Symbol.for(\"notLike\"),\n  iLike: Symbol.for(\"iLike\"),\n  notILike: Symbol.for(\"notILike\"),\n  startsWith: Symbol.for(\"startsWith\"),\n  endsWith: Symbol.for(\"endsWith\"),\n  substring: Symbol.for(\"substring\"),\n  regexp: Symbol.for(\"regexp\"),\n  notRegexp: Symbol.for(\"notRegexp\"),\n  iRegexp: Symbol.for(\"iRegexp\"),\n  notIRegexp: Symbol.for(\"notIRegexp\"),\n  between: Symbol.for(\"between\"),\n  notBetween: Symbol.for(\"notBetween\"),\n  overlap: Symbol.for(\"overlap\"),\n  contains: Symbol.for(\"contains\"),\n  contained: Symbol.for(\"contained\"),\n  adjacent: Symbol.for(\"adjacent\"),\n  strictLeft: Symbol.for(\"strictLeft\"),\n  strictRight: Symbol.for(\"strictRight\"),\n  noExtendRight: Symbol.for(\"noExtendRight\"),\n  noExtendLeft: Symbol.for(\"noExtendLeft\"),\n  and: Symbol.for(\"and\"),\n  or: Symbol.for(\"or\"),\n  any: Symbol.for(\"any\"),\n  all: Symbol.for(\"all\"),\n  values: Symbol.for(\"values\"),\n  col: Symbol.for(\"col\"),\n  placeholder: Symbol.for(\"placeholder\"),\n  join: Symbol.for(\"join\"),\n  match: Symbol.for(\"match\")\n};\nmodule.exports = __toCommonJS(operators_exports);\n//# sourceMappingURL=operators.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/operators.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2383,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/operators.js",
    "static": true,
    "longname": "lib/operators.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/operators.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2384,
    "kind": "variable",
    "name": "__getOwnPropDesc",
    "memberof": "lib/operators.js",
    "static": true,
    "longname": "lib/operators.js~__getOwnPropDesc",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/operators.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2385,
    "kind": "variable",
    "name": "__getOwnPropNames",
    "memberof": "lib/operators.js",
    "static": true,
    "longname": "lib/operators.js~__getOwnPropNames",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/operators.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2386,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/operators.js",
    "static": true,
    "longname": "lib/operators.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/operators.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2387,
    "kind": "function",
    "name": "__markAsModule",
    "memberof": "lib/operators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/operators.js~__markAsModule",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/operators.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2388,
    "kind": "function",
    "name": "__export",
    "memberof": "lib/operators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/operators.js~__export",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/operators.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "all",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2389,
    "kind": "function",
    "name": "__reExport",
    "memberof": "lib/operators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/operators.js~__reExport",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/operators.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "copyDefault",
        "types": [
          "*"
        ]
      },
      {
        "name": "desc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2390,
    "kind": "variable",
    "name": "__toCommonJS",
    "memberof": "lib/operators.js",
    "static": true,
    "longname": "lib/operators.js~__toCommonJS",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/operators.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2391,
    "kind": "variable",
    "name": "operators_exports",
    "memberof": "lib/operators.js",
    "static": true,
    "longname": "lib/operators.js~operators_exports",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/operators.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2392,
    "kind": "variable",
    "name": "Op",
    "memberof": "lib/operators.js",
    "static": true,
    "longname": "lib/operators.js~Op",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/operators.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "{\"eq\": *, \"ne\": *, \"gte\": *, \"gt\": *, \"lte\": *, \"lt\": *, \"not\": *, \"is\": *, \"in\": *, \"notIn\": *, \"like\": *, \"notLike\": *, \"iLike\": *, \"notILike\": *, \"startsWith\": *, \"endsWith\": *, \"substring\": *, \"regexp\": *, \"notRegexp\": *, \"iRegexp\": *, \"notIRegexp\": *, \"between\": *, \"notBetween\": *, \"overlap\": *, \"contains\": *, \"contained\": *, \"adjacent\": *, \"strictLeft\": *, \"strictRight\": *, \"noExtendRight\": *, \"noExtendLeft\": *, \"and\": *, \"or\": *, \"any\": *, \"all\": *, \"values\": *, \"col\": *, \"placeholder\": *, \"join\": *, \"match\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2393,
    "kind": "file",
    "name": "lib/query-types.js",
    "content": "var __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __markAsModule = (target) => __defProp(target, \"__esModule\", { value: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __reExport = (target, module2, copyDefault, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2))\n      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== \"default\"))\n        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });\n  }\n  return target;\n};\nvar __toCommonJS = /* @__PURE__ */ ((cache) => {\n  return (module2, temp) => {\n    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);\n  };\n})(typeof WeakMap !== \"undefined\" ? /* @__PURE__ */ new WeakMap() : 0);\nvar query_types_exports = {};\n__export(query_types_exports, {\n  QueryTypes: () => QueryTypes\n});\nvar QueryTypes = /* @__PURE__ */ ((QueryTypes2) => {\n  QueryTypes2[\"SELECT\"] = \"SELECT\";\n  QueryTypes2[\"INSERT\"] = \"INSERT\";\n  QueryTypes2[\"UPDATE\"] = \"UPDATE\";\n  QueryTypes2[\"BULKUPDATE\"] = \"BULKUPDATE\";\n  QueryTypes2[\"BULKDELETE\"] = \"BULKDELETE\";\n  QueryTypes2[\"DELETE\"] = \"DELETE\";\n  QueryTypes2[\"UPSERT\"] = \"UPSERT\";\n  QueryTypes2[\"VERSION\"] = \"VERSION\";\n  QueryTypes2[\"SHOWTABLES\"] = \"SHOWTABLES\";\n  QueryTypes2[\"SHOWINDEXES\"] = \"SHOWINDEXES\";\n  QueryTypes2[\"DESCRIBE\"] = \"DESCRIBE\";\n  QueryTypes2[\"RAW\"] = \"RAW\";\n  QueryTypes2[\"FOREIGNKEYS\"] = \"FOREIGNKEYS\";\n  QueryTypes2[\"SHOWCONSTRAINTS\"] = \"SHOWCONSTRAINTS\";\n  return QueryTypes2;\n})(QueryTypes || {});\nmodule.exports = __toCommonJS(query_types_exports);\n//# sourceMappingURL=query-types.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/query-types.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2394,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/query-types.js",
    "static": true,
    "longname": "lib/query-types.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/query-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2395,
    "kind": "variable",
    "name": "__getOwnPropDesc",
    "memberof": "lib/query-types.js",
    "static": true,
    "longname": "lib/query-types.js~__getOwnPropDesc",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/query-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2396,
    "kind": "variable",
    "name": "__getOwnPropNames",
    "memberof": "lib/query-types.js",
    "static": true,
    "longname": "lib/query-types.js~__getOwnPropNames",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/query-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2397,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/query-types.js",
    "static": true,
    "longname": "lib/query-types.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/query-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2398,
    "kind": "function",
    "name": "__markAsModule",
    "memberof": "lib/query-types.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/query-types.js~__markAsModule",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/query-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2399,
    "kind": "function",
    "name": "__export",
    "memberof": "lib/query-types.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/query-types.js~__export",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/query-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "all",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2400,
    "kind": "function",
    "name": "__reExport",
    "memberof": "lib/query-types.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/query-types.js~__reExport",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/query-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "copyDefault",
        "types": [
          "*"
        ]
      },
      {
        "name": "desc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2401,
    "kind": "variable",
    "name": "__toCommonJS",
    "memberof": "lib/query-types.js",
    "static": true,
    "longname": "lib/query-types.js~__toCommonJS",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/query-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2402,
    "kind": "variable",
    "name": "query_types_exports",
    "memberof": "lib/query-types.js",
    "static": true,
    "longname": "lib/query-types.js~query_types_exports",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/query-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2403,
    "kind": "variable",
    "name": "QueryTypes",
    "memberof": "lib/query-types.js",
    "static": true,
    "longname": "lib/query-types.js~QueryTypes",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/query-types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2404,
    "kind": "file",
    "name": "lib/sql-string.js",
    "content": "\"use strict\";\nconst dataTypes = require(\"./data-types\");\nconst { logger } = require(\"./utils/logger\");\nfunction arrayToList(array, timeZone, dialect, format2) {\n  return array.reduce((sql, val, i) => {\n    if (i !== 0) {\n      sql += \", \";\n    }\n    if (Array.isArray(val)) {\n      sql += `(${arrayToList(val, timeZone, dialect, format2)})`;\n    } else {\n      sql += escape(val, timeZone, dialect, format2);\n    }\n    return sql;\n  }, \"\");\n}\nexports.arrayToList = arrayToList;\nfunction escape(val, timeZone, dialect, format2) {\n  let prependN = false;\n  if (val === void 0 || val === null) {\n    return \"NULL\";\n  }\n  switch (typeof val) {\n    case \"boolean\":\n      if ([\"sqlite\", \"mssql\"].includes(dialect)) {\n        return Number(Boolean(val));\n      }\n      return Boolean(val).toString();\n    case \"number\":\n      return val.toString();\n    case \"string\":\n      prependN = dialect === \"mssql\";\n      break;\n  }\n  if (val instanceof Date) {\n    val = dataTypes[dialect].DATE.prototype.stringify(val, { timezone: timeZone });\n  }\n  if (Buffer.isBuffer(val)) {\n    if (dataTypes[dialect].BLOB) {\n      return dataTypes[dialect].BLOB.prototype.stringify(val);\n    }\n    return dataTypes.BLOB.prototype.stringify(val);\n  }\n  if (Array.isArray(val)) {\n    const partialEscape = (escVal) => escape(escVal, timeZone, dialect, format2);\n    if (dialect === \"postgres\" && !format2) {\n      return dataTypes.ARRAY.prototype.stringify(val, { escape: partialEscape });\n    }\n    return arrayToList(val, timeZone, dialect, format2);\n  }\n  if (!val.replace) {\n    throw new Error(`Invalid value ${logger.inspect(val)}`);\n  }\n  if ([\"postgres\", \"sqlite\", \"mssql\", \"snowflake\", \"db2\"].includes(dialect)) {\n    val = val.replace(/'/g, \"''\");\n    if (dialect === \"postgres\") {\n      val = val.replace(/\\0/g, \"\\\\0\");\n    }\n  } else {\n    val = val.replace(/[\\b\\0\\t\\n\\r\\u001A\"'\\\\]/g, (s) => {\n      switch (s) {\n        case \"\\0\":\n          return \"\\\\0\";\n        case \"\\n\":\n          return \"\\\\n\";\n        case \"\\r\":\n          return \"\\\\r\";\n        case \"\\b\":\n          return \"\\\\b\";\n        case \"\t\":\n          return \"\\\\t\";\n        case \"\u001a\":\n          return \"\\\\Z\";\n        default:\n          return `\\\\${s}`;\n      }\n    });\n  }\n  return `${(prependN ? \"N'\" : \"'\") + val}'`;\n}\nexports.escape = escape;\nfunction format(sql, values, timeZone, dialect) {\n  values = [values].flat();\n  if (typeof sql !== \"string\") {\n    throw new TypeError(`Invalid SQL string provided: ${sql}`);\n  }\n  return sql.replace(/\\?/g, (match) => {\n    if (values.length === 0) {\n      return match;\n    }\n    return escape(values.shift(), timeZone, dialect, true);\n  });\n}\nexports.format = format;\nfunction formatNamedParameters(sql, values, timeZone, dialect) {\n  return sql.replace(/:+(?!\\d)(\\w+)/g, (value, key) => {\n    if (dialect === \"postgres\" && value.slice(0, 2) === \"::\") {\n      return value;\n    }\n    if (values[key] !== void 0) {\n      return escape(values[key], timeZone, dialect, true);\n    }\n    throw new Error(`Named parameter \"${value}\" has no value in the given object.`);\n  });\n}\nexports.formatNamedParameters = formatNamedParameters;\n//# sourceMappingURL=sql-string.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/sql-string.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2405,
    "kind": "variable",
    "name": "dataTypes",
    "memberof": "lib/sql-string.js",
    "static": true,
    "longname": "lib/sql-string.js~dataTypes",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/sql-string.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2406,
    "kind": "variable",
    "name": "logger",
    "memberof": "lib/sql-string.js",
    "static": true,
    "longname": "lib/sql-string.js~logger",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/sql-string.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2407,
    "kind": "function",
    "name": "arrayToList",
    "memberof": "lib/sql-string.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/sql-string.js~arrayToList",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/sql-string.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "array",
        "types": [
          "*"
        ]
      },
      {
        "name": "timeZone",
        "types": [
          "*"
        ]
      },
      {
        "name": "dialect",
        "types": [
          "*"
        ]
      },
      {
        "name": "format2",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2408,
    "kind": "function",
    "name": "escape",
    "memberof": "lib/sql-string.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/sql-string.js~escape",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/sql-string.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "val",
        "types": [
          "*"
        ]
      },
      {
        "name": "timeZone",
        "types": [
          "*"
        ]
      },
      {
        "name": "dialect",
        "types": [
          "*"
        ]
      },
      {
        "name": "format2",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2409,
    "kind": "function",
    "name": "format",
    "memberof": "lib/sql-string.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/sql-string.js~format",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/sql-string.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "params": [
      {
        "name": "sql",
        "types": [
          "*"
        ]
      },
      {
        "name": "values",
        "types": [
          "*"
        ]
      },
      {
        "name": "timeZone",
        "types": [
          "*"
        ]
      },
      {
        "name": "dialect",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2410,
    "kind": "function",
    "name": "formatNamedParameters",
    "memberof": "lib/sql-string.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/sql-string.js~formatNamedParameters",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/sql-string.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "params": [
      {
        "name": "sql",
        "types": [
          "*"
        ]
      },
      {
        "name": "values",
        "types": [
          "*"
        ]
      },
      {
        "name": "timeZone",
        "types": [
          "*"
        ]
      },
      {
        "name": "dialect",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2411,
    "kind": "file",
    "name": "lib/table-hints.js",
    "content": "var __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __markAsModule = (target) => __defProp(target, \"__esModule\", { value: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __reExport = (target, module2, copyDefault, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2))\n      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== \"default\"))\n        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });\n  }\n  return target;\n};\nvar __toCommonJS = /* @__PURE__ */ ((cache) => {\n  return (module2, temp) => {\n    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);\n  };\n})(typeof WeakMap !== \"undefined\" ? /* @__PURE__ */ new WeakMap() : 0);\nvar table_hints_exports = {};\n__export(table_hints_exports, {\n  TableHints: () => TableHints\n});\nvar TableHints = /* @__PURE__ */ ((TableHints2) => {\n  TableHints2[\"NOLOCK\"] = \"NOLOCK\";\n  TableHints2[\"READUNCOMMITTED\"] = \"READUNCOMMITTED\";\n  TableHints2[\"UPDLOCK\"] = \"UPDLOCK\";\n  TableHints2[\"REPEATABLEREAD\"] = \"REPEATABLEREAD\";\n  TableHints2[\"SERIALIZABLE\"] = \"SERIALIZABLE\";\n  TableHints2[\"READCOMMITTED\"] = \"READCOMMITTED\";\n  TableHints2[\"TABLOCK\"] = \"TABLOCK\";\n  TableHints2[\"TABLOCKX\"] = \"TABLOCKX\";\n  TableHints2[\"PAGLOCK\"] = \"PAGLOCK\";\n  TableHints2[\"ROWLOCK\"] = \"ROWLOCK\";\n  TableHints2[\"NOWAIT\"] = \"NOWAIT\";\n  TableHints2[\"READPAST\"] = \"READPAST\";\n  TableHints2[\"XLOCK\"] = \"XLOCK\";\n  TableHints2[\"SNAPSHOT\"] = \"SNAPSHOT\";\n  TableHints2[\"NOEXPAND\"] = \"NOEXPAND\";\n  return TableHints2;\n})(TableHints || {});\nmodule.exports = __toCommonJS(table_hints_exports);\n//# sourceMappingURL=table-hints.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/table-hints.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2412,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/table-hints.js",
    "static": true,
    "longname": "lib/table-hints.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/table-hints.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2413,
    "kind": "variable",
    "name": "__getOwnPropDesc",
    "memberof": "lib/table-hints.js",
    "static": true,
    "longname": "lib/table-hints.js~__getOwnPropDesc",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/table-hints.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2414,
    "kind": "variable",
    "name": "__getOwnPropNames",
    "memberof": "lib/table-hints.js",
    "static": true,
    "longname": "lib/table-hints.js~__getOwnPropNames",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/table-hints.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2415,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/table-hints.js",
    "static": true,
    "longname": "lib/table-hints.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/table-hints.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2416,
    "kind": "function",
    "name": "__markAsModule",
    "memberof": "lib/table-hints.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/table-hints.js~__markAsModule",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/table-hints.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2417,
    "kind": "function",
    "name": "__export",
    "memberof": "lib/table-hints.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/table-hints.js~__export",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/table-hints.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "all",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2418,
    "kind": "function",
    "name": "__reExport",
    "memberof": "lib/table-hints.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/table-hints.js~__reExport",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/table-hints.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "copyDefault",
        "types": [
          "*"
        ]
      },
      {
        "name": "desc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2419,
    "kind": "variable",
    "name": "__toCommonJS",
    "memberof": "lib/table-hints.js",
    "static": true,
    "longname": "lib/table-hints.js~__toCommonJS",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/table-hints.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2420,
    "kind": "variable",
    "name": "table_hints_exports",
    "memberof": "lib/table-hints.js",
    "static": true,
    "longname": "lib/table-hints.js~table_hints_exports",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/table-hints.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2421,
    "kind": "variable",
    "name": "TableHints",
    "memberof": "lib/table-hints.js",
    "static": true,
    "longname": "lib/table-hints.js~TableHints",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/table-hints.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2422,
    "kind": "file",
    "name": "lib/transaction.js",
    "content": "var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __markAsModule = (target) => __defProp(target, \"__esModule\", { value: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __reExport = (target, module2, copyDefault, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2))\n      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== \"default\"))\n        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });\n  }\n  return target;\n};\nvar __toESM = (module2, isNodeMode) => {\n  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);\n};\nvar __toCommonJS = /* @__PURE__ */ ((cache) => {\n  return (module2, temp) => {\n    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);\n  };\n})(typeof WeakMap !== \"undefined\" ? /* @__PURE__ */ new WeakMap() : 0);\nvar transaction_exports = {};\n__export(transaction_exports, {\n  ISOLATION_LEVELS: () => ISOLATION_LEVELS,\n  LOCK: () => LOCK,\n  TRANSACTION_TYPES: () => TRANSACTION_TYPES,\n  Transaction: () => Transaction\n});\nvar import_assert = __toESM(require(\"assert\"));\nclass Transaction {\n  sequelize;\n  _afterCommitHooks = /* @__PURE__ */ new Set();\n  savepoints = [];\n  options;\n  parent;\n  id;\n  name;\n  finished;\n  connection;\n  constructor(sequelize, options) {\n    var _a;\n    this.sequelize = sequelize;\n    const generateTransactionId = this.sequelize.dialect.queryGenerator.generateTransactionId;\n    this.options = __spreadValues({\n      type: sequelize.options.transactionType,\n      isolationLevel: sequelize.options.isolationLevel,\n      readOnly: false\n    }, options);\n    this.parent = (_a = this.options.transaction) != null ? _a : null;\n    if (this.parent) {\n      this.id = this.parent.id;\n      this.parent.savepoints.push(this);\n      this.name = `${this.id}-sp-${this.parent.savepoints.length}`;\n    } else {\n      const id = generateTransactionId();\n      this.id = id;\n      this.name = id;\n    }\n    delete this.options.transaction;\n  }\n  async commit() {\n    if (this.finished) {\n      throw new Error(`Transaction cannot be committed because it has been finished with state: ${this.finished}`);\n    }\n    try {\n      return await this.sequelize.getQueryInterface().commitTransaction(this, this.options);\n    } finally {\n      this.finished = \"commit\";\n      await this.cleanup();\n      for (const hook of this._afterCommitHooks) {\n        await Reflect.apply(hook, this, [this]);\n      }\n    }\n  }\n  async rollback() {\n    if (this.finished) {\n      throw new Error(`Transaction cannot be rolled back because it has been finished with state: ${this.finished}`);\n    }\n    if (!this.connection) {\n      throw new Error(\"Transaction cannot be rolled back because it never started\");\n    }\n    try {\n      return await this.sequelize.getQueryInterface().rollbackTransaction(this, this.options);\n    } finally {\n      await this.cleanup();\n    }\n  }\n  async prepareEnvironment(useCLS) {\n    if (useCLS === void 0) {\n      useCLS = true;\n    }\n    let connection;\n    if (this.parent) {\n      connection = this.parent.connection;\n    } else {\n      connection = await this.sequelize.connectionManager.getConnection({\n        type: this.options.readOnly ? \"read\" : \"write\",\n        uuid: this.id\n      });\n    }\n    (0, import_assert.default)(connection != null, \"Transaction failed to acquire Connection.\");\n    connection.uuid = this.id;\n    this.connection = connection;\n    let result;\n    try {\n      await this.begin();\n      result = await this.setDeferrable();\n    } catch (error) {\n      try {\n        result = await this.rollback();\n      } finally {\n        throw error;\n      }\n    }\n    if (useCLS && this.sequelize.Sequelize._cls) {\n      this.sequelize.Sequelize._cls.set(\"transaction\", this);\n    }\n    return result;\n  }\n  async setDeferrable() {\n    if (this.options.deferrable) {\n      await this.sequelize.getQueryInterface().deferConstraints(this, this.options);\n    }\n  }\n  async begin() {\n    const queryInterface = this.sequelize.getQueryInterface();\n    if (this.sequelize.dialect.supports.settingIsolationLevelDuringTransaction) {\n      await queryInterface.startTransaction(this, this.options);\n      return queryInterface.setIsolationLevel(this, this.options.isolationLevel, this.options);\n    }\n    await queryInterface.setIsolationLevel(this, this.options.isolationLevel, this.options);\n    return queryInterface.startTransaction(this, this.options);\n  }\n  async cleanup() {\n    var _a;\n    if (this.parent || ((_a = this.connection) == null ? void 0 : _a.uuid) === void 0) {\n      return;\n    }\n    this._clearCls();\n    const res = this.sequelize.connectionManager.releaseConnection(this.connection);\n    this.connection.uuid = void 0;\n    await res;\n  }\n  _clearCls() {\n    const cls = this.sequelize.Sequelize._cls;\n    if (cls && cls.get(\"transaction\") === this) {\n      cls.set(\"transaction\", null);\n    }\n  }\n  afterCommit(fn) {\n    if (typeof fn !== \"function\") {\n      throw new TypeError('\"fn\" must be a function');\n    }\n    this._afterCommitHooks.add(fn);\n    return this;\n  }\n  static get TYPES() {\n    return TRANSACTION_TYPES;\n  }\n  static get ISOLATION_LEVELS() {\n    return ISOLATION_LEVELS;\n  }\n  static get LOCK() {\n    return LOCK;\n  }\n  get LOCK() {\n    return LOCK;\n  }\n}\nvar ISOLATION_LEVELS = /* @__PURE__ */ ((ISOLATION_LEVELS2) => {\n  ISOLATION_LEVELS2[\"READ_UNCOMMITTED\"] = \"READ UNCOMMITTED\";\n  ISOLATION_LEVELS2[\"READ_COMMITTED\"] = \"READ COMMITTED\";\n  ISOLATION_LEVELS2[\"REPEATABLE_READ\"] = \"REPEATABLE READ\";\n  ISOLATION_LEVELS2[\"SERIALIZABLE\"] = \"SERIALIZABLE\";\n  return ISOLATION_LEVELS2;\n})(ISOLATION_LEVELS || {});\nvar TRANSACTION_TYPES = /* @__PURE__ */ ((TRANSACTION_TYPES2) => {\n  TRANSACTION_TYPES2[\"DEFERRED\"] = \"DEFERRED\";\n  TRANSACTION_TYPES2[\"IMMEDIATE\"] = \"IMMEDIATE\";\n  TRANSACTION_TYPES2[\"EXCLUSIVE\"] = \"EXCLUSIVE\";\n  return TRANSACTION_TYPES2;\n})(TRANSACTION_TYPES || {});\nvar LOCK = /* @__PURE__ */ ((LOCK2) => {\n  LOCK2[\"UPDATE\"] = \"UPDATE\";\n  LOCK2[\"SHARE\"] = \"SHARE\";\n  LOCK2[\"KEY_SHARE\"] = \"KEY SHARE\";\n  LOCK2[\"NO_KEY_UPDATE\"] = \"NO KEY UPDATE\";\n  return LOCK2;\n})(LOCK || {});\nmodule.exports = __toCommonJS(transaction_exports);\n//# sourceMappingURL=transaction.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/transaction.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2423,
    "kind": "variable",
    "name": "__create",
    "memberof": "lib/transaction.js",
    "static": true,
    "longname": "lib/transaction.js~__create",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/transaction.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2424,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/transaction.js",
    "static": true,
    "longname": "lib/transaction.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/transaction.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2425,
    "kind": "variable",
    "name": "__getOwnPropDesc",
    "memberof": "lib/transaction.js",
    "static": true,
    "longname": "lib/transaction.js~__getOwnPropDesc",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/transaction.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2426,
    "kind": "variable",
    "name": "__getOwnPropNames",
    "memberof": "lib/transaction.js",
    "static": true,
    "longname": "lib/transaction.js~__getOwnPropNames",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/transaction.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2427,
    "kind": "variable",
    "name": "__getOwnPropSymbols",
    "memberof": "lib/transaction.js",
    "static": true,
    "longname": "lib/transaction.js~__getOwnPropSymbols",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/transaction.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2428,
    "kind": "variable",
    "name": "__getProtoOf",
    "memberof": "lib/transaction.js",
    "static": true,
    "longname": "lib/transaction.js~__getProtoOf",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/transaction.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2429,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/transaction.js",
    "static": true,
    "longname": "lib/transaction.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/transaction.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2430,
    "kind": "variable",
    "name": "__propIsEnum",
    "memberof": "lib/transaction.js",
    "static": true,
    "longname": "lib/transaction.js~__propIsEnum",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/transaction.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2431,
    "kind": "function",
    "name": "__defNormalProp",
    "memberof": "lib/transaction.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/transaction.js~__defNormalProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/transaction.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2432,
    "kind": "function",
    "name": "__spreadValues",
    "memberof": "lib/transaction.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/transaction.js~__spreadValues",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/transaction.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2433,
    "kind": "function",
    "name": "__markAsModule",
    "memberof": "lib/transaction.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/transaction.js~__markAsModule",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/transaction.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2434,
    "kind": "function",
    "name": "__export",
    "memberof": "lib/transaction.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/transaction.js~__export",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/transaction.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "all",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2435,
    "kind": "function",
    "name": "__reExport",
    "memberof": "lib/transaction.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/transaction.js~__reExport",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/transaction.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "copyDefault",
        "types": [
          "*"
        ]
      },
      {
        "name": "desc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2436,
    "kind": "function",
    "name": "__toESM",
    "memberof": "lib/transaction.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/transaction.js~__toESM",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/transaction.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "isNodeMode",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2437,
    "kind": "variable",
    "name": "__toCommonJS",
    "memberof": "lib/transaction.js",
    "static": true,
    "longname": "lib/transaction.js~__toCommonJS",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/transaction.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2438,
    "kind": "variable",
    "name": "transaction_exports",
    "memberof": "lib/transaction.js",
    "static": true,
    "longname": "lib/transaction.js~transaction_exports",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/transaction.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2439,
    "kind": "variable",
    "name": "import_assert",
    "memberof": "lib/transaction.js",
    "static": true,
    "longname": "lib/transaction.js~import_assert",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/transaction.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2440,
    "kind": "class",
    "name": "Transaction",
    "memberof": "lib/transaction.js",
    "static": true,
    "longname": "lib/transaction.js~Transaction",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/transaction.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 2441,
    "kind": "member",
    "name": "sequelize",
    "memberof": "lib/transaction.js~Transaction",
    "static": false,
    "longname": "lib/transaction.js~Transaction#sequelize",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2442,
    "kind": "member",
    "name": "_afterCommitHooks",
    "memberof": "lib/transaction.js~Transaction",
    "static": false,
    "longname": "lib/transaction.js~Transaction#_afterCommitHooks",
    "access": "private",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2443,
    "kind": "member",
    "name": "savepoints",
    "memberof": "lib/transaction.js~Transaction",
    "static": false,
    "longname": "lib/transaction.js~Transaction#savepoints",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2444,
    "kind": "member",
    "name": "options",
    "memberof": "lib/transaction.js~Transaction",
    "static": false,
    "longname": "lib/transaction.js~Transaction#options",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2445,
    "kind": "member",
    "name": "parent",
    "memberof": "lib/transaction.js~Transaction",
    "static": false,
    "longname": "lib/transaction.js~Transaction#parent",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2446,
    "kind": "member",
    "name": "id",
    "memberof": "lib/transaction.js~Transaction",
    "static": false,
    "longname": "lib/transaction.js~Transaction#id",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2447,
    "kind": "member",
    "name": "name",
    "memberof": "lib/transaction.js~Transaction",
    "static": false,
    "longname": "lib/transaction.js~Transaction#name",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2448,
    "kind": "member",
    "name": "finished",
    "memberof": "lib/transaction.js~Transaction",
    "static": false,
    "longname": "lib/transaction.js~Transaction#finished",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2449,
    "kind": "member",
    "name": "connection",
    "memberof": "lib/transaction.js~Transaction",
    "static": false,
    "longname": "lib/transaction.js~Transaction#connection",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2450,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/transaction.js~Transaction#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 2458,
    "kind": "method",
    "name": "commit",
    "memberof": "lib/transaction.js~Transaction",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/transaction.js~Transaction#commit",
    "access": "public",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2460,
    "kind": "method",
    "name": "rollback",
    "memberof": "lib/transaction.js~Transaction",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/transaction.js~Transaction#rollback",
    "access": "public",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2461,
    "kind": "method",
    "name": "prepareEnvironment",
    "memberof": "lib/transaction.js~Transaction",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/transaction.js~Transaction#prepareEnvironment",
    "access": "public",
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "params": [
      {
        "name": "useCLS",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2463,
    "kind": "method",
    "name": "setDeferrable",
    "memberof": "lib/transaction.js~Transaction",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/transaction.js~Transaction#setDeferrable",
    "access": "public",
    "description": null,
    "lineNumber": 140,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 2464,
    "kind": "method",
    "name": "begin",
    "memberof": "lib/transaction.js~Transaction",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/transaction.js~Transaction#begin",
    "access": "public",
    "description": null,
    "lineNumber": 145,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2465,
    "kind": "method",
    "name": "cleanup",
    "memberof": "lib/transaction.js~Transaction",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/transaction.js~Transaction#cleanup",
    "access": "public",
    "description": null,
    "lineNumber": 154,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 2466,
    "kind": "method",
    "name": "_clearCls",
    "memberof": "lib/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/transaction.js~Transaction#_clearCls",
    "access": "private",
    "description": null,
    "lineNumber": 164,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 2467,
    "kind": "method",
    "name": "afterCommit",
    "memberof": "lib/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/transaction.js~Transaction#afterCommit",
    "access": "public",
    "description": null,
    "lineNumber": 170,
    "undocument": true,
    "params": [
      {
        "name": "fn",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2468,
    "kind": "get",
    "name": "TYPES",
    "memberof": "lib/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/transaction.js~Transaction.TYPES",
    "access": "public",
    "description": null,
    "lineNumber": 177,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2469,
    "kind": "get",
    "name": "ISOLATION_LEVELS",
    "memberof": "lib/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/transaction.js~Transaction.ISOLATION_LEVELS",
    "access": "public",
    "description": null,
    "lineNumber": 180,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2470,
    "kind": "get",
    "name": "LOCK",
    "memberof": "lib/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/transaction.js~Transaction.LOCK",
    "access": "public",
    "description": null,
    "lineNumber": 183,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2471,
    "kind": "get",
    "name": "LOCK",
    "memberof": "lib/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/transaction.js~Transaction#LOCK",
    "access": "public",
    "description": null,
    "lineNumber": 186,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2472,
    "kind": "variable",
    "name": "ISOLATION_LEVELS",
    "memberof": "lib/transaction.js",
    "static": true,
    "longname": "lib/transaction.js~ISOLATION_LEVELS",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/transaction.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 190,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2473,
    "kind": "variable",
    "name": "TRANSACTION_TYPES",
    "memberof": "lib/transaction.js",
    "static": true,
    "longname": "lib/transaction.js~TRANSACTION_TYPES",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/transaction.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 197,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2474,
    "kind": "variable",
    "name": "LOCK",
    "memberof": "lib/transaction.js",
    "static": true,
    "longname": "lib/transaction.js~LOCK",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/transaction.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 203,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2475,
    "kind": "file",
    "name": "lib/utils/class-to-invokable.js",
    "content": "var __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __markAsModule = (target) => __defProp(target, \"__esModule\", { value: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __reExport = (target, module2, copyDefault, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2))\n      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== \"default\"))\n        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });\n  }\n  return target;\n};\nvar __toCommonJS = /* @__PURE__ */ ((cache) => {\n  return (module2, temp) => {\n    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);\n  };\n})(typeof WeakMap !== \"undefined\" ? /* @__PURE__ */ new WeakMap() : 0);\nvar class_to_invokable_exports = {};\n__export(class_to_invokable_exports, {\n  classToInvokable: () => classToInvokable\n});\nfunction classToInvokable(Class) {\n  return new Proxy(Class, {\n    apply(_target, _thisArg, args) {\n      return new Class(...args);\n    },\n    construct(_target, args) {\n      return new Class(...args);\n    }\n  });\n}\nmodule.exports = __toCommonJS(class_to_invokable_exports);\n//# sourceMappingURL=class-to-invokable.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/utils/class-to-invokable.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2476,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/utils/class-to-invokable.js",
    "static": true,
    "longname": "lib/utils/class-to-invokable.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/utils/class-to-invokable.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2477,
    "kind": "variable",
    "name": "__getOwnPropDesc",
    "memberof": "lib/utils/class-to-invokable.js",
    "static": true,
    "longname": "lib/utils/class-to-invokable.js~__getOwnPropDesc",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/utils/class-to-invokable.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2478,
    "kind": "variable",
    "name": "__getOwnPropNames",
    "memberof": "lib/utils/class-to-invokable.js",
    "static": true,
    "longname": "lib/utils/class-to-invokable.js~__getOwnPropNames",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/utils/class-to-invokable.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2479,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/utils/class-to-invokable.js",
    "static": true,
    "longname": "lib/utils/class-to-invokable.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/utils/class-to-invokable.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2480,
    "kind": "function",
    "name": "__markAsModule",
    "memberof": "lib/utils/class-to-invokable.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils/class-to-invokable.js~__markAsModule",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/utils/class-to-invokable.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2481,
    "kind": "function",
    "name": "__export",
    "memberof": "lib/utils/class-to-invokable.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils/class-to-invokable.js~__export",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/utils/class-to-invokable.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "all",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2482,
    "kind": "function",
    "name": "__reExport",
    "memberof": "lib/utils/class-to-invokable.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils/class-to-invokable.js~__reExport",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/utils/class-to-invokable.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "copyDefault",
        "types": [
          "*"
        ]
      },
      {
        "name": "desc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2483,
    "kind": "variable",
    "name": "__toCommonJS",
    "memberof": "lib/utils/class-to-invokable.js",
    "static": true,
    "longname": "lib/utils/class-to-invokable.js~__toCommonJS",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/utils/class-to-invokable.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2484,
    "kind": "variable",
    "name": "class_to_invokable_exports",
    "memberof": "lib/utils/class-to-invokable.js",
    "static": true,
    "longname": "lib/utils/class-to-invokable.js~class_to_invokable_exports",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils/class-to-invokable.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2485,
    "kind": "function",
    "name": "classToInvokable",
    "memberof": "lib/utils/class-to-invokable.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils/class-to-invokable.js~classToInvokable",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils/class-to-invokable.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [
      {
        "name": "Class",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2486,
    "kind": "file",
    "name": "lib/utils/deprecations.js",
    "content": "var __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __markAsModule = (target) => __defProp(target, \"__esModule\", { value: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __reExport = (target, module2, copyDefault, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2))\n      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== \"default\"))\n        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });\n  }\n  return target;\n};\nvar __toCommonJS = /* @__PURE__ */ ((cache) => {\n  return (module2, temp) => {\n    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);\n  };\n})(typeof WeakMap !== \"undefined\" ? /* @__PURE__ */ new WeakMap() : 0);\nvar deprecations_exports = {};\n__export(deprecations_exports, {\n  noBoolOperatorAliases: () => noBoolOperatorAliases,\n  noDoubleNestedGroup: () => noDoubleNestedGroup,\n  noRawAttributes: () => noRawAttributes,\n  noStringOperators: () => noStringOperators,\n  noTrueLogging: () => noTrueLogging,\n  unsupportedEngine: () => unsupportedEngine\n});\nvar import_util = require(\"util\");\nconst noop = () => {\n};\nconst noRawAttributes = (0, import_util.deprecate)(noop, \"Use sequelize.fn / sequelize.literal to construct attributes\", \"SEQUELIZE0001\");\nconst noTrueLogging = (0, import_util.deprecate)(noop, \"The logging-option should be either a function or false. Default: console.log\", \"SEQUELIZE0002\");\nconst noStringOperators = (0, import_util.deprecate)(noop, \"String based operators are deprecated. Please use Symbol based operators for better security, read more at https://sequelize.org/master/manual/querying.html#operators\", \"SEQUELIZE0003\");\nconst noBoolOperatorAliases = (0, import_util.deprecate)(noop, \"A boolean value was passed to options.operatorsAliases. This is a no-op with v5 and should be removed.\", \"SEQUELIZE0004\");\nconst noDoubleNestedGroup = (0, import_util.deprecate)(noop, \"Passing a double nested nested array to `group` is unsupported and will be removed in v6.\", \"SEQUELIZE0005\");\nconst unsupportedEngine = (0, import_util.deprecate)(noop, \"This database engine version is not supported, please update your database server. More information https://github.com/sequelize/sequelize/blob/main/ENGINE.md\", \"SEQUELIZE0006\");\nmodule.exports = __toCommonJS(deprecations_exports);\n//# sourceMappingURL=deprecations.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/utils/deprecations.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2487,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/utils/deprecations.js",
    "static": true,
    "longname": "lib/utils/deprecations.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/utils/deprecations.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2488,
    "kind": "variable",
    "name": "__getOwnPropDesc",
    "memberof": "lib/utils/deprecations.js",
    "static": true,
    "longname": "lib/utils/deprecations.js~__getOwnPropDesc",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/utils/deprecations.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2489,
    "kind": "variable",
    "name": "__getOwnPropNames",
    "memberof": "lib/utils/deprecations.js",
    "static": true,
    "longname": "lib/utils/deprecations.js~__getOwnPropNames",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/utils/deprecations.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2490,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/utils/deprecations.js",
    "static": true,
    "longname": "lib/utils/deprecations.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/utils/deprecations.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2491,
    "kind": "function",
    "name": "__markAsModule",
    "memberof": "lib/utils/deprecations.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils/deprecations.js~__markAsModule",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/utils/deprecations.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2492,
    "kind": "function",
    "name": "__export",
    "memberof": "lib/utils/deprecations.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils/deprecations.js~__export",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/utils/deprecations.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "all",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2493,
    "kind": "function",
    "name": "__reExport",
    "memberof": "lib/utils/deprecations.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils/deprecations.js~__reExport",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/utils/deprecations.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "copyDefault",
        "types": [
          "*"
        ]
      },
      {
        "name": "desc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2494,
    "kind": "variable",
    "name": "__toCommonJS",
    "memberof": "lib/utils/deprecations.js",
    "static": true,
    "longname": "lib/utils/deprecations.js~__toCommonJS",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/utils/deprecations.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2495,
    "kind": "variable",
    "name": "deprecations_exports",
    "memberof": "lib/utils/deprecations.js",
    "static": true,
    "longname": "lib/utils/deprecations.js~deprecations_exports",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils/deprecations.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2496,
    "kind": "variable",
    "name": "import_util",
    "memberof": "lib/utils/deprecations.js",
    "static": true,
    "longname": "lib/utils/deprecations.js~import_util",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils/deprecations.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2497,
    "kind": "function",
    "name": "noop",
    "memberof": "lib/utils/deprecations.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils/deprecations.js~noop",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils/deprecations.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 2498,
    "kind": "variable",
    "name": "noRawAttributes",
    "memberof": "lib/utils/deprecations.js",
    "static": true,
    "longname": "lib/utils/deprecations.js~noRawAttributes",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils/deprecations.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2499,
    "kind": "variable",
    "name": "noTrueLogging",
    "memberof": "lib/utils/deprecations.js",
    "static": true,
    "longname": "lib/utils/deprecations.js~noTrueLogging",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils/deprecations.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2500,
    "kind": "variable",
    "name": "noStringOperators",
    "memberof": "lib/utils/deprecations.js",
    "static": true,
    "longname": "lib/utils/deprecations.js~noStringOperators",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils/deprecations.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2501,
    "kind": "variable",
    "name": "noBoolOperatorAliases",
    "memberof": "lib/utils/deprecations.js",
    "static": true,
    "longname": "lib/utils/deprecations.js~noBoolOperatorAliases",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils/deprecations.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2502,
    "kind": "variable",
    "name": "noDoubleNestedGroup",
    "memberof": "lib/utils/deprecations.js",
    "static": true,
    "longname": "lib/utils/deprecations.js~noDoubleNestedGroup",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils/deprecations.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2503,
    "kind": "variable",
    "name": "unsupportedEngine",
    "memberof": "lib/utils/deprecations.js",
    "static": true,
    "longname": "lib/utils/deprecations.js~unsupportedEngine",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils/deprecations.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2504,
    "kind": "file",
    "name": "lib/utils/join-sql-fragments.js",
    "content": "var __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __markAsModule = (target) => __defProp(target, \"__esModule\", { value: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __reExport = (target, module2, copyDefault, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2))\n      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== \"default\"))\n        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });\n  }\n  return target;\n};\nvar __toCommonJS = /* @__PURE__ */ ((cache) => {\n  return (module2, temp) => {\n    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);\n  };\n})(typeof WeakMap !== \"undefined\" ? /* @__PURE__ */ new WeakMap() : 0);\nvar join_sql_fragments_exports = {};\n__export(join_sql_fragments_exports, {\n  JoinSQLFragmentsError: () => JoinSQLFragmentsError,\n  joinSQLFragments: () => joinSQLFragments\n});\nfunction doesNotWantLeadingSpace(str) {\n  return /^[),;]/.test(str);\n}\nfunction doesNotWantTrailingSpace(str) {\n  return str.endsWith(\"(\");\n}\nfunction singleSpaceJoinHelper(parts) {\n  return parts.reduce(({ skipNextLeadingSpace, result }, part) => {\n    if (skipNextLeadingSpace || doesNotWantLeadingSpace(part)) {\n      result += part.trim();\n    } else {\n      result += ` ${part.trim()}`;\n    }\n    return {\n      skipNextLeadingSpace: doesNotWantTrailingSpace(part),\n      result\n    };\n  }, {\n    skipNextLeadingSpace: true,\n    result: \"\"\n  }).result;\n}\nfunction joinSQLFragments(array) {\n  if (array.length === 0) {\n    return \"\";\n  }\n  const truthyArray = array.filter((x) => Boolean(x));\n  const flattenedArray = truthyArray.map((fragment) => {\n    if (Array.isArray(fragment)) {\n      return joinSQLFragments(fragment);\n    }\n    return fragment;\n  });\n  for (const fragment of flattenedArray) {\n    if (fragment && typeof fragment !== \"string\") {\n      throw new JoinSQLFragmentsError(flattenedArray, fragment, `Tried to construct a SQL string with a non-string, non-falsy fragment (${fragment}).`);\n    }\n  }\n  const trimmedArray = flattenedArray.map((x) => x.trim());\n  const nonEmptyStringArray = trimmedArray.filter((x) => x !== \"\");\n  return singleSpaceJoinHelper(nonEmptyStringArray);\n}\nclass JoinSQLFragmentsError extends TypeError {\n  args;\n  fragment;\n  constructor(args, fragment, message) {\n    super(message);\n    this.args = args;\n    this.fragment = fragment;\n    this.name = \"JoinSQLFragmentsError\";\n  }\n}\nmodule.exports = __toCommonJS(join_sql_fragments_exports);\n//# sourceMappingURL=join-sql-fragments.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/utils/join-sql-fragments.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2505,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/utils/join-sql-fragments.js",
    "static": true,
    "longname": "lib/utils/join-sql-fragments.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/utils/join-sql-fragments.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2506,
    "kind": "variable",
    "name": "__getOwnPropDesc",
    "memberof": "lib/utils/join-sql-fragments.js",
    "static": true,
    "longname": "lib/utils/join-sql-fragments.js~__getOwnPropDesc",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/utils/join-sql-fragments.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2507,
    "kind": "variable",
    "name": "__getOwnPropNames",
    "memberof": "lib/utils/join-sql-fragments.js",
    "static": true,
    "longname": "lib/utils/join-sql-fragments.js~__getOwnPropNames",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/utils/join-sql-fragments.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2508,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/utils/join-sql-fragments.js",
    "static": true,
    "longname": "lib/utils/join-sql-fragments.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/utils/join-sql-fragments.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2509,
    "kind": "function",
    "name": "__markAsModule",
    "memberof": "lib/utils/join-sql-fragments.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils/join-sql-fragments.js~__markAsModule",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/utils/join-sql-fragments.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2510,
    "kind": "function",
    "name": "__export",
    "memberof": "lib/utils/join-sql-fragments.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils/join-sql-fragments.js~__export",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/utils/join-sql-fragments.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "all",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2511,
    "kind": "function",
    "name": "__reExport",
    "memberof": "lib/utils/join-sql-fragments.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils/join-sql-fragments.js~__reExport",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/utils/join-sql-fragments.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "copyDefault",
        "types": [
          "*"
        ]
      },
      {
        "name": "desc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2512,
    "kind": "variable",
    "name": "__toCommonJS",
    "memberof": "lib/utils/join-sql-fragments.js",
    "static": true,
    "longname": "lib/utils/join-sql-fragments.js~__toCommonJS",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/utils/join-sql-fragments.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2513,
    "kind": "variable",
    "name": "join_sql_fragments_exports",
    "memberof": "lib/utils/join-sql-fragments.js",
    "static": true,
    "longname": "lib/utils/join-sql-fragments.js~join_sql_fragments_exports",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils/join-sql-fragments.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2514,
    "kind": "function",
    "name": "doesNotWantLeadingSpace",
    "memberof": "lib/utils/join-sql-fragments.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils/join-sql-fragments.js~doesNotWantLeadingSpace",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils/join-sql-fragments.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [
      {
        "name": "str",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2515,
    "kind": "function",
    "name": "doesNotWantTrailingSpace",
    "memberof": "lib/utils/join-sql-fragments.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils/join-sql-fragments.js~doesNotWantTrailingSpace",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils/join-sql-fragments.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "str",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2516,
    "kind": "function",
    "name": "singleSpaceJoinHelper",
    "memberof": "lib/utils/join-sql-fragments.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils/join-sql-fragments.js~singleSpaceJoinHelper",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils/join-sql-fragments.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [
      {
        "name": "parts",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2517,
    "kind": "function",
    "name": "joinSQLFragments",
    "memberof": "lib/utils/join-sql-fragments.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils/join-sql-fragments.js~joinSQLFragments",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils/join-sql-fragments.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [
      {
        "name": "array",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2518,
    "kind": "class",
    "name": "JoinSQLFragmentsError",
    "memberof": "lib/utils/join-sql-fragments.js",
    "static": true,
    "longname": "lib/utils/join-sql-fragments.js~JoinSQLFragmentsError",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils/join-sql-fragments.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "interface": false,
    "extends": [
      "TypeError"
    ],
    "ignore": true
  },
  {
    "__docId__": 2519,
    "kind": "member",
    "name": "args",
    "memberof": "lib/utils/join-sql-fragments.js~JoinSQLFragmentsError",
    "static": false,
    "longname": "lib/utils/join-sql-fragments.js~JoinSQLFragmentsError#args",
    "access": "public",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2520,
    "kind": "member",
    "name": "fragment",
    "memberof": "lib/utils/join-sql-fragments.js~JoinSQLFragmentsError",
    "static": false,
    "longname": "lib/utils/join-sql-fragments.js~JoinSQLFragmentsError#fragment",
    "access": "public",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2521,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/utils/join-sql-fragments.js~JoinSQLFragmentsError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/utils/join-sql-fragments.js~JoinSQLFragmentsError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 2524,
    "kind": "member",
    "name": "name",
    "memberof": "lib/utils/join-sql-fragments.js~JoinSQLFragmentsError",
    "static": false,
    "longname": "lib/utils/join-sql-fragments.js~JoinSQLFragmentsError#name",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2525,
    "kind": "file",
    "name": "lib/utils/logger.js",
    "content": "var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __markAsModule = (target) => __defProp(target, \"__esModule\", { value: true });\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __reExport = (target, module2, copyDefault, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2))\n      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== \"default\"))\n        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });\n  }\n  return target;\n};\nvar __toESM = (module2, isNodeMode) => {\n  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);\n};\nvar __toCommonJS = /* @__PURE__ */ ((cache) => {\n  return (module2, temp) => {\n    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);\n  };\n})(typeof WeakMap !== \"undefined\" ? /* @__PURE__ */ new WeakMap() : 0);\nvar logger_exports = {};\n__export(logger_exports, {\n  Logger: () => Logger,\n  logger: () => logger\n});\nvar import_util = __toESM(require(\"util\"));\nvar import_debug = __toESM(require(\"debug\"));\nclass Logger {\n  config;\n  constructor(_a = {}) {\n    var _b = _a, { context = \"sequelize\" } = _b, rest = __objRest(_b, [\"context\"]);\n    this.config = __spreadValues({\n      context\n    }, rest);\n  }\n  warn(message) {\n    console.warn(`(${this.config.context}) Warning: ${message}`);\n  }\n  inspect(value) {\n    return import_util.default.inspect(value, {\n      showHidden: false,\n      depth: 1\n    });\n  }\n  debugContext(name) {\n    return (0, import_debug.default)(`${this.config.context}:${name}`);\n  }\n}\nconst logger = new Logger();\nmodule.exports = __toCommonJS(logger_exports);\n//# sourceMappingURL=logger.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/utils/logger.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2526,
    "kind": "variable",
    "name": "__create",
    "memberof": "lib/utils/logger.js",
    "static": true,
    "longname": "lib/utils/logger.js~__create",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/utils/logger.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2527,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/utils/logger.js",
    "static": true,
    "longname": "lib/utils/logger.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/utils/logger.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2528,
    "kind": "variable",
    "name": "__getOwnPropDesc",
    "memberof": "lib/utils/logger.js",
    "static": true,
    "longname": "lib/utils/logger.js~__getOwnPropDesc",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/utils/logger.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2529,
    "kind": "variable",
    "name": "__getOwnPropNames",
    "memberof": "lib/utils/logger.js",
    "static": true,
    "longname": "lib/utils/logger.js~__getOwnPropNames",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/utils/logger.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2530,
    "kind": "variable",
    "name": "__getOwnPropSymbols",
    "memberof": "lib/utils/logger.js",
    "static": true,
    "longname": "lib/utils/logger.js~__getOwnPropSymbols",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/utils/logger.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2531,
    "kind": "variable",
    "name": "__getProtoOf",
    "memberof": "lib/utils/logger.js",
    "static": true,
    "longname": "lib/utils/logger.js~__getProtoOf",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/utils/logger.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2532,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/utils/logger.js",
    "static": true,
    "longname": "lib/utils/logger.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/utils/logger.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2533,
    "kind": "variable",
    "name": "__propIsEnum",
    "memberof": "lib/utils/logger.js",
    "static": true,
    "longname": "lib/utils/logger.js~__propIsEnum",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/utils/logger.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2534,
    "kind": "function",
    "name": "__defNormalProp",
    "memberof": "lib/utils/logger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils/logger.js~__defNormalProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/utils/logger.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2535,
    "kind": "function",
    "name": "__spreadValues",
    "memberof": "lib/utils/logger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils/logger.js~__spreadValues",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/utils/logger.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2536,
    "kind": "function",
    "name": "__markAsModule",
    "memberof": "lib/utils/logger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils/logger.js~__markAsModule",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/utils/logger.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2537,
    "kind": "function",
    "name": "__objRest",
    "memberof": "lib/utils/logger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils/logger.js~__objRest",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/utils/logger.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "exclude",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2538,
    "kind": "function",
    "name": "__export",
    "memberof": "lib/utils/logger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils/logger.js~__export",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/utils/logger.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "all",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2539,
    "kind": "function",
    "name": "__reExport",
    "memberof": "lib/utils/logger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils/logger.js~__reExport",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/utils/logger.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "copyDefault",
        "types": [
          "*"
        ]
      },
      {
        "name": "desc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2540,
    "kind": "function",
    "name": "__toESM",
    "memberof": "lib/utils/logger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils/logger.js~__toESM",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/utils/logger.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "module2",
        "types": [
          "*"
        ]
      },
      {
        "name": "isNodeMode",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2541,
    "kind": "variable",
    "name": "__toCommonJS",
    "memberof": "lib/utils/logger.js",
    "static": true,
    "longname": "lib/utils/logger.js~__toCommonJS",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/utils/logger.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2542,
    "kind": "variable",
    "name": "logger_exports",
    "memberof": "lib/utils/logger.js",
    "static": true,
    "longname": "lib/utils/logger.js~logger_exports",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils/logger.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2543,
    "kind": "variable",
    "name": "import_util",
    "memberof": "lib/utils/logger.js",
    "static": true,
    "longname": "lib/utils/logger.js~import_util",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils/logger.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2544,
    "kind": "variable",
    "name": "import_debug",
    "memberof": "lib/utils/logger.js",
    "static": true,
    "longname": "lib/utils/logger.js~import_debug",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils/logger.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2545,
    "kind": "class",
    "name": "Logger",
    "memberof": "lib/utils/logger.js",
    "static": true,
    "longname": "lib/utils/logger.js~Logger",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils/logger.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 2546,
    "kind": "member",
    "name": "config",
    "memberof": "lib/utils/logger.js~Logger",
    "static": false,
    "longname": "lib/utils/logger.js~Logger#config",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2547,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/utils/logger.js~Logger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/utils/logger.js~Logger#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 2549,
    "kind": "method",
    "name": "warn",
    "memberof": "lib/utils/logger.js~Logger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/utils/logger.js~Logger#warn",
    "access": "public",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 2550,
    "kind": "method",
    "name": "inspect",
    "memberof": "lib/utils/logger.js~Logger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/utils/logger.js~Logger#inspect",
    "access": "public",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2551,
    "kind": "method",
    "name": "debugContext",
    "memberof": "lib/utils/logger.js~Logger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/utils/logger.js~Logger#debugContext",
    "access": "public",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2552,
    "kind": "variable",
    "name": "logger",
    "memberof": "lib/utils/logger.js",
    "static": true,
    "longname": "lib/utils/logger.js~logger",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils/logger.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "type": {
      "types": [
        "lib/utils/logger.js~Logger"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2553,
    "kind": "file",
    "name": "lib/utils/validator-extras.js",
    "content": "\"use strict\";\nconst _ = require(\"lodash\");\nconst validator = _.cloneDeep(require(\"validator\"));\nconst moment = require(\"moment\");\nconst extensions = {\n  extend(name, fn) {\n    this[name] = fn;\n    return this;\n  },\n  notEmpty(str) {\n    return !/^\\s*$/.test(str);\n  },\n  len(str, min, max) {\n    return this.isLength(str, min, max);\n  },\n  isUrl(str) {\n    return this.isURL(str);\n  },\n  isIPv6(str) {\n    return this.isIP(str, 6);\n  },\n  isIPv4(str) {\n    return this.isIP(str, 4);\n  },\n  notIn(str, values) {\n    return !this.isIn(str, values);\n  },\n  regex(str, pattern, modifiers) {\n    str = String(str);\n    if (Object.prototype.toString.call(pattern).slice(8, -1) !== \"RegExp\") {\n      pattern = new RegExp(pattern, modifiers);\n    }\n    return str.match(pattern);\n  },\n  notRegex(str, pattern, modifiers) {\n    return !this.regex(str, pattern, modifiers);\n  },\n  isDecimal(str) {\n    return str !== \"\" && Boolean(/^(?:-?\\d+)?(?:\\.\\d*)?(?:[Ee][+-]?\\d+)?$/.test(str));\n  },\n  min(str, val) {\n    const number = Number.parseFloat(str);\n    return isNaN(number) || number >= val;\n  },\n  max(str, val) {\n    const number = Number.parseFloat(str);\n    return isNaN(number) || number <= val;\n  },\n  not(str, pattern, modifiers) {\n    return this.notRegex(str, pattern, modifiers);\n  },\n  contains(str, elem) {\n    return Boolean(elem) && str.includes(elem);\n  },\n  notContains(str, elem) {\n    return !this.contains(str, elem);\n  },\n  is(str, pattern, modifiers) {\n    return this.regex(str, pattern, modifiers);\n  }\n};\nexports.extensions = extensions;\nvalidator.isImmutable = function(value, validatorArgs, field, modelInstance) {\n  return modelInstance.isNewRecord || modelInstance.dataValues[field] === modelInstance._previousDataValues[field];\n};\nvalidator.notNull = function(val) {\n  return val !== null && val !== void 0;\n};\n_.forEach(extensions, (extend, key) => {\n  validator[key] = extend;\n});\nvalidator.isNull = validator.isEmpty;\nvalidator.isDate = function(dateString) {\n  const parsed = Date.parse(dateString);\n  if (isNaN(parsed)) {\n    return false;\n  }\n  const date = new Date(parsed);\n  return moment(date.toISOString()).isValid();\n};\nexports.validator = validator;\n//# sourceMappingURL=validator-extras.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/utils/validator-extras.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2554,
    "kind": "variable",
    "name": "_",
    "memberof": "lib/utils/validator-extras.js",
    "static": true,
    "longname": "lib/utils/validator-extras.js~_",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/utils/validator-extras.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2555,
    "kind": "variable",
    "name": "validator",
    "memberof": "lib/utils/validator-extras.js",
    "static": true,
    "longname": "lib/utils/validator-extras.js~validator",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils/validator-extras.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2556,
    "kind": "variable",
    "name": "moment",
    "memberof": "lib/utils/validator-extras.js",
    "static": true,
    "longname": "lib/utils/validator-extras.js~moment",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils/validator-extras.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2557,
    "kind": "variable",
    "name": "extensions",
    "memberof": "lib/utils/validator-extras.js",
    "static": true,
    "longname": "lib/utils/validator-extras.js~extensions",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils/validator-extras.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "{\"extend\": function, \"notEmpty\": function, \"len\": function, \"isUrl\": function, \"isIPv6\": function, \"isIPv4\": function, \"notIn\": function, \"regex\": function, \"notRegex\": function, \"isDecimal\": function, \"min\": function, \"max\": function, \"not\": function, \"contains\": function, \"notContains\": function, \"is\": function}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2558,
    "kind": "function",
    "name": "isImmutable",
    "memberof": "lib/utils/validator-extras.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils/validator-extras.js~isImmutable",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils/validator-extras.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "validatorArgs",
        "types": [
          "*"
        ]
      },
      {
        "name": "field",
        "types": [
          "*"
        ]
      },
      {
        "name": "modelInstance",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2559,
    "kind": "function",
    "name": "notNull",
    "memberof": "lib/utils/validator-extras.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils/validator-extras.js~notNull",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils/validator-extras.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [
      {
        "name": "val",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2560,
    "kind": "function",
    "name": "isDate",
    "memberof": "lib/utils/validator-extras.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils/validator-extras.js~isDate",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils/validator-extras.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "params": [
      {
        "name": "dateString",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2561,
    "kind": "file",
    "name": "lib/utils.js",
    "content": "\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nconst DataTypes = require(\"./data-types\");\nconst SqlString = require(\"./sql-string\");\nconst _ = require(\"lodash\");\nconst baseIsNative = require(\"lodash/_baseIsNative\");\nconst uuidv1 = require(\"uuid\").v1;\nconst uuidv4 = require(\"uuid\").v4;\nconst operators = require(\"./operators\").Op;\nconst operatorsSet = new Set(Object.values(operators));\nlet inflection = require(\"inflection\");\nexports.classToInvokable = require(\"./utils/class-to-invokable\").classToInvokable;\nexports.joinSQLFragments = require(\"./utils/join-sql-fragments\").joinSQLFragments;\nfunction useInflection(_inflection) {\n  inflection = _inflection;\n}\nexports.useInflection = useInflection;\nfunction camelizeIf(str, condition) {\n  let result = str;\n  if (condition) {\n    result = camelize(str);\n  }\n  return result;\n}\nexports.camelizeIf = camelizeIf;\nfunction underscoredIf(str, condition) {\n  let result = str;\n  if (condition) {\n    result = underscore(str);\n  }\n  return result;\n}\nexports.underscoredIf = underscoredIf;\nfunction isPrimitive(val) {\n  const type = typeof val;\n  return [\"string\", \"number\", \"boolean\"].includes(type);\n}\nexports.isPrimitive = isPrimitive;\nfunction mergeDefaults(a, b) {\n  return _.mergeWith(a, b, (objectValue, sourceValue) => {\n    if (!_.isPlainObject(objectValue) && objectValue !== void 0) {\n      if (_.isFunction(objectValue) && baseIsNative(objectValue)) {\n        return sourceValue || objectValue;\n      }\n      return objectValue;\n    }\n  });\n}\nexports.mergeDefaults = mergeDefaults;\nfunction merge() {\n  const result = {};\n  for (const obj of arguments) {\n    _.forOwn(obj, (value, key) => {\n      if (value !== void 0) {\n        if (!result[key]) {\n          result[key] = value;\n        } else if (_.isPlainObject(value) && _.isPlainObject(result[key])) {\n          result[key] = merge(result[key], value);\n        } else if (Array.isArray(value) && Array.isArray(result[key])) {\n          result[key] = value.concat(result[key]);\n        } else {\n          result[key] = value;\n        }\n      }\n    });\n  }\n  return result;\n}\nexports.merge = merge;\nfunction spliceStr(str, index, count, add) {\n  return str.slice(0, index) + add + str.slice(index + count);\n}\nexports.spliceStr = spliceStr;\nfunction camelize(str) {\n  return str.trim().replace(/[\\s_-]+(.)?/g, (match, c) => c.toUpperCase());\n}\nexports.camelize = camelize;\nfunction underscore(str) {\n  return inflection.underscore(str);\n}\nexports.underscore = underscore;\nfunction singularize(str) {\n  return inflection.singularize(str);\n}\nexports.singularize = singularize;\nfunction pluralize(str) {\n  return inflection.pluralize(str);\n}\nexports.pluralize = pluralize;\nfunction format(arr, dialect) {\n  const timeZone = null;\n  return SqlString.format(arr[0], arr.slice(1), timeZone, dialect);\n}\nexports.format = format;\nfunction formatNamedParameters(sql, parameters, dialect) {\n  const timeZone = null;\n  return SqlString.formatNamedParameters(sql, parameters, timeZone, dialect);\n}\nexports.formatNamedParameters = formatNamedParameters;\nfunction cloneDeep(obj, onlyPlain) {\n  obj = obj || {};\n  return _.cloneDeepWith(obj, (elem) => {\n    if (Array.isArray(elem) || _.isPlainObject(elem)) {\n      return;\n    }\n    if (onlyPlain || typeof elem === \"object\") {\n      return elem;\n    }\n    if (elem && typeof elem.clone === \"function\") {\n      return elem.clone();\n    }\n  });\n}\nexports.cloneDeep = cloneDeep;\nfunction mapFinderOptions(options, Model) {\n  if (options.attributes && Array.isArray(options.attributes)) {\n    options.attributes = Model._injectDependentVirtualAttributes(options.attributes);\n    options.attributes = options.attributes.filter((v) => !Model._virtualAttributes.has(v));\n  }\n  mapOptionFieldNames(options, Model);\n  return options;\n}\nexports.mapFinderOptions = mapFinderOptions;\nfunction mapOptionFieldNames(options, Model) {\n  if (Array.isArray(options.attributes)) {\n    options.attributes = options.attributes.map((attr) => {\n      if (typeof attr !== \"string\") {\n        return attr;\n      }\n      if (Model.rawAttributes[attr] && attr !== Model.rawAttributes[attr].field) {\n        return [Model.rawAttributes[attr].field, attr];\n      }\n      return attr;\n    });\n  }\n  if (options.where && _.isPlainObject(options.where)) {\n    options.where = mapWhereFieldNames(options.where, Model);\n  }\n  return options;\n}\nexports.mapOptionFieldNames = mapOptionFieldNames;\nfunction mapWhereFieldNames(attributes, Model) {\n  if (attributes) {\n    attributes = cloneDeep(attributes);\n    for (const attribute of getComplexKeys(attributes)) {\n      const rawAttribute = Model.rawAttributes[attribute];\n      if (rawAttribute && rawAttribute.field !== rawAttribute.fieldName) {\n        attributes[rawAttribute.field] = attributes[attribute];\n        delete attributes[attribute];\n      }\n      if (_.isPlainObject(attributes[attribute]) && !(rawAttribute && (rawAttribute.type instanceof DataTypes.HSTORE || rawAttribute.type instanceof DataTypes.JSON))) {\n        attributes[attribute] = mapOptionFieldNames({\n          where: attributes[attribute]\n        }, Model).where;\n      }\n      if (Array.isArray(attributes[attribute])) {\n        for (const [index, where] of attributes[attribute].entries()) {\n          if (_.isPlainObject(where)) {\n            attributes[attribute][index] = mapWhereFieldNames(where, Model);\n          }\n        }\n      }\n    }\n  }\n  return attributes;\n}\nexports.mapWhereFieldNames = mapWhereFieldNames;\nfunction mapValueFieldNames(dataValues, fields, Model) {\n  const values = {};\n  for (const attr of fields) {\n    if (dataValues[attr] !== void 0 && !Model._virtualAttributes.has(attr)) {\n      if (Model.rawAttributes[attr] && Model.rawAttributes[attr].field && Model.rawAttributes[attr].field !== attr) {\n        values[Model.rawAttributes[attr].field] = dataValues[attr];\n      } else {\n        values[attr] = dataValues[attr];\n      }\n    }\n  }\n  return values;\n}\nexports.mapValueFieldNames = mapValueFieldNames;\nfunction isColString(value) {\n  return typeof value === \"string\" && value[0] === \"$\" && value[value.length - 1] === \"$\";\n}\nexports.isColString = isColString;\nfunction canTreatArrayAsAnd(arr) {\n  return arr.some((arg) => _.isPlainObject(arg) || arg instanceof Where);\n}\nexports.canTreatArrayAsAnd = canTreatArrayAsAnd;\nfunction combineTableNames(tableName1, tableName2) {\n  return tableName1.toLowerCase() < tableName2.toLowerCase() ? tableName1 + tableName2 : tableName2 + tableName1;\n}\nexports.combineTableNames = combineTableNames;\nfunction toDefaultValue(value, dialect) {\n  if (typeof value === \"function\") {\n    const tmp = value();\n    if (tmp instanceof DataTypes.ABSTRACT) {\n      return tmp.toSql();\n    }\n    return tmp;\n  }\n  if (value instanceof DataTypes.UUIDV1) {\n    return uuidv1();\n  }\n  if (value instanceof DataTypes.UUIDV4) {\n    return uuidv4();\n  }\n  if (value instanceof DataTypes.NOW) {\n    return now(dialect);\n  }\n  if (Array.isArray(value)) {\n    return [...value];\n  }\n  if (_.isPlainObject(value)) {\n    return __spreadValues({}, value);\n  }\n  return value;\n}\nexports.toDefaultValue = toDefaultValue;\nfunction defaultValueSchemable(value) {\n  if (value === void 0) {\n    return false;\n  }\n  if (value instanceof DataTypes.NOW) {\n    return false;\n  }\n  if (value instanceof DataTypes.UUIDV1 || value instanceof DataTypes.UUIDV4) {\n    return false;\n  }\n  return typeof value !== \"function\";\n}\nexports.defaultValueSchemable = defaultValueSchemable;\nfunction removeNullValuesFromHash(hash, omitNull, options) {\n  let result = hash;\n  options = options || {};\n  options.allowNull = options.allowNull || [];\n  if (omitNull) {\n    const _hash = {};\n    _.forIn(hash, (val, key) => {\n      if (options.allowNull.includes(key) || key.endsWith(\"Id\") || val !== null && val !== void 0) {\n        _hash[key] = val;\n      }\n    });\n    result = _hash;\n  }\n  return result;\n}\nexports.removeNullValuesFromHash = removeNullValuesFromHash;\nconst dialects = /* @__PURE__ */ new Set([\"mariadb\", \"mysql\", \"postgres\", \"sqlite\", \"mssql\", \"db2\"]);\nfunction now(dialect) {\n  const d = new Date();\n  if (!dialects.has(dialect)) {\n    d.setMilliseconds(0);\n  }\n  return d;\n}\nexports.now = now;\nconst TICK_CHAR = \"`\";\nexports.TICK_CHAR = TICK_CHAR;\nfunction addTicks(s, tickChar) {\n  tickChar = tickChar || TICK_CHAR;\n  return tickChar + removeTicks(s, tickChar) + tickChar;\n}\nexports.addTicks = addTicks;\nfunction removeTicks(s, tickChar) {\n  tickChar = tickChar || TICK_CHAR;\n  return s.replace(new RegExp(tickChar, \"g\"), \"\");\n}\nexports.removeTicks = removeTicks;\nfunction flattenObjectDeep(value) {\n  if (!_.isPlainObject(value)) {\n    return value;\n  }\n  const flattenedObj = {};\n  function flattenObject(obj, subPath) {\n    for (const key of Object.keys(obj)) {\n      const pathToProperty = subPath ? `${subPath}.${key}` : key;\n      if (typeof obj[key] === \"object\" && obj[key] !== null) {\n        flattenObject(obj[key], pathToProperty);\n      } else {\n        flattenedObj[pathToProperty] = _.get(obj, key);\n      }\n    }\n    return flattenedObj;\n  }\n  return flattenObject(value);\n}\nexports.flattenObjectDeep = flattenObjectDeep;\nclass SequelizeMethod {\n}\nexports.SequelizeMethod = SequelizeMethod;\nclass Fn extends SequelizeMethod {\n  constructor(fn, args) {\n    super();\n    this.fn = fn;\n    this.args = args;\n  }\n  clone() {\n    return new Fn(this.fn, this.args);\n  }\n}\nexports.Fn = Fn;\nclass Col extends SequelizeMethod {\n  constructor(col, ...args) {\n    super();\n    if (args.length > 0) {\n      col = args;\n    }\n    this.col = col;\n  }\n}\nexports.Col = Col;\nclass Cast extends SequelizeMethod {\n  constructor(val, type, json) {\n    super();\n    this.val = val;\n    this.type = (type || \"\").trim();\n    this.json = json || false;\n  }\n}\nexports.Cast = Cast;\nclass Literal extends SequelizeMethod {\n  constructor(val) {\n    super();\n    this.val = val;\n  }\n}\nexports.Literal = Literal;\nclass Json extends SequelizeMethod {\n  constructor(conditionsOrPath, value) {\n    super();\n    if (_.isObject(conditionsOrPath)) {\n      this.conditions = conditionsOrPath;\n    } else {\n      this.path = conditionsOrPath;\n      if (value) {\n        this.value = value;\n      }\n    }\n  }\n}\nexports.Json = Json;\nclass Where extends SequelizeMethod {\n  constructor(attribute, comparator, logic) {\n    super();\n    if (logic === void 0) {\n      logic = comparator;\n      comparator = \"=\";\n    }\n    this.attribute = attribute;\n    this.comparator = comparator;\n    this.logic = logic;\n  }\n}\nexports.Where = Where;\nfunction getOperators(obj) {\n  return Object.getOwnPropertySymbols(obj).filter((s) => operatorsSet.has(s));\n}\nexports.getOperators = getOperators;\nfunction getComplexKeys(obj) {\n  return getOperators(obj).concat(Object.keys(obj));\n}\nexports.getComplexKeys = getComplexKeys;\nfunction getComplexSize(obj) {\n  return Array.isArray(obj) ? obj.length : getComplexKeys(obj).length;\n}\nexports.getComplexSize = getComplexSize;\nfunction isWhereEmpty(obj) {\n  return Boolean(obj) && _.isEmpty(obj) && getOperators(obj).length === 0;\n}\nexports.isWhereEmpty = isWhereEmpty;\nfunction generateEnumName(tableName, columnName) {\n  return `enum_${tableName}_${columnName}`;\n}\nexports.generateEnumName = generateEnumName;\nfunction camelizeObjectKeys(obj) {\n  const newObj = /* @__PURE__ */ Object.create(null);\n  for (const key of Object.keys(obj)) {\n    newObj[camelize(key)] = obj[key];\n  }\n  return newObj;\n}\nexports.camelizeObjectKeys = camelizeObjectKeys;\nfunction defaults(object, ...sources) {\n  object = object || /* @__PURE__ */ Object.create(null);\n  for (const source of sources) {\n    if (source) {\n      for (const key of getComplexKeys(source)) {\n        const value = object[key];\n        if (value === void 0 || _.eq(value, Object.prototype[key]) && !Object.prototype.hasOwnProperty.call(object, key)) {\n          object[key] = source[key];\n        }\n      }\n    }\n  }\n  return object;\n}\nexports.defaults = defaults;\nfunction nameIndex(index, tableName) {\n  if (tableName.tableName) {\n    tableName = tableName.tableName;\n  }\n  if (!Object.prototype.hasOwnProperty.call(index, \"name\")) {\n    const fields = index.fields.map((field) => typeof field === \"string\" ? field : field.name || field.attribute);\n    index.name = underscore(`${tableName}_${fields.join(\"_\")}`);\n  }\n  return index;\n}\nexports.nameIndex = nameIndex;\nfunction intersects(arr1, arr2) {\n  return arr1.some((v) => arr2.includes(v));\n}\nexports.intersects = intersects;\nfunction safeStringifyJson(value) {\n  return JSON.stringify(value, (key, value2) => {\n    if (typeof value2 === \"bigint\") {\n      return String(value2);\n    }\n    return value2;\n  });\n}\nexports.safeStringifyJson = safeStringifyJson;\n//# sourceMappingURL=utils.js.map\n",
    "static": true,
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/lib/utils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2562,
    "kind": "variable",
    "name": "__defProp",
    "memberof": "lib/utils.js",
    "static": true,
    "longname": "lib/utils.js~__defProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2563,
    "kind": "variable",
    "name": "__getOwnPropSymbols",
    "memberof": "lib/utils.js",
    "static": true,
    "longname": "lib/utils.js~__getOwnPropSymbols",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2564,
    "kind": "variable",
    "name": "__hasOwnProp",
    "memberof": "lib/utils.js",
    "static": true,
    "longname": "lib/utils.js~__hasOwnProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2565,
    "kind": "variable",
    "name": "__propIsEnum",
    "memberof": "lib/utils.js",
    "static": true,
    "longname": "lib/utils.js~__propIsEnum",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2566,
    "kind": "function",
    "name": "__defNormalProp",
    "memberof": "lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils.js~__defNormalProp",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2567,
    "kind": "function",
    "name": "__spreadValues",
    "memberof": "lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils.js~__spreadValues",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2568,
    "kind": "variable",
    "name": "DataTypes",
    "memberof": "lib/utils.js",
    "static": true,
    "longname": "lib/utils.js~DataTypes",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2569,
    "kind": "variable",
    "name": "SqlString",
    "memberof": "lib/utils.js",
    "static": true,
    "longname": "lib/utils.js~SqlString",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2570,
    "kind": "variable",
    "name": "_",
    "memberof": "lib/utils.js",
    "static": true,
    "longname": "lib/utils.js~_",
    "access": "private",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2571,
    "kind": "variable",
    "name": "baseIsNative",
    "memberof": "lib/utils.js",
    "static": true,
    "longname": "lib/utils.js~baseIsNative",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2572,
    "kind": "variable",
    "name": "uuidv1",
    "memberof": "lib/utils.js",
    "static": true,
    "longname": "lib/utils.js~uuidv1",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2573,
    "kind": "variable",
    "name": "uuidv4",
    "memberof": "lib/utils.js",
    "static": true,
    "longname": "lib/utils.js~uuidv4",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2574,
    "kind": "variable",
    "name": "operators",
    "memberof": "lib/utils.js",
    "static": true,
    "longname": "lib/utils.js~operators",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2575,
    "kind": "variable",
    "name": "operatorsSet",
    "memberof": "lib/utils.js",
    "static": true,
    "longname": "lib/utils.js~operatorsSet",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2576,
    "kind": "variable",
    "name": "inflection",
    "memberof": "lib/utils.js",
    "static": true,
    "longname": "lib/utils.js~inflection",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2577,
    "kind": "function",
    "name": "useInflection",
    "memberof": "lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils.js~useInflection",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [
      {
        "name": "_inflection",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 2578,
    "kind": "function",
    "name": "camelizeIf",
    "memberof": "lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils.js~camelizeIf",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [
      {
        "name": "str",
        "types": [
          "*"
        ]
      },
      {
        "name": "condition",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2579,
    "kind": "function",
    "name": "underscoredIf",
    "memberof": "lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils.js~underscoredIf",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [
      {
        "name": "str",
        "types": [
          "*"
        ]
      },
      {
        "name": "condition",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2580,
    "kind": "function",
    "name": "isPrimitive",
    "memberof": "lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils.js~isPrimitive",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [
      {
        "name": "val",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2581,
    "kind": "function",
    "name": "mergeDefaults",
    "memberof": "lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils.js~mergeDefaults",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2582,
    "kind": "function",
    "name": "merge",
    "memberof": "lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils.js~merge",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2583,
    "kind": "function",
    "name": "spliceStr",
    "memberof": "lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils.js~spliceStr",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "params": [
      {
        "name": "str",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "count",
        "types": [
          "*"
        ]
      },
      {
        "name": "add",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2584,
    "kind": "function",
    "name": "camelize",
    "memberof": "lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils.js~camelize",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "params": [
      {
        "name": "str",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2585,
    "kind": "function",
    "name": "underscore",
    "memberof": "lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils.js~underscore",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "params": [
      {
        "name": "str",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2586,
    "kind": "function",
    "name": "singularize",
    "memberof": "lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils.js~singularize",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "params": [
      {
        "name": "str",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2587,
    "kind": "function",
    "name": "pluralize",
    "memberof": "lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils.js~pluralize",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "params": [
      {
        "name": "str",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2588,
    "kind": "function",
    "name": "format",
    "memberof": "lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils.js~format",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "params": [
      {
        "name": "arr",
        "types": [
          "*"
        ]
      },
      {
        "name": "dialect",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2589,
    "kind": "function",
    "name": "formatNamedParameters",
    "memberof": "lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils.js~formatNamedParameters",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "params": [
      {
        "name": "sql",
        "types": [
          "*"
        ]
      },
      {
        "name": "parameters",
        "types": [
          "*"
        ]
      },
      {
        "name": "dialect",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2590,
    "kind": "function",
    "name": "cloneDeep",
    "memberof": "lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils.js~cloneDeep",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "onlyPlain",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2591,
    "kind": "function",
    "name": "mapFinderOptions",
    "memberof": "lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils.js~mapFinderOptions",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      },
      {
        "name": "Model",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2592,
    "kind": "function",
    "name": "mapOptionFieldNames",
    "memberof": "lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils.js~mapOptionFieldNames",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 139,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      },
      {
        "name": "Model",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2593,
    "kind": "function",
    "name": "mapWhereFieldNames",
    "memberof": "lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils.js~mapWhereFieldNames",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 157,
    "undocument": true,
    "params": [
      {
        "name": "attributes",
        "types": [
          "*"
        ]
      },
      {
        "name": "Model",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2594,
    "kind": "function",
    "name": "mapValueFieldNames",
    "memberof": "lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils.js~mapValueFieldNames",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 183,
    "undocument": true,
    "params": [
      {
        "name": "dataValues",
        "types": [
          "*"
        ]
      },
      {
        "name": "fields",
        "types": [
          "*"
        ]
      },
      {
        "name": "Model",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2595,
    "kind": "function",
    "name": "isColString",
    "memberof": "lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils.js~isColString",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 197,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2596,
    "kind": "function",
    "name": "canTreatArrayAsAnd",
    "memberof": "lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils.js~canTreatArrayAsAnd",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 201,
    "undocument": true,
    "params": [
      {
        "name": "arr",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2597,
    "kind": "function",
    "name": "combineTableNames",
    "memberof": "lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils.js~combineTableNames",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 205,
    "undocument": true,
    "params": [
      {
        "name": "tableName1",
        "types": [
          "*"
        ]
      },
      {
        "name": "tableName2",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2598,
    "kind": "function",
    "name": "toDefaultValue",
    "memberof": "lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils.js~toDefaultValue",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 209,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "dialect",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2599,
    "kind": "function",
    "name": "defaultValueSchemable",
    "memberof": "lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils.js~defaultValueSchemable",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 235,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2600,
    "kind": "function",
    "name": "removeNullValuesFromHash",
    "memberof": "lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils.js~removeNullValuesFromHash",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 248,
    "undocument": true,
    "params": [
      {
        "name": "hash",
        "types": [
          "*"
        ]
      },
      {
        "name": "omitNull",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2601,
    "kind": "variable",
    "name": "dialects",
    "memberof": "lib/utils.js",
    "static": true,
    "longname": "lib/utils.js~dialects",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 264,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2602,
    "kind": "function",
    "name": "now",
    "memberof": "lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils.js~now",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 265,
    "undocument": true,
    "params": [
      {
        "name": "dialect",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2603,
    "kind": "variable",
    "name": "TICK_CHAR",
    "memberof": "lib/utils.js",
    "static": true,
    "longname": "lib/utils.js~TICK_CHAR",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 273,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2604,
    "kind": "function",
    "name": "addTicks",
    "memberof": "lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils.js~addTicks",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 275,
    "undocument": true,
    "params": [
      {
        "name": "s",
        "types": [
          "*"
        ]
      },
      {
        "name": "tickChar",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2605,
    "kind": "function",
    "name": "removeTicks",
    "memberof": "lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils.js~removeTicks",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 280,
    "undocument": true,
    "params": [
      {
        "name": "s",
        "types": [
          "*"
        ]
      },
      {
        "name": "tickChar",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2606,
    "kind": "function",
    "name": "flattenObjectDeep",
    "memberof": "lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils.js~flattenObjectDeep",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 285,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2607,
    "kind": "class",
    "name": "SequelizeMethod",
    "memberof": "lib/utils.js",
    "static": true,
    "longname": "lib/utils.js~SequelizeMethod",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 304,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 2608,
    "kind": "class",
    "name": "Fn",
    "memberof": "lib/utils.js",
    "static": true,
    "longname": "lib/utils.js~Fn",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 307,
    "undocument": true,
    "interface": false,
    "extends": [
      "SequelizeMethod"
    ],
    "ignore": true
  },
  {
    "__docId__": 2609,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/utils.js~Fn",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/utils.js~Fn#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 308,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 2610,
    "kind": "member",
    "name": "fn",
    "memberof": "lib/utils.js~Fn",
    "static": false,
    "longname": "lib/utils.js~Fn#fn",
    "access": "public",
    "description": null,
    "lineNumber": 310,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2611,
    "kind": "member",
    "name": "args",
    "memberof": "lib/utils.js~Fn",
    "static": false,
    "longname": "lib/utils.js~Fn#args",
    "access": "public",
    "description": null,
    "lineNumber": 311,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2612,
    "kind": "method",
    "name": "clone",
    "memberof": "lib/utils.js~Fn",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/utils.js~Fn#clone",
    "access": "public",
    "description": null,
    "lineNumber": 313,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2613,
    "kind": "class",
    "name": "Col",
    "memberof": "lib/utils.js",
    "static": true,
    "longname": "lib/utils.js~Col",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 318,
    "undocument": true,
    "interface": false,
    "extends": [
      "SequelizeMethod"
    ],
    "ignore": true
  },
  {
    "__docId__": 2614,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/utils.js~Col",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/utils.js~Col#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 319,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 2615,
    "kind": "member",
    "name": "col",
    "memberof": "lib/utils.js~Col",
    "static": false,
    "longname": "lib/utils.js~Col#col",
    "access": "public",
    "description": null,
    "lineNumber": 324,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2616,
    "kind": "class",
    "name": "Cast",
    "memberof": "lib/utils.js",
    "static": true,
    "longname": "lib/utils.js~Cast",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 328,
    "undocument": true,
    "interface": false,
    "extends": [
      "SequelizeMethod"
    ],
    "ignore": true
  },
  {
    "__docId__": 2617,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/utils.js~Cast",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/utils.js~Cast#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 329,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 2618,
    "kind": "member",
    "name": "val",
    "memberof": "lib/utils.js~Cast",
    "static": false,
    "longname": "lib/utils.js~Cast#val",
    "access": "public",
    "description": null,
    "lineNumber": 331,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2619,
    "kind": "member",
    "name": "type",
    "memberof": "lib/utils.js~Cast",
    "static": false,
    "longname": "lib/utils.js~Cast#type",
    "access": "public",
    "description": null,
    "lineNumber": 332,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2620,
    "kind": "member",
    "name": "json",
    "memberof": "lib/utils.js~Cast",
    "static": false,
    "longname": "lib/utils.js~Cast#json",
    "access": "public",
    "description": null,
    "lineNumber": 333,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2621,
    "kind": "class",
    "name": "Literal",
    "memberof": "lib/utils.js",
    "static": true,
    "longname": "lib/utils.js~Literal",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 337,
    "undocument": true,
    "interface": false,
    "extends": [
      "SequelizeMethod"
    ],
    "ignore": true
  },
  {
    "__docId__": 2622,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/utils.js~Literal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/utils.js~Literal#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 338,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 2623,
    "kind": "member",
    "name": "val",
    "memberof": "lib/utils.js~Literal",
    "static": false,
    "longname": "lib/utils.js~Literal#val",
    "access": "public",
    "description": null,
    "lineNumber": 340,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2624,
    "kind": "class",
    "name": "Json",
    "memberof": "lib/utils.js",
    "static": true,
    "longname": "lib/utils.js~Json",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 344,
    "undocument": true,
    "interface": false,
    "extends": [
      "SequelizeMethod"
    ],
    "ignore": true
  },
  {
    "__docId__": 2625,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/utils.js~Json",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/utils.js~Json#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 345,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 2626,
    "kind": "member",
    "name": "conditions",
    "memberof": "lib/utils.js~Json",
    "static": false,
    "longname": "lib/utils.js~Json#conditions",
    "access": "public",
    "description": null,
    "lineNumber": 348,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2627,
    "kind": "member",
    "name": "path",
    "memberof": "lib/utils.js~Json",
    "static": false,
    "longname": "lib/utils.js~Json#path",
    "access": "public",
    "description": null,
    "lineNumber": 350,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2628,
    "kind": "member",
    "name": "value",
    "memberof": "lib/utils.js~Json",
    "static": false,
    "longname": "lib/utils.js~Json#value",
    "access": "public",
    "description": null,
    "lineNumber": 352,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2629,
    "kind": "class",
    "name": "Where",
    "memberof": "lib/utils.js",
    "static": true,
    "longname": "lib/utils.js~Where",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 358,
    "undocument": true,
    "interface": false,
    "extends": [
      "SequelizeMethod"
    ],
    "ignore": true
  },
  {
    "__docId__": 2630,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/utils.js~Where",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/utils.js~Where#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 359,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 2631,
    "kind": "member",
    "name": "attribute",
    "memberof": "lib/utils.js~Where",
    "static": false,
    "longname": "lib/utils.js~Where#attribute",
    "access": "public",
    "description": null,
    "lineNumber": 365,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2632,
    "kind": "member",
    "name": "comparator",
    "memberof": "lib/utils.js~Where",
    "static": false,
    "longname": "lib/utils.js~Where#comparator",
    "access": "public",
    "description": null,
    "lineNumber": 366,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2633,
    "kind": "member",
    "name": "logic",
    "memberof": "lib/utils.js~Where",
    "static": false,
    "longname": "lib/utils.js~Where#logic",
    "access": "public",
    "description": null,
    "lineNumber": 367,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2634,
    "kind": "function",
    "name": "getOperators",
    "memberof": "lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils.js~getOperators",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 371,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2635,
    "kind": "function",
    "name": "getComplexKeys",
    "memberof": "lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils.js~getComplexKeys",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 375,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2636,
    "kind": "function",
    "name": "getComplexSize",
    "memberof": "lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils.js~getComplexSize",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 379,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2637,
    "kind": "function",
    "name": "isWhereEmpty",
    "memberof": "lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils.js~isWhereEmpty",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 383,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2638,
    "kind": "function",
    "name": "generateEnumName",
    "memberof": "lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils.js~generateEnumName",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 387,
    "undocument": true,
    "params": [
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "columnName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2639,
    "kind": "function",
    "name": "camelizeObjectKeys",
    "memberof": "lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils.js~camelizeObjectKeys",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 391,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2640,
    "kind": "function",
    "name": "defaults",
    "memberof": "lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils.js~defaults",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 399,
    "undocument": true,
    "params": [
      {
        "name": "object",
        "types": [
          "*"
        ]
      },
      {
        "name": "sources",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2641,
    "kind": "function",
    "name": "nameIndex",
    "memberof": "lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils.js~nameIndex",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 414,
    "undocument": true,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "tableName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2642,
    "kind": "function",
    "name": "intersects",
    "memberof": "lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils.js~intersects",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 425,
    "undocument": true,
    "params": [
      {
        "name": "arr1",
        "types": [
          "*"
        ]
      },
      {
        "name": "arr2",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2643,
    "kind": "function",
    "name": "safeStringifyJson",
    "memberof": "lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils.js~safeStringifyJson",
    "access": "public",
    "export": false,
    "importPath": "sequelize/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 429,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "kind": "index",
    "content": "<p align=\"center\">\n  <img src=\"docs/images/logo-small.png\" width=\"100\" />\n  <h1 align=\"center\">Sequelize</h1>\n</p>\n\n[![npm version](https://badgen.net/npm/v/sequelize)](https://www.npmjs.com/package/sequelize)\n[![Build Status](https://github.com/sequelize/sequelize/workflows/CI/badge.svg)](https://github.com/sequelize/sequelize/actions?query=workflow%3ACI)\n[![npm downloads](https://badgen.net/npm/dm/sequelize)](https://www.npmjs.com/package/sequelize)\n[![contributors](https://img.shields.io/github/contributors/sequelize/sequelize)](https://github.com/sequelize/sequelize/graphs/contributors)\n[![Open Collective](https://img.shields.io/opencollective/backers/sequelize)](https://opencollective.com/sequelize#section-contributors)\n[![sponsor](https://img.shields.io/opencollective/all/sequelize?label=sponsors)](https://opencollective.com/sequelize)\n[![Merged PRs](https://badgen.net/github/merged-prs/sequelize/sequelize)](https://github.com/sequelize/sequelize)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\nSequelize is an easy-to-use and promise-based [Node.js](https://nodejs.org/en/about/) [ORM tool](https://en.wikipedia.org/wiki/Object-relational_mapping) for [Postgres](https://en.wikipedia.org/wiki/PostgreSQL), [MySQL](https://en.wikipedia.org/wiki/MySQL), [MariaDB](https://en.wikipedia.org/wiki/MariaDB), [SQLite](https://en.wikipedia.org/wiki/SQLite), [DB2](https://en.wikipedia.org/wiki/IBM_Db2_Family) and [Microsoft SQL Server](https://en.wikipedia.org/wiki/Microsoft_SQL_Server). It features solid transaction support, relations, eager and lazy loading, read replication and more.\n\nSequelize follows [Semantic Versioning](http://semver.org) and the [official Node.js LTS schedule](https://nodejs.org/en/about/releases/). Version 7 of Sequelize officially supports the Node.js versions `^12.22.0`, `^14.17,0`, `^16.0.0`. Other version might be working as well.\n\nNew to Sequelize? Take a look at the [Tutorials and Guides](https://sequelize.org/master). You might also be interested in the [API Reference](https://sequelize.org/master/identifiers).\n\nWould you like to contribute? Read [our contribution guidelines](https://github.com/sequelize/sequelize/blob/main/CONTRIBUTING.md) to know more. There are many ways to help! 😃\n\n### :pencil: Major version changelog\n\nPlease find upgrade information to major versions here:\n\n- [Upgrade from v5 to v6](https://github.com/sequelize/sequelize/blob/main/docs/manual/other-topics/upgrade-to-v6.md)\n- [Upgrade from v6 to v7](https://github.com/sequelize/sequelize/blob/main/docs/manual/other-topics/upgrade-to-v7.md)\n\n## :money_with_wings: Supporting the project\n\nDo you like Sequelize and would like to give back to the engineering team behind it?\n\nWe have recently created an [OpenCollective based money pool](https://opencollective.com/sequelize) which is shared amongst all core maintainers based on their contributions. Every support is wholeheartedly welcome. ❤️\n\n## :computer: Installation\n\n```sh\n# using npm\nnpm i sequelize # This will install latest version of Sequelize\n# using yarn\nyarn add sequelize\n```\n\n```sh\n# Libraries used for supported dialects are :\n# using npm\nnpm i pg pg-hstore # PostgreSQL\nnpm i mysql2 # MySQL\nnpm i mariadb # MariaDB\nnpm i sqlite3 # SQLite\nnpm i tedious # Microsoft SQL Server\nnpm i ibm_db # DB2\n# using yarn\nyarn add pg pg-hstore # PostgreSQL\nyarn add mysql2 # MySQL\nyarn add mariadb # MariaDB\nyarn add sqlite3 # SQLite\nyarn add tedious # Microsoft SQL Server\nyarn add ibm_db # DB2\n```\n\n## :book: Documentation\n\n- [Latest Version Documentation (v7)](https://sequelize.org/v7)\n- [All Documentation Versions](https://sequelize.org)\n- [Contributing](https://github.com/sequelize/sequelize/blob/main/CONTRIBUTING.md)\n\n## :warning: Responsible disclosure\n\nIf you have security issues to report, please refer to our [Responsible Disclosure Policy](https://github.com/sequelize/sequelize/blob/main/SECURITY.md) for more details.\n\n## :book: Resources\n\n- [Changelog](https://github.com/sequelize/sequelize/releases)\n- [Discussions](https://github.com/sequelize/sequelize/discussions)\n- [Slack Inviter](http://sequelize-slack.herokuapp.com/)\n- [Stack Overflow](https://stackoverflow.com/questions/tagged/sequelize.js)\n\n### :wrench: Tools\n\n- [CLI](https://github.com/sequelize/cli)\n- [With TypeScript](https://sequelize.org/master/manual/typescript.html)\n- [Enhanced TypeScript with decorators](https://github.com/RobinBuschmann/sequelize-typescript)\n- [For GraphQL](https://github.com/mickhansen/graphql-sequelize)\n- [For CockroachDB](https://github.com/cockroachdb/sequelize-cockroachdb)\n- [Plugins](https://sequelize.org/master/manual/resources.html)\n- [For YugabyteDB](https://github.com/yugabyte/sequelize-yugabytedb)\n\n### :speech_balloon: Translations\n\n- [English](https://sequelize.org/master) (OFFICIAL)\n- [中文文档](https://github.com/demopark/sequelize-docs-Zh-CN) (UNOFFICIAL)\n\n",
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"sequelize\",\n  \"description\": \"Sequelize is a promise-based Node.js ORM tool for Postgres, MySQL, MariaDB, SQLite, Microsoft SQL Server, Amazon Redshift and Snowflake’s Data Cloud. It features solid transaction support, relations, eager and lazy loading, read replication and more.\",\n  \"version\": \"0.0.0-development\",\n  \"funding\": [\n    {\n      \"type\": \"opencollective\",\n      \"url\": \"https://opencollective.com/sequelize\"\n    }\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/sequelize/sequelize.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/sequelize/sequelize/issues\"\n  },\n  \"homepage\": \"https://sequelize.org/\",\n  \"main\": \"./lib/index.js\",\n  \"types\": \"./types\",\n  \"type\": \"commonjs\",\n  \"exports\": {\n    \".\": {\n      \"import\": \"./lib/index.mjs\",\n      \"require\": \"./lib/index.js\"\n    },\n    \"./lib/*\": \"./lib/*.js\",\n    \"./lib/errors\": \"./lib/errors/index.js\",\n    \"./*\": \"./*\"\n  },\n  \"engines\": {\n    \"node\": \"^12.22.0 || ^14.17.0 || >=16.0.0\"\n  },\n  \"files\": [\n    \"lib\",\n    \"types\",\n    \"index.js\"\n  ],\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"@types/debug\": \"^4.1.7\",\n    \"debug\": \"^4.3.3\",\n    \"dottie\": \"^2.0.2\",\n    \"inflection\": \"^1.13.1\",\n    \"lodash\": \"^4.17.21\",\n    \"moment\": \"^2.29.1\",\n    \"moment-timezone\": \"^0.5.34\",\n    \"pg-connection-string\": \"^2.5.0\",\n    \"retry-as-promised\": \"^5.0.0\",\n    \"semver\": \"^7.3.5\",\n    \"sequelize-pool\": \"^7.1.0\",\n    \"toposort-class\": \"^1.0.1\",\n    \"uuid\": \"^8.3.2\",\n    \"validator\": \"^13.7.0\",\n    \"wkx\": \"^0.5.0\"\n  },\n  \"devDependencies\": {\n    \"@rushstack/eslint-patch\": \"1.1.0\",\n    \"@commitlint/cli\": \"16.1.0\",\n    \"@commitlint/config-angular\": \"16.0.0\",\n    \"@ephys/eslint-config-typescript\": \"14.1.1\",\n    \"@types/chai\": \"4.3.0\",\n    \"@types/mocha\": \"9.1.0\",\n    \"@types/node\": \"16.11.22\",\n    \"@types/sinon\": \"10.0.11\",\n    \"@types/validator\": \"13.7.1\",\n    \"acorn\": \"8.7.0\",\n    \"chai\": \"4.3.6\",\n    \"chai-as-promised\": \"7.1.1\",\n    \"chai-datetime\": \"1.8.0\",\n    \"cheerio\": \"1.0.0-rc.10\",\n    \"cls-hooked\": \"4.2.2\",\n    \"copyfiles\": \"2.4.1\",\n    \"cross-env\": \"7.0.3\",\n    \"delay\": \"5.0.0\",\n    \"esbuild\": \"0.14.21\",\n    \"esdoc\": \"1.1.0\",\n    \"esdoc-ecmascript-proposal-plugin\": \"1.0.0\",\n    \"esdoc-inject-style-plugin\": \"1.0.0\",\n    \"esdoc-standard-plugin\": \"1.0.0\",\n    \"eslint\": \"8.8.0\",\n    \"eslint-plugin-jsdoc\": \"37.8.1\",\n    \"eslint-plugin-mocha\": \"10.0.3\",\n    \"expect-type\": \"0.12.0\",\n    \"fast-glob\": \"3.2.11\",\n    \"fs-jetpack\": \"4.3.1\",\n    \"husky\": \"7.0.4\",\n    \"lcov-result-merger\": \"3.1.0\",\n    \"lint-staged\": \"12.3.3\",\n    \"mariadb\": \"2.5.5\",\n    \"markdownlint-cli\": \"0.31.1\",\n    \"mocha\": \"9.2.0\",\n    \"module-alias\": \"2.2.2\",\n    \"ibm_db\": \"2.8.1\",\n    \"mysql2\": \"2.3.3\",\n    \"node-hook\": \"1.0.0\",\n    \"nyc\": \"15.1.0\",\n    \"p-map\": \"4.0.0\",\n    \"p-props\": \"4.0.0\",\n    \"p-settle\": \"4.1.1\",\n    \"p-timeout\": \"4.1.0\",\n    \"pg\": \"8.7.3\",\n    \"pg-hstore\": \"2.3.4\",\n    \"rimraf\": \"3.0.2\",\n    \"semantic-release\": \"19.0.2\",\n    \"semantic-release-fail-on-major-bump\": \"1.0.0\",\n    \"sinon\": \"13.0.1\",\n    \"sinon-chai\": \"3.7.0\",\n    \"snowflake-sdk\": \"1.6.6\",\n    \"source-map-support\": \"0.5.21\",\n    \"sqlite3\": \"npm:@vscode/sqlite3@5.0.7\",\n    \"tedious\": \"14.2.0\",\n    \"typescript\": \"4.5.5\"\n  },\n  \"peerDependenciesMeta\": {\n    \"pg\": {\n      \"optional\": true\n    },\n    \"pg-hstore\": {\n      \"optional\": true\n    },\n    \"mysql2\": {\n      \"optional\": true\n    },\n    \"ibm_db\": {\n      \"optional\": true\n    },\n    \"snowflake-sdk\": {\n      \"optional\": true\n    },\n    \"mariadb\": {\n      \"optional\": true\n    },\n    \"sqlite3\": {\n      \"optional\": true\n    },\n    \"tedious\": {\n      \"optional\": true\n    }\n  },\n  \"keywords\": [\n    \"mysql\",\n    \"mariadb\",\n    \"sqlite\",\n    \"postgresql\",\n    \"postgres\",\n    \"pg\",\n    \"mssql\",\n    \"db2\",\n    \"ibm_db\",\n    \"sql\",\n    \"sqlserver\",\n    \"snowflake\",\n    \"orm\",\n    \"nodejs\",\n    \"object relational mapper\",\n    \"database\",\n    \"db\"\n  ],\n  \"commitlint\": {\n    \"extends\": [\n      \"@commitlint/config-angular\"\n    ],\n    \"rules\": {\n      \"type-enum\": [\n        2,\n        \"always\",\n        [\n          \"build\",\n          \"ci\",\n          \"docs\",\n          \"feat\",\n          \"fix\",\n          \"perf\",\n          \"refactor\",\n          \"revert\",\n          \"style\",\n          \"test\",\n          \"meta\"\n        ]\n      ]\n    }\n  },\n  \"lint-staged\": {\n    \"*.{js,mjs,cjs,ts,mts,cts}\": \"eslint --fix --report-unused-disable-directives\"\n  },\n  \"release\": {\n    \"plugins\": [\n      \"@semantic-release/commit-analyzer\",\n      \"@semantic-release/release-notes-generator\",\n      \"@semantic-release/npm\",\n      \"@semantic-release/github\"\n    ],\n    \"branches\": [\n      \"v6\",\n      {\n        \"name\": \"v7\",\n        \"prerelease\": \"alpha\"\n      }\n    ]\n  },\n  \"publishConfig\": {\n    \"tag\": \"alpha\"\n  },\n  \"scripts\": {\n    \"----------------------------------------- static analysis -----------------------------------------\": \"\",\n    \"lint\": \"eslint . --fix --report-unused-disable-directives\",\n    \"lint-no-fix\": \"eslint . --quiet --report-unused-disable-directives\",\n    \"lint-docs\": \"markdownlint docs\",\n    \"test-typings\": \"tsc --noEmit --emitDeclarationOnly false && tsc -b test/tsconfig.json\",\n    \"----------------------------------------- documentation -------------------------------------------\": \"\",\n    \"docs\": \"rimraf esdoc && esdoc -c docs/esdoc-config.js && cp docs/favicon.ico esdoc/favicon.ico && cp docs/ROUTER.txt esdoc/ROUTER && node docs/run-docs-transforms.js && node docs/redirects/create-redirects.js && rimraf esdoc/file esdoc/source.html\",\n    \"----------------------------------------- tests ---------------------------------------------------\": \"\",\n    \"mocha\": \"mocha -r ./test/registerEsbuild\",\n    \"test-unit\": \"yarn mocha \\\"test/unit/**/*.test.[tj]s\\\"\",\n    \"test-integration\": \"yarn mocha \\\"test/integration/**/*.test.[tj]s\\\"\",\n    \"teaser\": \"node test/teaser.js\",\n    \"test\": \"yarn prepare && yarn test-typings && yarn teaser && yarn test-unit && yarn test-integration\",\n    \"----------------------------------------- coverage ------------------------------------------------\": \"\",\n    \"cover\": \"rimraf coverage && yarn teaser && yarn cover-integration && yarn cover-unit && yarn merge-coverage\",\n    \"cover-integration\": \"cross-env COVERAGE=true nyc --reporter=lcovonly yarn mocha \\\"test/integration/**/*.test.[tj]s\\\" && node -e \\\"require('fs').renameSync('coverage/lcov.info', 'coverage/integration.info')\\\"\",\n    \"cover-unit\": \"cross-env COVERAGE=true nyc --reporter=lcovonly yarn mocha \\\"test/unit/**/*.test.[tj]s\\\" && node -e \\\"require('fs').renameSync('coverage/lcov.info', 'coverage/unit.info')\\\"\",\n    \"merge-coverage\": \"lcov-result-merger \\\"coverage/*.info\\\" \\\"coverage/lcov.info\\\"\",\n    \"----------------------------------------- local test dbs ------------------------------------------\": \"\",\n    \"start-mariadb\": \"bash dev/mariadb/10.3/start.sh\",\n    \"start-mysql\": \"bash dev/mysql/5.7/start.sh\",\n    \"start-mysql-8\": \"bash dev/mysql/8.0/start.sh\",\n    \"start-postgres\": \"bash dev/postgres/10/start.sh\",\n    \"start-mssql\": \"bash dev/mssql/2019/start.sh\",\n    \"start-db2\": \"bash dev/db2/11.5/start.sh\",\n    \"stop-mariadb\": \"bash dev/mariadb/10.3/stop.sh\",\n    \"stop-mysql\": \"bash dev/mysql/5.7/stop.sh\",\n    \"stop-mysql-8\": \"bash dev/mysql/8.0/stop.sh\",\n    \"stop-postgres\": \"bash dev/postgres/10/stop.sh\",\n    \"stop-mssql\": \"bash dev/mssql/2019/stop.sh\",\n    \"stop-db2\": \"bash dev/db2/11.5/stop.sh\",\n    \"restart-mariadb\": \"yarn start-mariadb\",\n    \"restart-mysql\": \"yarn start-mysql\",\n    \"restart-postgres\": \"yarn start-postgres\",\n    \"restart-mssql\": \"yarn start-mssql\",\n    \"restart-db2\": \"yarn start-db2\",\n    \"----------------------------------------- local tests ---------------------------------------------\": \"\",\n    \"test-unit-mariadb\": \"cross-env DIALECT=mariadb yarn test-unit\",\n    \"test-unit-mysql\": \"cross-env DIALECT=mysql yarn test-unit\",\n    \"test-unit-postgres\": \"cross-env DIALECT=postgres yarn test-unit\",\n    \"test-unit-postgres-native\": \"cross-env DIALECT=postgres-native yarn test-unit\",\n    \"test-unit-sqlite\": \"cross-env DIALECT=sqlite yarn test-unit\",\n    \"test-unit-mssql\": \"cross-env DIALECT=mssql yarn test-unit\",\n    \"test-unit-db2\": \"cross-env DIALECT=db2 yarn test-unit\",\n    \"test-unit-snowflake\": \"cross-env DIALECT=snowflake yarn test-unit\",\n    \"test-unit-all\": \"yarn test-unit-mariadb && yarn test-unit-mysql && yarn test-unit-postgres && yarn test-unit-postgres-native && yarn test-unit-mssql && yarn test-unit-sqlite && yarn test-unit-snowflake && yarn test-unit-db2\",\n    \"test-integration-mariadb\": \"cross-env DIALECT=mariadb yarn test-integration\",\n    \"test-integration-mysql\": \"cross-env DIALECT=mysql yarn test-integration\",\n    \"test-integration-postgres\": \"cross-env DIALECT=postgres yarn test-integration\",\n    \"test-integration-postgres-native\": \"cross-env DIALECT=postgres-native yarn test-integration\",\n    \"test-integration-sqlite\": \"cross-env DIALECT=sqlite yarn test-integration\",\n    \"test-integration-mssql\": \"cross-env DIALECT=mssql yarn test-integration\",\n    \"test-integration-db2\": \"cross-env DIALECT=db2 yarn test-integration\",\n    \"test-integration-snowflake\": \"cross-env DIALECT=snowflake yarn test-integration\",\n    \"test-mariadb\": \"cross-env DIALECT=mariadb yarn test\",\n    \"test-mysql\": \"cross-env DIALECT=mysql yarn test\",\n    \"test-sqlite\": \"cross-env DIALECT=sqlite yarn test\",\n    \"test-postgres\": \"cross-env DIALECT=postgres yarn test\",\n    \"test-postgres-native\": \"cross-env DIALECT=postgres-native yarn test\",\n    \"test-mssql\": \"cross-env DIALECT=mssql yarn test\",\n    \"test-db2\": \"cross-env DIALECT=db2 yarn test\",\n    \"----------------------------------------- development ---------------------------------------------\": \"\",\n    \"fix-commit\": \"export TMPFILE=$(mktemp) && grep -v '^#' $(git rev-parse --git-dir)/COMMIT_EDITMSG > $TMPFILE && git commit -e -F $TMPFILE\",\n    \"sscce\": \"node sscce.js\",\n    \"sscce-mariadb\": \"cross-env DIALECT=mariadb node sscce.js\",\n    \"sscce-mysql\": \"cross-env DIALECT=mysql node sscce.js\",\n    \"sscce-postgres\": \"cross-env DIALECT=postgres node sscce.js\",\n    \"sscce-postgres-native\": \"cross-env DIALECT=postgres-native node sscce.js\",\n    \"sscce-sqlite\": \"cross-env DIALECT=sqlite node sscce.js\",\n    \"sscce-mssql\": \"cross-env DIALECT=mssql node sscce.js\",\n    \"sscce-db2\": \"cross-env DIALECT=db2 node sscce.js\",\n    \"prepare\": \"yarn build && husky install\",\n    \"build\": \"node ./build.js\",\n    \"---------------------------------------------------------------------------------------------------\": \"\"\n  },\n  \"support\": true\n}\n",
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "globalIndex": true,
    "content": "<div class=\"logo\">\n  <img src=\"./manual/asset/logo.png\" />\n  <div class=\"sequelize\"><h1>Sequelize</h1></div>\n</div>\n\n[![npm version](https://badgen.net/npm/v/sequelize)](https://www.npmjs.com/package/sequelize)\n[![Build Status](https://github.com/sequelize/sequelize/workflows/CI/badge.svg)](https://github.com/sequelize/sequelize/actions?query=workflow%3ACI)\n[![npm downloads](https://badgen.net/npm/dm/sequelize)](https://www.npmjs.com/package/sequelize)\n[![sponsor](https://img.shields.io/opencollective/all/sequelize?label=sponsors)](https://opencollective.com/sequelize)\n[![Last commit](https://badgen.net/github/last-commit/sequelize/sequelize)](https://github.com/sequelize/sequelize)\n[![Merged PRs](https://badgen.net/github/merged-prs/sequelize/sequelize)](https://github.com/sequelize/sequelize)\n[![GitHub stars](https://badgen.net/github/stars/sequelize/sequelize)](https://github.com/sequelize/sequelize)\n[![Slack Status](http://sequelize-slack.herokuapp.com/badge.svg)](http://sequelize-slack.herokuapp.com/)\n[![node](https://badgen.net/npm/node/sequelize)](https://www.npmjs.com/package/sequelize)\n[![License](https://badgen.net/github/license/sequelize/sequelize)](https://github.com/sequelize/sequelize/blob/main/LICENSE)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n\nSequelize is a promise-based [Node.js](https://nodejs.org/en/about/) [ORM tool](https://en.wikipedia.org/wiki/Object-relational_mapping) for [Postgres](https://en.wikipedia.org/wiki/PostgreSQL), [MySQL](https://en.wikipedia.org/wiki/MySQL), [MariaDB](https://en.wikipedia.org/wiki/MariaDB), [SQLite](https://en.wikipedia.org/wiki/SQLite), [Microsoft SQL Server](https://en.wikipedia.org/wiki/Microsoft_SQL_Server), [Amazon Redshift](https://docs.aws.amazon.com/redshift/index.html) and [Snowflake’s Data Cloud](https://docs.snowflake.com/en/user-guide/intro-key-concepts.html). It features solid transaction support, relations, eager and lazy loading, read replication and more.\n\nSequelize follows [Semantic Versioning](http://semver.org) and the [official Node.js LTS schedule](https://nodejs.org/en/about/releases/). Version 7 of Sequelize officially supports the Node.js versions `^12.22.0`, `^14.17,0`, `^16.0.0`. Other version might be working as well.\n\nYou are currently looking at the **Tutorials and Guides** for Sequelize. You might also be interested in the [API Reference](identifiers.html).\n\n## Quick example\n\n```js\nconst { Sequelize, Model, DataTypes } = require('sequelize');\nconst sequelize = new Sequelize('sqlite::memory:');\n\nclass User extends Model {}\nUser.init({\n  username: DataTypes.STRING,\n  birthday: DataTypes.DATE\n}, { sequelize, modelName: 'user' });\n\n(async () => {\n  await sequelize.sync();\n  const jane = await User.create({\n    username: 'janedoe',\n    birthday: new Date(1980, 6, 20)\n  });\n  console.log(jane.toJSON());\n})();\n```\n\nTo learn more about how to use Sequelize, read the tutorials available in the left menu. Begin with [Getting Started](manual/getting-started.html).\n\n## Supporting the project\n\nDo you like Sequelize and would like to give back to the engineering team behind it?\n\nWe have recently created an [OpenCollective based money pool](https://opencollective.com/sequelize) which is shared amongst all core maintainers based on their contributions. Every support is wholeheartedly welcome. ❤️\n",
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/docs/index.md",
    "name": "./docs/index.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualAsset",
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/docs/images",
    "name": "./docs/images",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/docs/manual/core-concepts/getting-started.md",
    "name": "docs/manual/core-concepts/getting-started.md",
    "content": "# Getting Started\n\nIn this tutorial you will learn to make a simple setup of Sequelize.\n\n## Installing\n\nSequelize is available via [npm](https://www.npmjs.com/package/sequelize) (or [yarn](https://yarnpkg.com/package/sequelize)).\n\n```sh\n# using npm\nnpm i sequelize # This will install latest version of Sequelize\n# using yarn\nyarn add sequelize\n```\n\nYou'll also have to manually install the driver for your database of choice:\n\n```sh\n# using npm\nnpm i pg pg-hstore # PostgreSQL\nnpm i mysql2 # MySQL\nnpm i mariadb # MariaDB\nnpm i sqlite3 # SQLite\nnpm i tedious # Microsoft SQL Server\nnpm i ibm_db # DB2\n# using yarn\nyarn add pg pg-hstore # PostgreSQL\nyarn add mysql2 # MySQL\nyarn add mariadb # MariaDB\nyarn add sqlite3 # SQLite\nyarn add tedious # Microsoft SQL Server\nyarn add ibm_db # DB2\n```\n\n## Connecting to a database\n\nTo connect to the database, you must create a Sequelize instance. This can be done by either passing the connection parameters separately to the Sequelize constructor or by passing a single connection URI:\n\n```js\nconst { Sequelize } = require('sequelize');\n\n// Option 1: Passing a connection URI\nconst sequelize = new Sequelize('sqlite::memory:') // Example for sqlite\nconst sequelize = new Sequelize('postgres://user:pass@example.com:5432/dbname') // Example for postgres\n\n// Option 2: Passing parameters separately (sqlite)\nconst sequelize = new Sequelize({\n  dialect: 'sqlite',\n  storage: 'path/to/database.sqlite'\n});\n\n// Option 3: Passing parameters separately (other dialects)\nconst sequelize = new Sequelize('database', 'username', 'password', {\n  host: 'localhost',\n  dialect: /* one of 'mysql' | 'mariadb' | 'postgres' | 'mssql' */\n});\n```\n\nThe Sequelize constructor accepts a lot of options. They are documented in the [API Reference](../class/lib/sequelize.js~Sequelize.html#instance-constructor-constructor).\n\n### Testing the connection\n\nYou can use the `.authenticate()` function to test if the connection is OK:\n\n```js\ntry {\n  await sequelize.authenticate();\n  console.log('Connection has been established successfully.');\n} catch (error) {\n  console.error('Unable to connect to the database:', error);\n}\n```\n\n### Closing the connection\n\nSequelize will keep the connection open by default, and use the same connection for all queries. If you need to close the connection, call `sequelize.close()` (which is asynchronous and returns a Promise).\n\n## Terminology convention\n\nObserve that, in the examples above, `Sequelize` refers to the library itself while `sequelize` refers to an instance of Sequelize, which represents a connection to one database. This is the recommended convention and it will be followed throughout the documentation.\n\n## Tip for reading the docs\n\nYou are encouraged to run code examples locally while reading the Sequelize docs. This will help you learn faster. The easiest way to do this is using the SQLite dialect:\n\n```js\nconst { Sequelize, Op, Model, DataTypes } = require(\"sequelize\");\nconst sequelize = new Sequelize(\"sqlite::memory:\");\n\n// Code here! It works!\n```\n\nTo experiment with the other dialects, which are harder to setup locally, you can use the [Sequelize SSCCE](https://github.com/papb/sequelize-sscce) GitHub repository, which allows you to run code on all supported dialects directly from GitHub, for free, without any setup!\n\n## New databases versus existing databases\n\nIf you are starting a project from scratch, and your database is still empty, Sequelize can be used since the beginning in order to automate the creation of every table in your database.\n\nAlso, if you want to use Sequelize to connect to a database that is already filled with tables and data, that works as well! Sequelize has got you covered in both cases.\n\n## Logging\n\nBy default, Sequelize will log to console every SQL query it performs. The `options.logging` option can be used to customize this behavior, by defining the function that gets executed every time Sequelize would log something. The default value is `console.log` and when using that only the first log parameter of log function call is displayed. For example, for query logging the first parameter is the raw query and the second (hidden by default) is the Sequelize object.\n\nCommon useful values for `options.logging`:\n\n```js\nconst sequelize = new Sequelize('sqlite::memory:', {\n  // Choose one of the logging options\n  logging: console.log,                  // Default, displays the first parameter of the log function call\n  logging: (...msg) => console.log(msg), // Displays all log function call parameters\n  logging: false,                        // Disables logging\n  logging: msg => logger.debug(msg),     // Use custom logger (e.g. Winston or Bunyan), displays the first parameter\n  logging: logger.debug.bind(logger)     // Alternative way to use custom logger, displays all messages\n});\n```\n\n## Promises and async/await\n\nMost of the methods provided by Sequelize are asynchronous and therefore return Promises. They are all [Promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) , so you can use the Promise API (for example, using `then`, `catch`, `finally`) out of the box.\n\nOf course, using `async` and `await` works normally as well.\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/docs/manual/core-concepts/model-basics.md",
    "name": "docs/manual/core-concepts/model-basics.md",
    "content": "# Model Basics\n\nIn this tutorial you will learn what models are in Sequelize and how to use them.\n\n## Concept\n\nModels are the essence of Sequelize. A model is an abstraction that represents a table in your database. In Sequelize, it is a class that extends [Model](../class/lib/model.js~Model.html).\n\nThe model tells Sequelize several things about the entity it represents, such as the name of the table in the database and which columns it has (and their data types).\n\nA model in Sequelize has a name. This name does not have to be the same name of the table it represents in the database. Usually, models have singular names (such as `User`) while tables have pluralized names (such as `Users`), although this is fully configurable.\n\n## Model Definition\n\nModels can be defined in two equivalent ways in Sequelize:\n\n* Calling [`sequelize.define(modelName, attributes, options)`](../class/lib/sequelize.js~Sequelize.html#instance-method-define)\n* Extending [Model](../class/lib/model.js~Model.html) and calling [`init(attributes, options)`](../class/lib/model.js~Model.html#static-method-init)\n\nAfter a model is defined, it is available within `sequelize.models` by its model name.\n\nTo learn with an example, we will consider that we want to create a model to represent users, which have a `firstName` and a `lastName`. We want our model to be called `User`, and the table it represents is called `Users` in the database.\n\nBoth ways to define this model are shown below. After being defined, we can access our model with `sequelize.models.User`.\n\n### Using [`sequelize.define`](../class/lib/sequelize.js~Sequelize.html#instance-method-define):\n\n```js\nconst { Sequelize, DataTypes } = require('sequelize');\nconst sequelize = new Sequelize('sqlite::memory:');\n\nconst User = sequelize.define('User', {\n  // Model attributes are defined here\n  firstName: {\n    type: DataTypes.STRING,\n    allowNull: false\n  },\n  lastName: {\n    type: DataTypes.STRING\n    // allowNull defaults to true\n  }\n}, {\n  // Other model options go here\n});\n\n// `sequelize.define` also returns the model\nconsole.log(User === sequelize.models.User); // true\n```\n\n### Extending [Model](../class/lib/model.js~Model.html)\n\n```js\nconst { Sequelize, DataTypes, Model } = require('sequelize');\nconst sequelize = new Sequelize('sqlite::memory:');\n\nclass User extends Model {}\n\nUser.init({\n  // Model attributes are defined here\n  firstName: {\n    type: DataTypes.STRING,\n    allowNull: false\n  },\n  lastName: {\n    type: DataTypes.STRING\n    // allowNull defaults to true\n  }\n}, {\n  // Other model options go here\n  sequelize, // We need to pass the connection instance\n  modelName: 'User' // We need to choose the model name\n});\n\n// the defined model is the class itself\nconsole.log(User === sequelize.models.User); // true\n```\n\nInternally, `sequelize.define` calls `Model.init`, so both approaches are essentially equivalent.\n\n#### Caveat with Public Class Fields\n\nAdding a [Public Class Field](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields) with the same name as one of the model's attribute is going to cause issues.\nSequelize adds a getter & a setter for each attribute defined through `Model.init`.\nAdding a Public Class Field will shadow those getter and setters, blocking access to the model's actual data.\n\n```typescript\n// Invalid\nclass User extends Model {\n  id; // this field will shadow sequelize's getter & setter. It should be removed.\n  otherPublicField; // this field does not shadow anything. It is fine.\n}\n\nUser.init({\n  id: {\n    type: DataTypes.INTEGER,\n    autoIncrement: true,\n    primaryKey: true\n  }\n}, { sequelize });\n\nconst user = new User({ id: 1 });\nuser.id; // undefined\n```\n\n```typescript\n// Valid\nclass User extends Model {\n  otherPublicField;\n}\n\nUser.init({\n  id: {\n    type: DataTypes.INTEGER,\n    autoIncrement: true,\n    primaryKey: true\n  }\n}, { sequelize });\n\nconst user = new User({ id: 1 });\nuser.id; // 1\n```\n\nIn TypeScript, you can add typing information without adding an actual public class field by using the `declare` keyword:\n\n```typescript\n// Valid\nclass User extends Model {\n  declare id: number; // this is ok! The 'declare' keyword ensures this field will not be emitted by TypeScript.\n}\n\nUser.init({\n  id: {\n    type: DataTypes.INTEGER,\n    autoIncrement: true,\n    primaryKey: true\n  }\n}, { sequelize });\n\nconst user = new User({ id: 1 });\nuser.id; // 1\n```\n\n## Table name inference\n\nObserve that, in both methods above, the table name (`Users`) was never explicitly defined. However, the model name was given (`User`).\n\nBy default, when the table name is not given, Sequelize automatically pluralizes the model name and uses that as the table name. This pluralization is done under the hood by a library called [inflection](https://www.npmjs.com/package/inflection), so that irregular plurals (such as `person -> people`) are computed correctly.\n\nOf course, this behavior is easily configurable.\n\n### Enforcing the table name to be equal to the model name\n\nYou can stop the auto-pluralization performed by Sequelize using the `freezeTableName: true` option. This way, Sequelize will infer the table name to be equal to the model name, without any modifications:\n\n```js\nsequelize.define('User', {\n  // ... (attributes)\n}, {\n  freezeTableName: true\n});\n```\n\nThe example above will create a model named `User` pointing to a table also named `User`.\n\nThis behavior can also be defined globally for the sequelize instance, when it is created:\n\n```js\nconst sequelize = new Sequelize('sqlite::memory:', {\n  define: {\n    freezeTableName: true\n  }\n});\n```\n\nThis way, all tables will use the same name as the model name.\n\n### Providing the table name directly\n\nYou can simply tell Sequelize the name of the table directly as well:\n\n```js\nsequelize.define('User', {\n  // ... (attributes)\n}, {\n  tableName: 'Employees'\n});\n```\n\n## Model synchronization\n\nWhen you define a model, you're telling Sequelize a few things about its table in the database. However, what if the table actually doesn't even exist in the database? What if it exists, but it has different columns, less columns, or any other difference?\n\nThis is where model synchronization comes in. A model can be synchronized with the database by calling [`model.sync(options)`](https://sequelize.org/master/class/lib/model.js~Model.html#static-method-sync), an asynchronous function (that returns a Promise). With this call, Sequelize will automatically perform an SQL query to the database. Note that this changes only the table in the database, not the model in the JavaScript side.\n\n* `User.sync()` - This creates the table if it doesn't exist (and does nothing if it already exists)\n* `User.sync({ force: true })` - This creates the table, dropping it first if it already existed\n* `User.sync({ alter: true })` - This checks what is the current state of the table in the database (which columns it has, what are their data types, etc), and then performs the necessary changes in the table to make it match the model.\n\nExample:\n\n```js\nawait User.sync({ force: true });\nconsole.log(\"The table for the User model was just (re)created!\");\n```\n\n### Synchronizing all models at once\n\nYou can use [`sequelize.sync()`](../class/lib/sequelize.js~Sequelize.html#instance-method-sync) to automatically synchronize all models. Example:\n\n```js\nawait sequelize.sync({ force: true });\nconsole.log(\"All models were synchronized successfully.\");\n```\n\n### Dropping tables\n\nTo drop the table related to a model:\n\n```js\nawait User.drop();\nconsole.log(\"User table dropped!\");\n```\n\nTo drop all tables:\n\n```js\nawait sequelize.drop();\nconsole.log(\"All tables dropped!\");\n```\n\n### Database safety check\n\nAs shown above, the `sync` and `drop` operations are destructive. Sequelize accepts a `match` option as an additional safety check, which receives a RegExp:\n\n```js\n// This will run .sync() only if database name ends with '_test'\nsequelize.sync({ force: true, match: /_test$/ });\n```\n\n### Synchronization in production\n\nAs shown above, `sync({ force: true })` and `sync({ alter: true })` can be destructive operations. Therefore, they are not recommended for production-level software. Instead, synchronization should be done with the advanced concept of [Migrations](migrations.html), with the help of the [Sequelize CLI](https://github.com/sequelize/cli).\n\n## Timestamps\n\nBy default, Sequelize automatically adds the fields `createdAt` and `updatedAt` to every model, using the data type `DataTypes.DATE`. Those fields are automatically managed as well - whenever you use Sequelize to create or update something, those fields will be set correctly. The `createdAt` field will contain the timestamp representing the moment of creation, and the `updatedAt` will contain the timestamp of the latest update.\n\n**Note:** This is done in the Sequelize level (i.e. not done with *SQL triggers*). This means that direct SQL queries (for example queries performed without Sequelize by any other means) will not cause these fields to be updated automatically.\n\nThis behavior can be disabled for a model with the `timestamps: false` option:\n\n```js\nsequelize.define('User', {\n  // ... (attributes)\n}, {\n  timestamps: false\n});\n```\n\nIt is also possible to enable only one of `createdAt`/`updatedAt`, and to provide a custom name for these columns:\n\n```js\nclass Foo extends Model {}\nFoo.init({ /* attributes */ }, {\n  sequelize,\n\n  // don't forget to enable timestamps!\n  timestamps: true,\n\n  // I don't want createdAt\n  createdAt: false,\n\n  // I want updatedAt to actually be called updateTimestamp\n  updatedAt: 'updateTimestamp'\n});\n```\n\n## Column declaration shorthand syntax\n\nIf the only thing being specified about a column is its data type, the syntax can be shortened:\n\n```js\n// This:\nsequelize.define('User', {\n  name: {\n    type: DataTypes.STRING\n  }\n});\n\n// Can be simplified to:\nsequelize.define('User', { name: DataTypes.STRING });\n```\n\n## Default Values\n\nBy default, Sequelize assumes that the default value of a column is `NULL`. This behavior can be changed by passing a specific `defaultValue` to the column definition:\n\n```js\nsequelize.define('User', {\n  name: {\n    type: DataTypes.STRING,\n    defaultValue: \"John Doe\"\n  }\n});\n```\n\nSome special values, such as `DataTypes.NOW`, are also accepted:\n\n```js\nsequelize.define('Foo', {\n  bar: {\n    type: DataTypes.DATETIME,\n    defaultValue: DataTypes.NOW\n    // This way, the current date/time will be used to populate this column (at the moment of insertion)\n  }\n});\n```\n\n## Data Types\n\nEvery column you define in your model must have a data type. Sequelize provides [a lot of built-in data types](https://github.com/sequelize/sequelize/blob/main/lib/data-types.js). To access a built-in data type, you must import `DataTypes`:\n\n```js\nconst { DataTypes } = require(\"sequelize\"); // Import the built-in data types\n```\n\n### Strings\n\n```js\nDataTypes.STRING             // VARCHAR(255)\nDataTypes.STRING(1234)       // VARCHAR(1234)\nDataTypes.STRING.BINARY      // VARCHAR BINARY\nDataTypes.TEXT               // TEXT\nDataTypes.TEXT('tiny')       // TINYTEXT\nDataTypes.CITEXT             // CITEXT          PostgreSQL and SQLite only.\nDataTypes.TSVECTOR           // TSVECTOR        PostgreSQL only.\n```\n\n### Boolean\n\n```js\nDataTypes.BOOLEAN            // TINYINT(1)\n```\n\n### Numbers\n\n```js\nDataTypes.INTEGER            // INTEGER\nDataTypes.BIGINT             // BIGINT\nDataTypes.BIGINT(11)         // BIGINT(11)\n\nDataTypes.FLOAT              // FLOAT\nDataTypes.FLOAT(11)          // FLOAT(11)\nDataTypes.FLOAT(11, 10)      // FLOAT(11,10)\n\nDataTypes.REAL               // REAL            PostgreSQL only.\nDataTypes.REAL(11)           // REAL(11)        PostgreSQL only.\nDataTypes.REAL(11, 12)       // REAL(11,12)     PostgreSQL only.\n\nDataTypes.DOUBLE             // DOUBLE\nDataTypes.DOUBLE(11)         // DOUBLE(11)\nDataTypes.DOUBLE(11, 10)     // DOUBLE(11,10)\n\nDataTypes.DECIMAL            // DECIMAL\nDataTypes.DECIMAL(10, 2)     // DECIMAL(10,2)\n```\n\n#### Unsigned & Zerofill integers - MySQL/MariaDB only\n\nIn MySQL and MariaDB, the data types `INTEGER`, `BIGINT`, `FLOAT` and `DOUBLE` can be set as unsigned or zerofill (or both), as follows:\n\n```js\nDataTypes.INTEGER.UNSIGNED\nDataTypes.INTEGER.ZEROFILL\nDataTypes.INTEGER.UNSIGNED.ZEROFILL\n// You can also specify the size i.e. INTEGER(10) instead of simply INTEGER\n// Same for BIGINT, FLOAT and DOUBLE\n```\n\n### Dates\n\n```js\nDataTypes.DATE       // DATETIME for mysql / sqlite, TIMESTAMP WITH TIME ZONE for postgres\nDataTypes.DATE(6)    // DATETIME(6) for mysql 5.6.4+. Fractional seconds support with up to 6 digits of precision\nDataTypes.DATEONLY   // DATE without time\n```\n\n### UUIDs\n\nFor UUIDs, use `DataTypes.UUID`. It becomes the `UUID` data type for PostgreSQL and SQLite, and `CHAR(36)` for MySQL. Sequelize can generate UUIDs automatically for these fields, simply use `DataTypes.UUIDV1` or `DataTypes.UUIDV4` as the default value:\n\n```js\n{\n  type: DataTypes.UUID,\n  defaultValue: DataTypes.UUIDV4 // Or DataTypes.UUIDV1\n}\n```\n\n### Others\n\nThere are other data types, covered in a [separate guide](other-data-types.html).\n\n## Column Options\n\nWhen defining a column, apart from specifying the `type` of the column, and the `allowNull` and `defaultValue` options mentioned above, there are a lot more options that can be used. Some examples are below.\n\n```js\nconst { Model, DataTypes, Deferrable } = require(\"sequelize\");\n\nclass Foo extends Model {}\nFoo.init({\n  // instantiating will automatically set the flag to true if not set\n  flag: { type: DataTypes.BOOLEAN, allowNull: false, defaultValue: true },\n\n  // default values for dates => current time\n  myDate: { type: DataTypes.DATE, defaultValue: DataTypes.NOW },\n\n  // setting allowNull to false will add NOT NULL to the column, which means an error will be\n  // thrown from the DB when the query is executed if the column is null. If you want to check that a value\n  // is not null before querying the DB, look at the validations section below.\n  title: { type: DataTypes.STRING, allowNull: false },\n\n  // Creating two objects with the same value will throw an error. The unique property can be either a\n  // boolean, or a string. If you provide the same string for multiple columns, they will form a\n  // composite unique key.\n  uniqueOne: { type: DataTypes.STRING,  unique: 'compositeIndex' },\n  uniqueTwo: { type: DataTypes.INTEGER, unique: 'compositeIndex' },\n\n  // The unique property is simply a shorthand to create a unique constraint.\n  someUnique: { type: DataTypes.STRING, unique: true },\n\n  // Go on reading for further information about primary keys\n  identifier: { type: DataTypes.STRING, primaryKey: true },\n\n  // autoIncrement can be used to create auto_incrementing integer columns\n  incrementMe: { type: DataTypes.INTEGER, autoIncrement: true },\n\n  // You can specify a custom column name via the 'field' attribute:\n  fieldWithUnderscores: { type: DataTypes.STRING, field: 'field_with_underscores' },\n\n  // It is possible to create foreign keys:\n  bar_id: {\n    type: DataTypes.INTEGER,\n\n    references: {\n      // This is a reference to another model\n      model: Bar,\n\n      // This is the column name of the referenced model\n      key: 'id',\n\n      // With PostgreSQL, it is optionally possible to declare when to check the foreign key constraint, passing the Deferrable type.\n      deferrable: Deferrable.INITIALLY_IMMEDIATE\n      // Options:\n      // - `Deferrable.INITIALLY_IMMEDIATE` - Immediately check the foreign key constraints\n      // - `Deferrable.INITIALLY_DEFERRED` - Defer all foreign key constraint check to the end of a transaction\n      // - `Deferrable.NOT` - Don't defer the checks at all (default) - This won't allow you to dynamically change the rule in a transaction\n    }\n  },\n\n  // Comments can only be added to columns in MySQL, MariaDB, PostgreSQL and MSSQL\n  commentMe: {\n    type: DataTypes.INTEGER,\n    comment: 'This is a column name that has a comment'\n  }\n}, {\n  sequelize,\n  modelName: 'foo',\n\n  // Using `unique: true` in an attribute above is exactly the same as creating the index in the model's options:\n  indexes: [{ unique: true, fields: ['someUnique'] }]\n});\n```\n\n## Taking advantage of Models being classes\n\nThe Sequelize models are [ES6 classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes). You can very easily add custom instance or class level methods.\n\n```js\nclass User extends Model {\n  static classLevelMethod() {\n    return 'foo';\n  }\n  instanceLevelMethod() {\n    return 'bar';\n  }\n  getFullname() {\n    return [this.firstname, this.lastname].join(' ');\n  }\n}\nUser.init({\n  firstname: Sequelize.TEXT,\n  lastname: Sequelize.TEXT\n}, { sequelize });\n\nconsole.log(User.classLevelMethod()); // 'foo'\nconst user = User.build({ firstname: 'Jane', lastname: 'Doe' });\nconsole.log(user.instanceLevelMethod()); // 'bar'\nconsole.log(user.getFullname()); // 'Jane Doe'\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/docs/manual/core-concepts/model-instances.md",
    "name": "docs/manual/core-concepts/model-instances.md",
    "content": "# Model Instances\r\n\r\nAs you already know, a model is an [ES6 class](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes). An instance of the class represents one object from that model (which maps to one row of the table in the database). This way, model instances are [DAOs](https://en.wikipedia.org/wiki/Data_access_object).\r\n\r\nFor this guide, the following setup will be assumed:\r\n\r\n```js\r\nconst { Sequelize, Model, DataTypes } = require(\"sequelize\");\r\nconst sequelize = new Sequelize(\"sqlite::memory:\");\r\n\r\nconst User = sequelize.define(\"user\", {\r\n  name: DataTypes.TEXT,\r\n  favoriteColor: {\r\n    type: DataTypes.TEXT,\r\n    defaultValue: 'green'\r\n  },\r\n  age: DataTypes.INTEGER,\r\n  cash: DataTypes.INTEGER\r\n});\r\n\r\n(async () => {\r\n  await sequelize.sync({ force: true });\r\n  // Code here\r\n})();\r\n```\r\n\r\n## Creating an instance\r\n\r\nAlthough a model is a class, you should not create instances by using the `new` operator directly. Instead, the [`build`](../class/lib/model.js~Model.html#static-method-build) method should be used:\r\n\r\n```js\r\nconst jane = User.build({ name: \"Jane\" });\r\nconsole.log(jane instanceof User); // true\r\nconsole.log(jane.name); // \"Jane\"\r\n```\r\n\r\nHowever, the code above does not communicate with the database at all (note that it is not even asynchronous)! This is because the [`build`](../class/lib/model.js~Model.html#static-method-build) method only creates an object that *represents* data that *can* be mapped to a database. In order to really save (i.e. persist) this instance in the database, the [`save`](../class/lib/model.js~Model.html#instance-method-save) method should be used:\r\n\r\n```js\r\nawait jane.save();\r\nconsole.log('Jane was saved to the database!');\r\n```\r\n\r\nNote, from the usage of `await` in the snippet above, that `save` is an asynchronous method. In fact, almost every Sequelize method is asynchronous; `build` is one of the very few exceptions.\r\n\r\n### A very useful shortcut: the `create` method\r\n\r\nSequelize provides the [`create`](../class/lib/model.js~Model.html#static-method-create) method, which combines the `build` and `save` methods shown above into a single method:\r\n\r\n```js\r\nconst jane = await User.create({ name: \"Jane\" });\r\n// Jane exists in the database now!\r\nconsole.log(jane instanceof User); // true\r\nconsole.log(jane.name); // \"Jane\"\r\n```\r\n\r\n## Note: logging instances\r\n\r\nTrying to log a model instance directly to `console.log` will produce a lot of clutter, since Sequelize instances have a lot of things attached to them. Instead, you can use the `.toJSON()` method (which, by the way, automatically guarantees the instances to be `JSON.stringify`-ed well).\r\n\r\n```js\r\nconst jane = await User.create({ name: \"Jane\" });\r\n// console.log(jane); // Don't do this\r\nconsole.log(jane.toJSON()); // This is good!\r\nconsole.log(JSON.stringify(jane, null, 4)); // This is also good!\r\n```\r\n\r\n## Default values\r\n\r\nBuilt instances will automatically get default values:\r\n\r\n```js\r\nconst jane = User.build({ name: \"Jane\" });\r\nconsole.log(jane.favoriteColor); // \"green\"\r\n```\r\n\r\n## Updating an instance\r\n\r\nIf you change the value of some field of an instance, calling `save` again will update it accordingly:\r\n\r\n```js\r\nconst jane = await User.create({ name: \"Jane\" });\r\nconsole.log(jane.name); // \"Jane\"\r\njane.name = \"Ada\";\r\n// the name is still \"Jane\" in the database\r\nawait jane.save();\r\n// Now the name was updated to \"Ada\" in the database!\r\n```\r\n\r\nYou can update several fields at once with the [`set`](../class/lib/model.js~Model.html#instance-method-set) method:\r\n\r\n```js\r\nconst jane = await User.create({ name: \"Jane\" });\r\n\r\njane.set({\r\n  name: \"Ada\",\r\n  favoriteColor: \"blue\"\r\n});\r\n// As above, the database still has \"Jane\" and \"green\"\r\nawait jane.save();\r\n// The database now has \"Ada\" and \"blue\" for name and favorite color\r\n```\r\n\r\nNote that the `save()` here will also persist any other changes that have been made on this instance, not just those in the previous `set` call. If you want to update a specific set of fields, you can use [`update`](../class/lib/model.js~Model.html#instance-method-update):\r\n\r\n```js\r\nconst jane = await User.create({ name: \"Jane\" });\r\njane.favoriteColor = \"blue\"\r\nawait jane.update({ name: \"Ada\" })\r\n// The database now has \"Ada\" for name, but still has the default \"green\" for favorite color\r\nawait jane.save()\r\n// Now the database has \"Ada\" for name and \"blue\" for favorite color\r\n```\r\n\r\n## Deleting an instance\r\n\r\nYou can delete an instance by calling [`destroy`](../class/lib/model.js~Model.html#instance-method-destroy):\r\n\r\n```js\r\nconst jane = await User.create({ name: \"Jane\" });\r\nconsole.log(jane.name); // \"Jane\"\r\nawait jane.destroy();\r\n// Now this entry was removed from the database\r\n```\r\n\r\n## Reloading an instance\r\n\r\nYou can reload an instance from the database by calling [`reload`](../class/lib/model.js~Model.html#instance-method-reload):\r\n\r\n```js\r\nconst jane = await User.create({ name: \"Jane\" });\r\nconsole.log(jane.name); // \"Jane\"\r\njane.name = \"Ada\";\r\n// the name is still \"Jane\" in the database\r\nawait jane.reload();\r\nconsole.log(jane.name); // \"Jane\"\r\n```\r\n\r\nThe reload call generates a `SELECT` query to get the up-to-date data from the database.\r\n\r\n## Saving only some fields\r\n\r\nIt is possible to define which attributes should be saved when calling `save`, by passing an array of column names.\r\n\r\nThis is useful when you set attributes based on a previously defined object, for example, when you get the values of an object via a form of a web app. Furthermore, this is used internally in the `update` implementation. This is how it looks like:\r\n\r\n```js\r\nconst jane = await User.create({ name: \"Jane\" });\r\nconsole.log(jane.name); // \"Jane\"\r\nconsole.log(jane.favoriteColor); // \"green\"\r\njane.name = \"Jane II\";\r\njane.favoriteColor = \"blue\";\r\nawait jane.save({ fields: ['name'] });\r\nconsole.log(jane.name); // \"Jane II\"\r\nconsole.log(jane.favoriteColor); // \"blue\"\r\n// The above printed blue because the local object has it set to blue, but\r\n// in the database it is still \"green\":\r\nawait jane.reload();\r\nconsole.log(jane.name); // \"Jane II\"\r\nconsole.log(jane.favoriteColor); // \"green\"\r\n```\r\n\r\n## Change-awareness of save\r\n\r\nThe `save` method is optimized internally to only update fields that really changed. This means that if you don't change anything and call `save`, Sequelize will know that the save is superfluous and do nothing, i.e., no query will be generated (it will still return a Promise, but it will resolve immediately).\r\n\r\nAlso, if only a few attributes have changed when you call `save`, only those fields will be sent in the `UPDATE` query, to improve performance.\r\n\r\n## Incrementing and decrementing integer values\r\n\r\nIn order to increment/decrement values of an instance without running into concurrency issues, Sequelize provides the [`increment`](../class/lib/model.js~Model.html#instance-method-increment) and [`decrement`](../class/lib/model.js~Model.html#instance-method-decrement) instance methods.\r\n\r\n```js\r\nconst jane = await User.create({ name: \"Jane\", age: 100 });\r\nconst incrementResult = await jane.increment('age', { by: 2 });\r\n// Note: to increment by 1 you can omit the `by` option and just do `user.increment('age')`\r\n\r\n// In PostgreSQL, `incrementResult` will be the updated user, unless the option\r\n// `{ returning: false }` was set (and then it will be undefined).\r\n\r\n// In other dialects, `incrementResult` will be undefined. If you need the updated instance, you will have to call `user.reload()`.\r\n```\r\n\r\nYou can also increment multiple fields at once:\r\n\r\n```js\r\nconst jane = await User.create({ name: \"Jane\", age: 100, cash: 5000 });\r\nawait jane.increment({\r\n  'age': 2,\r\n  'cash': 100\r\n});\r\n\r\n// If the values are incremented by the same amount, you can use this other syntax as well:\r\nawait jane.increment(['age', 'cash'], { by: 2 });\r\n```\r\n\r\nDecrementing works in the exact same way.\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/docs/manual/core-concepts/model-querying-basics.md",
    "name": "docs/manual/core-concepts/model-querying-basics.md",
    "content": "# Model Querying - Basics\n\nSequelize provides various methods to assist querying your database for data.\n\n*Important notice: to perform production-ready queries with Sequelize, make sure you have read the [Transactions guide](transactions.html) as well. Transactions are important to ensure data integrity and to provide other benefits.*\n\nThis guide will show how to make the standard [CRUD](https://en.wikipedia.org/wiki/Create,_read,_update_and_delete) queries.\n\n## Simple INSERT queries\n\nFirst, a simple example:\n\n```js\n// Create a new user\nconst jane = await User.create({ firstName: \"Jane\", lastName: \"Doe\" });\nconsole.log(\"Jane's auto-generated ID:\", jane.id);\n```\n\nThe [`Model.create()`](../class/lib/model.js~Model.html#static-method-create) method is a shorthand for building an unsaved instance with [`Model.build()`](../class/lib/model.js~Model.html#static-method-build) and saving the instance with [`instance.save()`](../class/lib/model.js~Model.html#instance-method-save).\n\nIt is also possible to define which attributes can be set in the `create` method. This can be especially useful if you create database entries based on a form which can be filled by a user. Using that would, for example, allow you to restrict the `User` model to set only an username but not an admin flag (i.e., `isAdmin`):\n\n```js\nconst user = await User.create({\n  username: 'alice123',\n  isAdmin: true\n}, { fields: ['username'] });\n// let's assume the default of isAdmin is false\nconsole.log(user.username); // 'alice123'\nconsole.log(user.isAdmin); // false\n```\n\n## Simple SELECT queries\n\nYou can read the whole table from the database with the [`findAll`](../class/lib/model.js~Model.html#static-method-findAll) method:\n\n```js\n// Find all users\nconst users = await User.findAll();\nconsole.log(users.every(user => user instanceof User)); // true\nconsole.log(\"All users:\", JSON.stringify(users, null, 2));\n```\n\n```sql\nSELECT * FROM ...\n```\n\n## Specifying attributes for SELECT queries\n\nTo select only some attributes, you can use the `attributes` option:\n\n```js\nModel.findAll({\n  attributes: ['foo', 'bar']\n});\n```\n\n```sql\nSELECT foo, bar FROM ...\n```\n\nAttributes can be renamed using a nested array:\n\n```js\nModel.findAll({\n  attributes: ['foo', ['bar', 'baz'], 'qux']\n});\n```\n\n```sql\nSELECT foo, bar AS baz, qux FROM ...\n```\n\nYou can use [`sequelize.fn`](../class/lib/sequelize.js~Sequelize.html#static-method-fn) to do aggregations:\n\n```js\nModel.findAll({\n  attributes: [\n    'foo',\n    [sequelize.fn('COUNT', sequelize.col('hats')), 'n_hats'],\n    'bar'\n  ]\n});\n```\n\n```sql\nSELECT foo, COUNT(hats) AS n_hats, bar FROM ...\n```\n\nWhen using aggregation function, you must give it an alias to be able to access it from the model. In the example above you can get the number of hats with `instance.n_hats`.\n\nSometimes it may be tiresome to list all the attributes of the model if you only want to add an aggregation:\n\n```js\n// This is a tiresome way of getting the number of hats (along with every column)\nModel.findAll({\n  attributes: [\n    'id', 'foo', 'bar', 'baz', 'qux', 'hats', // We had to list all attributes...\n    [sequelize.fn('COUNT', sequelize.col('hats')), 'n_hats'] // To add the aggregation...\n  ]\n});\n\n// This is shorter, and less error prone because it still works if you add / remove attributes from your model later\nModel.findAll({\n  attributes: {\n    include: [\n      [sequelize.fn('COUNT', sequelize.col('hats')), 'n_hats']\n    ]\n  }\n});\n```\n\n```sql\nSELECT id, foo, bar, baz, qux, hats, COUNT(hats) AS n_hats FROM ...\n```\n\nSimilarly, it's also possible to remove a selected few attributes:\n\n```js\nModel.findAll({\n  attributes: { exclude: ['baz'] }\n});\n```\n\n```sql\n-- Assuming all columns are 'id', 'foo', 'bar', 'baz' and 'qux'\nSELECT id, foo, bar, qux FROM ...\n```\n\n## Applying WHERE clauses\n\nThe `where` option is used to filter the query. There are lots of operators to use for the `where` clause, available as Symbols from [`Op`](../variable/index.html#static-variable-Op).\n\n### The basics\n\n```js\nPost.findAll({\n  where: {\n    authorId: 2\n  }\n});\n// SELECT * FROM post WHERE authorId = 2;\n```\n\nObserve that no operator (from `Op`) was explicitly passed, so Sequelize assumed an equality comparison by default. The above code is equivalent to:\n\n```js\nconst { Op } = require(\"sequelize\");\nPost.findAll({\n  where: {\n    authorId: {\n      [Op.eq]: 2\n    }\n  }\n});\n// SELECT * FROM post WHERE authorId = 2;\n```\n\nMultiple checks can be passed:\n\n```js\nPost.findAll({\n  where: {\n    authorId: 12,\n    status: 'active'\n  }\n});\n// SELECT * FROM post WHERE authorId = 12 AND status = 'active';\n```\n\nJust like Sequelize inferred the `Op.eq` operator in the first example, here Sequelize inferred that the caller wanted an `AND` for the two checks. The code above is equivalent to:\n\n```js\nconst { Op } = require(\"sequelize\");\nPost.findAll({\n  where: {\n    [Op.and]: [\n      { authorId: 12 },\n      { status: 'active' }\n    ]\n  }\n});\n// SELECT * FROM post WHERE authorId = 12 AND status = 'active';\n```\n\nAn `OR` can be easily performed in a similar way:\n\n```js\nconst { Op } = require(\"sequelize\");\nPost.findAll({\n  where: {\n    [Op.or]: [\n      { authorId: 12 },\n      { authorId: 13 }\n    ]\n  }\n});\n// SELECT * FROM post WHERE authorId = 12 OR authorId = 13;\n```\n\nSince the above was an `OR` involving the same field, Sequelize allows you to use a slightly different structure which is more readable and generates the same behavior:\n\n```js\nconst { Op } = require(\"sequelize\");\nPost.destroy({\n  where: {\n    authorId: {\n      [Op.or]: [12, 13]\n    }\n  }\n});\n// DELETE FROM post WHERE authorId = 12 OR authorId = 13;\n```\n\n### Operators\n\nSequelize provides several operators.\n\n```js\nconst { Op } = require(\"sequelize\");\nPost.findAll({\n  where: {\n    [Op.and]: [{ a: 5 }, { b: 6 }],            // (a = 5) AND (b = 6)\n    [Op.or]: [{ a: 5 }, { b: 6 }],             // (a = 5) OR (b = 6)\n    someAttribute: {\n      // Basics\n      [Op.eq]: 3,                              // = 3\n      [Op.ne]: 20,                             // != 20\n      [Op.is]: null,                           // IS NULL\n      [Op.not]: true,                          // IS NOT TRUE\n      [Op.or]: [5, 6],                         // (someAttribute = 5) OR (someAttribute = 6)\n\n      // Using dialect specific column identifiers (PG in the following example):\n      [Op.col]: 'user.organization_id',        // = \"user\".\"organization_id\"\n\n      // Number comparisons\n      [Op.gt]: 6,                              // > 6\n      [Op.gte]: 6,                             // >= 6\n      [Op.lt]: 10,                             // < 10\n      [Op.lte]: 10,                            // <= 10\n      [Op.between]: [6, 10],                   // BETWEEN 6 AND 10\n      [Op.notBetween]: [11, 15],               // NOT BETWEEN 11 AND 15\n\n      // Other operators\n\n      [Op.all]: sequelize.literal('SELECT 1'), // > ALL (SELECT 1)\n\n      [Op.in]: [1, 2],                         // IN [1, 2]\n      [Op.notIn]: [1, 2],                      // NOT IN [1, 2]\n\n      [Op.like]: '%hat',                       // LIKE '%hat'\n      [Op.notLike]: '%hat',                    // NOT LIKE '%hat'\n      [Op.startsWith]: 'hat',                  // LIKE 'hat%'\n      [Op.endsWith]: 'hat',                    // LIKE '%hat'\n      [Op.substring]: 'hat',                   // LIKE '%hat%'\n      [Op.iLike]: '%hat',                      // ILIKE '%hat' (case insensitive) (PG only)\n      [Op.notILike]: '%hat',                   // NOT ILIKE '%hat'  (PG only)\n      [Op.regexp]: '^[h|a|t]',                 // REGEXP/~ '^[h|a|t]' (MySQL/PG only)\n      [Op.notRegexp]: '^[h|a|t]',              // NOT REGEXP/!~ '^[h|a|t]' (MySQL/PG only)\n      [Op.iRegexp]: '^[h|a|t]',                // ~* '^[h|a|t]' (PG only)\n      [Op.notIRegexp]: '^[h|a|t]',             // !~* '^[h|a|t]' (PG only)\n\n      [Op.any]: [2, 3],                        // ANY ARRAY[2, 3]::INTEGER (PG only)\n      [Op.match]: Sequelize.fn('to_tsquery', 'fat & rat') // match text search for strings 'fat' and 'rat' (PG only)\n\n      // In Postgres, Op.like/Op.iLike/Op.notLike can be combined to Op.any:\n      [Op.like]: { [Op.any]: ['cat', 'hat'] }  // LIKE ANY ARRAY['cat', 'hat']\n\n      // There are more postgres-only range operators, see below\n    }\n  }\n});\n```\n\n#### Shorthand syntax for `Op.in`\n\nPassing an array directly to the `where` option will implicitly use the `IN` operator:\n\n```js\nPost.findAll({\n  where: {\n    id: [1,2,3] // Same as using `id: { [Op.in]: [1,2,3] }`\n  }\n});\n// SELECT ... FROM \"posts\" AS \"post\" WHERE \"post\".\"id\" IN (1, 2, 3);\n```\n\n### Logical combinations with operators\n\nThe operators `Op.and`, `Op.or` and `Op.not` can be used to create arbitrarily complex nested logical comparisons.\n\n#### Examples with `Op.and` and `Op.or`\n\n```js\nconst { Op } = require(\"sequelize\");\n\nFoo.findAll({\n  where: {\n    rank: {\n      [Op.or]: {\n        [Op.lt]: 1000,\n        [Op.eq]: null\n      }\n    },\n    // rank < 1000 OR rank IS NULL\n\n    {\n      createdAt: {\n        [Op.lt]: new Date(),\n        [Op.gt]: new Date(new Date() - 24 * 60 * 60 * 1000)\n      }\n    },\n    // createdAt < [timestamp] AND createdAt > [timestamp]\n\n    {\n      [Op.or]: [\n        {\n          title: {\n            [Op.like]: 'Boat%'\n          }\n        },\n        {\n          description: {\n            [Op.like]: '%boat%'\n          }\n        }\n      ]\n    }\n    // title LIKE 'Boat%' OR description LIKE '%boat%'\n  }\n});\n```\n\n#### Examples with `Op.not`\n\n```js\nProject.findAll({\n  where: {\n    name: 'Some Project',\n    [Op.not]: [\n      { id: [1,2,3] },\n      {\n        description: {\n          [Op.like]: 'Hello%'\n        }\n      }\n    ]\n  }\n});\n```\n\nThe above will generate:\n\n```sql\nSELECT *\nFROM `Projects`\nWHERE (\n  `Projects`.`name` = 'Some Project'\n  AND NOT (\n    `Projects`.`id` IN (1,2,3)\n    AND\n    `Projects`.`description` LIKE 'Hello%'\n  )\n)\n```\n\n### Advanced queries with functions (not just columns)\n\nWhat if you wanted to obtain something like `WHERE char_length(\"content\") = 7`?\n\n```js\nPost.findAll({\n  where: sequelize.where(sequelize.fn('char_length', sequelize.col('content')), 7)\n});\n// SELECT ... FROM \"posts\" AS \"post\" WHERE char_length(\"content\") = 7\n```\n\nNote the usage of the  [`sequelize.fn`](../class/lib/sequelize.js~Sequelize.html#static-method-fn) and [`sequelize.col`](../class/lib/sequelize.js~Sequelize.html#static-method-col) methods, which should be used to specify an SQL function call and a table column, respectively. These methods should be used instead of passing a plain string (such as `char_length(content)`) because Sequelize needs to treat this situation differently (for example, using other symbol escaping approaches).\n\nWhat if you need something even more complex?\n\n```js\nPost.findAll({\n  where: {\n    [Op.or]: [\n      sequelize.where(sequelize.fn('char_length', sequelize.col('content')), 7),\n      {\n        content: {\n          [Op.like]: 'Hello%'\n        }\n      },\n      {\n        [Op.and]: [\n          { status: 'draft' },\n          sequelize.where(sequelize.fn('char_length', sequelize.col('content')), {\n            [Op.gt]: 10\n          })\n        ]\n      }\n    ]\n  }\n});\n```\n\nThe above generates the following SQL:\n\n```sql\nSELECT\n  ...\nFROM \"posts\" AS \"post\"\nWHERE (\n  char_length(\"content\") = 7\n  OR\n  \"post\".\"content\" LIKE 'Hello%'\n  OR (\n    \"post\".\"status\" = 'draft'\n    AND\n    char_length(\"content\") > 10\n  )\n)\n```\n\n### Postgres-only Range Operators\n\nRange types can be queried with all supported operators.\n\nKeep in mind, the provided range value can [define the bound inclusion/exclusion](data-types.html#range-types) as well.\n\n```js\n[Op.contains]: 2,            // @> '2'::integer  (PG range contains element operator)\n[Op.contains]: [1, 2],       // @> [1, 2)        (PG range contains range operator)\n[Op.contained]: [1, 2],      // <@ [1, 2)        (PG range is contained by operator)\n[Op.overlap]: [1, 2],        // && [1, 2)        (PG range overlap (have points in common) operator)\n[Op.adjacent]: [1, 2],       // -|- [1, 2)       (PG range is adjacent to operator)\n[Op.strictLeft]: [1, 2],     // << [1, 2)        (PG range strictly left of operator)\n[Op.strictRight]: [1, 2],    // >> [1, 2)        (PG range strictly right of operator)\n[Op.noExtendRight]: [1, 2],  // &< [1, 2)        (PG range does not extend to the right of operator)\n[Op.noExtendLeft]: [1, 2],   // &> [1, 2)        (PG range does not extend to the left of operator)\n```\n\n### Deprecated: Operator Aliases\n\nIn Sequelize v4, it was possible to specify strings to refer to operators, instead of using Symbols. This is now deprecated and heavily discouraged, and will probably be removed in the next major version. If you really need it, you can pass the `operatorAliases` option in the Sequelize constructor.\n\nFor example:\n\n```js\nconst { Sequelize, Op } = require(\"sequelize\");\nconst sequelize = new Sequelize('sqlite::memory:', {\n  operatorsAliases: {\n    $gt: Op.gt\n  }\n});\n\n// Now we can use `$gt` instead of `[Op.gt]` in where clauses:\nFoo.findAll({\n  where: {\n    $gt: 6 // Works like using [Op.gt]\n  }\n});\n```\n\n## Simple UPDATE queries\n\nUpdate queries also accept the `where` option, just like the read queries shown above.\n\n```js\n// Change everyone without a last name to \"Doe\"\nawait User.update({ lastName: \"Doe\" }, {\n  where: {\n    lastName: null\n  }\n});\n```\n\n## Simple DELETE queries\n\nDelete queries also accept the `where` option, just like the read queries shown above.\n\n```js\n// Delete everyone named \"Jane\"\nawait User.destroy({\n  where: {\n    firstName: \"Jane\"\n  }\n});\n```\n\nTo destroy everything the `TRUNCATE` SQL can be used:\n\n```js\n// Truncate the table\nawait User.destroy({\n  truncate: true\n});\n```\n\n## Creating in bulk\n\nSequelize provides the `Model.bulkCreate` method to allow creating multiple records at once, with only one query.\n\nThe usage of `Model.bulkCreate` is very similar to `Model.create`, by receiving an array of objects instead of a single object.\n\n```js\nconst captains = await Captain.bulkCreate([\n  { name: 'Jack Sparrow' },\n  { name: 'Davy Jones' }\n]);\nconsole.log(captains.length); // 2\nconsole.log(captains[0] instanceof Captain); // true\nconsole.log(captains[0].name); // 'Jack Sparrow'\nconsole.log(captains[0].id); // 1 // (or another auto-generated value)\n```\n\nHowever, by default, `bulkCreate` does not run validations on each object that is going to be created (which `create` does). To make `bulkCreate` run these validations as well, you must pass the `validate: true` option. This will decrease performance. Usage example:\n\n```js\nconst Foo = sequelize.define('foo', {\n  bar: {\n    type: DataTypes.TEXT,\n    validate: {\n      len: [4, 6]\n    }\n  }\n});\n\n// This will not throw an error, both instances will be created\nawait Foo.bulkCreate([\n  { name: 'abc123' },\n  { name: 'name too long' }\n]);\n\n// This will throw an error, nothing will be created\nawait Foo.bulkCreate([\n  { name: 'abc123' },\n  { name: 'name too long' }\n], { validate: true });\n```\n\nIf you are accepting values directly from the user, it might be beneficial to limit the columns that you want to actually insert. To support this, `bulkCreate()` accepts a `fields` option, an array defining which fields must be considered (the rest will be ignored).\n\n```js\nawait User.bulkCreate([\n  { username: 'foo' },\n  { username: 'bar', admin: true }\n], { fields: ['username'] });\n// Neither foo nor bar are admins.\n```\n\n## Ordering and Grouping\n\nSequelize provides the `order` and `group` options to work with `ORDER BY` and `GROUP BY`.\n\n### Ordering\n\nThe `order` option takes an array of items to order the query by or a sequelize method. These *items* are themselves arrays in the form `[column, direction]`. The column will be escaped correctly and the direction will be checked in a whitelist of valid directions (such as `ASC`, `DESC`, `NULLS FIRST`, etc).\n\n```js\nSubtask.findAll({\n  order: [\n    // Will escape title and validate DESC against a list of valid direction parameters\n    ['title', 'DESC'],\n\n    // Will order by max(age)\n    sequelize.fn('max', sequelize.col('age')),\n\n    // Will order by max(age) DESC\n    [sequelize.fn('max', sequelize.col('age')), 'DESC'],\n\n    // Will order by  otherfunction(`col1`, 12, 'lalala') DESC\n    [sequelize.fn('otherfunction', sequelize.col('col1'), 12, 'lalala'), 'DESC'],\n\n    // Will order an associated model's createdAt using the model name as the association's name.\n    [Task, 'createdAt', 'DESC'],\n\n    // Will order through an associated model's createdAt using the model names as the associations' names.\n    [Task, Project, 'createdAt', 'DESC'],\n\n    // Will order by an associated model's createdAt using the name of the association.\n    ['Task', 'createdAt', 'DESC'],\n\n    // Will order by a nested associated model's createdAt using the names of the associations.\n    ['Task', 'Project', 'createdAt', 'DESC'],\n\n    // Will order by an associated model's createdAt using an association object. (preferred method)\n    [Subtask.associations.Task, 'createdAt', 'DESC'],\n\n    // Will order by a nested associated model's createdAt using association objects. (preferred method)\n    [Subtask.associations.Task, Task.associations.Project, 'createdAt', 'DESC'],\n\n    // Will order by an associated model's createdAt using a simple association object.\n    [{model: Task, as: 'Task'}, 'createdAt', 'DESC'],\n\n    // Will order by a nested associated model's createdAt simple association objects.\n    [{model: Task, as: 'Task'}, {model: Project, as: 'Project'}, 'createdAt', 'DESC']\n  ],\n\n  // Will order by max age descending\n  order: sequelize.literal('max(age) DESC'),\n\n  // Will order by max age ascending assuming ascending is the default order when direction is omitted\n  order: sequelize.fn('max', sequelize.col('age')),\n\n  // Will order by age ascending assuming ascending is the default order when direction is omitted\n  order: sequelize.col('age'),\n\n  // Will order randomly based on the dialect (instead of fn('RAND') or fn('RANDOM'))\n  order: sequelize.random()\n});\n\nFoo.findOne({\n  order: [\n    // will return `name`\n    ['name'],\n    // will return `username` DESC\n    ['username', 'DESC'],\n    // will return max(`age`)\n    sequelize.fn('max', sequelize.col('age')),\n    // will return max(`age`) DESC\n    [sequelize.fn('max', sequelize.col('age')), 'DESC'],\n    // will return otherfunction(`col1`, 12, 'lalala') DESC\n    [sequelize.fn('otherfunction', sequelize.col('col1'), 12, 'lalala'), 'DESC'],\n    // will return otherfunction(awesomefunction(`col`)) DESC, This nesting is potentially infinite!\n    [sequelize.fn('otherfunction', sequelize.fn('awesomefunction', sequelize.col('col'))), 'DESC']\n  ]\n});\n```\n\nTo recap, the elements of the order array can be the following:\n\n* A string (which will be automatically quoted)\n* An array, whose first element will be quoted, second will be appended verbatim\n* An object with a `raw` field:\n  * The content of `raw` will be added verbatim without quoting\n  * Everything else is ignored, and if raw is not set, the query will fail\n* A call to `Sequelize.fn` (which will generate a function call in SQL)\n* A call to `Sequelize.col` (which will quoute the column name)\n\n### Grouping\n\nThe syntax for grouping and ordering are equal, except that grouping does not accept a direction as last argument of the array (there is no `ASC`, `DESC`, `NULLS FIRST`, etc).\n\nYou can also pass a string directly to `group`, which will be included directly (verbatim) into the generated SQL. Use with caution and don't use with user generated content.\n\n```js\nProject.findAll({ group: 'name' });\n// yields 'GROUP BY name'\n```\n\n## Limits and Pagination\n\nThe `limit` and `offset` options allow you to work with limiting / pagination:\n\n```js\n// Fetch 10 instances/rows\nProject.findAll({ limit: 10 });\n\n// Skip 8 instances/rows\nProject.findAll({ offset: 8 });\n\n// Skip 5 instances and fetch the 5 after that\nProject.findAll({ offset: 5, limit: 5 });\n```\n\nUsually these are used alongside the `order` option.\n\n## Utility methods\n\nSequelize also provides a few utility methods.\n\n### `count`\n\nThe `count` method simply counts the occurrences of elements in the database.\n\n```js\nconsole.log(`There are ${await Project.count()} projects`);\n\nconst amount = await Project.count({\n  where: {\n    id: {\n      [Op.gt]: 25\n    }\n  }\n});\nconsole.log(`There are ${amount} projects with an id greater than 25`);\n```\n\n### `max`, `min` and `sum`\n\nSequelize also provides the `max`, `min` and `sum` convenience methods.\n\nLet's assume we have three users, whose ages are 10, 5, and 40.\n\n```js\nawait User.max('age'); // 40\nawait User.max('age', { where: { age: { [Op.lt]: 20 } } }); // 10\nawait User.min('age'); // 5\nawait User.min('age', { where: { age: { [Op.gt]: 5 } } }); // 10\nawait User.sum('age'); // 55\nawait User.sum('age', { where: { age: { [Op.gt]: 5 } } }); // 50\n```\n\n### `increment`, `decrement`\n\nSequelize also provides the `increment` convenience method.\n\nLet's assume we have a user, whose age is 10.\n\n```js\nawait User.increment({age: 5}, { where: { id: 1 } }) // Will increase age to 15\nawait User.increment({age: -5}, { where: { id: 1 } }) // Will decrease age to 5\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/docs/manual/core-concepts/model-querying-finders.md",
    "name": "docs/manual/core-concepts/model-querying-finders.md",
    "content": "# Model Querying - Finders\n\nFinder methods are the ones that generate `SELECT` queries.\n\nBy default, the results of all finder methods are instances of the model class (as opposed to being just plain JavaScript objects). This means that after the database returns the results, Sequelize automatically wraps everything in proper instance objects. In a few cases, when there are too many results, this wrapping can be inefficient. To disable this wrapping and receive a plain response instead, pass `{ raw: true }` as an option to the finder method.\n\n## `findAll`\n\nThe `findAll` method is already known from the previous tutorial. It generates a standard `SELECT` query which will retrieve all entries from the table (unless restricted by something like a `where` clause, for example).\n\n## `findByPk`\n\nThe `findByPk` method obtains only a single entry from the table, using the provided primary key.\n\n```js\nconst project = await Project.findByPk(123);\nif (project === null) {\n  console.log('Not found!');\n} else {\n  console.log(project instanceof Project); // true\n  // Its primary key is 123\n}\n```\n\n## `findOne`\n\nThe `findOne` method obtains the first entry it finds (that fulfills the optional query options, if provided).\n\n```js\nconst project = await Project.findOne({ where: { title: 'My Title' } });\nif (project === null) {\n  console.log('Not found!');\n} else {\n  console.log(project instanceof Project); // true\n  console.log(project.title); // 'My Title'\n}\n```\n\n## `findOrCreate`\n\nThe method `findOrCreate` will create an entry in the table unless it can find one fulfilling the query options. In both cases, it will return an instance (either the found instance or the created instance) and a boolean indicating whether that instance was created or already existed.\n\nThe `where` option is considered for finding the entry, and the `defaults` option is used to define what must be created in case nothing was found. If the `defaults` do not contain values for every column, Sequelize will take the values given to `where` (if present).\n\nLet's assume we have an empty database with a `User` model which has a `username` and a `job`.\n\n```js\nconst [user, created] = await User.findOrCreate({\n  where: { username: 'sdepold' },\n  defaults: {\n    job: 'Technical Lead JavaScript'\n  }\n});\nconsole.log(user.username); // 'sdepold'\nconsole.log(user.job); // This may or may not be 'Technical Lead JavaScript'\nconsole.log(created); // The boolean indicating whether this instance was just created\nif (created) {\n  console.log(user.job); // This will certainly be 'Technical Lead JavaScript'\n}\n```\n\n## `findAndCountAll`\n\nThe `findAndCountAll` method is a convenience method that combines `findAll` and `count`. This is useful when dealing with queries related to pagination where you want to retrieve data with a `limit` and `offset` but also need to know the total number of records that match the query.\n\nWhen `group` is not provided, the `findAndCountAll` method returns an object with two properties:\n\n* `count` - an integer - the total number records matching the query\n* `rows` - an array of objects - the obtained records\n\nWhen `group` is provided, the `findAndCountAll` method returns an object with two properties:\n\n* `count` - an array of objects - contains the count in each group and the projected attributes\n* `rows` - an array of objects - the obtained records\n\n```js\nconst { count, rows } = await Project.findAndCountAll({\n  where: {\n    title: {\n      [Op.like]: 'foo%'\n    }\n  },\n  offset: 10,\n  limit: 2\n});\nconsole.log(count);\nconsole.log(rows);\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/docs/manual/core-concepts/getters-setters-virtuals.md",
    "name": "docs/manual/core-concepts/getters-setters-virtuals.md",
    "content": "# Getters, Setters & Virtuals\r\n\r\nSequelize allows you to define custom getters and setters for the attributes of your models.\r\n\r\nSequelize also allows you to specify the so-called *virtual attributes*, which are attributes on the Sequelize Model that doesn't really exist in the underlying SQL table, but instead are populated automatically by Sequelize. They are very useful to create custom attributes which also could simplify your code, for example.\r\n\r\n## Getters\r\n\r\nA getter is a `get()` function defined for one column in the model definition:\r\n\r\n```js\r\nconst User = sequelize.define('user', {\r\n  // Let's say we wanted to see every username in uppercase, even\r\n  // though they are not necessarily uppercase in the database itself\r\n  username: {\r\n    type: DataTypes.STRING,\r\n    get() {\r\n      const rawValue = this.getDataValue('username');\r\n      return rawValue ? rawValue.toUpperCase() : null;\r\n    }\r\n  }\r\n});\r\n```\r\n\r\nThis getter, just like a standard JavaScript getter, is called automatically when the field value is read:\r\n\r\n```js\r\nconst user = User.build({ username: 'SuperUser123' });\r\nconsole.log(user.username); // 'SUPERUSER123'\r\nconsole.log(user.getDataValue('username')); // 'SuperUser123'\r\n```\r\n\r\nNote that, although `SUPERUSER123` was logged above, the value truly stored in the database is still `SuperUser123`. We used `this.getDataValue('username')` to obtain this value, and converted it to uppercase.\r\n\r\nHad we tried to use `this.username` in the getter instead, we would have gotten an infinite loop! This is why Sequelize provides the `getDataValue` method.\r\n\r\n## Setters\r\n\r\nA setter is a `set()` function defined for one column in the model definition. It receives the value being set:\r\n\r\n```js\r\nconst User = sequelize.define('user', {\r\n  username: DataTypes.STRING,\r\n  password: {\r\n    type: DataTypes.STRING,\r\n    set(value) {\r\n      // Storing passwords in plaintext in the database is terrible.\r\n      // Hashing the value with an appropriate cryptographic hash function is better.\r\n      this.setDataValue('password', hash(value));\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n```js\r\nconst user = User.build({ username: 'someone', password: 'NotSo§tr0ngP4$SW0RD!' });\r\nconsole.log(user.password); // '7cfc84b8ea898bb72462e78b4643cfccd77e9f05678ec2ce78754147ba947acc'\r\nconsole.log(user.getDataValue('password')); // '7cfc84b8ea898bb72462e78b4643cfccd77e9f05678ec2ce78754147ba947acc'\r\n```\r\n\r\nObserve that Sequelize called the setter automatically, before even sending data to the database. The only data the database ever saw was the already hashed value.\r\n\r\nIf we wanted to involve another field from our model instance in the computation, that is possible and very easy!\r\n\r\n```js\r\nconst User = sequelize.define('user', {\r\n  username: DataTypes.STRING,\r\n  password: {\r\n    type: DataTypes.STRING,\r\n    set(value) {\r\n      // Storing passwords in plaintext in the database is terrible.\r\n      // Hashing the value with an appropriate cryptographic hash function is better.\r\n      // Using the username as a salt is better.\r\n      this.setDataValue('password', hash(this.username + value));\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n**Note:** The above examples involving password handling, although much better than simply storing the password in plaintext, are far from perfect security. Handling passwords properly is hard, everything here is just for the sake of an example to show Sequelize functionality. We suggest involving a cybersecurity expert and/or reading [OWASP](https://www.owasp.org/) documents and/or visiting the [InfoSec StackExchange](https://security.stackexchange.com/).\r\n\r\n## Combining getters and setters\r\n\r\nGetters and setters can be both defined in the same field.\r\n\r\nFor the sake of an example, let's say we are modeling a `Post`, whose `content` is a text of unlimited length. To improve memory usage, let's say we want to store a gzipped version of the content.\r\n\r\n*Note: modern databases should do some compression automatically in these cases. Please note that this is just for the sake of an example.*\r\n\r\n```js\r\nconst { gzipSync, gunzipSync } = require('zlib');\r\n\r\nconst Post = sequelize.define('post', {\r\n  content: {\r\n    type: DataTypes.TEXT,\r\n    get() {\r\n      const storedValue = this.getDataValue('content');\r\n      const gzippedBuffer = Buffer.from(storedValue, 'base64');\r\n      const unzippedBuffer = gunzipSync(gzippedBuffer);\r\n      return unzippedBuffer.toString();\r\n    },\r\n    set(value) {\r\n      const gzippedBuffer = gzipSync(value);\r\n      this.setDataValue('content', gzippedBuffer.toString('base64'));\r\n    }\r\n  }\r\n});\r\n```\r\n\r\nWith the above setup, whenever we try to interact with the `content` field of our `Post` model, Sequelize will automatically handle the custom getter and setter. For example:\r\n\r\n```js\r\nconst post = await Post.create({ content: 'Hello everyone!' });\r\n\r\nconsole.log(post.content); // 'Hello everyone!'\r\n// Everything is happening under the hood, so we can even forget that the\r\n// content is actually being stored as a gzipped base64 string!\r\n\r\n// However, if we are really curious, we can get the 'raw' data...\r\nconsole.log(post.getDataValue('content'));\r\n// Output: 'H4sIAAAAAAAACvNIzcnJV0gtSy2qzM9LVQQAUuk9jQ8AAAA='\r\n```\r\n\r\n## Virtual fields\r\n\r\nVirtual fields are fields that Sequelize populates under the hood, but in reality they don't even exist in the database.\r\n\r\nFor example, let's say we have the `firstName` and `lastName` attributes for a User.\r\n\r\n*Again, this is [only for the sake of an example](https://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/).*\r\n\r\nIt would be nice to have a simple way to obtain the *full name* directly! We can combine the idea of `getters` with the special data type Sequelize provides for this kind of situation: `DataTypes.VIRTUAL`:\r\n\r\n```js\r\nconst { DataTypes } = require(\"sequelize\");\r\n\r\nconst User = sequelize.define('user', {\r\n  firstName: DataTypes.TEXT,\r\n  lastName: DataTypes.TEXT,\r\n  fullName: {\r\n    type: DataTypes.VIRTUAL,\r\n    get() {\r\n      return `${this.firstName} ${this.lastName}`;\r\n    },\r\n    set(value) {\r\n      throw new Error('Do not try to set the `fullName` value!');\r\n    }\r\n  }\r\n});\r\n```\r\n\r\nThe `VIRTUAL` field does not cause a column in the table to exist. In other words, the model above will not have a `fullName` column. However, it will appear to have it!\r\n\r\n```js\r\nconst user = await User.create({ firstName: 'John', lastName: 'Doe' });\r\nconsole.log(user.fullName); // 'John Doe'\r\n```\r\n\r\n## Deprecated in Sequelize v7: `getterMethods` and `setterMethods`\r\n\r\nSequelize also provides the `getterMethods` and `setterMethods` options in the model definition to specify things that look like, but aren't exactly the same as, virtual attributes. This usage is discouraged and likely to be **deprecated** in the future (in favor of using virtual attributes directly).\r\n\r\nExample:\r\n\r\n```js\r\nconst { Sequelize, DataTypes } = require('sequelize');\r\nconst sequelize = new Sequelize('sqlite::memory:');\r\n\r\nconst User = sequelize.define('user', {\r\n  firstName: DataTypes.STRING,\r\n  lastName: DataTypes.STRING\r\n}, {\r\n  getterMethods: {\r\n    fullName() {\r\n      return this.firstName + ' ' + this.lastName;\r\n    }\r\n  },\r\n  setterMethods: {\r\n    fullName(value) {\r\n      // Note: this is just for demonstration.\r\n      // See: https://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/\r\n      const names = value.split(' ');\r\n      const firstName = names[0];\r\n      const lastName = names.slice(1).join(' ');\r\n      this.setDataValue('firstName', firstName);\r\n      this.setDataValue('lastName', lastName);\r\n    }\r\n  }\r\n});\r\n\r\n(async () => {\r\n  await sequelize.sync();\r\n  let user = await User.create({ firstName: 'John',  lastName: 'Doe' });\r\n  console.log(user.fullName); // 'John Doe'\r\n  user.fullName = 'Someone Else';\r\n  await user.save();\r\n  user = await User.findOne();\r\n  console.log(user.firstName); // 'Someone'\r\n  console.log(user.lastName); // 'Else'\r\n})();\r\n```\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/docs/manual/core-concepts/validations-and-constraints.md",
    "name": "docs/manual/core-concepts/validations-and-constraints.md",
    "content": "# Validations & Constraints\r\n\r\nIn this tutorial you will learn how to setup validations and constraints for your models in Sequelize.\r\n\r\nFor this tutorial, the following setup will be assumed:\r\n\r\n```js\r\nconst { Sequelize, Op, Model, DataTypes } = require(\"sequelize\");\r\nconst sequelize = new Sequelize(\"sqlite::memory:\");\r\n\r\nconst User = sequelize.define(\"user\", {\r\n  username: {\r\n    type: DataTypes.TEXT,\r\n    allowNull: false,\r\n    unique: true\r\n  },\r\n  hashedPassword: {\r\n    type: DataTypes.STRING(64),\r\n    validate: {\r\n      is: /^[0-9a-f]{64}$/i\r\n    }\r\n  }\r\n});\r\n\r\n(async () => {\r\n  await sequelize.sync({ force: true });\r\n  // Code here\r\n})();\r\n```\r\n\r\n## Difference between Validations and Constraints\r\n\r\nValidations are checks performed in the Sequelize level, in pure JavaScript. They can be arbitrarily complex if you provide a custom validator function, or can be one of the built-in validators offered by Sequelize. If a validation fails, no SQL query will be sent to the database at all.\r\n\r\nOn the other hand, constraints are rules defined at SQL level. The most basic example of constraint is an Unique Constraint. If a constraint check fails, an error will be thrown by the database and Sequelize will forward this error to JavaScript (in this example, throwing a `SequelizeUniqueConstraintError`). Note that in this case, the SQL query was performed, unlike the case for validations.\r\n\r\n## Unique Constraint\r\n\r\nOur code example above defines a unique constraint on the `username` field:\r\n\r\n```js\r\n/* ... */ {\r\n  username: {\r\n    type: DataTypes.TEXT,\r\n    allowNull: false,\r\n    unique: true\r\n  },\r\n} /* ... */\r\n```\r\n\r\nWhen this model is synchronized (by calling `sequelize.sync` for example), the `username` field will be created in the table as `` `username` TEXT UNIQUE``, and an attempt to insert an username that already exists there will throw a `SequelizeUniqueConstraintError`.\r\n\r\n## Allowing/disallowing null values\r\n\r\nBy default, `null` is an allowed value for every column of a model. This can be disabled setting the `allowNull: false` option for a column, as it was done in the `username` field from our code example:\r\n\r\n```js\r\n/* ... */ {\r\n  username: {\r\n    type: DataTypes.TEXT,\r\n    allowNull: false,\r\n    unique: true\r\n  },\r\n} /* ... */\r\n```\r\n\r\nWithout `allowNull: false`, the call `User.create({})` would work.\r\n\r\n### Note about `allowNull` implementation\r\n\r\nThe `allowNull` check is the only check in Sequelize that is a mix of a *validation* and a *constraint* in the senses described at the beginning of this tutorial. This is because:\r\n\r\n* If an attempt is made to set `null` to a field that does not allow null, a `ValidationError` will be thrown *without any SQL query being performed*.\r\n* In addition, after `sequelize.sync`, the column that has `allowNull: false` will be defined with a `NOT NULL` SQL constraint. This way, direct SQL queries that attempt to set the value to `null` will also fail.\r\n\r\n## Validators\r\n\r\nModel validators allow you to specify format/content/inheritance validations for each attribute of the model. Validations are automatically run on `create`, `update` and `save`. You can also call `validate()` to manually validate an instance.\r\n\r\n### Per-attribute validations\r\n\r\nYou can define your custom validators or use several built-in validators, implemented by [validator.js (10.11.0)](https://github.com/chriso/validator.js), as shown below.\r\n\r\n```js\r\nsequelize.define('foo', {\r\n  bar: {\r\n    type: DataTypes.STRING,\r\n    validate: {\r\n      is: /^[a-z]+$/i,          // matches this RegExp\r\n      is: [\"^[a-z]+$\",'i'],     // same as above, but constructing the RegExp from a string\r\n      not: /^[a-z]+$/i,         // does not match this RegExp\r\n      not: [\"^[a-z]+$\",'i'],    // same as above, but constructing the RegExp from a string\r\n      isEmail: true,            // checks for email format (foo@bar.com)\r\n      isUrl: true,              // checks for url format (http://foo.com)\r\n      isIP: true,               // checks for IPv4 (129.89.23.1) or IPv6 format\r\n      isIPv4: true,             // checks for IPv4 (129.89.23.1)\r\n      isIPv6: true,             // checks for IPv6 format\r\n      isAlpha: true,            // will only allow letters\r\n      isAlphanumeric: true,     // will only allow alphanumeric characters, so \"_abc\" will fail\r\n      isNumeric: true,          // will only allow numbers\r\n      isInt: true,              // checks for valid integers\r\n      isFloat: true,            // checks for valid floating point numbers\r\n      isDecimal: true,          // checks for any numbers\r\n      isLowercase: true,        // checks for lowercase\r\n      isUppercase: true,        // checks for uppercase\r\n      notNull: true,            // won't allow null\r\n      isNull: true,             // only allows null\r\n      notEmpty: true,           // don't allow empty strings\r\n      equals: 'specific value', // only allow a specific value\r\n      contains: 'foo',          // force specific substrings\r\n      notIn: [['foo', 'bar']],  // check the value is not one of these\r\n      isIn: [['foo', 'bar']],   // check the value is one of these\r\n      notContains: 'bar',       // don't allow specific substrings\r\n      len: [2,10],              // only allow values with length between 2 and 10\r\n      isUUID: 4,                // only allow uuids\r\n      isDate: true,             // only allow date strings\r\n      isAfter: \"2011-11-05\",    // only allow date strings after a specific date\r\n      isBefore: \"2011-11-05\",   // only allow date strings before a specific date\r\n      max: 23,                  // only allow values <= 23\r\n      min: 23,                  // only allow values >= 23\r\n      isCreditCard: true,       // check for valid credit card numbers\r\n\r\n      // Examples of custom validators:\r\n      isEven(value) {\r\n        if (parseInt(value) % 2 !== 0) {\r\n          throw new Error('Only even values are allowed!');\r\n        }\r\n      }\r\n      isGreaterThanOtherField(value) {\r\n        if (parseInt(value) <= parseInt(this.otherField)) {\r\n          throw new Error('Bar must be greater than otherField.');\r\n        }\r\n      }\r\n    }\r\n  }\r\n});\r\n```\r\n\r\nNote that where multiple arguments need to be passed to the built-in validation functions, the arguments to be passed must be in an array. But if a single array argument is to be passed, for instance an array of acceptable strings for `isIn`, this will be interpreted as multiple string arguments instead of one array argument. To work around this pass a single-length array of arguments, such as `[['foo', 'bar']]` as shown above.\r\n\r\nTo use a custom error message instead of that provided by [validator.js](https://github.com/chriso/validator.js), use an object instead of the plain value or array of arguments, for example a validator which needs no argument can be given a custom message with\r\n\r\n```js\r\nisInt: {\r\n  msg: \"Must be an integer number of pennies\"\r\n}\r\n```\r\n\r\nor if arguments need to also be passed add an `args` property:\r\n\r\n```js\r\nisIn: {\r\n  args: [['en', 'zh']],\r\n  msg: \"Must be English or Chinese\"\r\n}\r\n```\r\n\r\nWhen using custom validator functions the error message will be whatever message the thrown `Error` object holds.\r\n\r\nSee [the validator.js project](https://github.com/chriso/validator.js) for more details on the built in validation methods.\r\n\r\n**Hint:** You can also define a custom function for the logging part. Just pass a function. The first parameter will be the string that is logged.\r\n\r\n### `allowNull` interaction with other validators\r\n\r\nIf a particular field of a model is set to not allow null (with `allowNull: false`) and that value has been set to `null`, all validators will be skipped and a `ValidationError` will be thrown.\r\n\r\nOn the other hand, if it is set to allow null (with `allowNull: true`) and that value has been set to `null`, only the built-in validators will be skipped, while the custom validators will still run.\r\n\r\nThis means you can, for instance, have a string field which validates its length to be between 5 and 10 characters, but which also allows `null` (since the length validator will be skipped automatically when the value is `null`):\r\n\r\n```js\r\nclass User extends Model {}\r\nUser.init({\r\n  username: {\r\n    type: DataTypes.STRING,\r\n    allowNull: true,\r\n    validate: {\r\n      len: [5, 10]\r\n    }\r\n  }\r\n}, { sequelize });\r\n```\r\n\r\nYou also can conditionally allow `null` values, with a custom validator, since it won't be skipped:\r\n\r\n```js\r\nclass User extends Model {}\r\nUser.init({\r\n  age: Sequelize.INTEGER,\r\n  name: {\r\n    type: DataTypes.STRING,\r\n    allowNull: true,\r\n    validate: {\r\n      customValidator(value) {\r\n        if (value === null && this.age !== 10) {\r\n          throw new Error(\"name can't be null unless age is 10\");\r\n        }\r\n      })\r\n    }\r\n  }\r\n}, { sequelize });\r\n```\r\n\r\nYou can customize `allowNull` error message by setting the `notNull` validator:\r\n\r\n```js\r\nclass User extends Model {}\r\nUser.init({\r\n  name: {\r\n    type: DataTypes.STRING,\r\n    allowNull: false,\r\n    validate: {\r\n      notNull: {\r\n        msg: 'Please enter your name'\r\n      }\r\n    }\r\n  }\r\n}, { sequelize });\r\n```\r\n\r\n### Model-wide validations\r\n\r\nValidations can also be defined to check the model after the field-specific validators. Using this you could, for example, ensure either neither of `latitude` and `longitude` are set or both, and fail if one but not the other is set.\r\n\r\nModel validator methods are called with the model object's context and are deemed to fail if they throw an error, otherwise pass. This is just the same as with custom field-specific validators.\r\n\r\nAny error messages collected are put in the validation result object alongside the field validation errors, with keys named after the failed validation method's key in the `validate` option object. Even though there can only be one error message for each model validation method at any one time, it is presented as a single string error in an array, to maximize consistency with the field errors.\r\n\r\nAn example:\r\n\r\n```js\r\nclass Place extends Model {}\r\nPlace.init({\r\n  name: Sequelize.STRING,\r\n  address: Sequelize.STRING,\r\n  latitude: {\r\n    type: DataTypes.INTEGER,\r\n    validate: {\r\n      min: -90,\r\n      max: 90\r\n    }\r\n  },\r\n  longitude: {\r\n    type: DataTypes.INTEGER,\r\n    validate: {\r\n      min: -180,\r\n      max: 180\r\n    }\r\n  },\r\n}, {\r\n  sequelize,\r\n  validate: {\r\n    bothCoordsOrNone() {\r\n      if ((this.latitude === null) !== (this.longitude === null)) {\r\n        throw new Error('Either both latitude and longitude, or neither!');\r\n      }\r\n    }\r\n  }\r\n})\r\n```\r\n\r\nIn this simple case an object fails validation if either latitude or longitude is given, but not both. If we try to build one with an out-of-range latitude and no longitude, `somePlace.validate()` might return:\r\n\r\n```js\r\n{\r\n  'latitude': ['Invalid number: latitude'],\r\n  'bothCoordsOrNone': ['Either both latitude and longitude, or neither!']\r\n}\r\n```\r\n\r\nSuch validation could have also been done with a custom validator defined on a single attribute (such as the `latitude` attribute, by checking `(value === null) !== (this.longitude === null)`), but the model-wide validation approach is cleaner.\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/docs/manual/core-concepts/raw-queries.md",
    "name": "docs/manual/core-concepts/raw-queries.md",
    "content": "# Raw Queries\n\nAs there are often use cases in which it is just easier to execute raw / already prepared SQL queries, you can use the [`sequelize.query`](../class/lib/sequelize.js~Sequelize.html#instance-method-query) method.\n\nBy default the function will return two arguments - a results array, and an object containing metadata (such as amount of affected rows, etc). Note that since this is a raw query, the metadata are dialect specific. Some dialects return the metadata \"within\" the results object (as properties on an array). However, two arguments will always be returned, but for MSSQL and MySQL it will be two references to the same object.\n\n```js\nconst [results, metadata] = await sequelize.query(\"UPDATE users SET y = 42 WHERE x = 12\");\n// Results will be an empty array and metadata will contain the number of affected rows.\n```\n\nIn cases where you don't need to access the metadata you can pass in a query type to tell sequelize how to format the results. For example, for a simple select query you could do:\n\n```js\nconst { QueryTypes } = require('sequelize');\nconst users = await sequelize.query(\"SELECT * FROM `users`\", { type: QueryTypes.SELECT });\n// We didn't need to destructure the result here - the results were returned directly\n```\n\nSeveral other query types are available. [Peek into the source for details](https://github.com/sequelize/sequelize/blob/main/src/query-types.ts).\n\nA second option is the model. If you pass a model the returned data will be instances of that model.\n\n```js\n// Callee is the model definition. This allows you to easily map a query to a predefined model\nconst projects = await sequelize.query('SELECT * FROM projects', {\n  model: Projects,\n  mapToModel: true // pass true here if you have any mapped fields\n});\n// Each element of `projects` is now an instance of Project\n```\n\nSee more options in the [query API reference](../class/lib/sequelize.js~Sequelize.html#instance-method-query). Some examples:\n\n```js\nconst { QueryTypes } = require('sequelize');\nawait sequelize.query('SELECT 1', {\n  // A function (or false) for logging your queries\n  // Will get called for every SQL query that gets sent\n  // to the server.\n  logging: console.log,\n\n  // If plain is true, then sequelize will only return the first\n  // record of the result set. In case of false it will return all records.\n  plain: false,\n\n  // Set this to true if you don't have a model definition for your query.\n  raw: false,\n\n  // The type of query you are executing. The query type affects how results are formatted before they are passed back.\n  type: QueryTypes.SELECT\n});\n\n// Note the second argument being null!\n// Even if we declared a callee here, the raw: true would\n// supersede and return a raw object.\nconsole.log(await sequelize.query('SELECT * FROM projects', { raw: true }));\n```\n\n## \"Dotted\" attributes and the `nest` option\n\nIf an attribute name of the table contains dots, the resulting objects can become nested objects by setting the `nest: true` option. This is achieved with [dottie.js](https://github.com/mickhansen/dottie.js/) under the hood. See below:\n\n* Without `nest: true`:\n\n  ```js\n  const { QueryTypes } = require('sequelize');\n  const records = await sequelize.query('select 1 as `foo.bar.baz`', {\n    type: QueryTypes.SELECT\n  });\n  console.log(JSON.stringify(records[0], null, 2));\n  ```\n\n  ```json\n  {\n    \"foo.bar.baz\": 1\n  }\n  ```\n\n* With `nest: true`:\n\n  ```js\n  const { QueryTypes } = require('sequelize');\n  const records = await sequelize.query('select 1 as `foo.bar.baz`', {\n    nest: true,\n    type: QueryTypes.SELECT\n  });\n  console.log(JSON.stringify(records[0], null, 2));\n  ```\n\n  ```json\n  {\n    \"foo\": {\n      \"bar\": {\n        \"baz\": 1\n      }\n    }\n  }\n  ```\n\n## Replacements\n\nReplacements in a query can be done in two different ways, either using named parameters (starting with `:`), or unnamed, represented by a `?`. Replacements are passed in the options object.\n\n* If an array is passed, `?` will be replaced in the order that they appear in the array\n* If an object is passed, `:key` will be replaced with the keys from that object. If the object contains keys not found in the query or vice versa, an exception will be thrown.\n\n```js\nconst { QueryTypes } = require('sequelize');\n\nawait sequelize.query(\n  'SELECT * FROM projects WHERE status = ?',\n  {\n    replacements: ['active'],\n    type: QueryTypes.SELECT\n  }\n);\n\nawait sequelize.query(\n  'SELECT * FROM projects WHERE status = :status',\n  {\n    replacements: { status: 'active' },\n    type: QueryTypes.SELECT\n  }\n);\n```\n\nArray replacements will automatically be handled, the following query searches for projects where the status matches an array of values.\n\n```js\nconst { QueryTypes } = require('sequelize');\n\nawait sequelize.query(\n  'SELECT * FROM projects WHERE status IN(:status)',\n  {\n    replacements: { status: ['active', 'inactive'] },\n    type: QueryTypes.SELECT\n  }\n);\n```\n\nTo use the wildcard operator `%`, append it to your replacement. The following query matches users with names that start with 'ben'.\n\n```js\nconst { QueryTypes } = require('sequelize');\n\nawait sequelize.query(\n  'SELECT * FROM users WHERE name LIKE :search_name',\n  {\n    replacements: { search_name: 'ben%' },\n    type: QueryTypes.SELECT\n  }\n);\n```\n\n## Bind Parameter\n\nBind parameters are like replacements. Except replacements are escaped and inserted into the query by sequelize before the query is sent to the database, while bind parameters are sent to the database outside the SQL query text. A query can have either bind parameters or replacements. Bind parameters are referred to by either $1, $2, ... (numeric) or $key (alpha-numeric). This is independent of the dialect.\n\n* If an array is passed, `$1` is bound to the 1st element in the array (`bind[0]`)\n* If an object is passed, `$key` is bound to `object['key']`. Each key must begin with a non-numeric char. `$1` is not a valid key, even if `object['1']` exists.\n* In either case `$$` can be used to escape a literal `$` sign.\n\nThe array or object must contain all bound values or Sequelize will throw an exception. This applies even to cases in which the database may ignore the bound parameter.\n\nThe database may add further restrictions to this. Bind parameters cannot be SQL keywords, nor table or column names. They are also ignored in quoted text or data. In PostgreSQL it may also be needed to typecast them, if the type cannot be inferred from the context `$1::varchar`.\n\n```js\nconst { QueryTypes } = require('sequelize');\n\nawait sequelize.query(\n  'SELECT *, \"text with literal $$1 and literal $$status\" as t FROM projects WHERE status = $1',\n  {\n    bind: ['active'],\n    type: QueryTypes.SELECT\n  }\n);\n\nawait sequelize.query(\n  'SELECT *, \"text with literal $$1 and literal $$status\" as t FROM projects WHERE status = $status',\n  {\n    bind: { status: 'active' },\n    type: QueryTypes.SELECT\n  }\n);\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/docs/manual/core-concepts/assocs.md",
    "name": "docs/manual/core-concepts/assocs.md",
    "content": "# Associations\n\nSequelize supports the standard associations: [One-To-One](https://en.wikipedia.org/wiki/One-to-one_%28data_model%29), [One-To-Many](https://en.wikipedia.org/wiki/One-to-many_%28data_model%29) and [Many-To-Many](https://en.wikipedia.org/wiki/Many-to-many_%28data_model%29).\n\nTo do this, Sequelize provides **four** types of associations that should be combined to create them:\n\n* The `HasOne` association\n* The `BelongsTo` association\n* The `HasMany` association\n* The `BelongsToMany` association\n\nThe guide will start explaining how to define these four types of associations, and then will follow up to explain how to combine those to define the three standard association types ([One-To-One](https://en.wikipedia.org/wiki/One-to-one_%28data_model%29), [One-To-Many](https://en.wikipedia.org/wiki/One-to-many_%28data_model%29) and [Many-To-Many](https://en.wikipedia.org/wiki/Many-to-many_%28data_model%29)).\n\n## Defining the Sequelize associations\n\nThe four association types are defined in a very similar way. Let's say we have two models, `A` and `B`. Telling Sequelize that you want an association between the two needs just a function call:\n\n```js\nconst A = sequelize.define('A', /* ... */);\nconst B = sequelize.define('B', /* ... */);\n\nA.hasOne(B); // A HasOne B\nA.belongsTo(B); // A BelongsTo B\nA.hasMany(B); // A HasMany B\nA.belongsToMany(B, { through: 'C' }); // A BelongsToMany B through the junction table C\n```\n\nThey all accept an options object as a second parameter (optional for the first three, mandatory for `belongsToMany` containing at least the `through` property):\n\n```js\nA.hasOne(B, { /* options */ });\nA.belongsTo(B, { /* options */ });\nA.hasMany(B, { /* options */ });\nA.belongsToMany(B, { through: 'C', /* options */ });\n```\n\nThe order in which the association is defined is relevant. In other words, the order matters, for the four cases. In all examples above, `A` is called the **source** model and `B` is called the **target** model. This terminology is important.\n\nThe `A.hasOne(B)` association means that a One-To-One relationship exists between `A` and `B`, with the foreign key being defined in the target model (`B`).\n\nThe `A.belongsTo(B)` association means that a One-To-One relationship exists between `A` and `B`, with the foreign key being defined in the source model (`A`).\n\nThe `A.hasMany(B)` association means that a One-To-Many relationship exists between `A` and `B`, with the foreign key being defined in the target model (`B`).\n\nThese three calls will cause Sequelize to automatically add foreign keys to the appropriate models (unless they are already present).\n\nThe `A.belongsToMany(B, { through: 'C' })` association means that a Many-To-Many relationship exists between `A` and `B`, using table `C` as [junction table](https://en.wikipedia.org/wiki/Associative_entity), which will have the foreign keys (`aId` and `bId`, for example). Sequelize will automatically create this model `C` (unless it already exists) and define the appropriate foreign keys on it.\n\n*Note: In the examples above for `belongsToMany`, a string (`'C'`) was passed to the through option. In this case, Sequelize automatically generates a model with this name. However, you can also pass a model directly, if you have already defined it.*\n\nThese are the main ideas involved in each type of association. However, these relationships are often used in pairs, in order to enable better usage with Sequelize. This will be seen later on.\n\n## Creating the standard relationships\n\nAs mentioned, usually the Sequelize associations are defined in pairs. In summary:\n\n* To create a **One-To-One** relationship, the `hasOne` and `belongsTo` associations are used together;\n* To create a **One-To-Many** relationship, the `hasMany` and `belongsTo` associations are used together;\n* To create a **Many-To-Many** relationship, two `belongsToMany` calls are used together.\n  * Note: there is also a *Super Many-To-Many* relationship, which uses six associations at once, and will be discussed in the [Advanced Many-to-Many relationships guide](advanced-many-to-many.html).\n\nThis will all be seen in detail next. The advantages of using these pairs instead of one single association will be discussed in the end of this chapter.\n\n## One-To-One relationships\n\n### Philosophy\n\nBefore digging into the aspects of using Sequelize, it is useful to take a step back to consider what happens with a One-To-One relationship.\n\nLet's say we have two models, `Foo` and `Bar`. We want to establish a One-To-One relationship between Foo and Bar. We know that in a relational database, this will be done by establishing a foreign key in one of the tables. So in this case, a very relevant question is: in which table do we want this foreign key to be? In other words, do we want `Foo` to have a `barId` column, or should `Bar` have a `fooId` column instead?\n\nIn principle, both options are a valid way to establish a One-To-One relationship between Foo and Bar. However, when we say something like *\"there is a One-To-One relationship between Foo and Bar\"*, it is unclear whether or not the relationship is *mandatory* or optional. In other words, can a Foo exist without a Bar? Can a Bar exist without a Foo? The answers to these questions helps figuring out where we want the foreign key column to be.\n\n### Goal\n\nFor the rest of this example, let's assume that we have two models, `Foo` and `Bar`. We want to setup a One-To-One relationship between them such that `Bar` gets a `fooId` column.\n\n### Implementation\n\nThe main setup to achieve the goal is as follows:\n\n```js\nFoo.hasOne(Bar);\nBar.belongsTo(Foo);\n```\n\nSince no option was passed, Sequelize will infer what to do from the names of the models. In this case, Sequelize knows that a `fooId` column must be added to `Bar`.\n\nThis way, calling `Bar.sync()` after the above will yield the following SQL (on PostgreSQL, for example):\n\n```sql\nCREATE TABLE IF NOT EXISTS \"foos\" (\n  /* ... */\n);\nCREATE TABLE IF NOT EXISTS \"bars\" (\n  /* ... */\n  \"fooId\" INTEGER REFERENCES \"foos\" (\"id\") ON DELETE SET NULL ON UPDATE CASCADE\n  /* ... */\n);\n```\n\n### Options\n\nVarious options can be passed as a second parameter of the association call.\n\n#### `onDelete` and `onUpdate`\n\nFor example, to configure the `ON DELETE` and `ON UPDATE` behaviors, you can do:\n\n```js\nFoo.hasOne(Bar, {\n  onDelete: 'RESTRICT',\n  onUpdate: 'RESTRICT'\n});\nBar.belongsTo(Foo);\n```\n\nThe possible choices are `RESTRICT`, `CASCADE`, `NO ACTION`, `SET DEFAULT` and `SET NULL`.\n\nThe defaults for the One-To-One associations is `SET NULL` for `ON DELETE` and `CASCADE` for `ON UPDATE`.\n\n#### Customizing the foreign key\n\nBoth the `hasOne` and `belongsTo` calls shown above will infer that the foreign key to be created should be called `fooId`. To use a different name, such as `myFooId`:\n\n```js\n// Option 1\nFoo.hasOne(Bar, {\n  foreignKey: 'myFooId'\n});\nBar.belongsTo(Foo);\n\n// Option 2\nFoo.hasOne(Bar, {\n  foreignKey: {\n    name: 'myFooId'\n  }\n});\nBar.belongsTo(Foo);\n\n// Option 3\nFoo.hasOne(Bar);\nBar.belongsTo(Foo, {\n  foreignKey: 'myFooId'\n});\n\n// Option 4\nFoo.hasOne(Bar);\nBar.belongsTo(Foo, {\n  foreignKey: {\n    name: 'myFooId'\n  }\n});\n```\n\nAs shown above, the `foreignKey` option accepts a string or an object. When receiving an object, this object will be used as the definition for the column just like it would do in a standard `sequelize.define` call. Therefore, specifying options such as `type`, `allowNull`, `defaultValue`, etc, just  work.\n\nFor example, to use `UUID` as the foreign key data type instead of the default (`INTEGER`), you can simply do:\n\n```js\nconst { DataTypes } = require(\"Sequelize\");\n\nFoo.hasOne(Bar, {\n  foreignKey: {\n    // name: 'myFooId'\n    type: DataTypes.UUID\n  }\n});\nBar.belongsTo(Foo);\n```\n\n#### Mandatory versus optional associations\n\nBy default, the association is considered optional. In other words, in our example, the `fooId` is allowed to be null, meaning that one Bar can exist without a Foo. Changing this is just a matter of specifying `allowNull: false` in the foreign key options:\n\n```js\nFoo.hasOne(Bar, {\n  foreignKey: {\n    allowNull: false\n  }\n});\n// \"fooId\" INTEGER NOT NULL REFERENCES \"foos\" (\"id\") ON DELETE RESTRICT ON UPDATE RESTRICT\n```\n\n## One-To-Many relationships\n\n### Philosophy\n\nOne-To-Many associations are connecting one source with multiple targets, while all these targets are connected only with this single source.\n\nThis means that, unlike the One-To-One association, in which we had to choose where the foreign key would be placed, there is only one option in One-To-Many associations. For example, if one Foo has many Bars (and this way each Bar belongs to one Foo), then the only sensible implementation is to have a `fooId` column in the `Bar` table. The opposite is impossible, since one Foo has many Bars.\n\n### Goal\n\nIn this example, we have the models `Team` and `Player`. We want to tell Sequelize that there is a One-To-Many relationship between them, meaning that one Team has many Players, while each Player belongs to a single Team.\n\n### Implementation\n\nThe main way to do this is as follows:\n\n```js\nTeam.hasMany(Player);\nPlayer.belongsTo(Team);\n```\n\nAgain, as mentioned, the main way to do it used a pair of Sequelize associations (`hasMany` and `belongsTo`).\n\nFor example, in PostgreSQL, the above setup will yield the following SQL upon `sync()`:\n\n```sql\nCREATE TABLE IF NOT EXISTS \"Teams\" (\n  /* ... */\n);\nCREATE TABLE IF NOT EXISTS \"Players\" (\n  /* ... */\n  \"TeamId\" INTEGER REFERENCES \"Teams\" (\"id\") ON DELETE SET NULL ON UPDATE CASCADE,\n  /* ... */\n);\n```\n\n### Options\n\nThe options to be applied in this case are the same from the One-To-One case. For example, to change the name of the foreign key and make sure that the relationship is mandatory, we can do:\n\n```js\nTeam.hasMany(Player, {\n  foreignKey: 'clubId'\n});\nPlayer.belongsTo(Team);\n```\n\nLike One-To-One relationships, `ON DELETE` defaults to `SET NULL` and `ON UPDATE` defaults to `CASCADE`.\n\n## Many-To-Many relationships\n\n### Philosophy\n\nMany-To-Many associations connect one source with multiple targets, while all these targets can in turn be connected to other sources beyond the first.\n\nThis cannot be represented by adding one foreign key to one of the tables, like the other relationships did. Instead, the concept of a [Junction Model](https://en.wikipedia.org/wiki/Associative_entity) is used. This will be an extra model (and extra table in the database) which will have two foreign key columns and will keep track of the associations. The junction table is also sometimes called *join table* or *through table*.\n\n### Goal\n\nFor this example, we will consider the models `Movie` and `Actor`. One actor may have participated in many movies, and one movie had many actors involved with its production. The junction table that will keep track of the associations will be called `ActorMovies`, which will contain the foreign keys `movieId` and `actorId`.\n\n### Implementation\n\nThe main way to do this in Sequelize is as follows:\n\n```js\nconst Movie = sequelize.define('Movie', { name: DataTypes.STRING });\nconst Actor = sequelize.define('Actor', { name: DataTypes.STRING });\nMovie.belongsToMany(Actor, { through: 'ActorMovies' });\nActor.belongsToMany(Movie, { through: 'ActorMovies' });\n```\n\nSince a string was given in the `through` option of the `belongsToMany` call, Sequelize will automatically create the `ActorMovies` model which will act as the junction model. For example, in PostgreSQL:\n\n```sql\nCREATE TABLE IF NOT EXISTS \"ActorMovies\" (\n  \"createdAt\" TIMESTAMP WITH TIME ZONE NOT NULL,\n  \"updatedAt\" TIMESTAMP WITH TIME ZONE NOT NULL,\n  \"MovieId\" INTEGER REFERENCES \"Movies\" (\"id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  \"ActorId\" INTEGER REFERENCES \"Actors\" (\"id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  PRIMARY KEY (\"MovieId\",\"ActorId\")\n);\n```\n\nInstead of a string, passing a model directly is also supported, and in that case the given model will be used as the junction model (and no model will be created automatically). For example:\n\n```js\nconst Movie = sequelize.define('Movie', { name: DataTypes.STRING });\nconst Actor = sequelize.define('Actor', { name: DataTypes.STRING });\nconst ActorMovies = sequelize.define('ActorMovies', {\n  MovieId: {\n    type: DataTypes.INTEGER,\n    references: {\n      model: Movie, // 'Movies' would also work\n      key: 'id'\n    }\n  },\n  ActorId: {\n    type: DataTypes.INTEGER,\n    references: {\n      model: Actor, // 'Actors' would also work\n      key: 'id'\n    }\n  }\n});\nMovie.belongsToMany(Actor, { through: ActorMovies });\nActor.belongsToMany(Movie, { through: ActorMovies });\n```\n\nThe above yields the following SQL in PostgreSQL, which is equivalent to the one shown above:\n\n```sql\nCREATE TABLE IF NOT EXISTS \"ActorMovies\" (\n  \"MovieId\" INTEGER NOT NULL REFERENCES \"Movies\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE,\n  \"ActorId\" INTEGER NOT NULL REFERENCES \"Actors\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE,\n  \"createdAt\" TIMESTAMP WITH TIME ZONE NOT NULL,\n  \"updatedAt\" TIMESTAMP WITH TIME ZONE NOT NULL,\n  UNIQUE (\"MovieId\", \"ActorId\"),     -- Note: Sequelize generated this UNIQUE constraint but\n  PRIMARY KEY (\"MovieId\",\"ActorId\")  -- it is irrelevant since it's also a PRIMARY KEY\n);\n```\n\n### Options\n\nUnlike One-To-One and One-To-Many relationships, the defaults for both `ON UPDATE` and `ON DELETE` are `CASCADE` for Many-To-Many relationships.\n\nBelongs-To-Many creates a unique key on through model. This unique key name can be overridden using **uniqueKey** option. To prevent creating this unique key, use the ***unique: false*** option.\n\n```js\nProject.belongsToMany(User, { through: UserProjects, uniqueKey: 'my_custom_unique' })\n```\n\n## Basics of queries involving associations\n\nWith the basics of defining associations covered, we can look at queries involving associations. The most common queries on this matter are the *read* queries (i.e. SELECTs). Later on, other types of queries will be shown.\n\nIn order to study this, we will consider an example in which we have Ships and Captains, and a one-to-one relationship between them. We will allow null on foreign keys (the default), meaning that a Ship can exist without a Captain and vice-versa.\n\n```js\n// This is the setup of our models for the examples below\nconst Ship = sequelize.define('ship', {\n  name: DataTypes.TEXT,\n  crewCapacity: DataTypes.INTEGER,\n  amountOfSails: DataTypes.INTEGER\n}, { timestamps: false });\nconst Captain = sequelize.define('captain', {\n  name: DataTypes.TEXT,\n  skillLevel: {\n    type: DataTypes.INTEGER,\n    validate: { min: 1, max: 10 }\n  }\n}, { timestamps: false });\nCaptain.hasOne(Ship);\nShip.belongsTo(Captain);\n```\n\n### Fetching associations - Eager Loading vs Lazy Loading\n\nThe concepts of Eager Loading and Lazy Loading are fundamental to understand how fetching associations work in Sequelize. Lazy Loading refers to the technique of fetching the associated data only when you really want it; Eager Loading, on the other hand, refers to the technique of fetching everything at once, since the beginning, with a larger query.\n\n#### Lazy Loading example\n\n```js\nconst awesomeCaptain = await Captain.findOne({\n  where: {\n    name: \"Jack Sparrow\"\n  }\n});\n// Do stuff with the fetched captain\nconsole.log('Name:', awesomeCaptain.name);\nconsole.log('Skill Level:', awesomeCaptain.skillLevel);\n// Now we want information about his ship!\nconst hisShip = await awesomeCaptain.getShip();\n// Do stuff with the ship\nconsole.log('Ship Name:', hisShip.name);\nconsole.log('Amount of Sails:', hisShip.amountOfSails);\n```\n\nObserve that in the example above, we made two queries, only fetching the associated ship when we wanted to use it. This can be especially useful if we may or may not need the ship, perhaps we want to fetch it conditionally, only in a few cases; this way we can save time and memory by only fetching it when necessary.\n\nNote: the `getShip()` instance method used above is one of the methods Sequelize automatically adds to `Captain` instances. There are others. You will learn more about them later in this guide.\n\n#### Eager Loading Example\n\n```js\nconst awesomeCaptain = await Captain.findOne({\n  where: {\n    name: \"Jack Sparrow\"\n  },\n  include: Ship\n});\n// Now the ship comes with it\nconsole.log('Name:', awesomeCaptain.name);\nconsole.log('Skill Level:', awesomeCaptain.skillLevel);\nconsole.log('Ship Name:', awesomeCaptain.ship.name);\nconsole.log('Amount of Sails:', awesomeCaptain.ship.amountOfSails);\n```\n\nAs shown above, Eager Loading is performed in Sequelize by using the `include` option. Observe that here only one query was performed to the database (which brings the associated data along with the instance).\n\nThis was just a quick introduction to Eager Loading in Sequelize. There is a lot more to it, which you can learn at [the dedicated guide on Eager Loading](eager-loading.html).\n\n### Creating, updating and deleting\n\nThe above showed the basics on queries for fetching data involving associations. For creating, updating and deleting, you can either:\n\n* Use the standard model queries directly:\n\n  ```js\n  // Example: creating an associated model using the standard methods\n  Bar.create({\n    name: 'My Bar',\n    fooId: 5\n  });\n  // This creates a Bar belonging to the Foo of ID 5 (since fooId is\n  // a regular column, after all). Nothing very clever going on here.\n  ```\n\n* Or use the *[special methods/mixins](#special-methods-mixins-added-to-instances)* available for associated models, which are explained later on this page.\n\n**Note:** The [`save()` instance method](../class/lib/model.js~Model.html#instance-method-save) is not aware of associations. In other words, if you change a value from a *child* object that was eager loaded along a *parent* object, calling `save()` on the parent will completely ignore the change that happened on the child.\n\n## Association Aliases & Custom Foreign Keys\n\nIn all the above examples, Sequelize automatically defined the foreign key names. For example, in the Ship and Captain example, Sequelize automatically defined a `captainId` field on the Ship model. However, it is easy to specify a custom foreign key.\n\nLet's consider the models Ship and Captain in a simplified form, just to focus on the current topic, as shown below (less fields):\n\n```js\nconst Ship = sequelize.define('ship', { name: DataTypes.TEXT }, { timestamps: false });\nconst Captain = sequelize.define('captain', { name: DataTypes.TEXT }, { timestamps: false });\n```\n\nThere are three ways to specify a different name for the foreign key:\n\n* By providing the foreign key name directly\n* By defining an Alias\n* By doing both things\n\n### Recap: the default setup\n\nBy using simply `Ship.belongsTo(Captain)`, sequelize will generate the foreign key name automatically:\n\n```js\nShip.belongsTo(Captain); // This creates the `captainId` foreign key in Ship.\n\n// Eager Loading is done by passing the model to `include`:\nconsole.log((await Ship.findAll({ include: Captain })).toJSON());\n// Or by providing the associated model name:\nconsole.log((await Ship.findAll({ include: 'captain' })).toJSON());\n\n// Also, instances obtain a `getCaptain()` method for Lazy Loading:\nconst ship = Ship.findOne();\nconsole.log((await ship.getCaptain()).toJSON());\n```\n\n### Providing the foreign key name directly\n\nThe foreign key name can be provided directly with an option in the association definition, as follows:\n\n```js\nShip.belongsTo(Captain, { foreignKey: 'bossId' }); // This creates the `bossId` foreign key in Ship.\n\n// Eager Loading is done by passing the model to `include`:\nconsole.log((await Ship.findAll({ include: Captain })).toJSON());\n// Or by providing the associated model name:\nconsole.log((await Ship.findAll({ include: 'Captain' })).toJSON());\n\n// Also, instances obtain a `getCaptain()` method for Lazy Loading:\nconst ship = Ship.findOne();\nconsole.log((await ship.getCaptain()).toJSON());\n```\n\n### Defining an Alias\n\nDefining an Alias is more powerful than simply specifying a custom name for the foreign key. This is better understood with an example:\n\n<!-- NOTE: any change in this part might also require a change on advanced-many-to-many.md -->\n\n```js\nShip.belongsTo(Captain, { as: 'leader' }); // This creates the `leaderId` foreign key in Ship.\n\n// Eager Loading no longer works by passing the model to `include`:\nconsole.log((await Ship.findAll({ include: Captain })).toJSON()); // Throws an error\n// Instead, you have to pass the alias:\nconsole.log((await Ship.findAll({ include: 'leader' })).toJSON());\n// Or you can pass an object specifying the model and alias:\nconsole.log((await Ship.findAll({\n  include: {\n    model: Captain,\n    as: 'leader'\n  }\n})).toJSON());\n\n// Also, instances obtain a `getLeader()` method for Lazy Loading:\nconst ship = Ship.findOne();\nconsole.log((await ship.getLeader()).toJSON());\n```\n\nAliases are especially useful when you need to define two different associations between the same models. For example, if we have the models `Mail` and `Person`, we may want to associate them twice, to represent the `sender` and `receiver` of the Mail. In this case we must use an alias for each association, since otherwise a call like `mail.getPerson()` would be ambiguous. With the `sender` and `receiver` aliases, we would have the two methods available and working: `mail.getSender()` and `mail.getReceiver()`, both of them returning a `Promise<Person>`.\n\nWhen defining an alias for a `hasOne` or `belongsTo` association, you should use the singular form of a word (such as `leader`, in the example above). On the other hand, when defining an alias for `hasMany` and `belongsToMany`, you should use the plural form. Defining aliases for Many-to-Many relationships (with `belongsToMany`) is covered in the [Advanced Many-to-Many Associations guide](advanced-many-to-many.html).\n\n### Doing both things\n\nWe can define and alias and also directly define the foreign key:\n\n```js\nShip.belongsTo(Captain, { as: 'leader', foreignKey: 'bossId' }); // This creates the `bossId` foreign key in Ship.\n\n// Since an alias was defined, eager Loading doesn't work by simply passing the model to `include`:\nconsole.log((await Ship.findAll({ include: Captain })).toJSON()); // Throws an error\n// Instead, you have to pass the alias:\nconsole.log((await Ship.findAll({ include: 'leader' })).toJSON());\n// Or you can pass an object specifying the model and alias:\nconsole.log((await Ship.findAll({\n  include: {\n    model: Captain,\n    as: 'leader'\n  }\n})).toJSON());\n\n// Also, instances obtain a `getLeader()` method for Lazy Loading:\nconst ship = Ship.findOne();\nconsole.log((await ship.getLeader()).toJSON());\n```\n\n## Special methods/mixins added to instances\n\nWhen an association is defined between two models, the instances of those models gain special methods to interact with their associated counterparts.\n\nFor example, if we have two models, `Foo` and `Bar`, and they are associated, their instances will have the following methods/mixins available, depending on the association type:\n\n### `Foo.hasOne(Bar)`\n\n* `fooInstance.getBar()`\n* `fooInstance.setBar()`\n* `fooInstance.createBar()`\n\nExample:\n\n```js\nconst foo = await Foo.create({ name: 'the-foo' });\nconst bar1 = await Bar.create({ name: 'some-bar' });\nconst bar2 = await Bar.create({ name: 'another-bar' });\nconsole.log(await foo.getBar()); // null\nawait foo.setBar(bar1);\nconsole.log((await foo.getBar()).name); // 'some-bar'\nawait foo.createBar({ name: 'yet-another-bar' });\nconst newlyAssociatedBar = await foo.getBar();\nconsole.log(newlyAssociatedBar.name); // 'yet-another-bar'\nawait foo.setBar(null); // Un-associate\nconsole.log(await foo.getBar()); // null\n```\n\n### `Foo.belongsTo(Bar)`\n\nThe same ones from `Foo.hasOne(Bar)`:\n\n* `fooInstance.getBar()`\n* `fooInstance.setBar()`\n* `fooInstance.createBar()`\n\n### `Foo.hasMany(Bar)`\n\n* `fooInstance.getBars()`\n* `fooInstance.countBars()`\n* `fooInstance.hasBar()`\n* `fooInstance.hasBars()`\n* `fooInstance.setBars()`\n* `fooInstance.addBar()`\n* `fooInstance.addBars()`\n* `fooInstance.removeBar()`\n* `fooInstance.removeBars()`\n* `fooInstance.createBar()`\n\nExample:\n\n```js\nconst foo = await Foo.create({ name: 'the-foo' });\nconst bar1 = await Bar.create({ name: 'some-bar' });\nconst bar2 = await Bar.create({ name: 'another-bar' });\nconsole.log(await foo.getBars()); // []\nconsole.log(await foo.countBars()); // 0\nconsole.log(await foo.hasBar(bar1)); // false\nawait foo.addBars([bar1, bar2]);\nconsole.log(await foo.countBars()); // 2\nawait foo.addBar(bar1);\nconsole.log(await foo.countBars()); // 2\nconsole.log(await foo.hasBar(bar1)); // true\nawait foo.removeBar(bar2);\nconsole.log(await foo.countBars()); // 1\nawait foo.createBar({ name: 'yet-another-bar' });\nconsole.log(await foo.countBars()); // 2\nawait foo.setBars([]); // Un-associate all previously associated bars\nconsole.log(await foo.countBars()); // 0\n```\n\nThe getter method accepts options just like the usual finder methods (such as `findAll`):\n\n```js\nconst easyTasks = await project.getTasks({\n  where: {\n    difficulty: {\n      [Op.lte]: 5\n    }\n  }\n});\nconst taskTitles = (await project.getTasks({\n  attributes: ['title'],\n  raw: true\n})).map(task => task.title);\n```\n\n### `Foo.belongsToMany(Bar, { through: Baz })`\n\nThe same ones from `Foo.hasMany(Bar)`:\n\n* `fooInstance.getBars()`\n* `fooInstance.countBars()`\n* `fooInstance.hasBar()`\n* `fooInstance.hasBars()`\n* `fooInstance.setBars()`\n* `fooInstance.addBar()`\n* `fooInstance.addBars()`\n* `fooInstance.removeBar()`\n* `fooInstance.removeBars()`\n* `fooInstance.createBar()`\n\nFor belongsToMany relationships, by default `getBars()` will return all fields from the join table. Note that any `include` options will apply to the target `Bar` object, so trying to set options for the join table as you would when eager loading with `find` methods is not possible. To choose what attributes of the join table to include, `getBars()` supports a `joinTableAttributes` option that can be used similarly to setting `through.attributes` in an `include`. As an example, given Foo belongsToMany Bar, the following will both output results without join table fields:\n\n```js\nconst foo = Foo.findByPk(id, {\n  include: [{\n    model: Bar,\n    through: { attributes: [] }\n  }]\n})\nconsole.log(foo.bars)\n\nconst foo = Foo.findByPk(id)\nconsole.log(foo.getBars({ joinTableAttributes: [] }))\n```\n\n### Note: Method names\n\nAs shown in the examples above, the names Sequelize gives to these special methods are formed by a prefix (e.g. `get`, `add`, `set`) concatenated with the model name (with the first letter in uppercase). When necessary, the plural is used, such as in `fooInstance.setBars()`. Again, irregular plurals are also handled automatically by Sequelize. For example, `Person` becomes `People` and `Hypothesis` becomes `Hypotheses`.\n\nIf an alias was defined, it will be used instead of the model name to form the method names. For example:\n\n```js\nTask.hasOne(User, { as: 'Author' });\n```\n\n* `taskInstance.getAuthor()`\n* `taskInstance.setAuthor()`\n* `taskInstance.createAuthor()`\n\n## Why associations are defined in pairs?\n\nAs mentioned earlier and shown in most examples above, usually associations in Sequelize are defined in pairs:\n\n* To create a **One-To-One** relationship, the `hasOne` and `belongsTo` associations are used together;\n* To create a **One-To-Many** relationship, the `hasMany` and `belongsTo` associations are used together;\n* To create a **Many-To-Many** relationship, two `belongsToMany` calls are used together.\n\nWhen a Sequelize association is defined between two models, only the *source* model *knows about it*. So, for example, when using `Foo.hasOne(Bar)` (so `Foo` is the source model and `Bar` is the target model), only `Foo` knows about the existence of this association. This is why in this case, as shown above, `Foo` instances gain the methods `getBar()`, `setBar()` and `createBar()`, while on the other hand `Bar` instances get nothing.\n\nSimilarly, for `Foo.hasOne(Bar)`, since `Foo` knows about the relationship, we can perform eager loading as in `Foo.findOne({ include: Bar })`, but we can't do `Bar.findOne({ include: Foo })`.\n\nTherefore, to bring full power to Sequelize usage, we usually setup the relationship in pairs, so that both models get to *know about it*.\n\nPractical demonstration:\n\n* If we do not define the pair of associations, calling for example just `Foo.hasOne(Bar)`:\n\n  ```js\n  // This works...\n  await Foo.findOne({ include: Bar });\n\n  // But this throws an error:\n  await Bar.findOne({ include: Foo });\n  // SequelizeEagerLoadingError: foo is not associated to bar!\n  ```\n\n* If we define the pair as recommended, i.e., both `Foo.hasOne(Bar)` and `Bar.belongsTo(Foo)`:\n\n  ```js\n  // This works!\n  await Foo.findOne({ include: Bar });\n\n  // This also works!\n  await Bar.findOne({ include: Foo });\n  ```\n\n## Multiple associations involving the same models\n\nIn Sequelize, it is possible to define multiple associations between the same models. You just have to define different aliases for them:\n\n```js\nTeam.hasOne(Game, { as: 'HomeTeam', foreignKey: 'homeTeamId' });\nTeam.hasOne(Game, { as: 'AwayTeam', foreignKey: 'awayTeamId' });\nGame.belongsTo(Team);\n```\n\n## Creating associations referencing a field which is not the primary key\n\nIn all the examples above, the associations were defined by referencing the primary keys of the involved models (in our case, their IDs). However, Sequelize allows you to define an association that uses another field, instead of the primary key field, to establish the association.\n\nThis other field must have a unique constraint on it (otherwise, it wouldn't make sense).\n\n### For `belongsTo` relationships\n\nFirst, recall that the `A.belongsTo(B)` association places the foreign key in the *source model* (i.e., in `A`).\n\nLet's again use the example of Ships and Captains. Additionally, we will assume that Captain names are unique:\n\n```js\nconst Ship = sequelize.define('ship', { name: DataTypes.TEXT }, { timestamps: false });\nconst Captain = sequelize.define('captain', {\n  name: { type: DataTypes.TEXT, unique: true }\n}, { timestamps: false });\n```\n\nThis way, instead of keeping the `captainId` on our Ships, we could keep a `captainName` instead and use it as our association tracker. In other words, instead of referencing the `id` from the target model (Captain), our relationship will reference another column on the target model: the `name` column. To specify this, we have to define a *target key*. We will also have to specify a name for the foreign key itself:\n\n```js\nShip.belongsTo(Captain, { targetKey: 'name', foreignKey: 'captainName' });\n// This creates a foreign key called `captainName` in the source model (Ship)\n// which references the `name` field from the target model (Captain).\n```\n\nNow we can do things like:\n\n```js\nawait Captain.create({ name: \"Jack Sparrow\" });\nconst ship = await Ship.create({ name: \"Black Pearl\", captainName: \"Jack Sparrow\" });\nconsole.log((await ship.getCaptain()).name); // \"Jack Sparrow\"\n```\n\n### For `hasOne` and `hasMany` relationships\n\nThe exact same idea can be applied to the `hasOne` and `hasMany` associations, but instead of providing a `targetKey`, we provide a `sourceKey` when defining the association. This is because unlike `belongsTo`, the `hasOne` and `hasMany` associations keep the foreign key on the target model:\n\n```js\nconst Foo = sequelize.define('foo', {\n  name: { type: DataTypes.TEXT, unique: true }\n}, { timestamps: false });\nconst Bar = sequelize.define('bar', {\n  title: { type: DataTypes.TEXT, unique: true }\n}, { timestamps: false });\nconst Baz = sequelize.define('baz', { summary: DataTypes.TEXT }, { timestamps: false });\nFoo.hasOne(Bar, { sourceKey: 'name', foreignKey: 'fooName' });\nBar.hasMany(Baz, { sourceKey: 'title', foreignKey: 'barTitle' });\n// [...]\nawait Bar.setFoo(\"Foo's Name Here\");\nawait Baz.addBar(\"Bar's Title Here\");\n```\n\n### For `belongsToMany` relationships\n\nThe same idea can also be applied to `belongsToMany` relationships. However, unlike the other situations, in which we have only one foreign key involved, the `belongsToMany` relationship involves two foreign keys which are kept on an extra table (the junction table).\n\nConsider the following setup:\n\n```js\nconst Foo = sequelize.define('foo', {\n  name: { type: DataTypes.TEXT, unique: true }\n}, { timestamps: false });\nconst Bar = sequelize.define('bar', {\n  title: { type: DataTypes.TEXT, unique: true }\n}, { timestamps: false });\n```\n\nThere are four cases to consider:\n\n* We might want a many-to-many relationship using the default primary keys for both `Foo` and `Bar`:\n\n```js\nFoo.belongsToMany(Bar, { through: 'foo_bar' });\n// This creates a junction table `foo_bar` with fields `fooId` and `barId`\n```\n\n* We might want a many-to-many relationship using the default primary key for `Foo` but a different field for `Bar`:\n\n```js\nFoo.belongsToMany(Bar, { through: 'foo_bar', targetKey: 'title' });\n// This creates a junction table `foo_bar` with fields `fooId` and `barTitle`\n```\n\n* We might want a many-to-many relationship using the a different field for `Foo` and the default primary key for `Bar`:\n\n```js\nFoo.belongsToMany(Bar, { through: 'foo_bar', sourceKey: 'name' });\n// This creates a junction table `foo_bar` with fields `fooName` and `barId`\n```\n\n* We might want a many-to-many relationship using different fields for both `Foo` and `Bar`:\n\n```js\nFoo.belongsToMany(Bar, { through: 'foo_bar', sourceKey: 'name', targetKey: 'title' });\n// This creates a junction table `foo_bar` with fields `fooName` and `barTitle`\n```\n\n### Notes\n\nDon't forget that the field referenced in the association must have a unique constraint placed on it. Otherwise, an error will be thrown (and sometimes with a mysterious error message - such as `SequelizeDatabaseError: SQLITE_ERROR: foreign key mismatch - \"ships\" referencing \"captains\"` for SQLite).\n\nThe trick to deciding between `sourceKey` and `targetKey` is just to remember where each relationship places its foreign key. As mentioned in the beginning of this guide:\n\n* `A.belongsTo(B)` keeps the foreign key in the source model (`A`), therefore the referenced key is in the target model, hence the usage of `targetKey`.\n\n* `A.hasOne(B)` and `A.hasMany(B)` keep the foreign key in the target model (`B`), therefore the referenced key is in the source model, hence the usage of `sourceKey`.\n\n* `A.belongsToMany(B)` involves an extra table (the junction table), therefore both `sourceKey` and `targetKey` are usable, with `sourceKey` corresponding to some field in `A` (the source) and `targetKey` corresponding to some field in `B` (the target).\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/docs/manual/core-concepts/paranoid.md",
    "name": "docs/manual/core-concepts/paranoid.md",
    "content": "# Paranoid\r\n\r\nSequelize supports the concept of *paranoid* tables. A *paranoid* table is one that, when told to delete a record, it will not truly delete it. Instead, a special column called `deletedAt` will have its value set to the timestamp of that deletion request.\r\n\r\nThis means that paranoid tables perform a *soft-deletion* of records, instead of a *hard-deletion*.\r\n\r\n## Defining a model as paranoid\r\n\r\nTo make a model paranoid, you must pass the `paranoid: true` option to the model definition. Paranoid requires timestamps to work (i.e. it won't work if you also pass `timestamps: false`).\r\n\r\nYou can also change the default column name (which is `deletedAt`) to something else.\r\n\r\n```js\r\nclass Post extends Model {}\r\nPost.init({ /* attributes here */ }, {\r\n  sequelize,\r\n  paranoid: true,\r\n\r\n  // If you want to give a custom name to the deletedAt column\r\n  deletedAt: 'destroyTime'\r\n});\r\n```\r\n\r\n## Deleting\r\n\r\nWhen you call the `destroy` method, a soft-deletion will happen:\r\n\r\n```js\r\nawait Post.destroy({\r\n  where: {\r\n    id: 1\r\n  }\r\n});\r\n// UPDATE \"posts\" SET \"deletedAt\"=[timestamp] WHERE \"deletedAt\" IS NULL AND \"id\" = 1\r\n```\r\n\r\nIf you really want a hard-deletion and your model is paranoid, you can force it using the `force: true` option:\r\n\r\n```js\r\nawait Post.destroy({\r\n  where: {\r\n    id: 1\r\n  },\r\n  force: true\r\n});\r\n// DELETE FROM \"posts\" WHERE \"id\" = 1\r\n```\r\n\r\nThe above examples used the static `destroy` method as an example (`Post.destroy`), but everything works in the same way with the instance method:\r\n\r\n```js\r\nconst post = await Post.create({ title: 'test' });\r\nconsole.log(post instanceof Post); // true\r\nawait post.destroy(); // Would just set the `deletedAt` flag\r\nawait post.destroy({ force: true }); // Would really delete the record\r\n```\r\n\r\n## Restoring\r\n\r\nTo restore soft-deleted records, you can use the `restore` method, which comes both in the static version as well as in the instance version:\r\n\r\n```js\r\n// Example showing the instance `restore` method\r\n// We create a post, soft-delete it and then restore it back\r\nconst post = await Post.create({ title: 'test' });\r\nconsole.log(post instanceof Post); // true\r\nawait post.destroy();\r\nconsole.log('soft-deleted!');\r\nawait post.restore();\r\nconsole.log('restored!');\r\n\r\n// Example showing the static `restore` method.\r\n// Restoring every soft-deleted post with more than 100 likes\r\nawait Post.restore({\r\n  where: {\r\n    likes: {\r\n      [Op.gt]: 100\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n## Behavior with other queries\r\n\r\nEvery query performed by Sequelize will automatically ignore soft-deleted records (except raw queries, of course).\r\n\r\nThis means that, for example, the `findAll` method will not see the soft-deleted records, fetching only the ones that were not deleted.\r\n\r\nEven if you simply call `findByPk` providing the primary key of a soft-deleted record, the result will be `null` as if that record didn't exist.\r\n\r\nIf you really want to let the query see the soft-deleted records, you can pass the `paranoid: false` option to the query method. For example:\r\n\r\n```js\r\nawait Post.findByPk(123); // This will return `null` if the record of id 123 is soft-deleted\r\nawait Post.findByPk(123, { paranoid: false }); // This will retrieve the record\r\n\r\nawait Post.findAll({\r\n  where: { foo: 'bar' }\r\n}); // This will not retrieve soft-deleted records\r\n\r\nawait Post.findAll({\r\n  where: { foo: 'bar' },\r\n  paranoid: false\r\n}); // This will also retrieve soft-deleted records\r\n```",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/docs/manual/advanced-association-concepts/eager-loading.md",
    "name": "docs/manual/advanced-association-concepts/eager-loading.md",
    "content": "# Eager Loading\r\n\r\nAs briefly mentioned in [the associations guide](assocs.html), eager Loading is the act of querying data of several models at once (one 'main' model and one or more associated models). At the SQL level, this is a query with one or more [joins](https://en.wikipedia.org/wiki/Join_\\(SQL\\)).\r\n\r\nWhen this is done, the associated models will be added by Sequelize in appropriately named, automatically created field(s) in the returned objects.\r\n\r\nIn Sequelize, eager loading is mainly done by using the `include` option on a model finder query (such as `findOne`, `findAll`, etc).\r\n\r\n## Basic example\r\n\r\nLet's assume the following setup:\r\n\r\n```js\r\nconst User = sequelize.define('user', { name: DataTypes.STRING }, { timestamps: false });\r\nconst Task = sequelize.define('task', { name: DataTypes.STRING }, { timestamps: false });\r\nconst Tool = sequelize.define('tool', {\r\n  name: DataTypes.STRING,\r\n  size: DataTypes.STRING\r\n}, { timestamps: false });\r\nUser.hasMany(Task);\r\nTask.belongsTo(User);\r\nUser.hasMany(Tool, { as: 'Instruments' });\r\n```\r\n\r\n### Fetching a single associated element\r\n\r\nOK. So, first of all, let's load all tasks with their associated user:\r\n\r\n```js\r\nconst tasks = await Task.findAll({ include: User });\r\nconsole.log(JSON.stringify(tasks, null, 2));\r\n```\r\n\r\nOutput:\r\n\r\n```json\r\n[{\r\n  \"name\": \"A Task\",\r\n  \"id\": 1,\r\n  \"userId\": 1,\r\n  \"user\": {\r\n    \"name\": \"John Doe\",\r\n    \"id\": 1\r\n  }\r\n}]\r\n```\r\n\r\nHere, `tasks[0].user instanceof User` is `true`. This shows that when Sequelize fetches associated models, they are added to the output object as model instances.\r\n\r\nAbove, the associated model was added to a new field called `user` in the fetched task. The name of this field was automatically chosen by Sequelize based on the name of the associated model, where its pluralized form is used when applicable (i.e., when  the association is `hasMany` or `belongsToMany`). In other words, since `Task.belongsTo(User)`, a task is associated to one user, therefore the logical choice is the singular form (which Sequelize follows automatically).\r\n\r\n### Fetching all associated elements\r\n\r\nNow, instead of loading the user that is associated to a given task, we will do the opposite - we will find all tasks associated to a given user.\r\n\r\nThe method call is essentially the same. The only difference is that now the extra field created in the query result uses the pluralized form (`tasks` in this case), and its value is an array of task instances (instead of a single instance, as above).\r\n\r\n```js\r\nconst users = await User.findAll({ include: Task });\r\nconsole.log(JSON.stringify(users, null, 2));\r\n```\r\n\r\nOutput:\r\n\r\n```json\r\n[{\r\n  \"name\": \"John Doe\",\r\n  \"id\": 1,\r\n  \"tasks\": [{\r\n    \"name\": \"A Task\",\r\n    \"id\": 1,\r\n    \"userId\": 1\r\n  }]\r\n}]\r\n```\r\n\r\nNotice that the accessor (the `tasks` property in the resulting instance) is pluralized since the association is one-to-many.\r\n\r\n### Fetching an Aliased association\r\n\r\nIf an association is aliased (using the `as` option), you must specify this alias when including the model. Instead of passing the model directly to the `include` option, you should instead provide an object with two options: `model` and `as`.\r\n\r\nNotice how the user's `Tool`s are aliased as `Instruments` above. In order to get that right you have to specify the model you want to load, as well as the alias:\r\n\r\n```js\r\nconst users = await User.findAll({\r\n  include: { model: Tool, as: 'Instruments' }\r\n});\r\nconsole.log(JSON.stringify(users, null, 2));\r\n```\r\n\r\nOutput:\r\n\r\n```json\r\n[{\r\n  \"name\": \"John Doe\",\r\n  \"id\": 1,\r\n  \"Instruments\": [{\r\n    \"name\": \"Scissor\",\r\n    \"id\": 1,\r\n    \"userId\": 1\r\n  }]\r\n}]\r\n```\r\n\r\nYou can also include by alias name by specifying a string that matches the association alias:\r\n\r\n```js\r\nUser.findAll({ include: 'Instruments' }); // Also works\r\nUser.findAll({ include: { association: 'Instruments' } }); // Also works\r\n```\r\n\r\n### Required eager loading\r\n\r\nWhen eager loading, we can force the query to return only records which have an associated model, effectively converting the query from the default `OUTER JOIN` to an `INNER JOIN`. This is done with the `required: true` option, as follows:\r\n\r\n```js\r\nUser.findAll({\r\n  include: {\r\n    model: Task,\r\n    required: true\r\n  }\r\n});\r\n```\r\n\r\nThis option also works on nested includes.\r\n\r\n### Eager loading filtered at the associated model level\r\n\r\nWhen eager loading, we can also filter the associated model using the `where` option, as in the following example:\r\n\r\n```js\r\nUser.findAll({\r\n  include: {\r\n    model: Tool,\r\n    as: 'Instruments'\r\n    where: {\r\n      size: {\r\n        [Op.ne]: 'small'\r\n      }\r\n    }\r\n  }\r\n});\r\n```\r\n\r\nGenerated SQL:\r\n\r\n```sql\r\nSELECT\r\n  `user`.`id`,\r\n  `user`.`name`,\r\n  `Instruments`.`id` AS `Instruments.id`,\r\n  `Instruments`.`name` AS `Instruments.name`,\r\n  `Instruments`.`size` AS `Instruments.size`,\r\n  `Instruments`.`userId` AS `Instruments.userId`\r\nFROM `users` AS `user`\r\nINNER JOIN `tools` AS `Instruments` ON\r\n  `user`.`id` = `Instruments`.`userId` AND\r\n  `Instruments`.`size` != 'small';\r\n```\r\n\r\nNote that the SQL query generated above will only fetch users that have at least one tool that matches the condition (of not being `small`, in this case). This is the case because, when the `where` option is used inside an `include`, Sequelize automatically sets the `required` option to `true`. This means that, instead of an `OUTER JOIN`, an `INNER JOIN` is done, returning only the parent models with at least one matching children.\r\n\r\nNote also that the `where` option used was converted into a condition for the `ON` clause of the `INNER JOIN`. In order to obtain a *top-level* `WHERE` clause, instead of an `ON` clause, something different must be done. This will be shown next.\r\n\r\n#### Referring to other columns\r\n\r\nIf you want to apply a `WHERE` clause in an included model referring to a value from an associated model, you can simply use the `Sequelize.col` function, as show in the example below:\r\n\r\n```js\r\n// Find all projects with a least one task where task.state === project.state\r\nProject.findAll({\r\n  include: {\r\n    model: Task,\r\n    where: {\r\n      state: Sequelize.col('project.state')\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n### Complex where clauses at the top-level\r\n\r\nTo obtain top-level `WHERE` clauses that involve nested columns, Sequelize provides a way to reference nested columns: the `'$nested.column$'` syntax.\r\n\r\nIt can be used, for example, to move the where conditions from an included model from the `ON` condition to a top-level `WHERE` clause.\r\n\r\n```js\r\nUser.findAll({\r\n  where: {\r\n    '$Instruments.size$': { [Op.ne]: 'small' }\r\n  },\r\n  include: [{\r\n    model: Tool,\r\n    as: 'Instruments'\r\n  }]\r\n});\r\n```\r\n\r\nGenerated SQL:\r\n\r\n```sql\r\nSELECT\r\n  `user`.`id`,\r\n  `user`.`name`,\r\n  `Instruments`.`id` AS `Instruments.id`,\r\n  `Instruments`.`name` AS `Instruments.name`,\r\n  `Instruments`.`size` AS `Instruments.size`,\r\n  `Instruments`.`userId` AS `Instruments.userId`\r\nFROM `users` AS `user`\r\nLEFT OUTER JOIN `tools` AS `Instruments` ON\r\n  `user`.`id` = `Instruments`.`userId`\r\nWHERE `Instruments`.`size` != 'small';\r\n```\r\n\r\nThe `$nested.column$` syntax also works for columns that are nested several levels deep, such as `$some.super.deeply.nested.column$`. Therefore, you can use this to make complex filters on deeply nested columns.\r\n\r\nFor a better understanding of all differences between the inner `where` option (used inside an `include`), with and without the `required` option, and a top-level `where` using the `$nested.column$` syntax, below we have four examples for you:\r\n\r\n```js\r\n// Inner where, with default `required: true`\r\nawait User.findAll({\r\n  include: {\r\n    model: Tool,\r\n    as: 'Instruments',\r\n    where: {\r\n      size: { [Op.ne]: 'small' }\r\n    }\r\n  }\r\n});\r\n\r\n// Inner where, `required: false`\r\nawait User.findAll({\r\n  include: {\r\n    model: Tool,\r\n    as: 'Instruments',\r\n    where: {\r\n      size: { [Op.ne]: 'small' }\r\n    },\r\n    required: false\r\n  }\r\n});\r\n\r\n// Top-level where, with default `required: false`\r\nawait User.findAll({\r\n  where: {\r\n    '$Instruments.size$': { [Op.ne]: 'small' }\r\n  },\r\n  include: {\r\n    model: Tool,\r\n    as: 'Instruments'\r\n  }\r\n});\r\n\r\n// Top-level where, `required: true`\r\nawait User.findAll({\r\n  where: {\r\n    '$Instruments.size$': { [Op.ne]: 'small' }\r\n  },\r\n  include: {\r\n    model: Tool,\r\n    as: 'Instruments',\r\n    required: true\r\n  }\r\n});\r\n```\r\n\r\nGenerated SQLs, in order:\r\n\r\n```sql\r\n-- Inner where, with default `required: true`\r\nSELECT [...] FROM `users` AS `user`\r\nINNER JOIN `tools` AS `Instruments` ON\r\n  `user`.`id` = `Instruments`.`userId`\r\n  AND `Instruments`.`size` != 'small';\r\n\r\n-- Inner where, `required: false`\r\nSELECT [...] FROM `users` AS `user`\r\nLEFT OUTER JOIN `tools` AS `Instruments` ON\r\n  `user`.`id` = `Instruments`.`userId`\r\n  AND `Instruments`.`size` != 'small';\r\n\r\n-- Top-level where, with default `required: false`\r\nSELECT [...] FROM `users` AS `user`\r\nLEFT OUTER JOIN `tools` AS `Instruments` ON\r\n  `user`.`id` = `Instruments`.`userId`\r\nWHERE `Instruments`.`size` != 'small';\r\n\r\n-- Top-level where, `required: true`\r\nSELECT [...] FROM `users` AS `user`\r\nINNER JOIN `tools` AS `Instruments` ON\r\n  `user`.`id` = `Instruments`.`userId`\r\nWHERE `Instruments`.`size` != 'small';\r\n```\r\n\r\n### Fetching with `RIGHT OUTER JOIN` (MySQL, MariaDB, PostgreSQL and MSSQL only)\r\n\r\nBy default, associations are loaded using a `LEFT OUTER JOIN` - that is to say it only includes records from the parent table. You can change this behavior to a `RIGHT OUTER JOIN` by passing the `right` option, if the dialect you are using supports it.\r\n\r\nCurrenly, SQLite does not support [right joins](https://www.sqlite.org/omitted.html).\r\n\r\n*Note:* `right` is only respected if `required` is false.\r\n\r\n```js\r\nUser.findAll({\r\n  include: [{\r\n    model: Task // will create a left join\r\n  }]\r\n});\r\nUser.findAll({\r\n  include: [{\r\n    model: Task,\r\n    right: true // will create a right join\r\n  }]\r\n});\r\nUser.findAll({\r\n  include: [{\r\n    model: Task,\r\n    required: true,\r\n    right: true // has no effect, will create an inner join\r\n  }]\r\n});\r\nUser.findAll({\r\n  include: [{\r\n    model: Task,\r\n    where: { name: { [Op.ne]: 'empty trash' } },\r\n    right: true // has no effect, will create an inner join\r\n  }]\r\n});\r\nUser.findAll({\r\n  include: [{\r\n    model: Tool,\r\n    where: { name: { [Op.ne]: 'empty trash' } },\r\n    required: false // will create a left join\r\n  }]\r\n});\r\nUser.findAll({\r\n  include: [{\r\n    model: Tool,\r\n    where: { name: { [Op.ne]: 'empty trash' } },\r\n    required: false\r\n    right: true // will create a right join\r\n  }]\r\n});\r\n```\r\n\r\n## Multiple eager loading\r\n\r\nThe `include` option can receive an array in order to fetch multiple associated models at once:\r\n\r\n```js\r\nFoo.findAll({\r\n  include: [\r\n    {\r\n      model: Bar,\r\n      required: true\r\n    },\r\n    {\r\n      model: Baz,\r\n      where: /* ... */\r\n    },\r\n    Qux // Shorthand syntax for { model: Qux } also works here\r\n  ]\r\n})\r\n```\r\n\r\n## Eager loading with Many-to-Many relationships\r\n\r\nWhen you perform eager loading on a model with a Belongs-to-Many relationship, Sequelize will fetch the junction table data as well, by default. For example:\r\n\r\n```js\r\nconst Foo = sequelize.define('Foo', { name: DataTypes.TEXT });\r\nconst Bar = sequelize.define('Bar', { name: DataTypes.TEXT });\r\nFoo.belongsToMany(Bar, { through: 'Foo_Bar' });\r\nBar.belongsToMany(Foo, { through: 'Foo_Bar' });\r\n\r\nawait sequelize.sync();\r\nconst foo = await Foo.create({ name: 'foo' });\r\nconst bar = await Bar.create({ name: 'bar' });\r\nawait foo.addBar(bar);\r\nconst fetchedFoo = await Foo.findOne({ include: Bar });\r\nconsole.log(JSON.stringify(fetchedFoo, null, 2));\r\n```\r\n\r\nOutput:\r\n\r\n```json\r\n{\r\n  \"id\": 1,\r\n  \"name\": \"foo\",\r\n  \"Bars\": [\r\n    {\r\n      \"id\": 1,\r\n      \"name\": \"bar\",\r\n      \"Foo_Bar\": {\r\n        \"FooId\": 1,\r\n        \"BarId\": 1\r\n      }\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nNote that every bar instance eager loaded into the `\"Bars\"` property has an extra property called `Foo_Bar` which is the relevant Sequelize instance of the junction model. By default, Sequelize fetches all attributes from the junction table in order to build this extra property.\r\n\r\nHowever, you can specify which attributes you want fetched. This is done with the `attributes` option applied inside the `through` option of the include. For example:\r\n\r\n```js\r\nFoo.findAll({\r\n  include: [{\r\n    model: Bar,\r\n    through: {\r\n      attributes: [/* list the wanted attributes here */]\r\n    }\r\n  }]\r\n});\r\n```\r\n\r\nIf you don't want anything from the junction table, you can explicitly provide an empty array to the `attributes` option inside the `through` option of the `include` option, and in this case nothing will be fetched and the extra property will not even be created:\r\n\r\n```js\r\nFoo.findOne({\r\n  include: {\r\n    model: Bar,\r\n    through: {\r\n      attributes: []\r\n    }\r\n  }\r\n});\r\n```\r\n\r\nOutput:\r\n\r\n```json\r\n{\r\n  \"id\": 1,\r\n  \"name\": \"foo\",\r\n  \"Bars\": [\r\n    {\r\n      \"id\": 1,\r\n      \"name\": \"bar\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nWhenever including a model from a Many-to-Many relationship, you can also apply a filter on the junction table. This is done with the `where` option applied inside the `through` option of the include. For example:\r\n\r\n```js\r\nUser.findAll({\r\n  include: [{\r\n    model: Project,\r\n    through: {\r\n      where: {\r\n        // Here, `completed` is a column present at the junction table\r\n        completed: true\r\n      }\r\n    }\r\n  }]\r\n});\r\n```\r\n\r\nGenerated SQL (using SQLite):\r\n\r\n```sql\r\nSELECT\r\n  `User`.`id`,\r\n  `User`.`name`,\r\n  `Projects`.`id` AS `Projects.id`,\r\n  `Projects`.`name` AS `Projects.name`,\r\n  `Projects->User_Project`.`completed` AS `Projects.User_Project.completed`,\r\n  `Projects->User_Project`.`UserId` AS `Projects.User_Project.UserId`,\r\n  `Projects->User_Project`.`ProjectId` AS `Projects.User_Project.ProjectId`\r\nFROM `Users` AS `User`\r\nLEFT OUTER JOIN `User_Projects` AS `Projects->User_Project` ON\r\n  `User`.`id` = `Projects->User_Project`.`UserId`\r\nLEFT OUTER JOIN `Projects` AS `Projects` ON\r\n  `Projects`.`id` = `Projects->User_Project`.`ProjectId` AND\r\n  `Projects->User_Project`.`completed` = 1;\r\n```\r\n\r\n## Including everything\r\n\r\nTo include all associated models, you can use the `all` and `nested` options:\r\n\r\n```js\r\n// Fetch all models associated with User\r\nUser.findAll({ include: { all: true }});\r\n\r\n// Fetch all models associated with User and their nested associations (recursively)\r\nUser.findAll({ include: { all: true, nested: true }});\r\n```\r\n\r\n## Including soft deleted records\r\n\r\nIn case you want to eager load soft deleted records you can do that by setting `include.paranoid` to `false`:\r\n\r\n```js\r\nUser.findAll({\r\n  include: [{\r\n    model: Tool,\r\n    as: 'Instruments',\r\n    where: { size: { [Op.ne]: 'small' } },\r\n    paranoid: false\r\n  }]\r\n});\r\n```\r\n\r\n## Ordering eager loaded associations\r\n\r\nWhen you want to apply `ORDER` clauses to eager loaded models, you must use the top-level `order` option with augmented arrays, starting with the specification of the nested model you want to sort.\r\n\r\nThis is better understood with examples.\r\n\r\n```js\r\nCompany.findAll({\r\n  include: Division,\r\n  order: [\r\n    // We start the order array with the model we want to sort\r\n    [Division, 'name', 'ASC']\r\n  ]\r\n});\r\nCompany.findAll({\r\n  include: Division,\r\n  order: [\r\n    [Division, 'name', 'DESC']\r\n  ]\r\n});\r\nCompany.findAll({\r\n  // If the include uses an alias...\r\n  include: { model: Division, as: 'Div' },\r\n  order: [\r\n    // ...we use the same syntax from the include\r\n    // in the beginning of the order array\r\n    [{ model: Division, as: 'Div' }, 'name', 'DESC']\r\n  ]\r\n});\r\n\r\nCompany.findAll({\r\n  // If we have includes nested in several levels...\r\n  include: {\r\n    model: Division,\r\n    include: Department\r\n  },\r\n  order: [\r\n    // ... we replicate the include chain of interest\r\n    // at the beginning of the order array\r\n    [Division, Department, 'name', 'DESC']\r\n  ]\r\n});\r\n```\r\n\r\nIn the case of many-to-many relationships, you are also able to sort by attributes in the through table. For example, assuming we have a Many-to-Many relationship between `Division` and `Department` whose junction model is `DepartmentDivision`, you can do:\r\n\r\n```js\r\nCompany.findAll({\r\n  include: {\r\n    model: Division,\r\n    include: Department\r\n  },\r\n  order: [\r\n    [Division, DepartmentDivision, 'name', 'ASC']\r\n  ]\r\n});\r\n```\r\n\r\nIn all the above examples, you have noticed that the `order` option is used at the top-level. The only situation in which `order` also works inside the include option is when `separate: true` is used. In that case, the usage is as follows:\r\n\r\n```js\r\n// This only works for `separate: true` (which in turn\r\n// only works for has-many relationships).\r\nUser.findAll({\r\n  include: {\r\n    model: Post,\r\n    separate: true,\r\n    order: [\r\n      ['createdAt', 'DESC']\r\n    ]\r\n  }\r\n});\r\n```\r\n\r\n### Complex ordering involving sub-queries\r\n\r\nTake a look at the [guide on sub-queries](sub-queries.html) for an example of how to use a sub-query to assist a more complex ordering.\r\n\r\n## Nested eager loading\r\n\r\nYou can use nested eager loading to load all related models of a related model:\r\n\r\n```js\r\nconst users = await User.findAll({\r\n  include: {\r\n    model: Tool,\r\n    as: 'Instruments',\r\n    include: {\r\n      model: Teacher,\r\n      include: [ /* etc */ ]\r\n    }\r\n  }\r\n});\r\nconsole.log(JSON.stringify(users, null, 2));\r\n```\r\n\r\nOutput:\r\n\r\n```json\r\n[{\r\n  \"name\": \"John Doe\",\r\n  \"id\": 1,\r\n  \"Instruments\": [{ // 1:M and N:M association\r\n    \"name\": \"Scissor\",\r\n    \"id\": 1,\r\n    \"userId\": 1,\r\n    \"Teacher\": { // 1:1 association\r\n      \"name\": \"Jimi Hendrix\"\r\n    }\r\n  }]\r\n}]\r\n```\r\n\r\nThis will produce an outer join. However, a `where` clause on a related model will create an inner join and return only the instances that have matching sub-models. To return all parent instances, you should add `required: false`.\r\n\r\n```js\r\nUser.findAll({\r\n  include: [{\r\n    model: Tool,\r\n    as: 'Instruments',\r\n    include: [{\r\n      model: Teacher,\r\n      where: {\r\n        school: \"Woodstock Music School\"\r\n      },\r\n      required: false\r\n    }]\r\n  }]\r\n});\r\n```\r\n\r\nThe query above will return all users, and all their instruments, but only those teachers associated with `Woodstock Music School`.\r\n\r\n## Using `findAndCountAll` with includes\r\n\r\nThe `findAndCountAll` utility function supports includes. Only the includes that are marked as `required` will be considered in `count`. For example, if you want to find and count all users who have a profile:\r\n\r\n```js\r\nUser.findAndCountAll({\r\n  include: [\r\n    { model: Profile, required: true }\r\n  ],\r\n  limit: 3\r\n});\r\n```\r\n\r\nBecause the include for `Profile` has `required` set it will result in an inner join, and only the users who have a profile will be counted. If we remove `required` from the include, both users with and without profiles will be counted. Adding a `where` clause to the include automatically makes it required:\r\n\r\n```js\r\nUser.findAndCountAll({\r\n  include: [\r\n    { model: Profile, where: { active: true } }\r\n  ],\r\n  limit: 3\r\n});\r\n```\r\n\r\nThe query above will only count users who have an active profile, because `required` is implicitly set to true when you add a where clause to the include.\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/docs/manual/advanced-association-concepts/creating-with-associations.md",
    "name": "docs/manual/advanced-association-concepts/creating-with-associations.md",
    "content": "# Creating with Associations\r\n\r\nAn instance can be created with nested association in one step, provided all elements are new.\r\n\r\nIn contrast, performing updates and deletions involving nested objects is currently not possible. For that, you will have to perform each separate action explicitly.\r\n\r\n## BelongsTo / HasMany / HasOne association\r\n\r\nConsider the following models:\r\n\r\n```js\r\nclass Product extends Model {}\r\nProduct.init({\r\n  title: Sequelize.STRING\r\n}, { sequelize, modelName: 'product' });\r\nclass User extends Model {}\r\nUser.init({\r\n  firstName: Sequelize.STRING,\r\n  lastName: Sequelize.STRING\r\n}, { sequelize, modelName: 'user' });\r\nclass Address extends Model {}\r\nAddress.init({\r\n  type: DataTypes.STRING,\r\n  line1: Sequelize.STRING,\r\n  line2: Sequelize.STRING,\r\n  city: Sequelize.STRING,\r\n  state: Sequelize.STRING,\r\n  zip: Sequelize.STRING,\r\n}, { sequelize, modelName: 'address' });\r\n\r\n// We save the return values of the association setup calls to use them later\r\nProduct.User = Product.belongsTo(User);\r\nUser.Addresses = User.hasMany(Address);\r\n// Also works for `hasOne`\r\n```\r\n\r\nA new `Product`, `User`, and one or more `Address` can be created in one step in the following way:\r\n\r\n```js\r\nreturn Product.create({\r\n  title: 'Chair',\r\n  user: {\r\n    firstName: 'Mick',\r\n    lastName: 'Broadstone',\r\n    addresses: [{\r\n      type: 'home',\r\n      line1: '100 Main St.',\r\n      city: 'Austin',\r\n      state: 'TX',\r\n      zip: '78704'\r\n    }]\r\n  }\r\n}, {\r\n  include: [{\r\n    association: Product.User,\r\n    include: [ User.Addresses ]\r\n  }]\r\n});\r\n```\r\n\r\nObserve the usage of the `include` option in the `Product.create` call. That is necessary for Sequelize to understand what you are trying to create along with the association.\r\n\r\nNote: here, our user model is called `user`, with a lowercase `u` - This means that the property in the object should also be `user`. If the name given to `sequelize.define` was `User`, the key in the object should also be `User`. Likewise for `addresses`, except it's pluralized being a `hasMany` association.\r\n\r\n## BelongsTo association with an alias\r\n\r\nThe previous example can be extended to support an association alias.\r\n\r\n```js\r\nconst Creator = Product.belongsTo(User, { as: 'creator' });\r\n\r\nreturn Product.create({\r\n  title: 'Chair',\r\n  creator: {\r\n    firstName: 'Matt',\r\n    lastName: 'Hansen'\r\n  }\r\n}, {\r\n  include: [ Creator ]\r\n});\r\n```\r\n\r\n## HasMany / BelongsToMany association\r\n\r\nLet's introduce the ability to associate a product with many tags. Setting up the models could look like:\r\n\r\n```js\r\nclass Tag extends Model {}\r\nTag.init({\r\n  name: Sequelize.STRING\r\n}, { sequelize, modelName: 'tag' });\r\n\r\nProduct.hasMany(Tag);\r\n// Also works for `belongsToMany`.\r\n```\r\n\r\nNow we can create a product with multiple tags in the following way:\r\n\r\n```js\r\nProduct.create({\r\n  id: 1,\r\n  title: 'Chair',\r\n  tags: [\r\n    { name: 'Alpha'},\r\n    { name: 'Beta'}\r\n  ]\r\n}, {\r\n  include: [ Tag ]\r\n})\r\n```\r\n\r\nAnd, we can modify this example to support an alias as well:\r\n\r\n```js\r\nconst Categories = Product.hasMany(Tag, { as: 'categories' });\r\n\r\nProduct.create({\r\n  id: 1,\r\n  title: 'Chair',\r\n  categories: [\r\n    { id: 1, name: 'Alpha' },\r\n    { id: 2, name: 'Beta' }\r\n  ]\r\n}, {\r\n  include: [{\r\n    association: Categories,\r\n    as: 'categories'\r\n  }]\r\n})\r\n```",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/docs/manual/advanced-association-concepts/advanced-many-to-many.md",
    "name": "docs/manual/advanced-association-concepts/advanced-many-to-many.md",
    "content": "# Advanced M:N Associations\r\n\r\nMake sure you have read the [associations guide](assocs.html) before reading this guide.\r\n\r\nLet's start with an example of a Many-to-Many relationship between `User` and `Profile`.\r\n\r\n```js\r\nconst User = sequelize.define('user', {\r\n  username: DataTypes.STRING,\r\n  points: DataTypes.INTEGER\r\n}, { timestamps: false });\r\nconst Profile = sequelize.define('profile', {\r\n  name: DataTypes.STRING\r\n}, { timestamps: false });\r\n```\r\n\r\nThe simplest way to define the Many-to-Many relationship is:\r\n\r\n```js\r\nUser.belongsToMany(Profile, { through: 'User_Profiles' });\r\nProfile.belongsToMany(User, { through: 'User_Profiles' });\r\n```\r\n\r\nBy passing a string to `through` above, we are asking Sequelize to automatically generate a model named `User_Profiles` as the *through table* (also known as junction table), with only two columns: `userId` and `profileId`. A composite unique key will be established on these two columns.\r\n\r\nWe can also define ourselves a model to be used as the through table.\r\n\r\n```js\r\nconst User_Profile = sequelize.define('User_Profile', {}, { timestamps: false });\r\nUser.belongsToMany(Profile, { through: User_Profile });\r\nProfile.belongsToMany(User, { through: User_Profile });\r\n```\r\n\r\nThe above has the exact same effect. Note that we didn't define any attributes on the `User_Profile` model. The fact that we passed it into a `belongsToMany` call tells sequelize to create the two attributes `userId` and `profileId` automatically, just like other associations also cause Sequelize to automatically add a column to one of the involved models.\r\n\r\nHowever, defining the model by ourselves has several advantages. We can, for example, define more columns on our through table:\r\n\r\n```js\r\nconst User_Profile = sequelize.define('User_Profile', {\r\n  selfGranted: DataTypes.BOOLEAN\r\n}, { timestamps: false });\r\nUser.belongsToMany(Profile, { through: User_Profile });\r\nProfile.belongsToMany(User, { through: User_Profile });\r\n```\r\n\r\nWith this, we can now track an extra information at the through table, namely the `selfGranted` boolean. For example, when calling the `user.addProfile()` we can pass values for the extra columns using the `through` option.\r\n\r\nExample:\r\n\r\n```js\r\nconst amidala = await User.create({ username: 'p4dm3', points: 1000 });\r\nconst queen = await Profile.create({ name: 'Queen' });\r\nawait amidala.addProfile(queen, { through: { selfGranted: false } });\r\nconst result = await User.findOne({\r\n  where: { username: 'p4dm3' },\r\n  include: Profile\r\n});\r\nconsole.log(result);\r\n```\r\n\r\nOutput:\r\n\r\n```json\r\n{\r\n  \"id\": 4,\r\n  \"username\": \"p4dm3\",\r\n  \"points\": 1000,\r\n  \"profiles\": [\r\n    {\r\n      \"id\": 6,\r\n      \"name\": \"queen\",\r\n      \"User_Profile\": {\r\n        \"userId\": 4,\r\n        \"profileId\": 6,\r\n        \"selfGranted\": false\r\n      }\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nYou can create all relationship in single `create` call too.\r\n\r\nExample:\r\n\r\n```js\r\nconst amidala = await User.create({\r\n  username: 'p4dm3',\r\n  points: 1000,\r\n  profiles: [{\r\n    name: 'Queen',\r\n    User_Profile: {\r\n      selfGranted: true\r\n    }\r\n  }]\r\n}, {\r\n  include: Profile\r\n});\r\n\r\nconst result = await User.findOne({\r\n  where: { username: 'p4dm3' },\r\n  include: Profile\r\n});\r\n\r\nconsole.log(result);\r\n```\r\n\r\nOutput:\r\n\r\n```json\r\n{\r\n  \"id\": 1,\r\n  \"username\": \"p4dm3\",\r\n  \"points\": 1000,\r\n  \"profiles\": [\r\n    {\r\n      \"id\": 1,\r\n      \"name\": \"Queen\",\r\n      \"User_Profile\": {\r\n        \"selfGranted\": true,\r\n        \"userId\": 1,\r\n        \"profileId\": 1\r\n      }\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nYou probably noticed that the `User_Profiles` table does not have an `id` field. As mentioned above, it has a composite unique key instead. The name of this composite unique key is chosen automatically by Sequelize but can be customized with the `uniqueKey` option:\r\n\r\n```js\r\nUser.belongsToMany(Profile, { through: User_Profiles, uniqueKey: 'my_custom_unique' });\r\n```\r\n\r\nAnother possibility, if desired, is to force the through table to have a primary key just like other standard tables. To do this, simply define the primary key in the model:\r\n\r\n```js\r\nconst User_Profile = sequelize.define('User_Profile', {\r\n  id: {\r\n    type: DataTypes.INTEGER,\r\n    primaryKey: true,\r\n    autoIncrement: true,\r\n    allowNull: false\r\n  },\r\n  selfGranted: DataTypes.BOOLEAN\r\n}, { timestamps: false });\r\nUser.belongsToMany(Profile, { through: User_Profile });\r\nProfile.belongsToMany(User, { through: User_Profile });\r\n```\r\n\r\nThe above will still create two columns `userId` and `profileId`, of course, but instead of setting up a composite unique key on them, the model will use its `id` column as primary key. Everything else will still work just fine.\r\n\r\n## Through tables versus normal tables and the \"Super Many-to-Many association\"\r\n\r\nNow we will compare the usage of the last Many-to-Many setup shown above with the usual One-to-Many relationships, so that in the end we conclude with the concept of a *\"Super Many-to-Many relationship\"*.\r\n\r\n### Models recap (with minor rename)\r\n\r\nTo make things easier to follow, let's rename our `User_Profile` model to `grant`. Note that everything works in the same way as before. Our models are:\r\n\r\n```js\r\nconst User = sequelize.define('user', {\r\n  username: DataTypes.STRING,\r\n  points: DataTypes.INTEGER\r\n}, { timestamps: false });\r\n\r\nconst Profile = sequelize.define('profile', {\r\n  name: DataTypes.STRING\r\n}, { timestamps: false });\r\n\r\nconst Grant = sequelize.define('grant', {\r\n  id: {\r\n    type: DataTypes.INTEGER,\r\n    primaryKey: true,\r\n    autoIncrement: true,\r\n    allowNull: false\r\n  },\r\n  selfGranted: DataTypes.BOOLEAN\r\n}, { timestamps: false });\r\n```\r\n\r\nWe established a Many-to-Many relationship between `User` and `Profile` using the `Grant` model as the through table:\r\n\r\n```js\r\nUser.belongsToMany(Profile, { through: Grant });\r\nProfile.belongsToMany(User, { through: Grant });\r\n```\r\n\r\nThis automatically added the columns `userId` and `profileId` to the `Grant` model.\r\n\r\n**Note:** As shown above, we have chosen to force the `grant` model to have a single primary key (called `id`, as usual). This is necessary for the *Super Many-to-Many relationship* that will be defined soon.\r\n\r\n### Using One-to-Many relationships instead\r\n\r\nInstead of setting up the Many-to-Many relationship defined above, what if we did the following instead?\r\n\r\n```js\r\n// Setup a One-to-Many relationship between User and Grant\r\nUser.hasMany(Grant);\r\nGrant.belongsTo(User);\r\n\r\n// Also setup a One-to-Many relationship between Profile and Grant\r\nProfile.hasMany(Grant);\r\nGrant.belongsTo(Profile);\r\n```\r\n\r\nThe result is essentially the same! This is because `User.hasMany(Grant)` and `Profile.hasMany(Grant)` will automatically add the `userId` and `profileId` columns to `Grant`, respectively.\r\n\r\nThis shows that one Many-to-Many relationship isn't very different from two One-to-Many relationships. The tables in the database look the same.\r\n\r\nThe only difference is when you try to perform an eager load with Sequelize.\r\n\r\n```js\r\n// With the Many-to-Many approach, you can do:\r\nUser.findAll({ include: Profile });\r\nProfile.findAll({ include: User });\r\n// However, you can't do:\r\nUser.findAll({ include: Grant });\r\nProfile.findAll({ include: Grant });\r\nGrant.findAll({ include: User });\r\nGrant.findAll({ include: Profile });\r\n\r\n// On the other hand, with the double One-to-Many approach, you can do:\r\nUser.findAll({ include: Grant });\r\nProfile.findAll({ include: Grant });\r\nGrant.findAll({ include: User });\r\nGrant.findAll({ include: Profile });\r\n// However, you can't do:\r\nUser.findAll({ include: Profile });\r\nProfile.findAll({ include: User });\r\n// Although you can emulate those with nested includes, as follows:\r\nUser.findAll({\r\n  include: {\r\n    model: Grant,\r\n    include: Profile\r\n  }\r\n}); // This emulates the `User.findAll({ include: Profile })`, however\r\n    // the resulting object structure is a bit different. The original\r\n    // structure has the form `user.profiles[].grant`, while the emulated\r\n    // structure has the form `user.grants[].profiles[]`.\r\n```\r\n\r\n### The best of both worlds: the Super Many-to-Many relationship\r\n\r\nWe can simply combine both approaches shown above!\r\n\r\n```js\r\n// The Super Many-to-Many relationship\r\nUser.belongsToMany(Profile, { through: Grant });\r\nProfile.belongsToMany(User, { through: Grant });\r\nUser.hasMany(Grant);\r\nGrant.belongsTo(User);\r\nProfile.hasMany(Grant);\r\nGrant.belongsTo(Profile);\r\n```\r\n\r\nThis way, we can do all kinds of eager loading:\r\n\r\n```js\r\n// All these work:\r\nUser.findAll({ include: Profile });\r\nProfile.findAll({ include: User });\r\nUser.findAll({ include: Grant });\r\nProfile.findAll({ include: Grant });\r\nGrant.findAll({ include: User });\r\nGrant.findAll({ include: Profile });\r\n```\r\n\r\nWe can even perform all kinds of deeply nested includes:\r\n\r\n```js\r\nUser.findAll({\r\n  include: [\r\n    {\r\n      model: Grant,\r\n      include: [User, Profile]\r\n    },\r\n    {\r\n      model: Profile,\r\n      include: {\r\n        model: User,\r\n        include: {\r\n          model: Grant,\r\n          include: [User, Profile]\r\n        }\r\n      }\r\n    }\r\n  ]\r\n});\r\n```\r\n\r\n## Aliases and custom key names\r\n\r\nSimilarly to the other relationships, aliases can be defined for Many-to-Many relationships.\r\n\r\nBefore proceeding, please recall [the aliasing example for `belongsTo`](assocs.html#defining-an-alias) on the [associations guide](assocs.html). Note that, in that case, defining an association impacts both the way includes are done (i.e. passing the association name) and the name Sequelize chooses for the foreign key (in that example, `leaderId` was created on the `Ship` model).\r\n\r\nDefining an alias for a `belongsToMany` association also impacts the way includes are performed:\r\n\r\n```js\r\nProduct.belongsToMany(Category, { as: 'groups', through: 'product_categories' });\r\nCategory.belongsToMany(Product, { as: 'items', through: 'product_categories' });\r\n\r\n// [...]\r\n\r\nawait Product.findAll({ include: Category }); // This doesn't work\r\n\r\nawait Product.findAll({ // This works, passing the alias\r\n  include: {\r\n    model: Category,\r\n    as: 'groups'\r\n  }\r\n});\r\n\r\nawait Product.findAll({ include: 'groups' }); // This also works\r\n```\r\n\r\nHowever, defining an alias here has nothing to do with the foreign key names. The names of both foreign keys created in the through table are still constructed by Sequelize based on the name of the models being associated. This can readily be seen by inspecting the generated SQL for the through table in the example above:\r\n\r\n```sql\r\nCREATE TABLE IF NOT EXISTS `product_categories` (\r\n  `createdAt` DATETIME NOT NULL,\r\n  `updatedAt` DATETIME NOT NULL,\r\n  `productId` INTEGER NOT NULL REFERENCES `products` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,\r\n  `categoryId` INTEGER NOT NULL REFERENCES `categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,\r\n  PRIMARY KEY (`productId`, `categoryId`)\r\n);\r\n```\r\n\r\nWe can see that the foreign keys are `productId` and `categoryId`. To change these names, Sequelize accepts the options `foreignKey` and `otherKey` respectively (i.e., the `foreignKey` defines the key for the source model in the through relation, and `otherKey` defines it for the target model):\r\n\r\n```js\r\nProduct.belongsToMany(Category, {\r\n  through: 'product_categories',\r\n  foreignKey: 'objectId', // replaces `productId`\r\n  otherKey: 'typeId' // replaces `categoryId`\r\n});\r\nCategory.belongsToMany(Product, {\r\n  through: 'product_categories',\r\n  foreignKey: 'typeId', // replaces `categoryId`\r\n  otherKey: 'objectId' // replaces `productId`\r\n});\r\n```\r\n\r\nGenerated SQL:\r\n\r\n```sql\r\nCREATE TABLE IF NOT EXISTS `product_categories` (\r\n  `createdAt` DATETIME NOT NULL,\r\n  `updatedAt` DATETIME NOT NULL,\r\n  `objectId` INTEGER NOT NULL REFERENCES `products` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,\r\n  `typeId` INTEGER NOT NULL REFERENCES `categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,\r\n  PRIMARY KEY (`objectId`, `typeId`)\r\n);\r\n```\r\n\r\nAs shown above, when you define a Many-to-Many relationship with two `belongsToMany` calls (which is the standard way), you should provide the `foreignKey` and `otherKey` options appropriately in both calls. If you pass these options in only one of the calls, the Sequelize behavior will be unreliable.\r\n\r\n## Self-references\r\n\r\nSequelize supports self-referential Many-to-Many relationships, intuitively:\r\n\r\n```js\r\nPerson.belongsToMany(Person, { as: 'Children', through: 'PersonChildren' })\r\n// This will create the table PersonChildren which stores the ids of the objects.\r\n```\r\n\r\n## Specifying attributes from the through table\r\n\r\nBy default, when eager loading a many-to-many relationship, Sequelize will return data in the following structure (based on the first example in this guide):\r\n\r\n```json\r\n// User.findOne({ include: Profile })\r\n{\r\n  \"id\": 4,\r\n  \"username\": \"p4dm3\",\r\n  \"points\": 1000,\r\n  \"profiles\": [\r\n    {\r\n      \"id\": 6,\r\n      \"name\": \"queen\",\r\n      \"grant\": {\r\n        \"userId\": 4,\r\n        \"profileId\": 6,\r\n        \"selfGranted\": false\r\n      }\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nNotice that the outer object is an `User`, which has a field called `profiles`, which is a `Profile` array, such that each `Profile` comes with an extra field called `grant` which is a `Grant` instance. This is the default structure created by Sequelize when eager loading from a Many-to-Many relationship.\r\n\r\nHowever, if you want only some of the attributes of the through table, you can provide an array with the attributes you want in the `attributes` option. For example, if you only want the `selfGranted` attribute from the through table:\r\n\r\n```js\r\nUser.findOne({\r\n  include: {\r\n    model: Profile,\r\n    through: {\r\n      attributes: ['selfGranted']\r\n    }\r\n  }\r\n});\r\n```\r\n\r\nOutput:\r\n\r\n```json\r\n{\r\n  \"id\": 4,\r\n  \"username\": \"p4dm3\",\r\n  \"points\": 1000,\r\n  \"profiles\": [\r\n    {\r\n      \"id\": 6,\r\n      \"name\": \"queen\",\r\n      \"grant\": {\r\n        \"selfGranted\": false\r\n      }\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nIf you don't want the nested `grant` field at all, use `attributes: []`:\r\n\r\n```js\r\nUser.findOne({\r\n  include: {\r\n    model: Profile,\r\n    through: {\r\n      attributes: []\r\n    }\r\n  }\r\n});\r\n```\r\n\r\nOutput:\r\n\r\n```json\r\n{\r\n  \"id\": 4,\r\n  \"username\": \"p4dm3\",\r\n  \"points\": 1000,\r\n  \"profiles\": [\r\n    {\r\n      \"id\": 6,\r\n      \"name\": \"queen\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nIf you are using mixins (such as `user.getProfiles()`) instead of finder methods (such as `User.findAll()`), you have to use the `joinTableAttributes` option instead:\r\n\r\n```js\r\nsomeUser.getProfiles({ joinTableAttributes: ['selfGranted'] });\r\n```\r\n\r\nOutput:\r\n\r\n```json\r\n[\r\n  {\r\n    \"id\": 6,\r\n    \"name\": \"queen\",\r\n    \"grant\": {\r\n      \"selfGranted\": false\r\n    }\r\n  }\r\n]\r\n```\r\n\r\n## Many-to-many-to-many relationships and beyond\r\n\r\nConsider you are trying to model a game championship. There are players and teams. Teams play games. However, players can change teams in the middle of the championship (but not in the middle of a game). So, given one specific game, there are certain teams participating in that game, and each of these teams has a set of players (for that game).\r\n\r\nSo we start by defining the three relevant models:\r\n\r\n```js\r\nconst Player = sequelize.define('Player', { username: DataTypes.STRING });\r\nconst Team = sequelize.define('Team', { name: DataTypes.STRING });\r\nconst Game = sequelize.define('Game', { name: DataTypes.INTEGER });\r\n```\r\n\r\nNow, the question is: how to associate them?\r\n\r\nFirst, we note that:\r\n\r\n* One game has many teams associated to it (the ones that are playing that game);\r\n* One team may have participated in many games.\r\n\r\nThe above observations show that we need a Many-to-Many relationship between Game and Team. Let's use the Super Many-to-Many relationship as explained earlier in this guide:\r\n\r\n```js\r\n// Super Many-to-Many relationship between Game and Team\r\nconst GameTeam = sequelize.define('GameTeam', {\r\n  id: {\r\n    type: DataTypes.INTEGER,\r\n    primaryKey: true,\r\n    autoIncrement: true,\r\n    allowNull: false\r\n  }\r\n});\r\nTeam.belongsToMany(Game, { through: GameTeam });\r\nGame.belongsToMany(Team, { through: GameTeam });\r\nGameTeam.belongsTo(Game);\r\nGameTeam.belongsTo(Team);\r\nGame.hasMany(GameTeam);\r\nTeam.hasMany(GameTeam);\r\n```\r\n\r\nThe part about players is trickier. We note that the set of players that form a team depends not only on the team (obviously), but also on which game is being considered. Therefore, we don't want a Many-to-Many relationship between Player and Team. We also don't want a Many-to-Many relationship between Player and Game. Instead of associating a Player to any of those models, what we need is an association between a Player and something like a *\"team-game pair constraint\"*, since it is the pair (team plus game) that defines which players belong there. So what we are looking for turns out to be precisely the junction model, GameTeam, itself! And, we note that, since a given *game-team pair* specifies many players, and on the other hand that the same player can participate of many *game-team pairs*, we need a Many-to-Many relationship between Player and GameTeam!\r\n\r\nTo provide the greatest flexibility, let's use the Super Many-to-Many relationship construction here again:\r\n\r\n```js\r\n// Super Many-to-Many relationship between Player and GameTeam\r\nconst PlayerGameTeam = sequelize.define('PlayerGameTeam', {\r\n  id: {\r\n    type: DataTypes.INTEGER,\r\n    primaryKey: true,\r\n    autoIncrement: true,\r\n    allowNull: false\r\n  }\r\n});\r\nPlayer.belongsToMany(GameTeam, { through: PlayerGameTeam });\r\nGameTeam.belongsToMany(Player, { through: PlayerGameTeam });\r\nPlayerGameTeam.belongsTo(Player);\r\nPlayerGameTeam.belongsTo(GameTeam);\r\nPlayer.hasMany(PlayerGameTeam);\r\nGameTeam.hasMany(PlayerGameTeam);\r\n```\r\n\r\nThe above associations achieve precisely what we want. Here is a full runnable example of this:\r\n\r\n```js\r\nconst { Sequelize, Op, Model, DataTypes } = require('sequelize');\r\nconst sequelize = new Sequelize('sqlite::memory:', {\r\n  define: { timestamps: false } // Just for less clutter in this example\r\n});\r\nconst Player = sequelize.define('Player', { username: DataTypes.STRING });\r\nconst Team = sequelize.define('Team', { name: DataTypes.STRING });\r\nconst Game = sequelize.define('Game', { name: DataTypes.INTEGER });\r\n\r\n// We apply a Super Many-to-Many relationship between Game and Team\r\nconst GameTeam = sequelize.define('GameTeam', {\r\n  id: {\r\n    type: DataTypes.INTEGER,\r\n    primaryKey: true,\r\n    autoIncrement: true,\r\n    allowNull: false\r\n  }\r\n});\r\nTeam.belongsToMany(Game, { through: GameTeam });\r\nGame.belongsToMany(Team, { through: GameTeam });\r\nGameTeam.belongsTo(Game);\r\nGameTeam.belongsTo(Team);\r\nGame.hasMany(GameTeam);\r\nTeam.hasMany(GameTeam);\r\n\r\n// We apply a Super Many-to-Many relationship between Player and GameTeam\r\nconst PlayerGameTeam = sequelize.define('PlayerGameTeam', {\r\n  id: {\r\n    type: DataTypes.INTEGER,\r\n    primaryKey: true,\r\n    autoIncrement: true,\r\n    allowNull: false\r\n  }\r\n});\r\nPlayer.belongsToMany(GameTeam, { through: PlayerGameTeam });\r\nGameTeam.belongsToMany(Player, { through: PlayerGameTeam });\r\nPlayerGameTeam.belongsTo(Player);\r\nPlayerGameTeam.belongsTo(GameTeam);\r\nPlayer.hasMany(PlayerGameTeam);\r\nGameTeam.hasMany(PlayerGameTeam);\r\n\r\n(async () => {\r\n\r\n  await sequelize.sync();\r\n  await Player.bulkCreate([\r\n    { username: 's0me0ne' },\r\n    { username: 'empty' },\r\n    { username: 'greenhead' },\r\n    { username: 'not_spock' },\r\n    { username: 'bowl_of_petunias' }\r\n  ]);\r\n  await Game.bulkCreate([\r\n    { name: 'The Big Clash' },\r\n    { name: 'Winter Showdown' },\r\n    { name: 'Summer Beatdown' }\r\n  ]);\r\n  await Team.bulkCreate([\r\n    { name: 'The Martians' },\r\n    { name: 'The Earthlings' },\r\n    { name: 'The Plutonians' }\r\n  ]);\r\n\r\n  // Let's start defining which teams were in which games. This can be done\r\n  // in several ways, such as calling `.setTeams` on each game. However, for\r\n  // brevity, we will use direct `create` calls instead, referring directly\r\n  // to the IDs we want. We know that IDs are given in order starting from 1.\r\n  await GameTeam.bulkCreate([\r\n    { GameId: 1, TeamId: 1 },   // this GameTeam will get id 1\r\n    { GameId: 1, TeamId: 2 },   // this GameTeam will get id 2\r\n    { GameId: 2, TeamId: 1 },   // this GameTeam will get id 3\r\n    { GameId: 2, TeamId: 3 },   // this GameTeam will get id 4\r\n    { GameId: 3, TeamId: 2 },   // this GameTeam will get id 5\r\n    { GameId: 3, TeamId: 3 }    // this GameTeam will get id 6\r\n  ]);\r\n\r\n  // Now let's specify players.\r\n  // For brevity, let's do it only for the second game (Winter Showdown).\r\n  // Let's say that that s0me0ne and greenhead played for The Martians, while\r\n  // not_spock and bowl_of_petunias played for The Plutonians:\r\n  await PlayerGameTeam.bulkCreate([\r\n    // In 'Winter Showdown' (i.e. GameTeamIds 3 and 4):\r\n    { PlayerId: 1, GameTeamId: 3 },   // s0me0ne played for The Martians\r\n    { PlayerId: 3, GameTeamId: 3 },   // greenhead played for The Martians\r\n    { PlayerId: 4, GameTeamId: 4 },   // not_spock played for The Plutonians\r\n    { PlayerId: 5, GameTeamId: 4 }    // bowl_of_petunias played for The Plutonians\r\n  ]);\r\n\r\n  // Now we can make queries!\r\n  const game = await Game.findOne({\r\n    where: {\r\n      name: \"Winter Showdown\"\r\n    },\r\n    include: {\r\n      model: GameTeam,\r\n      include: [\r\n        {\r\n          model: Player,\r\n          through: { attributes: [] } // Hide unwanted `PlayerGameTeam` nested object from results\r\n        },\r\n        Team\r\n      ]\r\n    }\r\n  });\r\n\r\n  console.log(`Found game: \"${game.name}\"`);\r\n  for (let i = 0; i < game.GameTeams.length; i++) {\r\n    const team = game.GameTeams[i].Team;\r\n    const players = game.GameTeams[i].Players;\r\n    console.log(`- Team \"${team.name}\" played game \"${game.name}\" with the following players:`);\r\n    console.log(players.map(p => `--- ${p.username}`).join('\\n'));\r\n  }\r\n\r\n})();\r\n```\r\n\r\nOutput:\r\n\r\n```text\r\nFound game: \"Winter Showdown\"\r\n- Team \"The Martians\" played game \"Winter Showdown\" with the following players:\r\n--- s0me0ne\r\n--- greenhead\r\n- Team \"The Plutonians\" played game \"Winter Showdown\" with the following players:\r\n--- not_spock\r\n--- bowl_of_petunias\r\n```\r\n\r\nSo this is how we can achieve a *many-to-many-to-many* relationship between three models in Sequelize, by taking advantage of the Super Many-to-Many relationship technique!\r\n\r\nThis idea can be applied recursively for even more complex, *many-to-many-to-...-to-many* relationships (although at some point queries might become slow).\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/docs/manual/advanced-association-concepts/association-scopes.md",
    "name": "docs/manual/advanced-association-concepts/association-scopes.md",
    "content": "# Association Scopes\r\n\r\nThis section concerns association scopes, which are similar but not the same as [model scopes](scopes.html).\r\n\r\nAssociation scopes can be placed both on the associated model (the target of the association) and on the through table for Many-to-Many relationships.\r\n\r\n## Concept\r\n\r\nSimilarly to how a [model scope](scopes.html) is automatically applied on the model static calls, such as `Model.scope('foo').findAll()`, an association scope is a rule (more precisely, a set of default attributes and options) that is automatically applied on instance calls from the model. Here, *instance calls* mean method calls that are called from an instance (rather than from the Model itself). Mixins are the main example of instance methods (`instance.getSomething`, `instance.setSomething`, `instance.addSomething` and `instance.createSomething`).\r\n\r\nAssociation scopes behave just like model scopes, in the sense that both cause an automatic application of things like `where` clauses to finder calls; the difference being that instead of applying to static finder calls (which is the case for model scopes), the association scopes automatically apply to instance finder calls (such as mixins).\r\n\r\n## Example\r\n\r\nA basic example of an association scope for the One-to-Many association between models `Foo` and `Bar` is shown below.\r\n\r\n* Setup:\r\n\r\n    ```js\r\n    const Foo = sequelize.define('foo', { name: DataTypes.STRING });\r\n    const Bar = sequelize.define('bar', { status: DataTypes.STRING });\r\n    Foo.hasMany(Bar, {\r\n        scope: {\r\n            status: 'open'\r\n        },\r\n        as: 'openBars'\r\n    });\r\n    await sequelize.sync();\r\n    const myFoo = await Foo.create({ name: \"My Foo\" });\r\n    ```\r\n\r\n* After this setup, calling `myFoo.getOpenBars()` generates the following SQL:\r\n\r\n    ```sql\r\n    SELECT\r\n        `id`, `status`, `createdAt`, `updatedAt`, `fooId`\r\n    FROM `bars` AS `bar`\r\n    WHERE `bar`.`status` = 'open' AND `bar`.`fooId` = 1;\r\n    ```\r\n\r\nWith this we can see that upon calling the `.getOpenBars()` mixin, the association scope `{ status: 'open' }` was automatically applied into the `WHERE` clause of the generated SQL.\r\n\r\n## Achieving the same behavior with standard scopes\r\n\r\nWe could have achieved the same behavior with standard scopes:\r\n\r\n```js\r\n// Foo.hasMany(Bar, {\r\n//     scope: {\r\n//         status: 'open'\r\n//     },\r\n//     as: 'openBars'\r\n// });\r\n\r\nBar.addScope('open', {\r\n    where: {\r\n        status: 'open'\r\n    }\r\n});\r\nFoo.hasMany(Bar);\r\nFoo.hasMany(Bar.scope('open'), { as: 'openBars' });\r\n```\r\n\r\nWith the above code, `myFoo.getOpenBars()` yields the same SQL shown above.",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/docs/manual/advanced-association-concepts/polymorphic-associations.md",
    "name": "docs/manual/advanced-association-concepts/polymorphic-associations.md",
    "content": "# Polymorphic Associations\r\n\r\n_**Note:** the usage of polymorphic associations in Sequelize, as outlined in this guide, should be done with caution. Don't just copy-paste code from here, otherwise you might easily make mistakes and introduce bugs in your code. Make sure you understand what is going on._\r\n\r\n## Concept\r\n\r\nA **polymorphic association** consists on two (or more) associations happening with the same foreign key.\r\n\r\nFor example, consider the models `Image`, `Video` and `Comment`. The first two represent something that a user might post. We want to allow comments to be placed in both of them. This way, we immediately think of establishing the following associations:\r\n\r\n* A One-to-Many association between `Image` and `Comment`:\r\n\r\n  ```js\r\n  Image.hasMany(Comment);\r\n  Comment.belongsTo(Image);\r\n  ```\r\n\r\n* A One-to-Many association between `Video` and `Comment`:\r\n\r\n  ```js\r\n  Video.hasMany(Comment);\r\n  Comment.belongsTo(Video);\r\n  ```\r\n\r\nHowever, the above would cause Sequelize to create two foreign keys on the `Comment` table: `ImageId` and `VideoId`. This is not ideal because this structure makes it look like a comment can be attached at the same time to one image and one video, which isn't true. Instead, what we really want here is precisely a polymorphic association, in which a `Comment` points to a single **Commentable**, an abstract polymorphic entity that represents one of `Image` or `Video`.\r\n\r\nBefore proceeding to how to configure such an association, let's see how using it looks like:\r\n\r\n```js\r\nconst image = await Image.create({ url: \"https://placekitten.com/408/287\" });\r\nconst comment = await image.createComment({ content: \"Awesome!\" });\r\n\r\nconsole.log(comment.commentableId === image.id); // true\r\n\r\n// We can also retrieve which type of commentable a comment is associated to.\r\n// The following prints the model name of the associated commentable instance.\r\nconsole.log(comment.commentableType); // \"Image\"\r\n\r\n// We can use a polymorphic method to retrieve the associated commentable, without\r\n// having to worry whether it's an Image or a Video.\r\nconst associatedCommentable = await comment.getCommentable();\r\n\r\n// In this example, `associatedCommentable` is the same thing as `image`:\r\nconst isDeepEqual = require('deep-equal');\r\nconsole.log(isDeepEqual(image, commentable)); // true\r\n```\r\n\r\n## Configuring a One-to-Many polymorphic association\r\n\r\nTo setup the polymorphic association for the example above (which is an example of One-to-Many polymorphic association), we have the following steps:\r\n\r\n* Define a string field called `commentableType` in the `Comment` model;\r\n* Define the `hasMany` and `belongsTo` association between `Image`/`Video` and `Comment`:\r\n  * Disabling constraints (i.e. using `{ constraints: false }`), since the same foreign key is referencing multiple tables;\r\n  * Specifying the appropriate [association scopes](association-scopes.html);\r\n* To properly support lazy loading, define a new instance method on the `Comment` model called `getCommentable` which calls, under the hood, the correct mixin to fetch the appropriate commentable;\r\n* To properly support eager loading, define an `afterFind` hook on the `Comment` model that automatically populates the `commentable` field in every instance;\r\n* To prevent bugs/mistakes in eager loading, you can also delete the concrete fields `image` and `video` from Comment instances in the same `afterFind` hook, leaving only the abstract `commentable` field available.\r\n\r\nHere is an example:\r\n\r\n```js\r\n// Helper function\r\nconst uppercaseFirst = str => `${str[0].toUpperCase()}${str.substr(1)}`;\r\n\r\nclass Image extends Model {}\r\nImage.init({\r\n  title: DataTypes.STRING,\r\n  url: DataTypes.STRING\r\n}, { sequelize, modelName: 'image' });\r\n\r\nclass Video extends Model {}\r\nVideo.init({\r\n  title: DataTypes.STRING,\r\n  text: DataTypes.STRING\r\n}, { sequelize, modelName: 'video' });\r\n\r\nclass Comment extends Model {\r\n  getCommentable(options) {\r\n    if (!this.commentableType) return Promise.resolve(null);\r\n    const mixinMethodName = `get${uppercaseFirst(this.commentableType)}`;\r\n    return this[mixinMethodName](options);\r\n  }\r\n}\r\nComment.init({\r\n  title: DataTypes.STRING,\r\n  commentableId: DataTypes.INTEGER,\r\n  commentableType: DataTypes.STRING\r\n}, { sequelize, modelName: 'comment' });\r\n\r\nImage.hasMany(Comment, {\r\n  foreignKey: 'commentableId',\r\n  constraints: false,\r\n  scope: {\r\n    commentableType: 'image'\r\n  }\r\n});\r\nComment.belongsTo(Image, { foreignKey: 'commentableId', constraints: false });\r\n\r\nVideo.hasMany(Comment, {\r\n  foreignKey: 'commentableId',\r\n  constraints: false,\r\n  scope: {\r\n    commentableType: 'video'\r\n  }\r\n});\r\nComment.belongsTo(Video, { foreignKey: 'commentableId', constraints: false });\r\n\r\nComment.addHook(\"afterFind\", findResult => {\r\n  if (!Array.isArray(findResult)) findResult = [findResult];\r\n  for (const instance of findResult) {\r\n    if (instance.commentableType === \"image\" && instance.image !== undefined) {\r\n      instance.commentable = instance.image;\r\n    } else if (instance.commentableType === \"video\" && instance.video !== undefined) {\r\n      instance.commentable = instance.video;\r\n    }\r\n    // To prevent mistakes:\r\n    delete instance.image;\r\n    delete instance.dataValues.image;\r\n    delete instance.video;\r\n    delete instance.dataValues.video;\r\n  }\r\n});\r\n```\r\n\r\nSince the `commentableId` column references several tables (two in this case), we cannot add a `REFERENCES` constraint to it. This is why the `constraints: false` option was used.\r\n\r\nNote that, in the code above:\r\n\r\n* The *Image -> Comment* association defined an association scope: `{ commentableType: 'image' }`\r\n* The *Video -> Comment* association defined an association scope: `{ commentableType: 'video' }`\r\n\r\nThese scopes are automatically applied when using the association functions (as explained in the [Association Scopes](association-scopes.html) guide). Some examples are below, with their generated SQL statements:\r\n\r\n* `image.getComments()`:\r\n\r\n  ```sql\r\n  SELECT \"id\", \"title\", \"commentableType\", \"commentableId\", \"createdAt\", \"updatedAt\"\r\n  FROM \"comments\" AS \"comment\"\r\n  WHERE \"comment\".\"commentableType\" = 'image' AND \"comment\".\"commentableId\" = 1;\r\n  ```\r\n\r\n  Here we can see that `` `comment`.`commentableType` = 'image'`` was automatically added to the `WHERE` clause of the generated SQL. This is exactly the behavior we want.\r\n\r\n* `image.createComment({ title: 'Awesome!' })`:\r\n\r\n  ```sql\r\n  INSERT INTO \"comments\" (\r\n    \"id\", \"title\", \"commentableType\", \"commentableId\", \"createdAt\", \"updatedAt\"\r\n  ) VALUES (\r\n    DEFAULT, 'Awesome!', 'image', 1,\r\n    '2018-04-17 05:36:40.454 +00:00', '2018-04-17 05:36:40.454 +00:00'\r\n  ) RETURNING *;\r\n  ```\r\n\r\n* `image.addComment(comment)`:\r\n\r\n  ```sql\r\n  UPDATE \"comments\"\r\n  SET \"commentableId\"=1, \"commentableType\"='image', \"updatedAt\"='2018-04-17 05:38:43.948 +00:00'\r\n  WHERE \"id\" IN (1)\r\n  ```\r\n\r\n### Polymorphic lazy loading\r\n\r\nThe `getCommentable` instance method on `Comment` provides an abstraction for lazy loading the associated commentable - working whether the comment belongs to an Image or a Video.\r\n\r\nIt works by simply converting the `commentableType` string into a call to the correct mixin (either `getImage` or `getVideo`).\r\n\r\nNote that the `getCommentable` implementation above:\r\n\r\n* Returns `null` when no association is present (which is good);\r\n* Allows you to pass an options object to `getCommentable(options)`, just like any other standard Sequelize method. This is useful to specify where-conditions or includes, for example.\r\n\r\n### Polymorphic eager loading\r\n\r\nNow, we want to perform a polymorphic eager loading of the associated commentables for one (or more) comments. We want to achieve something similar to the following idea:\r\n\r\n```js\r\nconst comment = await Comment.findOne({\r\n  include: [ /* What to put here? */ ]\r\n});\r\nconsole.log(comment.commentable); // This is our goal\r\n```\r\n\r\nThe solution is to tell Sequelize to include both Images and Videos, so that our `afterFind` hook defined above will do the work, automatically adding the `commentable` field to the instance object, providing the abstraction we want.\r\n\r\nFor example:\r\n\r\n```js\r\nconst comments = await Comment.findAll({\r\n  include: [Image, Video]\r\n});\r\nfor (const comment of comments) {\r\n  const message = `Found comment #${comment.id} with ${comment.commentableType} commentable:`;\r\n  console.log(message, comment.commentable.toJSON());\r\n}\r\n```\r\n\r\nOutput example:\r\n\r\n```text\r\nFound comment #1 with image commentable: { id: 1,\r\n  title: 'Meow',\r\n  url: 'https://placekitten.com/408/287',\r\n  createdAt: 2019-12-26T15:04:53.047Z,\r\n  updatedAt: 2019-12-26T15:04:53.047Z }\r\n```\r\n\r\n### Caution - possibly invalid eager/lazy loading!\r\n\r\nConsider a comment `Foo` whose `commentableId` is 2 and `commentableType` is `image`. Consider also that `Image A` and `Video X` both happen to have an id equal to 2. Conceptually, it is clear that `Video X` is not associated to `Foo`, because even though its id is 2, the `commentableType` of `Foo` is `image`, not `video`. However, this distinction is made by Sequelize only at the level of the abstractions performed by `getCommentable` and the hook we created above.\r\n\r\nThis means that if you call `Comment.findAll({ include: Video })` in the situation above, `Video X` will be eager loaded into `Foo`. Thankfully, our `afterFind` hook will delete it automatically, to help prevent bugs, but regardless it is important that you understand what is going on.\r\n\r\nThe best way to prevent this kind of mistake is to **avoid using the concrete accessors and mixins directly at all costs** (such as `.image`, `.getVideo()`, `.setImage()`, etc), always preferring the abstractions we created, such as `.getCommentable()` and `.commentable`. If you really need to access eager-loaded `.image` and `.video` for some reason, make sure you wrap that in a type check such as `comment.commentableType === 'image'`.\r\n\r\n## Configuring a Many-to-Many polymorphic association\r\n\r\nIn the above example, we had the models `Image` and `Video` being abstractly called *commentables*, with one *commentable* having many comments. However, one given comment would belong to a single *commentable* - this is why the whole situation is a One-to-Many polymorphic association.\r\n\r\nNow, to consider a Many-to-Many polymorphic association, instead of considering comments, we will consider tags. For convenience, instead of calling Image and Video as *commentables*, we will now call them *taggables*. One *taggable* may have several tags, and at the same time one tag can be placed in several *taggables*.\r\n\r\nThe setup for this goes as follows:\r\n\r\n* Define the junction model explicitly, specifying the two foreign keys as `tagId` and `taggableId` (this way it is a junction model for a Many-to-Many relationship between `Tag` and the abstract concept of *taggable*);\r\n* Define a string field called `taggableType` in the junction model;\r\n* Define the `belongsToMany` associations between the two models and `Tag`:\r\n  * Disabling constraints (i.e. using `{ constraints: false }`), since the same foreign key is referencing multiple tables;\r\n  * Specifying the appropriate [association scopes](association-scopes.html);\r\n* Define a new instance method on the `Tag` model called `getTaggables` which calls, under the hood, the correct mixin to fetch the appropriate taggables.\r\n\r\nImplementation:\r\n\r\n```js\r\nclass Tag extends Model {\r\n  getTaggables(options) {\r\n    const images = await this.getImages(options);\r\n    const videos = await this.getVideos(options);\r\n    // Concat images and videos in a single array of taggables\r\n    return images.concat(videos);\r\n  }\r\n}\r\nTag.init({\r\n  name: DataTypes.STRING\r\n}, { sequelize, modelName: 'tag' });\r\n\r\n// Here we define the junction model explicitly\r\nclass Tag_Taggable extends Model {}\r\nTag_Taggable.init({\r\n  tagId: {\r\n    type: DataTypes.INTEGER,\r\n    unique: 'tt_unique_constraint'\r\n  },\r\n  taggableId: {\r\n    type: DataTypes.INTEGER,\r\n    unique: 'tt_unique_constraint',\r\n    references: null\r\n  },\r\n  taggableType: {\r\n    type: DataTypes.STRING,\r\n    unique: 'tt_unique_constraint'\r\n  }\r\n}, { sequelize, modelName: 'tag_taggable' });\r\n\r\nImage.belongsToMany(Tag, {\r\n  through: {\r\n    model: Tag_Taggable,\r\n    unique: false,\r\n    scope: {\r\n      taggableType: 'image'\r\n    }\r\n  },\r\n  foreignKey: 'taggableId',\r\n  constraints: false\r\n});\r\nTag.belongsToMany(Image, {\r\n  through: {\r\n    model: Tag_Taggable,\r\n    unique: false\r\n  },\r\n  foreignKey: 'tagId',\r\n  constraints: false\r\n});\r\n\r\nVideo.belongsToMany(Tag, {\r\n  through: {\r\n    model: Tag_Taggable,\r\n    unique: false,\r\n    scope: {\r\n      taggableType: 'video'\r\n    }\r\n  },\r\n  foreignKey: 'taggableId',\r\n  constraints: false\r\n});\r\nTag.belongsToMany(Video, {\r\n  through: {\r\n    model: Tag_Taggable,\r\n    unique: false\r\n  },\r\n  foreignKey: 'tagId',\r\n  constraints: false\r\n});\r\n```\r\n\r\nThe `constraints: false` option disables references constraints, as the `taggableId` column references several tables, we cannot add a `REFERENCES` constraint to it.\r\n\r\nNote that:\r\n\r\n* The *Image -> Tag* association defined an association scope: `{ taggableType: 'image' }`\r\n* The *Video -> Tag* association defined an association scope: `{ taggableType: 'video' }`\r\n\r\nThese scopes are automatically applied when using the association functions. Some examples are below, with their generated SQL statements:\r\n\r\n* `image.getTags()`:\r\n\r\n  ```sql\r\n  SELECT\r\n    `tag`.`id`,\r\n    `tag`.`name`,\r\n    `tag`.`createdAt`,\r\n    `tag`.`updatedAt`,\r\n    `tag_taggable`.`tagId` AS `tag_taggable.tagId`,\r\n    `tag_taggable`.`taggableId` AS `tag_taggable.taggableId`,\r\n    `tag_taggable`.`taggableType` AS `tag_taggable.taggableType`,\r\n    `tag_taggable`.`createdAt` AS `tag_taggable.createdAt`,\r\n    `tag_taggable`.`updatedAt` AS `tag_taggable.updatedAt`\r\n  FROM `tags` AS `tag`\r\n  INNER JOIN `tag_taggables` AS `tag_taggable` ON\r\n    `tag`.`id` = `tag_taggable`.`tagId` AND\r\n    `tag_taggable`.`taggableId` = 1 AND\r\n    `tag_taggable`.`taggableType` = 'image';\r\n  ```\r\n\r\n  Here we can see that `` `tag_taggable`.`taggableType` = 'image'`` was automatically added to the `WHERE` clause of the generated SQL. This is exactly the behavior we want.\r\n\r\n* `tag.getTaggables()`:\r\n\r\n  ```sql\r\n  SELECT\r\n    `image`.`id`,\r\n    `image`.`url`,\r\n    `image`.`createdAt`,\r\n    `image`.`updatedAt`,\r\n    `tag_taggable`.`tagId` AS `tag_taggable.tagId`,\r\n    `tag_taggable`.`taggableId` AS `tag_taggable.taggableId`,\r\n    `tag_taggable`.`taggableType` AS `tag_taggable.taggableType`,\r\n    `tag_taggable`.`createdAt` AS `tag_taggable.createdAt`,\r\n    `tag_taggable`.`updatedAt` AS `tag_taggable.updatedAt`\r\n  FROM `images` AS `image`\r\n  INNER JOIN `tag_taggables` AS `tag_taggable` ON\r\n    `image`.`id` = `tag_taggable`.`taggableId` AND\r\n    `tag_taggable`.`tagId` = 1;\r\n  \r\n  SELECT\r\n    `video`.`id`,\r\n    `video`.`url`,\r\n    `video`.`createdAt`,\r\n    `video`.`updatedAt`,\r\n    `tag_taggable`.`tagId` AS `tag_taggable.tagId`,\r\n    `tag_taggable`.`taggableId` AS `tag_taggable.taggableId`,\r\n    `tag_taggable`.`taggableType` AS `tag_taggable.taggableType`,\r\n    `tag_taggable`.`createdAt` AS `tag_taggable.createdAt`,\r\n    `tag_taggable`.`updatedAt` AS `tag_taggable.updatedAt`\r\n  FROM `videos` AS `video`\r\n  INNER JOIN `tag_taggables` AS `tag_taggable` ON\r\n    `video`.`id` = `tag_taggable`.`taggableId` AND\r\n    `tag_taggable`.`tagId` = 1;\r\n  ```\r\n\r\nNote that the above implementation of `getTaggables()` allows you to pass an options object to `getCommentable(options)`, just like any other standard Sequelize method. This is useful to specify where-conditions or includes, for example.\r\n\r\n### Applying scopes on the target model\r\n\r\nIn the example above, the `scope` options (such as `scope: { taggableType: 'image' }`) were applied to the *through* model, not the *target* model, since it was used under the `through` option.\r\n\r\nWe can also apply an association scope on the target model. We can even do both at the same time.\r\n\r\nTo illustrate this, consider an extension of the above example between tags and taggables, where each tag has a status. This way, to get all pending tags of an image, we could establish another `belognsToMany` relationship between `Image` and `Tag`, this time applying a scope on the through model and another scope on the target model:\r\n\r\n```js\r\nImage.belongsToMany(Tag, {\r\n  through: {\r\n    model: Tag_Taggable,\r\n    unique: false,\r\n    scope: {\r\n      taggableType: 'image'\r\n    }\r\n  },\r\n  scope: {\r\n    status: 'pending'\r\n  },\r\n  as: 'pendingTags',\r\n  foreignKey: 'taggableId',\r\n  constraints: false\r\n});\r\n```\r\n\r\nThis way, when calling `image.getPendingTags()`, the following SQL query will be generated:\r\n\r\n```sql\r\nSELECT\r\n  `tag`.`id`,\r\n  `tag`.`name`,\r\n  `tag`.`status`,\r\n  `tag`.`createdAt`,\r\n  `tag`.`updatedAt`,\r\n  `tag_taggable`.`tagId` AS `tag_taggable.tagId`,\r\n  `tag_taggable`.`taggableId` AS `tag_taggable.taggableId`,\r\n  `tag_taggable`.`taggableType` AS `tag_taggable.taggableType`,\r\n  `tag_taggable`.`createdAt` AS `tag_taggable.createdAt`,\r\n  `tag_taggable`.`updatedAt` AS `tag_taggable.updatedAt`\r\nFROM `tags` AS `tag`\r\nINNER JOIN `tag_taggables` AS `tag_taggable` ON\r\n  `tag`.`id` = `tag_taggable`.`tagId` AND\r\n  `tag_taggable`.`taggableId` = 1 AND\r\n  `tag_taggable`.`taggableType` = 'image'\r\nWHERE (\r\n  `tag`.`status` = 'pending'\r\n);\r\n```\r\n\r\nWe can see that both scopes were applied automatically:\r\n\r\n* `` `tag_taggable`.`taggableType` = 'image'`` was added automatically to the `INNER JOIN`;\r\n* `` `tag`.`status` = 'pending'`` was added automatically to an outer where clause.\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/docs/manual/other-topics/dialect-specific-things.md",
    "name": "docs/manual/other-topics/dialect-specific-things.md",
    "content": "# Dialect-Specific Things\n\n## Underlying Connector Libraries\n\n### MySQL\n\nThe underlying connector library used by Sequelize for MySQL is the [mysql2](https://www.npmjs.com/package/mysql2) package (version 1.5.2 or higher).\n\nYou can provide custom options to it using the `dialectOptions` in the Sequelize constructor:\n\n```js\nconst sequelize = new Sequelize('database', 'username', 'password', {\n  dialect: 'mysql',\n  dialectOptions: {\n    // Your mysql2 options here\n  }\n})\n```\n\n`dialectOptions` are passed directly to the MySQL connection constructor. A full list of options can be found in the [MySQL docs](https://www.npmjs.com/package/mysql#connection-options).\n\n### MariaDB\n\nThe underlying connector library used by Sequelize for MariaDB is the [mariadb](https://www.npmjs.com/package/mariadb) package.\n\nYou can provide custom options to it using the `dialectOptions` in the Sequelize constructor:\n\n```js\nconst sequelize = new Sequelize('database', 'username', 'password', {\n  dialect: 'mariadb',\n  dialectOptions: {\n    // Your mariadb options here\n    // connectTimeout: 1000\n  }\n});\n```\n\n`dialectOptions` are passed directly to the MariaDB connection constructor. A full list of options can be found in the [MariaDB docs](https://mariadb.com/kb/en/nodejs-connection-options/).\n\n### SQLite\n\nThe underlying connector library used by Sequelize for SQLite is the [sqlite3](https://www.npmjs.com/package/sqlite3) package (version 4.0.0 or above).\n\nYou specify the storage file in the Sequelize constructor with the `storage` option (use `:memory:` for an in-memory SQLite instance).\n\nYou can provide custom options to it using the `dialectOptions` in the Sequelize constructor:\n\n```js\nconst sequelize = new Sequelize('database', 'username', 'password', {\n  dialect: 'sqlite',\n  storage: 'path/to/database.sqlite' // or ':memory:'\n  dialectOptions: {\n    // Your sqlite3 options here\n  }\n});\n```\n\nThe following fields may be passed to SQLite `dialectOptions`:\n\n- `readWriteMode`: Set the opening mode for the SQLite connection. Potential values are provided by the sqlite3 package, and can include sqlite3.OPEN_READONLY, sqlite3.OPEN_READWRITE, or sqlite3.OPEN_CREATE. See the [SQLite C interface documentation for more details]( https://www.sqlite.org/c3ref/open.html).\n\n### PostgreSQL\n\nThe underlying connector library used by Sequelize for PostgreSQL is the [pg](https://www.npmjs.com/package/pg) package (version 7.0.0 or above). The module [pg-hstore](https://www.npmjs.com/package/pg-hstore) is also necessary.\n\nYou can provide custom options to it using the `dialectOptions` in the Sequelize constructor:\n\n```js\nconst sequelize = new Sequelize('database', 'username', 'password', {\n  dialect: 'postgres',\n  dialectOptions: {\n    // Your pg options here\n  }\n});\n```\n\nThe following fields may be passed to Postgres `dialectOptions`:\n\n- `application_name`: Name of application in pg_stat_activity. See the [Postgres docs](https://www.postgresql.org/docs/current/runtime-config-logging.html#GUC-APPLICATION-NAME) for details.\n- `ssl`: SSL options. See the [`pg` docs](https://node-postgres.com/features/ssl) for details.\n- `client_encoding`: // Setting 'auto' determines locale based on the client LC_CTYPE environment variable. See the [Postgres docs](https://www.postgresql.org/docs/current/multibyte.html) for details.\n- `keepAlive`: Boolean to enable TCP KeepAlive. See the [`pg` changelog](https://github.com/brianc/node-postgres/blob/master/CHANGELOG.md#v600) for details.\n- `statement_timeout`: Times out queries after a set time in milliseconds. Added in pg v7.3. See the [Postgres docs](https://www.postgresql.org/docs/current/runtime-config-client.html#GUC-STATEMENT-TIMEOUT) for details.\n- `idle_in_transaction_session_timeout`: Terminate any session with an open transaction that has been idle for longer than the specified duration in milliseconds. See the [Postgres docs](https://www.postgresql.org/docs/current/runtime-config-client.html#GUC-IDLE-IN-TRANSACTION-SESSION-TIMEOUT) for details.\n\nTo connect over a unix domain socket, specify the path to the socket directory in the `host` option. The socket path must start with `/`.\n\n```js\nconst sequelize = new Sequelize('database', 'username', 'password', {\n  dialect: 'postgres',\n  host: '/path/to/socket_directory'\n});\n```\n\nThe default `client_min_messages` config in sequelize is `WARNING`.\n\n### Redshift\n\nMost configuration is same as PostgreSQL above.\n\nRedshift doesn't support `client_min_messages`, 'ignore' is needed to skip the configuration:\n\n```js\nconst sequelize = new Sequelize('database', 'username', 'password', {\n  dialect: 'postgres',\n  dialectOptions: {\n    // Your pg options here\n    // ...\n    clientMinMessages: 'ignore' // case insensitive\n  }\n});\n```\n\n### MSSQL\n\nThe supported versions of MS SQL are from MS SQL 2017 (version 14) up to the most recent version.\n\n#### Tedious\n\nThe default underlying connector library used by Sequelize for MSSQL is the [tedious](https://www.npmjs.com/package/tedious) package.\n\nYou can provide custom options to it using `dialectOptions.options` in the Sequelize constructor:\n\n```js\nconst sequelize = new Sequelize('database', 'username', 'password', {\n  dialect: 'mssql',\n  dialectOptions: {\n    // Observe the need for this nested `options` field for MSSQL\n    options: {\n      // Your tedious options here\n      useUTC: false,\n      dateFirst: 1\n    }\n  }\n});\n```\n\nA full list of options can be found in the [tedious docs](https://tediousjs.github.io/tedious/api-connection.html#function_newConnection).\n\n#### MSSQL Domain Account\n\nIn order to connect with a domain account, use the following format.\n\n```js\nconst sequelize = new Sequelize('database', null, null, {\n  dialect: 'mssql',\n  dialectOptions: {\n    authentication: {\n      type: 'ntlm',\n      options: {\n        domain: 'yourDomain',\n        userName: 'username',\n        password: 'password'\n      }\n    },\n    options: {\n      instanceName: 'SQLEXPRESS'\n    }\n  }\n})\n```\n\n### Snowflake (Experiment)\n\nThe underlying connector library used by Sequelize for Snowflake is the [snowflake-sdk](https://www.npmjs.com/package/snowflake-sdk) package.\n\nIn order to connect with an account, use the following format:\n\n```js\nconst sequelize = new Sequelize('database', null, null, {\n  dialect: 'snowflake',\n  dialectOptions: {\n    // put your snowflake account here,\n    account: 'myAccount',  // my-app.us-east-1\n\n    // below option should be optional\n    role: 'myRole',\n    warehouse: 'myWarehouse',\n    schema: 'mySchema'\n  },\n  // same as other dialect\n  username: 'myUserName',\n  password: 'myPassword',\n  database: 'myDatabaseName'\n})\n```\n\n**NOTE** There is no test sandbox provided so the snowflake integration test is not part of the pipeline. Also it is difficult for core team to triage and debug. This dialect needs to be maintained by the snowflake user/community for now.\n\nFor running integration test:\n\n```sh\n# using npm\nSEQ_ACCOUNT=myAccount SEQ_USER=myUser SEQ_PW=myPassword SEQ_ROLE=myRole SEQ_DB=myDatabaseName SEQ_SCHEMA=mySchema SEQ_WH=myWareHouse npm run test-integration-snowflake\n# using yarn\nSEQ_ACCOUNT=myAccount SEQ_USER=myUser SEQ_PW=myPassword SEQ_ROLE=myRole SEQ_DB=myDatabaseName SEQ_SCHEMA=mySchema SEQ_WH=myWareHouse yarn test-integration-snowflake\n```\n\n## Data type: TIMESTAMP WITHOUT TIME ZONE - PostgreSQL only\n\nIf you are working with the PostgreSQL `TIMESTAMP WITHOUT TIME ZONE` and you need to parse it to a different timezone, please use the pg library's own parser:\n\n```js\nrequire('pg').types.setTypeParser(1114, stringValue => {\n  return new Date(stringValue + '+0000');\n  // e.g., UTC offset. Use any offset that you would like.\n});\n```\n\n## Data type: ARRAY(ENUM) - PostgreSQL only\n\nArray(Enum) type requireS special treatment. Whenever Sequelize will talk to the database, it has to typecast array values with ENUM name.\n\nSo this enum name must follow this pattern `enum_<table_name>_<col_name>`. If you are using `sync` then correct name will automatically be generated.\n\n## Table Hints - MSSQL only\n\nThe `tableHint` option can be used to define a table hint. The hint must be a value from `TableHints` and should only be used when absolutely necessary. Only a single table hint is currently supported per query.\n\nTable hints override the default behavior of MSSQL query optimizer by specifing certain options. They only affect the table or view referenced in that clause.\n\n```js\nconst { TableHints } = require('sequelize');\nProject.findAll({\n  // adding the table hint NOLOCK\n  tableHint: TableHints.NOLOCK\n  // this will generate the SQL 'WITH (NOLOCK)'\n})\n```\n\n## Index Hints - MySQL/MariaDB only\n\nThe `indexHints` option can be used to define index hints. The hint type must be a value from `IndexHints` and the values should reference existing indexes.\n\nIndex hints [override the default behavior of the MySQL query optimizer](https://dev.mysql.com/doc/refman/5.7/en/index-hints.html).\n\n```js\nconst { IndexHints } = require(\"sequelize\");\nProject.findAll({\n  indexHints: [\n    { type: IndexHints.USE, values: ['index_project_on_name'] }\n  ],\n  where: {\n    id: {\n      [Op.gt]: 623\n    },\n    name: {\n      [Op.like]: 'Foo %'\n    }\n  }\n});\n```\n\nThe above will generate a MySQL query that looks like this:\n\n```sql\nSELECT * FROM Project USE INDEX (index_project_on_name) WHERE name LIKE 'FOO %' AND id > 623;\n```\n\n`Sequelize.IndexHints` includes `USE`, `FORCE`, and `IGNORE`.\n\nSee [Issue #9421](https://github.com/sequelize/sequelize/issues/9421) for the original API proposal.\n\n## Engines - MySQL/MariaDB only\n\nThe default engine for a model is InnoDB.\n\nYou can change the engine for a model with the `engine` option (e.g., to MyISAM):\n\n```js\nconst Person = sequelize.define('person', { /* attributes */ }, {\n  engine: 'MYISAM'\n});\n```\n\nLike every option for the definition of a model, this setting can also be changed globally with the `define` option of the Sequelize constructor:\n\n```js\nconst sequelize = new Sequelize(db, user, pw, {\n  define: { engine: 'MYISAM' }\n})\n```\n\n## Table comments - MySQL/MariaDB/PostgreSQL only\n\nYou can specify a comment for a table when defining the model:\n\n```js\nclass Person extends Model {}\nPerson.init({ /* attributes */ }, {\n  comment: \"I'm a table comment!\",\n  sequelize\n})\n```\n\nThe comment will be set when calling `sync()`.\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/docs/manual/other-topics/transactions.md",
    "name": "docs/manual/other-topics/transactions.md",
    "content": "# Transactions\n\nSequelize does not use [transactions](https://en.wikipedia.org/wiki/Database_transaction) by default. However, for production-ready usage of Sequelize, you should definitely configure Sequelize to use transactions.\n\nSequelize supports two ways of using transactions:\n\n1. **Unmanaged transactions:** Committing and rolling back the transaction should be done manually by the user (by calling the appropriate Sequelize methods).\n\n2. **Managed transactions**: Sequelize will automatically rollback the transaction if any error is thrown, or commit the transaction otherwise. Also, if CLS (Continuation Local Storage) is enabled, all queries within the transaction callback will automatically receive the transaction object.\n\n## Unmanaged transactions\n\nLet's start with an example:\n\n```js\n// First, we start a transaction and save it into a variable\nconst t = await sequelize.transaction();\n\ntry {\n\n  // Then, we do some calls passing this transaction as an option:\n\n  const user = await User.create({\n    firstName: 'Bart',\n    lastName: 'Simpson'\n  }, { transaction: t });\n\n  await user.addSibling({\n    firstName: 'Lisa',\n    lastName: 'Simpson'\n  }, { transaction: t });\n\n  // If the execution reaches this line, no errors were thrown.\n  // We commit the transaction.\n  await t.commit();\n\n} catch (error) {\n\n  // If the execution reaches this line, an error was thrown.\n  // We rollback the transaction.\n  await t.rollback();\n\n}\n```\n\nAs shown above, the *unmanaged transaction* approach requires that you commit and rollback the transaction manually, when necessary.\n\n## Managed transactions\n\nManaged transactions handle committing or rolling back the transaction automatically. You start a managed transaction by passing a callback to `sequelize.transaction`. This callback can be `async` (and usually is).\n\nThe following will happen in this case:\n\n* Sequelize will automatically start a transaction and obtain a transaction object `t`\n* Then, Sequelize will execute the callback you provided, passing `t` into it\n* If your callback throws, Sequelize will automatically rollback the transaction\n* If your callback succeeds, Sequelize will automatically commit the transaction\n* Only then the `sequelize.transaction` call will settle:\n  * Either resolving with the resolution of your callback\n  * Or, if your callback throws, rejecting with the thrown error\n\nExample code:\n\n```js\ntry {\n\n  const result = await sequelize.transaction(async (t) => {\n\n    const user = await User.create({\n      firstName: 'Abraham',\n      lastName: 'Lincoln'\n    }, { transaction: t });\n\n    await user.setShooter({\n      firstName: 'John',\n      lastName: 'Boothe'\n    }, { transaction: t });\n\n    return user;\n\n  });\n\n  // If the execution reaches this line, the transaction has been committed successfully\n  // `result` is whatever was returned from the transaction callback (the `user`, in this case)\n\n} catch (error) {\n\n  // If the execution reaches this line, an error occurred.\n  // The transaction has already been rolled back automatically by Sequelize!\n\n}\n```\n\nNote that `t.commit()` and `t.rollback()` were not called directly (which is correct).\n\n### Throw errors to rollback\n\nWhen using the managed transaction you should *never* commit or rollback the transaction manually. If all queries are successful (in the sense of not throwing any error), but you still want to rollback the transaction, you should throw an error yourself:\n\n```js\nawait sequelize.transaction(async t => {\n  const user = await User.create({\n    firstName: 'Abraham',\n    lastName: 'Lincoln'\n  }, { transaction: t });\n\n  // Woops, the query was successful but we still want to roll back!\n  // We throw an error manually, so that Sequelize handles everything automatically.\n  throw new Error();\n});\n```\n\n### Automatically pass transactions to all queries\n\nIn the examples above, the transaction is still manually passed, by passing `{ transaction: t }` as the second argument. To automatically pass the transaction to all queries you must install the [cls-hooked](https://github.com/Jeff-Lewis/cls-hooked) (CLS) module and instantiate a namespace in your own code:\n\n```js\nconst cls = require('cls-hooked');\nconst namespace = cls.createNamespace('my-very-own-namespace');\n```\n\nTo enable CLS you must tell sequelize which namespace to use by using a static method of the sequelize constructor:\n\n```js\nconst Sequelize = require('sequelize');\nSequelize.useCLS(namespace);\n\nnew Sequelize(....);\n```\n\nNotice, that the `useCLS()` method is on the *constructor*, not on an instance of sequelize. This means that all instances will share the same namespace, and that CLS is all-or-nothing - you cannot enable it only for some instances.\n\nCLS works like a thread-local storage for callbacks. What this means in practice is that different callback chains can access local variables by using the CLS namespace. When CLS is enabled sequelize will set the `transaction` property on the namespace when a new transaction is created. Since variables set within a callback chain are private to that chain several concurrent transactions can exist at the same time:\n\n```js\nsequelize.transaction((t1) => {\n  namespace.get('transaction') === t1; // true\n});\n\nsequelize.transaction((t2) => {\n  namespace.get('transaction') === t2; // true\n});\n```\n\nIn most case you won't need to access `namespace.get('transaction')` directly, since all queries will automatically look for a transaction on the namespace:\n\n```js\nsequelize.transaction((t1) => {\n  // With CLS enabled, the user will be created inside the transaction\n  return User.create({ name: 'Alice' });\n});\n```\n\n## Concurrent/Partial transactions\n\nYou can have concurrent transactions within a sequence of queries or have some of them excluded from any transactions. Use the `transaction` option to control which transaction a query belongs to:\n\n**Note:** *SQLite does not support more than one transaction at the same time.*\n\n### With CLS enabled\n\n```js\nsequelize.transaction((t1) => {\n  return sequelize.transaction((t2) => {\n    // With CLS enabled, queries here will by default use t2.\n    // Pass in the `transaction` option to define/alter the transaction they belong to.\n    return Promise.all([\n        User.create({ name: 'Bob' }, { transaction: null }),\n        User.create({ name: 'Mallory' }, { transaction: t1 }),\n        User.create({ name: 'John' }) // this would default to t2\n    ]);\n  });\n});\n```\n\n## Passing options\n\nThe `sequelize.transaction` method accepts options.\n\nFor unmanaged transactions, just use `sequelize.transaction(options)`.\n\nFor managed transactions, use `sequelize.transaction(options, callback)`.\n\n## Isolation levels\n\nThe possible isolations levels to use when starting a transaction:\n\n```js\nconst { Transaction } = require('sequelize');\n\n// The following are valid isolation levels:\nTransaction.ISOLATION_LEVELS.READ_UNCOMMITTED // \"READ UNCOMMITTED\"\nTransaction.ISOLATION_LEVELS.READ_COMMITTED // \"READ COMMITTED\"\nTransaction.ISOLATION_LEVELS.REPEATABLE_READ  // \"REPEATABLE READ\"\nTransaction.ISOLATION_LEVELS.SERIALIZABLE // \"SERIALIZABLE\"\n```\n\nBy default, sequelize uses the isolation level of the database. If you want to use a different isolation level, pass in the desired level as the first argument:\n\n```js\nconst { Transaction } = require('sequelize');\n\nawait sequelize.transaction({\n  isolationLevel: Transaction.ISOLATION_LEVELS.SERIALIZABLE\n}, async (t) => {\n  // Your code\n});\n```\n\nYou can also overwrite the `isolationLevel` setting globally with an option in the Sequelize constructor:\n\n```js\nconst { Sequelize, Transaction } = require('sequelize');\n\nconst sequelize = new Sequelize('sqlite::memory:', {\n  isolationLevel: Transaction.ISOLATION_LEVELS.SERIALIZABLE\n});\n```\n\n**Note for MSSQL:** _The `SET ISOLATION LEVEL` queries are not logged since the specified `isolationLevel` is passed directly to `tedious`._\n\n## Usage with other sequelize methods\n\nThe `transaction` option goes with most other options, which are usually the first argument of a method.\n\nFor methods that take values, like `.create`, `.update()`, etc. `transaction` should be passed to the option in the second argument.\n\nIf unsure, refer to the API documentation for the method you are using to be sure of the signature.\n\nExamples:\n\n```js\nawait User.create({ name: 'Foo Bar' }, { transaction: t });\n\nawait User.findAll({\n  where: {\n    name: 'Foo Bar'\n  },\n  transaction: t\n});\n```\n\n## The `afterCommit` hook\n\nA `transaction` object allows tracking if and when it is committed.\n\nAn `afterCommit` hook can be added to both managed and unmanaged transaction objects:\n\n```js\n// Managed transaction:\nawait sequelize.transaction(async (t) => {\n  t.afterCommit(() => {\n    // Your logic\n  });\n});\n\n// Unmanaged transaction:\nconst t = await sequelize.transaction();\nt.afterCommit(() => {\n  // Your logic\n});\nawait t.commit();\n```\n\nThe callback passed to `afterCommit` can be `async`. In this case:\n\n* For a managed transaction: the `sequelize.transaction` call will wait for it before settling;\n* For an unmanaged transaction: the `t.commit` call will wait for it before settling.\n\nNotes:\n\n* The `afterCommit` hook is not raised if the transaction is rolled back;\n* The `afterCommit` hook does not modify the return value of the transaction (unlike most hooks)\n\nYou can use the `afterCommit` hook in conjunction with model hooks to know when a instance is saved and available outside of a transaction\n\n```js\nUser.afterSave((instance, options) => {\n  if (options.transaction) {\n    // Save done within a transaction, wait until transaction is committed to\n    // notify listeners the instance has been saved\n    options.transaction.afterCommit(() => /* Notify */)\n    return;\n  }\n  // Save done outside a transaction, safe for callers to fetch the updated model\n  // Notify\n});\n```\n\n## Locks\n\nQueries within a `transaction` can be performed with locks:\n\n```js\nreturn User.findAll({\n  limit: 1,\n  lock: true,\n  transaction: t1\n});\n```\n\nQueries within a transaction can skip locked rows:\n\n```js\nreturn User.findAll({\n  limit: 1,\n  lock: true,\n  skipLocked: true,\n  transaction: t2\n});\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/docs/manual/other-topics/hooks.md",
    "name": "docs/manual/other-topics/hooks.md",
    "content": "# Hooks\n\nHooks (also known as lifecycle events), are functions which are called before and after calls in sequelize are executed. For example, if you want to always set a value on a model before saving it, you can add a `beforeUpdate` hook.\n\n**Note:** _You can't use hooks with instances. Hooks are used with models._\n\n## Available hooks\n\nSequelize provides a lot of hooks. The full list can be found in directly in the [source code - lib/hooks.js](https://github.com/sequelize/sequelize/blob/v6/lib/hooks.js#L7).\n\n## Hooks firing order\n\nThe diagram below shows the firing order for the most common hooks.\n\n_**Note:** this list is not exhaustive._\n\n```text\n(1)\n  beforeBulkCreate(instances, options)\n  beforeBulkDestroy(options)\n  beforeBulkUpdate(options)\n(2)\n  beforeValidate(instance, options)\n\n[... validation happens ...]\n\n(3)\n  afterValidate(instance, options)\n  validationFailed(instance, options, error)\n(4)\n  beforeCreate(instance, options)\n  beforeDestroy(instance, options)\n  beforeUpdate(instance, options)\n  beforeSave(instance, options)\n  beforeUpsert(values, options)\n\n[... creation/update/destruction happens ...]\n\n(5)\n  afterCreate(instance, options)\n  afterDestroy(instance, options)\n  afterUpdate(instance, options)\n  afterSave(instance, options)\n  afterUpsert(created, options)\n(6)\n  afterBulkCreate(instances, options)\n  afterBulkDestroy(options)\n  afterBulkUpdate(options)\n```\n\n## Declaring Hooks\n\nArguments to hooks are passed by reference. This means, that you can change the values, and this will be reflected in the insert / update statement. A hook may contain async actions - in this case the hook function should return a promise.\n\nThere are currently three ways to programmatically add hooks:\n\n```js\n// Method 1 via the .init() method\nclass User extends Model {}\nUser.init({\n  username: DataTypes.STRING,\n  mood: {\n    type: DataTypes.ENUM,\n    values: ['happy', 'sad', 'neutral']\n  }\n}, {\n  hooks: {\n    beforeValidate: (user, options) => {\n      user.mood = 'happy';\n    },\n    afterValidate: (user, options) => {\n      user.username = 'Toni';\n    }\n  },\n  sequelize\n});\n\n// Method 2 via the .addHook() method\nUser.addHook('beforeValidate', (user, options) => {\n  user.mood = 'happy';\n});\n\nUser.addHook('afterValidate', 'someCustomName', (user, options) => {\n  return Promise.reject(new Error(\"I'm afraid I can't let you do that!\"));\n});\n\n// Method 3 via the direct method\nUser.beforeCreate(async (user, options) => {\n  const hashedPassword = await hashPassword(user.password);\n  user.password = hashedPassword;\n});\n\nUser.afterValidate('myHookAfter', (user, options) => {\n  user.username = 'Toni';\n});\n```\n\n## Removing hooks\n\nOnly a hook with name param can be removed.\n\n```js\nclass Book extends Model {}\nBook.init({\n  title: DataTypes.STRING\n}, { sequelize });\n\nBook.addHook('afterCreate', 'notifyUsers', (book, options) => {\n  // ...\n});\n\nBook.removeHook('afterCreate', 'notifyUsers');\n```\n\nYou can have many hooks with same name. Calling `.removeHook()` will remove all of them.\n\n## Global / universal hooks\n\nGlobal hooks are hooks that are run for all models. They are especially useful for plugins and can define behaviours that you want for all your models, for example to allow customization on timestamps using `sequelize.define` on your models:\n\n```js\nconst User = sequelize.define('User', {}, {\n    tableName: 'users',\n    hooks : {\n        beforeCreate : (record, options) => {\n            record.dataValues.createdAt = new Date().toISOString().replace(/T/, ' ').replace(/\\..+/g, '');\n            record.dataValues.updatedAt = new Date().toISOString().replace(/T/, ' ').replace(/\\..+/g, '');\n        },\n        beforeUpdate : (record, options) => {\n            record.dataValues.updatedAt = new Date().toISOString().replace(/T/, ' ').replace(/\\..+/g, '');\n        }\n    }\n});\n```\n\nThey can be defined in many ways, which have slightly different semantics:\n\n### Default Hooks (on Sequelize constructor options)\n\n```js\nconst sequelize = new Sequelize(..., {\n  define: {\n    hooks: {\n      beforeCreate() {\n        // Do stuff\n      }\n    }\n  }\n});\n```\n\nThis adds a default hook to all models, which is run if the model does not define its own `beforeCreate` hook:\n\n```js\nconst User = sequelize.define('User', {});\nconst Project = sequelize.define('Project', {}, {\n  hooks: {\n    beforeCreate() {\n      // Do other stuff\n    }\n  }\n});\n\nawait User.create({});    // Runs the global hook\nawait Project.create({}); // Runs its own hook (because the global hook is overwritten)\n```\n\n### Permanent Hooks (with `sequelize.addHook`)\n\n```js\nsequelize.addHook('beforeCreate', () => {\n  // Do stuff\n});\n```\n\nThis hook is always run, whether or not the model specifies its own `beforeCreate` hook. Local hooks are always run before global hooks:\n\n```js\nconst User = sequelize.define('User', {});\nconst Project = sequelize.define('Project', {}, {\n  hooks: {\n    beforeCreate() {\n      // Do other stuff\n    }\n  }\n});\n\nawait User.create({});    // Runs the global hook\nawait Project.create({}); // Runs its own hook, followed by the global hook\n```\n\nPermanent hooks may also be defined in the options passed to the Sequelize constructor:\n\n```js\nnew Sequelize(..., {\n  hooks: {\n    beforeCreate() {\n      // do stuff\n    }\n  }\n});\n```\n\nNote that the above is not the same as the *Default Hooks* mentioned above. That one uses the `define` option of the constructor. This one does not.\n\n### Connection Hooks\n\nSequelize provides four hooks that are executed immediately before and after a database connection is obtained or released:\n\n* `sequelize.beforeConnect(callback)`\n  * The callback has the form `async (config) => /* ... */`\n* `sequelize.afterConnect(callback)`\n  * The callback has the form `async (connection, config) => /* ... */`\n* `sequelize.beforeDisconnect(callback)`\n  * The callback has the form `async (connection) => /* ... */`\n* `sequelize.afterDisconnect(callback)`\n  * The callback has the form `async (connection) => /* ... */`\n\nThese hooks can be useful if you need to asynchronously obtain database credentials, or need to directly access the low-level database connection after it has been created.\n\nFor example, we can asynchronously obtain a database password from a rotating token store, and mutate Sequelize's configuration object with the new credentials:\n\n```js\nsequelize.beforeConnect(async (config) => {\n  config.password = await getAuthToken();\n});\n```\n\nThese hooks may *only* be declared as a permanent global hook, as the connection pool is shared by all models.\n\n## Instance hooks\n\nThe following hooks will emit whenever you're editing a single object:\n\n* `beforeValidate`\n* `afterValidate` / `validationFailed`\n* `beforeCreate` / `beforeUpdate` / `beforeSave` / `beforeDestroy`\n* `afterCreate` / `afterUpdate` / `afterSave` / `afterDestroy`\n\n```js\nUser.beforeCreate(user => {\n  if (user.accessLevel > 10 && user.username !== \"Boss\") {\n    throw new Error(\"You can't grant this user an access level above 10!\");\n  }\n});\n```\n\nThe following example will throw an error:\n\n```js\ntry {\n  await User.create({ username: 'Not a Boss', accessLevel: 20 });\n} catch (error) {\n  console.log(error); // You can't grant this user an access level above 10!\n};\n```\n\nThe following example will be successful:\n\n```js\nconst user = await User.create({ username: 'Boss', accessLevel: 20 });\nconsole.log(user); // user object with username 'Boss' and accessLevel of 20\n```\n\n### Model hooks\n\nSometimes you'll be editing more than one record at a time by using methods like `bulkCreate`, `update` and `destroy`. The following hooks will emit whenever you're using one of those methods:\n\n* `YourModel.beforeBulkCreate(callback)`\n  * The callback has the form `(instances, options) => /* ... */`\n* `YourModel.beforeBulkUpdate(callback)`\n  * The callback has the form `(options) => /* ... */`\n* `YourModel.beforeBulkDestroy(callback)`\n  * The callback has the form `(options) => /* ... */`\n* `YourModel.afterBulkCreate(callback)`\n  * The callback has the form `(instances, options) => /* ... */`\n* `YourModel.afterBulkUpdate(callback)`\n  * The callback has the form `(options) => /* ... */`\n* `YourModel.afterBulkDestroy(callback)`\n  * The callback has the form `(options) => /* ... */`\n\nNote: methods like `bulkCreate` do not emit individual hooks by default - only the bulk hooks. However, if you want individual hooks to be emitted as well, you can pass the `{ individualHooks: true }` option to the query call. However, this can drastically impact performance, depending on the number of records involved (since, among other things, all instances will be loaded into memory). Examples:\n\n```js\nawait Model.destroy({\n  where: { accessLevel: 0 },\n  individualHooks: true\n});\n// This will select all records that are about to be deleted and emit `beforeDestroy` and `afterDestroy` on each instance.\n\nawait Model.update({ username: 'Tony' }, {\n  where: { accessLevel: 0 },\n  individualHooks: true\n});\n// This will select all records that are about to be updated and emit `beforeUpdate` and `afterUpdate` on each instance.\n```\n\nIf you use `Model.bulkCreate(...)` with the `updateOnDuplicate` option, changes made in the hook to fields that aren't given in the `updateOnDuplicate` array will not be persisted to the database. However it is possible to change the `updateOnDuplicate` option inside the hook if this is what you want.\n\n```js\nUser.beforeBulkCreate((users, options) => {\n  for (const user of users) {\n    if (user.isMember) {\n      user.memberSince = new Date();\n    }\n  }\n\n  // Add `memberSince` to updateOnDuplicate otherwise it won't be persisted\n  if (options.updateOnDuplicate && !options.updateOnDuplicate.includes('memberSince')) {\n    options.updateOnDuplicate.push('memberSince');\n  }\n});\n\n// Bulk updating existing users with updateOnDuplicate option\nawait Users.bulkCreate([\n  { id: 1, isMember: true },\n  { id: 2, isMember: false }\n], {\n  updateOnDuplicate: ['isMember']\n});\n```\n\n## Associations\n\nFor the most part hooks will work the same for instances when being associated.\n\n### One-to-One and One-to-Many associations\n\n* When using `add`/`set` mixin methods the `beforeUpdate` and `afterUpdate` hooks will run.\n\n* The `beforeDestroy` and `afterDestroy` hooks will only be called on associations that have `onDelete: 'CASCADE'` and `hooks: true`. For example:\n\n```js\nclass Projects extends Model {}\nProjects.init({\n  title: DataTypes.STRING\n}, { sequelize });\n\nclass Tasks extends Model {}\nTasks.init({\n  title: DataTypes.STRING\n}, { sequelize });\n\nProjects.hasMany(Tasks, { onDelete: 'CASCADE', hooks: true });\nTasks.belongsTo(Projects);\n```\n\nThis code will run `beforeDestroy` and `afterDestroy` hooks on the Tasks model.\n\nSequelize, by default, will try to optimize your queries as much as possible. When calling cascade on delete, Sequelize will simply execute:\n\n```sql\nDELETE FROM `table` WHERE associatedIdentifier = associatedIdentifier.primaryKey\n```\n\nHowever, adding `hooks: true` explicitly tells Sequelize that optimization is not of your concern. Then, Sequelize will first perform a `SELECT` on the associated objects and destroy each instance, one by one, in order to be able to properly call the hooks (with the right parameters).\n\n### Many-to-Many associations\n\n* When using `add` mixin methods for `belongsToMany` relationships (that will add one or more records to the junction table) the `beforeBulkCreate` and `afterBulkCreate` hooks in the junction model will run.\n  * If `{ individualHooks: true }` was passed to the call, then each individual hook will also run.\n\n* When using `remove` mixin methods for `belongsToMany` relationships (that will remove one or more records to the junction table) the `beforeBulkDestroy` and `afterBulkDestroy` hooks in the junction model will run.\n  * If `{ individualHooks: true }` was passed to the call, then each individual hook will also run.\n\nIf your association is Many-to-Many, you may be interested in firing hooks on the through model when using the `remove` call. Internally, sequelize is using `Model.destroy` resulting in calling the `bulkDestroy` instead of the `before/afterDestroy` hooks on each through instance.\n\n## Hooks and Transactions\n\nMany model operations in Sequelize allow you to specify a transaction in the options parameter of the method. If a transaction *is* specified in the original call, it will be present in the options parameter passed to the hook function. For example, consider the following snippet:\n\n```js\nUser.addHook('afterCreate', async (user, options) => {\n  // We can use `options.transaction` to perform some other call\n  // using the same transaction of the call that triggered this hook\n  await User.update({ mood: 'sad' }, {\n    where: {\n      id: user.id\n    },\n    transaction: options.transaction\n  });\n});\n\nawait sequelize.transaction(async t => {\n  await User.create({\n    username: 'someguy',\n    mood: 'happy'\n  }, {\n    transaction: t\n  });\n});\n```\n\nIf we had not included the transaction option in our call to `User.update` in the preceding code, no change would have occurred, since our newly created user does not exist in the database until the pending transaction has been committed.\n\n### Internal Transactions\n\nIt is very important to recognize that sequelize may make use of transactions internally for certain operations such as `Model.findOrCreate`. If your hook functions execute read or write operations that rely on the object's presence in the database, or modify the object's stored values like the example in the preceding section, you should always specify `{ transaction: options.transaction }`:\n\n* If a transaction was used, then `{ transaction: options.transaction }` will ensure it is used again;\n* Otherwise, `{ transaction: options.transaction }` will be equivalent to `{ transaction: undefined }`, which won't use a transaction (which is ok).\n\nThis way your hooks will always behave correctly.\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/docs/manual/other-topics/query-interface.md",
    "name": "docs/manual/other-topics/query-interface.md",
    "content": "# Query Interface\r\n\r\nAn instance of Sequelize uses something called **Query Interface** to communicate to the database in a dialect-agnostic way. Most of the methods you've learned in this manual are implemented with the help of several methods from the query interface.\r\n\r\nThe methods from the query interface are therefore lower-level methods; you should use them only if you do not find another way to do it with higher-level APIs from Sequelize. They are, of course, still higher-level than running raw queries directly (i.e., writing SQL by hand).\r\n\r\nThis guide shows a few examples, but for the full list of what it can do, and for detailed usage of each method, check the [QueryInterface API](../class/lib/dialects/abstract/query-interface.js~QueryInterface.html).\r\n\r\n## Obtaining the query interface\r\n\r\nFrom now on, we will call `queryInterface` the singleton instance of the [QueryInterface](../class/lib/dialects/abstract/query-interface.js~QueryInterface.html) class, which is available on your Sequelize instance:\r\n\r\n```js\r\nconst { Sequelize, DataTypes } = require('sequelize');\r\nconst sequelize = new Sequelize(/* ... */);\r\nconst queryInterface = sequelize.getQueryInterface();\r\n```\r\n\r\n## Creating a table\r\n\r\n```js\r\nqueryInterface.createTable('Person', {\r\n  name: DataTypes.STRING,\r\n  isBetaMember: {\r\n    type: DataTypes.BOOLEAN,\r\n    defaultValue: false,\r\n    allowNull: false\r\n  }\r\n});\r\n```\r\n\r\nGenerated SQL (using SQLite):\r\n\r\n```SQL\r\nCREATE TABLE IF NOT EXISTS `Person` (\r\n  `name` VARCHAR(255),\r\n  `isBetaMember` TINYINT(1) NOT NULL DEFAULT 0\r\n);\r\n```\r\n\r\n**Note:** Consider defining a Model instead and calling `YourModel.sync()` instead, which is a higher-level approach.\r\n\r\n## Adding a column to a table\r\n\r\n```js\r\nqueryInterface.addColumn('Person', 'petName', { type: DataTypes.STRING });\r\n```\r\n\r\nGenerated SQL (using SQLite):\r\n\r\n```sql\r\nALTER TABLE `Person` ADD `petName` VARCHAR(255);\r\n```\r\n\r\n## Changing the datatype of a column\r\n\r\n```js\r\nqueryInterface.changeColumn('Person', 'foo', {\r\n  type: DataTypes.FLOAT,\r\n  defaultValue: 3.14,\r\n  allowNull: false\r\n});\r\n```\r\n\r\nGenerated SQL (using MySQL):\r\n\r\n```sql\r\nALTER TABLE `Person` CHANGE `foo` `foo` FLOAT NOT NULL DEFAULT 3.14;\r\n```\r\n\r\n## Removing a column\r\n\r\n```js\r\nqueryInterface.removeColumn('Person', 'petName', { /* query options */ });\r\n```\r\n\r\nGenerated SQL (using PostgreSQL):\r\n\r\n```SQL\r\nALTER TABLE \"public\".\"Person\" DROP COLUMN \"petName\";\r\n```\r\n\r\n## Changing and removing columns in SQLite\r\n\r\nSQLite does not support directly altering and removing columns. However, Sequelize will try to work around this by recreating the whole table with the help of a backup table, inspired by [these instructions](https://www.sqlite.org/lang_altertable.html#otheralter).\r\n\r\nFor example:\r\n\r\n```js\r\n// Assuming we have a table in SQLite created as follows:\r\nqueryInterface.createTable('Person', {\r\n  name: DataTypes.STRING,\r\n  isBetaMember: {\r\n    type: DataTypes.BOOLEAN,\r\n    defaultValue: false,\r\n    allowNull: false\r\n  },\r\n  petName: DataTypes.STRING,\r\n  foo: DataTypes.INTEGER\r\n});\r\n\r\n// And we change a column:\r\nqueryInterface.changeColumn('Person', 'foo', {\r\n  type: DataTypes.FLOAT,\r\n  defaultValue: 3.14,\r\n  allowNull: false\r\n});\r\n```\r\n\r\nThe following SQL calls are generated for SQLite:\r\n\r\n```sql\r\nPRAGMA TABLE_INFO(`Person`);\r\n\r\nCREATE TABLE IF NOT EXISTS `Person_backup` (\r\n  `name` VARCHAR(255),\r\n  `isBetaMember` TINYINT(1) NOT NULL DEFAULT 0,\r\n  `foo` FLOAT NOT NULL DEFAULT '3.14',\r\n  `petName` VARCHAR(255)\r\n);\r\n\r\nINSERT INTO `Person_backup`\r\n  SELECT\r\n    `name`,\r\n    `isBetaMember`,\r\n    `foo`,\r\n    `petName`\r\n  FROM `Person`;\r\n\r\nDROP TABLE `Person`;\r\n\r\nCREATE TABLE IF NOT EXISTS `Person` (\r\n  `name` VARCHAR(255),\r\n  `isBetaMember` TINYINT(1) NOT NULL DEFAULT 0,\r\n  `foo` FLOAT NOT NULL DEFAULT '3.14',\r\n  `petName` VARCHAR(255)\r\n);\r\n\r\nINSERT INTO `Person`\r\n  SELECT\r\n    `name`,\r\n    `isBetaMember`,\r\n    `foo`,\r\n    `petName`\r\n  FROM `Person_backup`;\r\n\r\nDROP TABLE `Person_backup`;\r\n```\r\n\r\n## Other\r\n\r\nAs mentioned in the beginning of this guide, there is a lot more to the Query Interface available in Sequelize! Check the [QueryInterface API](../class/lib/dialects/abstract/query-interface.js~QueryInterface.html) for a full list of what can be done.",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/docs/manual/other-topics/naming-strategies.md",
    "name": "docs/manual/other-topics/naming-strategies.md",
    "content": "# Naming Strategies\r\n\r\n## The `underscored` option\r\n\r\nSequelize provides the `underscored` option for a model. When `true`, this option will set the `field` option on all attributes to the [snake_case](https://en.wikipedia.org/wiki/Snake_case) version of its name. This also applies to foreign keys automatically generated by associations and other automatically generated fields. Example:\r\n\r\n```js\r\nconst User = sequelize.define('user', { username: Sequelize.STRING }, {\r\n  underscored: true\r\n});\r\nconst Task = sequelize.define('task', { title: Sequelize.STRING }, {\r\n  underscored: true\r\n});\r\nUser.hasMany(Task);\r\nTask.belongsTo(User);\r\n```\r\n\r\nAbove we have the models User and Task, both using the `underscored` option. We also have a One-to-Many relationship between them. Also, recall that since `timestamps` is true by default, we should expect the `createdAt` and `updatedAt` fields to be automatically created as well.\r\n\r\nWithout the `underscored` option, Sequelize would automatically define:\r\n\r\n* A `createdAt` attribute for each model, pointing to a column named `createdAt` in each table\r\n* An `updatedAt` attribute for each model, pointing to a column named `updatedAt` in each table\r\n* A `userId` attribute in the `Task` model, pointing to a column named `userId` in the task table\r\n\r\nWith the `underscored` option enabled, Sequelize will instead define:\r\n\r\n* A `createdAt` attribute for each model, pointing to a column named `created_at` in each table\r\n* An `updatedAt` attribute for each model, pointing to a column named `updated_at` in each table\r\n* A `userId` attribute in the `Task` model, pointing to a column named `user_id` in the task table\r\n\r\nNote that in both cases the fields are still [camelCase](https://en.wikipedia.org/wiki/Camel_case) in the JavaScript side; this option only changes how these fields are mapped to the database itself. The `field` option of every attribute is set to their snake_case version, but the attribute itself remains camelCase.\r\n\r\nThis way, calling `sync()` on the above code will generate the following:\r\n\r\n```sql\r\nCREATE TABLE IF NOT EXISTS \"users\" (\r\n  \"id\" SERIAL,\r\n  \"username\" VARCHAR(255),\r\n  \"created_at\" TIMESTAMP WITH TIME ZONE NOT NULL,\r\n  \"updated_at\" TIMESTAMP WITH TIME ZONE NOT NULL,\r\n  PRIMARY KEY (\"id\")\r\n);\r\nCREATE TABLE IF NOT EXISTS \"tasks\" (\r\n  \"id\" SERIAL,\r\n  \"title\" VARCHAR(255),\r\n  \"created_at\" TIMESTAMP WITH TIME ZONE NOT NULL,\r\n  \"updated_at\" TIMESTAMP WITH TIME ZONE NOT NULL,\r\n  \"user_id\" INTEGER REFERENCES \"users\" (\"id\") ON DELETE SET NULL ON UPDATE CASCADE,\r\n  PRIMARY KEY (\"id\")\r\n);\r\n```\r\n\r\n## Singular vs. Plural\r\n\r\nAt a first glance, it can be confusing whether the singular form or plural form of a name shall be used around in Sequelize. This section aims at clarifying that a bit.\r\n\r\nRecall that Sequelize uses a library called [inflection](https://www.npmjs.com/package/inflection) under the hood, so that irregular plurals (such as `person -> people`) are computed correctly. However, if you're working in another language, you may want to define the singular and plural forms of names directly; sequelize allows you to do this with some options.\r\n\r\n### When defining models\r\n\r\nModels should be defined with the singular form of a word. Example:\r\n\r\n```js\r\nsequelize.define('foo', { name: DataTypes.STRING });\r\n```\r\n\r\nAbove, the model name is `foo` (singular), and the respective table name is `foos`, since Sequelize automatically gets the plural for the table name.\r\n\r\n### When defining a reference key in a model\r\n\r\n```js\r\nsequelize.define('foo', {\r\n  name: DataTypes.STRING,\r\n  barId: {\r\n    type: DataTypes.INTEGER,\r\n    allowNull: false,\r\n    references: {\r\n      model: \"bars\",\r\n      key: \"id\"\r\n    },\r\n    onDelete: \"CASCADE\"\r\n  },\r\n});\r\n```\r\n\r\nIn the above example we are manually defining a key that references another model. It's not usual to do this, but if you have to, you should use the table name there. This is because the reference is created upon the referencced table name. In the example above, the plural form was used (`bars`), assuming that the `bar` model was created with the default settings (making its underlying table automatically pluralized).\r\n\r\n### When retrieving data from eager loading\r\n\r\nWhen you perform an `include` in a query, the included data will be added to an extra field in the returned objects, according to the following rules:\r\n\r\n* When including something from a single association (`hasOne` or `belongsTo`) - the field name will be the singular version of the model name;\r\n* When including something from a multiple association (`hasMany` or `belongsToMany`) - the field name will be the plural form of the model.\r\n\r\nIn short, the name of the field will take the most logical form in each situation.\r\n\r\nExamples:\r\n\r\n```js\r\n// Assuming Foo.hasMany(Bar)\r\nconst foo = Foo.findOne({ include: Bar });\r\n// foo.bars will be an array\r\n// foo.bar will not exist since it doens't make sense\r\n\r\n// Assuming Foo.hasOne(Bar)\r\nconst foo = Foo.findOne({ include: Bar });\r\n// foo.bar will be an object (possibly null if there is no associated model)\r\n// foo.bars will not exist since it doens't make sense\r\n\r\n// And so on.\r\n```\r\n\r\n### Overriding singulars and plurals when defining aliases\r\n\r\nWhen defining an alias for an association, instead of using simply `{ as: 'myAlias' }`, you can pass an object to specify the singular and plural forms:\r\n\r\n```js\r\nProject.belongsToMany(User, {\r\n  as: {\r\n    singular: 'líder',\r\n    plural: 'líderes'\r\n  }\r\n});\r\n```\r\n\r\nIf you know that a model will always use the same alias in associations, you can provide the singular and plural forms directly to the model itself:\r\n\r\n```js\r\nconst User = sequelize.define('user', { /* ... */ }, {\r\n  name: {\r\n    singular: 'líder',\r\n    plural: 'líderes',\r\n  }\r\n});\r\nProject.belongsToMany(User);\r\n```\r\n\r\nThe mixins added to the user instances will use the correct forms. For example, instead of `project.addUser()`, Sequelize will provide `project.getLíder()`. Also, instead of `project.setUsers()`, Sequelize will provide `project.setLíderes()`.\r\n\r\nNote: recall that using `as` to change the name of the association will also change the name of the foreign key. Therefore it is recommended to also specify the foreign key(s) involved directly in this case.\r\n\r\n```js\r\n// Example of possible mistake\r\nInvoice.belongsTo(Subscription, { as: 'TheSubscription' });\r\nSubscription.hasMany(Invoice);\r\n```\r\n\r\nThe first call above will establish a foreign key called `theSubscriptionId` on `Invoice`. However, the second call will also establish a foreign key on `Invoice` (since as we know, `hasMany` calls places foreign keys in the target model) - however, it will be named `subscriptionId`. This way you will have both `subscriptionId` and `theSubscriptionId` columns.\r\n\r\nThe best approach is to choose a name for the foreign key and place it explicitly in both calls. For example, if `subscription_id` was chosen:\r\n\r\n```js\r\n// Fixed example\r\nInvoice.belongsTo(Subscription, { as: 'TheSubscription', foreignKey: 'subscription_id' });\r\nSubscription.hasMany(Invoice, { foreignKey: 'subscription_id' });\r\n```",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/docs/manual/other-topics/scopes.md",
    "name": "docs/manual/other-topics/scopes.md",
    "content": "# Scopes\n\nScopes are used to help you reuse code. You can define commonly used queries, specifying options such as `where`, `include`, `limit`, etc.\n\nThis guide concerns model scopes. You might also be interested in the [guide for association scopes](association-scopes.html), which are similar but not the same thing.\n\n## Definition\n\nScopes are defined in the model definition and can be finder objects, or functions returning finder objects - except for the default scope, which can only be an object:\n\n```js\nclass Project extends Model {}\nProject.init({\n  // Attributes\n}, {\n  defaultScope: {\n    where: {\n      active: true\n    }\n  },\n  scopes: {\n    deleted: {\n      where: {\n        deleted: true\n      }\n    },\n    activeUsers: {\n      include: [\n        { model: User, where: { active: true } }\n      ]\n    },\n    random() {\n      return {\n        where: {\n          someNumber: Math.random()\n        }\n      }\n    },\n    accessLevel(value) {\n      return {\n        where: {\n          accessLevel: {\n            [Op.gte]: value\n          }\n        }\n      }\n    },\n    sequelize,\n    modelName: 'project'\n  }\n});\n```\n\nYou can also add scopes after a model has been defined by calling [`YourModel.addScope`](../class/lib/model.js~Model.html#static-method-addScope). This is especially useful for scopes with includes, where the model in the include might not be defined at the time the other model is being defined.\n\nThe default scope is always applied. This means, that with the model definition above, `Project.findAll()` will create the following query:\n\n```sql\nSELECT * FROM projects WHERE active = true\n```\n\nThe default scope can be removed by calling `.unscoped()`, `.scope(null)`, or by invoking another scope:\n\n```js\nawait Project.scope('deleted').findAll(); // Removes the default scope\n```\n\n```sql\nSELECT * FROM projects WHERE deleted = true\n```\n\nIt is also possible to include scoped models in a scope definition. This allows you to avoid duplicating `include`, `attributes` or `where` definitions. Using the above example, and invoking the `active` scope on the included User model (rather than specifying the condition directly in that include object):\n\n```js\n// The `activeUsers` scope defined in the example above could also have been defined this way:\nProject.addScope('activeUsers', {\n  include: [\n    { model: User.scope('active') }\n  ]\n});\n```\n\n## Usage\n\nScopes are applied by calling `.scope` on the model definition, passing the name of one or more scopes. `.scope` returns a fully functional model instance with all the regular methods: `.findAll`, `.update`, `.count`, `.destroy` etc. You can save this model instance and reuse it later:\n\n```js\nconst DeletedProjects = Project.scope('deleted');\nawait DeletedProjects.findAll();\n\n// The above is equivalent to:\nawait Project.findAll({\n  where: {\n    deleted: true\n  }\n});\n```\n\nScopes apply to `.find`, `.findAll`, `.count`, `.update`, `.increment` and `.destroy`.\n\nScopes which are functions can be invoked in two ways. If the scope does not take any arguments it can be invoked as normally. If the scope takes arguments, pass an object:\n\n```js\nawait Project.scope('random', { method: ['accessLevel', 19] }).findAll();\n```\n\nGenerated SQL:\n\n```sql\nSELECT * FROM projects WHERE someNumber = 42 AND accessLevel >= 19\n```\n\n## Merging\n\nSeveral scopes can be applied simultaneously by passing an array of scopes to `.scope`, or by passing the scopes as consecutive arguments.\n\n```js\n// These two are equivalent\nawait Project.scope('deleted', 'activeUsers').findAll();\nawait Project.scope(['deleted', 'activeUsers']).findAll();\n```\n\nGenerated SQL:\n\n```sql\nSELECT * FROM projects\nINNER JOIN users ON projects.userId = users.id\nWHERE projects.deleted = true\nAND users.active = true\n```\n\nIf you want to apply another scope alongside the default scope, pass the key `defaultScope` to `.scope`:\n\n```js\nawait Project.scope('defaultScope', 'deleted').findAll();\n```\n\nGenerated SQL:\n\n```sql\nSELECT * FROM projects WHERE active = true AND deleted = true\n```\n\nWhen invoking several scopes, keys from subsequent scopes will overwrite previous ones (similarly to [Object.assign](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)), except for `where` and `include`, which will be merged. Consider two scopes:\n\n```js\nYourMode.addScope('scope1', {\n  where: {\n    firstName: 'bob',\n    age: {\n      [Op.gt]: 20\n    }\n  },\n  limit: 2\n});\nYourMode.addScope('scope2', {\n  where: {\n    age: {\n      [Op.gt]: 30\n    }\n  },\n  limit: 10\n});\n```\n\nUsing `.scope('scope1', 'scope2')` will yield the following WHERE clause:\n\n```sql\nWHERE firstName = 'bob' AND age > 30 LIMIT 10\n```\n\nNote how `limit` and `age` are overwritten by `scope2`, while `firstName` is preserved. The `limit`, `offset`, `order`, `paranoid`, `lock` and `raw` fields are overwritten, while `where` is shallowly merged (meaning that identical keys will be overwritten). The merge strategy for `include` will be discussed later on.\n\nNote that `attributes` keys of multiple applied scopes are merged in such a way that `attributes.exclude` are always preserved. This allows merging several scopes and never leaking sensitive fields in final scope.\n\nThe same merge logic applies when passing a find object directly to `findAll` (and similar finders) on a scoped model:\n\n```js\nProject.scope('deleted').findAll({\n  where: {\n    firstName: 'john'\n  }\n})\n```\n\nGenerated where clause:\n\n```sql\nWHERE deleted = true AND firstName = 'john'\n```\n\nHere the `deleted` scope is merged with the finder. If we were to pass `where: { firstName: 'john', deleted: false }` to the finder, the `deleted` scope would be overwritten.\n\n### Merging includes\n\nIncludes are merged recursively based on the models being included. This is a very powerful merge, added on v5, and is better understood with an example.\n\nConsider the models `Foo`, `Bar`, `Baz` and `Qux`, with One-to-Many associations as follows:\n\n```js\nconst Foo = sequelize.define('Foo', { name: Sequelize.STRING });\nconst Bar = sequelize.define('Bar', { name: Sequelize.STRING });\nconst Baz = sequelize.define('Baz', { name: Sequelize.STRING });\nconst Qux = sequelize.define('Qux', { name: Sequelize.STRING });\nFoo.hasMany(Bar, { foreignKey: 'fooId' });\nBar.hasMany(Baz, { foreignKey: 'barId' });\nBaz.hasMany(Qux, { foreignKey: 'bazId' });\n```\n\nNow, consider the following four scopes defined on Foo:\n\n```js\nFoo.addScope('includeEverything', {\n  include: {\n    model: Bar,\n    include: [{\n      model: Baz,\n      include: Qux\n    }]\n  }\n});\n\nFoo.addScope('limitedBars', {\n  include: [{\n    model: Bar,\n    limit: 2\n  }]\n});\n\nFoo.addScope('limitedBazs', {\n  include: [{\n    model: Bar,\n    include: [{\n      model: Baz,\n      limit: 2\n    }]\n  }]\n});\n\nFoo.addScope('excludeBazName', {\n  include: [{\n    model: Bar,\n    include: [{\n      model: Baz,\n      attributes: {\n        exclude: ['name']\n      }\n    }]\n  }]\n});\n```\n\nThese four scopes can be deeply merged easily, for example by calling `Foo.scope('includeEverything', 'limitedBars', 'limitedBazs', 'excludeBazName').findAll()`, which would be entirely equivalent to calling the following:\n\n```js\nawait Foo.findAll({\n  include: {\n    model: Bar,\n    limit: 2,\n    include: [{\n      model: Baz,\n      limit: 2,\n      attributes: {\n        exclude: ['name']\n      },\n      include: Qux\n    }]\n  }\n});\n\n// The above is equivalent to:\nawait Foo.scope([\n  'includeEverything',\n  'limitedBars',\n  'limitedBazs',\n  'excludeBazName'\n]).findAll();\n```\n\nObserve how the four scopes were merged into one. The includes of scopes are merged based on the model being included. If one scope includes model A and another includes model B, the merged result will include both models A and B. On the other hand, if both scopes include the same model A, but with different options (such as nested includes or other attributes), those will be merged recursively, as shown above.\n\nThe merge illustrated above works in the exact same way regardless of the order applied to the scopes. The order would only make a difference if a certain option was set by two different scopes - which is not the case of the above example, since each scope does a different thing.\n\nThis merge strategy also works in the exact same way with options passed to `.findAll`, `.findOne` and the like.\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/docs/manual/other-topics/sub-queries.md",
    "name": "docs/manual/other-topics/sub-queries.md",
    "content": "# Sub Queries\r\n\r\nConsider you have two models, `Post` and `Reaction`, with a One-to-Many relationship set up, so that one post has many reactions:\r\n\r\n```js\r\nconst Post = sequelize.define('post', {\r\n    content: DataTypes.STRING\r\n}, { timestamps: false });\r\n\r\nconst Reaction = sequelize.define('reaction', {\r\n    type: DataTypes.STRING\r\n}, { timestamps: false });\r\n\r\nPost.hasMany(Reaction);\r\nReaction.belongsTo(Post);\r\n```\r\n\r\n*Note: we have disabled timestamps just to have shorter queries for the next examples.*\r\n\r\nLet's fill our tables with some data:\r\n\r\n```js\r\nasync function makePostWithReactions(content, reactionTypes) {\r\n    const post = await Post.create({ content });\r\n    await Reaction.bulkCreate(\r\n        reactionTypes.map(type => ({ type, postId: post.id }))\r\n    );\r\n    return post;\r\n}\r\n\r\nawait makePostWithReactions('Hello World', [\r\n    'Like', 'Angry', 'Laugh', 'Like', 'Like', 'Angry', 'Sad', 'Like'\r\n]);\r\nawait makePostWithReactions('My Second Post', [\r\n    'Laugh', 'Laugh', 'Like', 'Laugh'\r\n]);\r\n```\r\n\r\nNow, we are ready for examples of the power of subqueries.\r\n\r\nLet's say we wanted to compute via SQL a `laughReactionsCount` for each post. We can achieve that with a sub-query, such as the following:\r\n\r\n```sql\r\nSELECT\r\n    *,\r\n    (\r\n        SELECT COUNT(*)\r\n        FROM reactions AS reaction\r\n        WHERE\r\n            reaction.postId = post.id\r\n            AND\r\n            reaction.type = \"Laugh\"\r\n    ) AS laughReactionsCount\r\nFROM posts AS post\r\n```\r\n\r\nIf we run the above raw SQL query through Sequelize, we get:\r\n\r\n```json\r\n[\r\n  {\r\n    \"id\": 1,\r\n    \"content\": \"Hello World\",\r\n    \"laughReactionsCount\": 1\r\n  },\r\n  {\r\n    \"id\": 2,\r\n    \"content\": \"My Second Post\",\r\n    \"laughReactionsCount\": 3\r\n  }\r\n]\r\n```\r\n\r\nSo how can we achieve that with more help from Sequelize, without having to write the whole raw query by hand?\r\n\r\nThe answer: by combining the `attributes` option of the finder methods (such as `findAll`) with the `sequelize.literal` utility function, that allows you to directly insert arbitrary content into the query without any automatic escaping.\r\n\r\nThis means that Sequelize will help you with the main, larger query, but you will still have to write that sub-query by yourself:\r\n\r\n```js\r\nPost.findAll({\r\n    attributes: {\r\n        include: [\r\n            [\r\n                // Note the wrapping parentheses in the call below!\r\n                sequelize.literal(`(\r\n                    SELECT COUNT(*)\r\n                    FROM reactions AS reaction\r\n                    WHERE\r\n                        reaction.postId = post.id\r\n                        AND\r\n                        reaction.type = \"Laugh\"\r\n                )`),\r\n                'laughReactionsCount'\r\n            ]\r\n        ]\r\n    }\r\n});\r\n```\r\n\r\n*Important Note: Since `sequelize.literal` inserts arbitrary content without escaping to the query, it deserves very special attention since it may be a source of (major) security vulnerabilities. It should not be used on user-generated content.* However, here, we are using `sequelize.literal` with a fixed string, carefully written by us (the coders). This is ok, since we know what we are doing.\r\n\r\nThe above gives the following output:\r\n\r\n```json\r\n[\r\n  {\r\n    \"id\": 1,\r\n    \"content\": \"Hello World\",\r\n    \"laughReactionsCount\": 1\r\n  },\r\n  {\r\n    \"id\": 2,\r\n    \"content\": \"My Second Post\",\r\n    \"laughReactionsCount\": 3\r\n  }\r\n]\r\n```\r\n\r\nSuccess!\r\n\r\n## Using sub-queries for complex ordering\r\n\r\nThis idea can be used to enable complex ordering, such as ordering posts by the number of laugh reactions they have:\r\n\r\n```js\r\nPost.findAll({\r\n    attributes: {\r\n        include: [\r\n            [\r\n                sequelize.literal(`(\r\n                    SELECT COUNT(*)\r\n                    FROM reactions AS reaction\r\n                    WHERE\r\n                        reaction.postId = post.id\r\n                        AND\r\n                        reaction.type = \"Laugh\"\r\n                )`),\r\n                'laughReactionsCount'\r\n            ]\r\n        ]\r\n    },\r\n    order: [\r\n        [sequelize.literal('laughReactionsCount'), 'DESC']\r\n    ]\r\n});\r\n```\r\n\r\nResult:\r\n\r\n```json\r\n[\r\n  {\r\n    \"id\": 2,\r\n    \"content\": \"My Second Post\",\r\n    \"laughReactionsCount\": 3\r\n  },\r\n  {\r\n    \"id\": 1,\r\n    \"content\": \"Hello World\",\r\n    \"laughReactionsCount\": 1\r\n  }\r\n]\r\n```",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/docs/manual/other-topics/other-data-types.md",
    "name": "docs/manual/other-topics/other-data-types.md",
    "content": "# Other Data Types\r\n\r\nApart from the most common data types mentioned in the Model Basics guide, Sequelize provides several other data types.\r\n\r\n## Ranges (PostgreSQL only)\r\n\r\n```js\r\nDataTypes.RANGE(DataTypes.INTEGER)    // int4range\r\nDataTypes.RANGE(DataTypes.BIGINT)     // int8range\r\nDataTypes.RANGE(DataTypes.DATE)       // tstzrange\r\nDataTypes.RANGE(DataTypes.DATEONLY)   // daterange\r\nDataTypes.RANGE(DataTypes.DECIMAL)    // numrange\r\n```\r\n\r\nSince range types have extra information for their bound inclusion/exclusion it's not very straightforward to just use a tuple to represent them in javascript.\r\n\r\nWhen supplying ranges as values you can choose from the following APIs:\r\n\r\n```js\r\n// defaults to inclusive lower bound, exclusive upper bound\r\nconst range = [\r\n  new Date(Date.UTC(2016, 0, 1)),\r\n  new Date(Date.UTC(2016, 1, 1))\r\n];\r\n// '[\"2016-01-01 00:00:00+00:00\", \"2016-02-01 00:00:00+00:00\")'\r\n\r\n// control inclusion\r\nconst range = [\r\n  { value: new Date(Date.UTC(2016, 0, 1)), inclusive: false },\r\n  { value: new Date(Date.UTC(2016, 1, 1)), inclusive: true },\r\n];\r\n// '(\"2016-01-01 00:00:00+00:00\", \"2016-02-01 00:00:00+00:00\"]'\r\n\r\n// composite form\r\nconst range = [\r\n  { value: new Date(Date.UTC(2016, 0, 1)), inclusive: false },\r\n  new Date(Date.UTC(2016, 1, 1)),\r\n];\r\n// '(\"2016-01-01 00:00:00+00:00\", \"2016-02-01 00:00:00+00:00\")'\r\n\r\nconst Timeline = sequelize.define('Timeline', {\r\n  range: DataTypes.RANGE(DataTypes.DATE)\r\n});\r\n\r\nawait Timeline.create({ range });\r\n```\r\n\r\nHowever, retrieved range values always come in the form of an array of objects. For example, if the stored value is `(\"2016-01-01 00:00:00+00:00\", \"2016-02-01 00:00:00+00:00\"]`, after a finder query you will get:\r\n\r\n```js\r\n[\r\n  { value: Date, inclusive: false },\r\n  { value: Date, inclusive: true }\r\n]\r\n```\r\n\r\nYou will need to call `reload()` after updating an instance with a range type or use the `returning: true` option.\r\n\r\n### Special Cases\r\n\r\n```js\r\n// empty range:\r\nTimeline.create({ range: [] }); // range = 'empty'\r\n\r\n// Unbounded range:\r\nTimeline.create({ range: [null, null] }); // range = '[,)'\r\n// range = '[,\"2016-01-01 00:00:00+00:00\")'\r\nTimeline.create({ range: [null, new Date(Date.UTC(2016, 0, 1))] });\r\n\r\n// Infinite range:\r\n// range = '[-infinity,\"2016-01-01 00:00:00+00:00\")'\r\nTimeline.create({ range: [-Infinity, new Date(Date.UTC(2016, 0, 1))] });\r\n```\r\n\r\n## BLOBs\r\n\r\n```js\r\nDataTypes.BLOB                // BLOB (bytea for PostgreSQL)\r\nDataTypes.BLOB('tiny')        // TINYBLOB (bytea for PostgreSQL)\r\nDataTypes.BLOB('medium')      // MEDIUMBLOB (bytea for PostgreSQL)\r\nDataTypes.BLOB('long')        // LONGBLOB (bytea for PostgreSQL)\r\n```\r\n\r\nThe blob datatype allows you to insert data both as strings and as buffers. However, when a blob is retrieved from database with Sequelize, it will always be retrieved as a buffer.\r\n\r\n## ENUMs\r\n\r\nThe ENUM is a data type that accepts only a few values, specified as a list.\r\n\r\n```js\r\nDataTypes.ENUM('foo', 'bar') // An ENUM with allowed values 'foo' and 'bar'\r\n```\r\n\r\nENUMs can also be specified with the `values` field of the column definition, as follows:\r\n\r\n```js\r\nsequelize.define('foo', {\r\n  states: {\r\n    type: DataTypes.ENUM,\r\n    values: ['active', 'pending', 'deleted']\r\n  }\r\n});\r\n```\r\n\r\n## JSON (SQLite, MySQL, MariaDB and PostgreSQL only)\r\n\r\nThe `DataTypes.JSON` data type is only supported for SQLite, MySQL, MariaDB and PostgreSQL. However, there is a minimum support for MSSQL (see below).\r\n\r\n### Note for PostgreSQL\r\n\r\nThe JSON data type in PostgreSQL stores the value as plain text, as opposed to binary representation. If you simply want to store and retrieve a JSON representation, using JSON will take less disk space and less time to build from its input representation. However, if you want to do any operations on the JSON value, you should prefer the JSONB data type described below.\r\n\r\n### JSONB (PostgreSQL only)\r\n\r\nPostgreSQL also supports a JSONB data type: `DataTypes.JSONB`. It can be queried in three different ways:\r\n\r\n```js\r\n// Nested object\r\nawait Foo.findOne({\r\n  where: {\r\n    meta: {\r\n      video: {\r\n        url: {\r\n          [Op.ne]: null\r\n        }\r\n      }\r\n    }\r\n  }\r\n});\r\n\r\n// Nested key\r\nawait Foo.findOne({\r\n  where: {\r\n    \"meta.audio.length\": {\r\n      [Op.gt]: 20\r\n    }\r\n  }\r\n});\r\n\r\n// Containment\r\nawait Foo.findOne({\r\n  where: {\r\n    meta: {\r\n      [Op.contains]: {\r\n        site: {\r\n          url: 'http://google.com'\r\n        }\r\n      }\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n### MSSQL\r\n\r\nMSSQL does not have a JSON data type, however it does provide some support for JSON stored as strings through certain functions since SQL Server 2016. Using these functions, you will be able to query the JSON stored in the string, but any returned values will need to be parsed seperately.\r\n\r\n```js\r\n// ISJSON - to test if a string contains valid JSON\r\nawait User.findAll({\r\n  where: sequelize.where(sequelize.fn('ISJSON', sequelize.col('userDetails')), 1)\r\n})\r\n\r\n// JSON_VALUE - extract a scalar value from a JSON string\r\nawait User.findAll({\r\n  attributes: [[ sequelize.fn('JSON_VALUE', sequelize.col('userDetails'), '$.address.Line1'), 'address line 1']]\r\n})\r\n\r\n// JSON_VALUE - query a scalar value from a JSON string\r\nawait User.findAll({\r\n  where: sequelize.where(sequelize.fn('JSON_VALUE', sequelize.col('userDetails'), '$.address.Line1'), '14, Foo Street')\r\n})\r\n\r\n// JSON_QUERY - extract an object or array\r\nawait User.findAll({\r\n  attributes: [[ sequelize.fn('JSON_QUERY', sequelize.col('userDetails'), '$.address'), 'full address']]\r\n})\r\n```\r\n\r\n## Others\r\n\r\n```js\r\nDataTypes.ARRAY(/* DataTypes.SOMETHING */)  // Defines an array of DataTypes.SOMETHING. PostgreSQL only.\r\n\r\nDataTypes.CIDR                        // CIDR                  PostgreSQL only\r\nDataTypes.INET                        // INET                  PostgreSQL only\r\nDataTypes.MACADDR                     // MACADDR               PostgreSQL only\r\n\r\nDataTypes.GEOMETRY                    // Spatial column. PostgreSQL (with PostGIS) or MySQL only.\r\nDataTypes.GEOMETRY('POINT')           // Spatial column with geometry type. PostgreSQL (with PostGIS) or MySQL only.\r\nDataTypes.GEOMETRY('POINT', 4326)     // Spatial column with geometry type and SRID. PostgreSQL (with PostGIS) or MySQL only.\r\n```",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/docs/manual/other-topics/constraints-and-circularities.md",
    "name": "docs/manual/other-topics/constraints-and-circularities.md",
    "content": "# Constraints & Circularities\r\n\r\nAdding constraints between tables means that tables must be created in the database in a certain order, when using `sequelize.sync`. If `Task` has a reference to `User`, the `User` table must be created before the `Task` table can be created. This can sometimes lead to circular references, where Sequelize cannot find an order in which to sync. Imagine a scenario of documents and versions. A document can have multiple versions, and for convenience, a document has a reference to its current version.\r\n\r\n```js\r\nconst { Sequelize, Model, DataTypes } = require(\"sequelize\");\r\n\r\nclass Document extends Model {}\r\nDocument.init({\r\n    author: DataTypes.STRING\r\n}, { sequelize, modelName: 'document' });\r\n\r\nclass Version extends Model {}\r\nVersion.init({\r\n  timestamp: DataTypes.DATE\r\n}, { sequelize, modelName: 'version' });\r\n\r\nDocument.hasMany(Version); // This adds documentId attribute to version\r\nDocument.belongsTo(Version, {\r\n  as: 'Current',\r\n  foreignKey: 'currentVersionId'\r\n}); // This adds currentVersionId attribute to document\r\n```\r\n\r\nHowever, unfortunately the code above will result in the following error:\r\n\r\n```text\r\nCyclic dependency found. documents is dependent of itself. Dependency chain: documents -> versions => documents\r\n```\r\n\r\nIn order to alleviate that, we can pass `constraints: false` to one of the associations:\r\n\r\n```js\r\nDocument.hasMany(Version);\r\nDocument.belongsTo(Version, {\r\n  as: 'Current',\r\n  foreignKey: 'currentVersionId',\r\n  constraints: false\r\n});\r\n```\r\n\r\nWhich will allow us to sync the tables correctly:\r\n\r\n```sql\r\nCREATE TABLE IF NOT EXISTS \"documents\" (\r\n  \"id\" SERIAL,\r\n  \"author\" VARCHAR(255),\r\n  \"createdAt\" TIMESTAMP WITH TIME ZONE NOT NULL,\r\n  \"updatedAt\" TIMESTAMP WITH TIME ZONE NOT NULL,\r\n  \"currentVersionId\" INTEGER,\r\n  PRIMARY KEY (\"id\")\r\n);\r\n\r\nCREATE TABLE IF NOT EXISTS \"versions\" (\r\n  \"id\" SERIAL,\r\n  \"timestamp\" TIMESTAMP WITH TIME ZONE,\r\n  \"createdAt\" TIMESTAMP WITH TIME ZONE NOT NULL,\r\n  \"updatedAt\" TIMESTAMP WITH TIME ZONE NOT NULL,\r\n  \"documentId\" INTEGER REFERENCES \"documents\" (\"id\") ON DELETE\r\n  SET\r\n    NULL ON UPDATE CASCADE,\r\n    PRIMARY KEY (\"id\")\r\n);\r\n```\r\n\r\n## Enforcing a foreign key reference without constraints\r\n\r\nSometimes you may want to reference another table, without adding any constraints, or associations. In that case you can manually add the reference attributes to your schema definition, and mark the relations between them.\r\n\r\n```js\r\nclass Trainer extends Model {}\r\nTrainer.init({\r\n  firstName: Sequelize.STRING,\r\n  lastName: Sequelize.STRING\r\n}, { sequelize, modelName: 'trainer' });\r\n\r\n// Series will have a trainerId = Trainer.id foreign reference key\r\n// after we call Trainer.hasMany(series)\r\nclass Series extends Model {}\r\nSeries.init({\r\n  title: Sequelize.STRING,\r\n  subTitle: Sequelize.STRING,\r\n  description: Sequelize.TEXT,\r\n  // Set FK relationship (hasMany) with `Trainer`\r\n  trainerId: {\r\n    type: DataTypes.INTEGER,\r\n    references: {\r\n      model: Trainer,\r\n      key: 'id'\r\n    }\r\n  }\r\n}, { sequelize, modelName: 'series' });\r\n\r\n// Video will have seriesId = Series.id foreign reference key\r\n// after we call Series.hasOne(Video)\r\nclass Video extends Model {}\r\nVideo.init({\r\n  title: Sequelize.STRING,\r\n  sequence: Sequelize.INTEGER,\r\n  description: Sequelize.TEXT,\r\n  // set relationship (hasOne) with `Series`\r\n  seriesId: {\r\n    type: DataTypes.INTEGER,\r\n    references: {\r\n      model: Series, // Can be both a string representing the table name or a Sequelize model\r\n      key: 'id'\r\n    }\r\n  }\r\n}, { sequelize, modelName: 'video' });\r\n\r\nSeries.hasOne(Video);\r\nTrainer.hasMany(Series);\r\n```",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/docs/manual/other-topics/extending-data-types.md",
    "name": "docs/manual/other-topics/extending-data-types.md",
    "content": "# Extending Data Types\n\nMost likely the type you are trying to implement is already included in [DataTypes](data-types.html). If a new datatype is not included, this manual will show how to write it yourself.\n\nSequelize doesn't create new datatypes in the database. This tutorial explains how to make Sequelize recognize new datatypes and assumes that those new datatypes are already created in the database.\n\nTo extend Sequelize datatypes, do it before any Sequelize instance is created.\n\n## Example\n\nIn this example, we will create a type called `SOMETYPE` that replicates the built-in datatype `DataTypes.INTEGER(11).ZEROFILL.UNSIGNED`.\n\n```js\nconst { Sequelize, DataTypes, Utils } = require('Sequelize');\ncreateTheNewDataType();\nconst sequelize = new Sequelize('sqlite::memory:');\n\nfunction createTheNewDataType() {\n\n  class SOMETYPE extends DataTypes.ABSTRACT {\n    // Mandatory: complete definition of the new type in the database\n    toSql() {\n      return 'INTEGER(11) UNSIGNED ZEROFILL'\n    }\n\n    // Optional: validator function\n    validate(value, options) {\n      return (typeof value === 'number') && (!Number.isNaN(value));\n    }\n\n    // Optional: sanitizer\n    _sanitize(value) {\n      // Force all numbers to be positive\n      return value < 0 ? 0 : Math.round(value);\n    }\n\n    // Optional: value stringifier before sending to database\n    _stringify(value) {\n      return value.toString();\n    }\n\n    // Optional: parser for values received from the database\n    static parse(value) {\n      return Number.parseInt(value);\n    }\n  }\n\n  // Mandatory: set the type key\n  SOMETYPE.prototype.key = SOMETYPE.key = 'SOMETYPE';\n\n  // Mandatory: add the new type to DataTypes. Optionally wrap it on `Utils.classToInvokable` to\n  // be able to use this datatype directly without having to call `new` on it.\n  DataTypes.SOMETYPE = Utils.classToInvokable(SOMETYPE);\n\n  // Optional: disable escaping after stringifier. Do this at your own risk, since this opens opportunity for SQL injections.\n  // DataTypes.SOMETYPE.escape = false;\n\n}\n```\n\nAfter creating this new datatype, you need to map this datatype in each database dialect and make some adjustments.\n\n## PostgreSQL\n\nLet's say the name of the new datatype is `pg_new_type` in the postgres database. That name has to be mapped to `DataTypes.SOMETYPE`. Additionally, it is required to create a child postgres-specific datatype.\n\n```js\nfunction createTheNewDataType() {\n  // [...]\n\n  const PgTypes = DataTypes.postgres;\n\n  // Mandatory: map postgres datatype name\n  DataTypes.SOMETYPE.types.postgres = ['pg_new_type'];\n\n  // Mandatory: create a postgres-specific child datatype with its own parse\n  // method. The parser will be dynamically mapped to the OID of pg_new_type.\n  PgTypes.SOMETYPE = function SOMETYPE() {\n    if (!(this instanceof PgTypes.SOMETYPE)) {\n      return new PgTypes.SOMETYPE();\n    }\n    DataTypes.SOMETYPE.apply(this, arguments);\n  }\n  const util = require('util'); // Built-in Node package\n  util.inherits(PgTypes.SOMETYPE, DataTypes.SOMETYPE);\n\n  // Mandatory: create, override or reassign a postgres-specific parser\n  // PgTypes.SOMETYPE.parse = value => value;\n  PgTypes.SOMETYPE.parse = DataTypes.SOMETYPE.parse || x => x;\n\n  // Optional: add or override methods of the postgres-specific datatype\n  // like toSql, escape, validate, _stringify, _sanitize...\n\n}\n```\n\n### Ranges\n\nAfter a new range type has been [defined in postgres](https://www.postgresql.org/docs/current/static/rangetypes.html#RANGETYPES-DEFINING), it is trivial to add it to Sequelize.\n\nIn this example the name of the postgres range type is `SOMETYPE_range` and the name of the underlying postgres datatype is `pg_new_type`. The key of `subtypes` and `castTypes` is the key of the Sequelize datatype `DataTypes.SOMETYPE.key`, in lower case.\n\n```js\nfunction createTheNewDataType() {\n  // [...]\n\n  // Add postgresql range, SOMETYPE comes from DataType.SOMETYPE.key in lower case\n  DataTypes.RANGE.types.postgres.subtypes.SOMETYPE = 'SOMETYPE_range';\n  DataTypes.RANGE.types.postgres.castTypes.SOMETYPE = 'pg_new_type';\n}\n```\n\nThe new range can be used in model definitions as `DataTypes.RANGE(DataTypes.SOMETYPE)` or `DataTypes.RANGE(DataTypes.SOMETYPE)`.\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/docs/manual/other-topics/indexes.md",
    "name": "docs/manual/other-topics/indexes.md",
    "content": "# Indexes\r\n\r\nSequelize supports adding indexes to the model definition which will be created on [`sequelize.sync()`](../class/lib/sequelize.js~Sequelize.html#instance-method-sync).\r\n\r\n```js\r\nconst User = sequelize.define('User', { /* attributes */ }, {\r\n  indexes: [\r\n    // Create a unique index on email\r\n    {\r\n      unique: true,\r\n      fields: ['email']\r\n    },\r\n\r\n    // Creates a gin index on data with the jsonb_path_ops operator\r\n    {\r\n      fields: ['data'],\r\n      using: 'gin',\r\n      operator: 'jsonb_path_ops'\r\n    },\r\n\r\n    // By default index name will be [table]_[fields]\r\n    // Creates a multi column partial index\r\n    {\r\n      name: 'public_by_author',\r\n      fields: ['author', 'status'],\r\n      where: {\r\n        status: 'public'\r\n      }\r\n    },\r\n\r\n    // A BTREE index with an ordered field\r\n    {\r\n      name: 'title_index',\r\n      using: 'BTREE',\r\n      fields: [\r\n        'author',\r\n        {\r\n          name: 'title',\r\n          collate: 'en_US',\r\n          order: 'DESC',\r\n          length: 5\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n});\r\n```",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/docs/manual/other-topics/optimistic-locking.md",
    "name": "docs/manual/other-topics/optimistic-locking.md",
    "content": "# Optimistic Locking\r\n\r\nSequelize has built-in support for optimistic locking through a model instance version count.\r\n\r\nOptimistic locking is disabled by default and can be enabled by setting the `version` property to true in a specific model definition or global model configuration. See [model configuration](models-definition.html#configuration) for more details.\r\n\r\nOptimistic locking allows concurrent access to model records for edits and prevents conflicts from overwriting data.  It does this by checking whether another process has made changes to a record since it was read and throws an OptimisticLockError when a conflict is detected.",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/docs/manual/other-topics/read-replication.md",
    "name": "docs/manual/other-topics/read-replication.md",
    "content": "# Read Replication\n\nSequelize supports [read replication](https://en.wikipedia.org/wiki/Replication_%28computing%29#Database_replication), i.e. having multiple servers that you can connect to when you want to do a SELECT query. When you do read replication, you specify one or more servers to act as read replicas, and one server to act as the main writer, which handles all writes and updates and propagates them to the replicas (note that the actual replication process is **not** handled by Sequelize, but should be set up by database backend).\n\n```js\nconst sequelize = new Sequelize('database', null, null, {\n  dialect: 'mysql',\n  port: 3306,\n  replication: {\n    read: [\n      { host: '8.8.8.8', username: 'read-1-username', password: process.env.READ_DB_1_PW },\n      { host: '9.9.9.9', username: 'read-2-username', password: process.env.READ_DB_2_PW }\n    ],\n    write: { host: '1.1.1.1', username: 'write-username', password: process.env.WRITE_DB_PW }\n  },\n  pool: { // If you want to override the options used for the read/write pool you can do so here\n    max: 20,\n    idle: 30000\n  },\n})\n```\n\nIf you have any general settings that apply to all replicas you do not need to provide them for each instance. In the code above, database name and port is propagated to all replicas. The same will happen for user and password, if you leave them out for any of the replicas. Each replica has the following options:`host`,`port`,`username`,`password`,`database`.\n\nSequelize uses a pool to manage connections to your replicas. Internally Sequelize will maintain two pools created using `pool` configuration.\n\nIf you want to modify these, you can pass pool as an options when instantiating Sequelize, as shown above.\n\nEach `write` or `useMaster: true` query will use write pool. For `SELECT` read pool will be used. Read replica are switched using a basic round robin scheduling.\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/docs/manual/other-topics/connection-pool.md",
    "name": "docs/manual/other-topics/connection-pool.md",
    "content": "# Connection Pool\r\n\r\nIf you're connecting to the database from a single process, you should create only one Sequelize instance. Sequelize will set up a connection pool on initialization. This connection pool can be configured through the constructor's `options` parameter (using `options.pool`), as is shown in the following example:\r\n\r\n```js\r\nconst sequelize = new Sequelize(/* ... */, {\r\n  // ...\r\n  pool: {\r\n    max: 5,\r\n    min: 0,\r\n    acquire: 30000,\r\n    idle: 10000\r\n  }\r\n});\r\n```\r\n\r\nLearn more in the [API Reference for the Sequelize constructor](../class/lib/sequelize.js~Sequelize.html#instance-constructor-constructor). If you're connecting to the database from multiple processes, you'll have to create one instance per process, but each instance should have a maximum connection pool size of such that the total maximum size is respected. For example, if you want a max connection pool size of 90 and you have three processes, the Sequelize instance of each process should have a max connection pool size of 30.\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/docs/manual/other-topics/legacy.md",
    "name": "docs/manual/other-topics/legacy.md",
    "content": "# Working with Legacy Tables\n\nWhile out of the box Sequelize will seem a bit opinionated it's easy to work legacy tables and forward proof your application by defining (otherwise generated) table and field names.\n\n## Tables\n\n```js\nclass User extends Model {}\nUser.init({\n  // ...\n}, {\n  modelName: 'user',\n  tableName: 'users',\n  sequelize,\n});\n```\n\n## Fields\n\n```js\nclass MyModel extends Model {}\nMyModel.init({\n  userId: {\n    type: DataTypes.INTEGER,\n    field: 'user_id'\n  }\n}, { sequelize });\n```\n\n## Primary keys\n\nSequelize will assume your table has a `id` primary key property by default.\n\nTo define your own primary key:\n\n```js\nclass Collection extends Model {}\nCollection.init({\n  uid: {\n    type: DataTypes.INTEGER,\n    primaryKey: true,\n    autoIncrement: true // Automatically gets converted to SERIAL for postgres\n  }\n}, { sequelize });\n\nclass Collection extends Model {}\nCollection.init({\n  uuid: {\n    type: DataTypes.UUID,\n    primaryKey: true\n  }\n}, { sequelize });\n```\n\nAnd if your model has no primary key at all you can use `Model.removeAttribute('id');`\n\n## Foreign keys\n\n```js\n// 1:1\nOrganization.belongsTo(User, { foreignKey: 'owner_id' });\nUser.hasOne(Organization, { foreignKey: 'owner_id' });\n\n// 1:M\nProject.hasMany(Task, { foreignKey: 'tasks_pk' });\nTask.belongsTo(Project, { foreignKey: 'tasks_pk' });\n\n// N:M\nUser.belongsToMany(Role, { through: 'user_has_roles', foreignKey: 'user_role_user_id' });\nRole.belongsToMany(User, { through: 'user_has_roles', foreignKey: 'roles_identifier' });\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/docs/manual/other-topics/migrations.md",
    "name": "docs/manual/other-topics/migrations.md",
    "content": "# Migrations\n\nJust like you use [version control](https://en.wikipedia.org/wiki/Version_control) systems such as [Git](https://en.wikipedia.org/wiki/Git) to manage changes in your source code, you can use **migrations** to keep track of changes to the database. With migrations you can transfer your existing database into another state and vice versa: Those state transitions are saved in migration files, which describe how to get to the new state and how to revert the changes in order to get back to the old state.\n\nYou will need the [Sequelize Command-Line Interface (CLI)](https://github.com/sequelize/cli). The CLI ships support for migrations and project bootstrapping.\n\nA Migration in Sequelize is javascript file which exports two functions, `up` and `down`, that dictate how to perform the migration and undo it. You define those functions manually, but you don't call them manually; they will be called automatically by the CLI. In these functions, you should simply perform whatever queries you need, with the help of `sequelize.query` and whichever other methods Sequelize provides to you. There is no extra magic beyond that.\n\n## Installing the CLI\n\nTo install the Sequelize CLI:\n\n```sh\n# using npm\nnpm install --save-dev sequelize-cli\n# using yarn\nyarn add sequelize-cli --dev\n```\n\nFor details see the [CLI GitHub repository](https://github.com/sequelize/cli).\n\n## Project bootstrapping\n\nTo create an empty project you will need to execute `init` command\n\n```sh\n# using npm\nnpx sequelize-cli init\n# using yarn\nyarn sequelize-cli init\n```\n\nThis will create following folders\n\n- `config`, contains config file, which tells CLI how to connect with database\n- `models`, contains all models for your project\n- `migrations`, contains all migration files\n- `seeders`, contains all seed files\n\n### Configuration\n\nBefore continuing further we will need to tell the CLI how to connect to the database. To do that let's open default config file `config/config.json`. It looks something like this:\n\n```json\n{\n  \"development\": {\n    \"username\": \"root\",\n    \"password\": null,\n    \"database\": \"database_development\",\n    \"host\": \"127.0.0.1\",\n    \"dialect\": \"mysql\"\n  },\n  \"test\": {\n    \"username\": \"root\",\n    \"password\": null,\n    \"database\": \"database_test\",\n    \"host\": \"127.0.0.1\",\n    \"dialect\": \"mysql\"\n  },\n  \"production\": {\n    \"username\": \"root\",\n    \"password\": null,\n    \"database\": \"database_production\",\n    \"host\": \"127.0.0.1\",\n    \"dialect\": \"mysql\"\n  }\n}\n```\n\nNote that the Sequelize CLI assumes mysql by default. If you're using another dialect, you need to change the content of the `\"dialect\"` option.\n\nNow edit this file and set correct database credentials and dialect. The keys of the objects (e.g. \"development\") are used on `model/index.js` for matching `process.env.NODE_ENV` (When undefined, \"development\" is a default value).\n\nSequelize will use the default connection port for each dialect (for example, for postgres, it is port 5432). If you need to specify a different port, use the `\"port\"` field (it is not present by default in `config/config.js` but you can simply add it).\n\n**Note:** _If your database doesn't exist yet, you can just call `db:create` command. With proper access it will create that database for you._\n\n## Creating the first Model (and Migration)\n\nOnce you have properly configured CLI config file you are ready to create your first migration. It's as simple as executing a simple command.\n\nWe will use `model:generate` command. This command requires two options:\n\n- `name`: the name of the model;\n- `attributes`: the list of model attributes.\n\nLet's create a model named `User`.\n\n```sh\n# using npm\nnpx sequelize-cli model:generate --name User --attributes firstName:string,lastName:string,email:string\n# using yarn\nyarn sequelize-cli model:generate --name User --attributes firstName:string,lastName:string,email:string\n```\n\nThis will:\n\n- Create a model file `user` in `models` folder;\n- Create a migration file with name like `XXXXXXXXXXXXXX-create-user.js` in `migrations` folder.\n\n**Note:** _Sequelize will only use Model files, it's the table representation. On the other hand, the migration file is a change in that model or more specifically that table, used by CLI. Treat migrations like a commit or a log for some change in database._\n\n## Running Migrations\n\nUntil this step, we haven't inserted anything into the database. We have just created the required model and migration files for our first model, `User`. Now to actually create that table in the database you need to run `db:migrate` command.\n\n```sh\n# using npm\nnpx sequelize-cli db:migrate\n# using yarn\nyarn sequelize-cli db:migrate\n```\n\nThis command will execute these steps:\n\n- Will ensure a table called `SequelizeMeta` in database. This table is used to record which migrations have run on the current database\n- Start looking for any migration files which haven't run yet. This is possible by checking `SequelizeMeta` table. In this case it will run `XXXXXXXXXXXXXX-create-user.js` migration, which we created in last step.\n- Creates a table called `Users` with all columns as specified in its migration file.\n\n## Undoing Migrations\n\nNow our table has been created and saved in the database. With migration you can revert to old state by just running a command.\n\nYou can use `db:migrate:undo`, this command will revert most the recent migration.\n\n```sh\n# using npm\nnpx sequelize-cli db:migrate:undo\n# using yarn\nyarn sequelize-cli db:migrate:undo\n```\n\nYou can revert back to the initial state by undoing all migrations with the `db:migrate:undo:all` command. You can also revert back to a specific migration by passing its name with the `--to` option.\n\n```sh\n# using npm\nnpx sequelize-cli db:migrate:undo:all --to XXXXXXXXXXXXXX-create-posts.js\n# using yarn\nyarn sequelize-cli db:migrate:undo:all --to XXXXXXXXXXXXXX-create-posts.js\n```\n\n### Creating the first Seed\n\nSuppose we want to insert some data into a few tables by default. If we follow up on the previous example we can consider creating a demo user for the `User` table.\n\nTo manage all data migrations you can use seeders. Seed files are some change in data that can be used to populate database tables with sample or test data.\n\nLet's create a seed file which will add a demo user to our `User` table.\n\n```sh\n# using npm\nnpx sequelize-cli seed:generate --name demo-user\n# using yarn\nyarn sequelize-cli seed:generate --name demo-user\n```\n\nThis command will create a seed file in `seeders` folder. File name will look something like `XXXXXXXXXXXXXX-demo-user.js`. It follows the same `up / down` semantics as the migration files.\n\nNow we should edit this file to insert demo user to `User` table.\n\n```js\nmodule.exports = {\n  up: (queryInterface, Sequelize) => {\n    return queryInterface.bulkInsert('Users', [{\n      firstName: 'John',\n      lastName: 'Doe',\n      email: 'example@example.com',\n      createdAt: new Date(),\n      updatedAt: new Date()\n    }]);\n  },\n  down: (queryInterface, Sequelize) => {\n    return queryInterface.bulkDelete('Users', null, {});\n  }\n};\n```\n\n## Running Seeds\n\nIn last step you created a seed file; however, it has not been committed to the database. To do that we run a simple command.\n\n```sh\n# using npm\nnpx sequelize-cli db:seed:all\n# using yarn\nyarn sequelize-cli db:seed:all\n```\n\nThis will execute that seed file and a demo user will be inserted into the `User` table.\n\n**Note:** _Seeder execution history is not stored anywhere, unlike migrations, which use the `SequelizeMeta` table. If you wish to change this behavior, please read the `Storage` section._\n\n## Undoing Seeds\n\nSeeders can be undone if they are using any storage. There are two commands available for that:\n\nIf you wish to undo the most recent seed:\n\n```sh\n# using npm\nnpx sequelize-cli db:seed:undo\n# using yarn\nyarn sequelize-cli db:seed:undo\n```\n\nIf you wish to undo a specific seed:\n\n```sh\n# using npm\nnpx sequelize-cli db:seed:undo --seed name-of-seed-as-in-data\n# using yarn\nyarn sequelize-cli db:seed:undo --seed name-of-seed-as-in-data\n```\n\nIf you wish to undo all seeds:\n\n```sh\n# using npm\nnpx sequelize-cli db:seed:undo:all\n# using yarn\nyarn sequelize-cli db:seed:undo:all\n```\n\n## Migration Skeleton\n\nThe following skeleton shows a typical migration file.\n\n```js\nmodule.exports = {\n  up: (queryInterface, Sequelize) => {\n    // logic for transforming into the new state\n  },\n  down: (queryInterface, Sequelize) => {\n    // logic for reverting the changes\n  }\n}\n```\n\nWe can generate this file using `migration:generate`. This will create `xxx-migration-skeleton.js` in your migration folder.\n\n```sh\n# using npm\nnpx sequelize-cli migration:generate --name migration-skeleton\n# using yarn\nyarn sequelize-cli migration:generate --name migration-skeleton\n```\n\nThe passed `queryInterface` object can be used to modify the database. The `Sequelize` object stores the available data types such as `STRING` or `INTEGER`. Function `up` or `down` should return a `Promise`. Let's look at an example:\n\n```js\nmodule.exports = {\n  up: (queryInterface, Sequelize) => {\n    return queryInterface.createTable('Person', {\n      name: Sequelize.DataTypes.STRING,\n      isBetaMember: {\n        type: Sequelize.DataTypes.BOOLEAN,\n        defaultValue: false,\n        allowNull: false\n      }\n    });\n  },\n  down: (queryInterface, Sequelize) => {\n    return queryInterface.dropTable('Person');\n  }\n};\n```\n\nThe following is an example of a migration that performs two changes in the database, using an automatically-managed transaction to ensure that all instructions are successfully executed or rolled back in case of failure:\n\n```js\nmodule.exports = {\n  up: (queryInterface, Sequelize) => {\n    return queryInterface.sequelize.transaction(t => {\n      return Promise.all([\n        queryInterface.addColumn('Person', 'petName', {\n          type: Sequelize.DataTypes.STRING\n        }, { transaction: t }),\n        queryInterface.addColumn('Person', 'favoriteColor', {\n          type: Sequelize.DataTypes.STRING,\n        }, { transaction: t })\n      ]);\n    });\n  },\n  down: (queryInterface, Sequelize) => {\n    return queryInterface.sequelize.transaction(t => {\n      return Promise.all([\n        queryInterface.removeColumn('Person', 'petName', { transaction: t }),\n        queryInterface.removeColumn('Person', 'favoriteColor', { transaction: t })\n      ]);\n    });\n  }\n};\n```\n\nThe next example is of a migration that has a foreign key. You can use references to specify a foreign key:\n\n```js\nmodule.exports = {\n  up: (queryInterface, Sequelize) => {\n    return queryInterface.createTable('Person', {\n      name: Sequelize.DataTypes.STRING,\n      isBetaMember: {\n        type: Sequelize.DataTypes.BOOLEAN,\n        defaultValue: false,\n        allowNull: false\n      },\n      userId: {\n        type: Sequelize.DataTypes.INTEGER,\n        references: {\n          model: {\n            tableName: 'users',\n            schema: 'schema'\n          },\n          key: 'id'\n        },\n        allowNull: false\n      },\n    });\n  },\n  down: (queryInterface, Sequelize) => {\n    return queryInterface.dropTable('Person');\n  }\n}\n```\n\nThe next example is of a migration that uses async/await where you create an unique index on a new column, with a manually-managed transaction:\n\n```js\nmodule.exports = {\n  async up(queryInterface, Sequelize) {\n    const transaction = await queryInterface.sequelize.transaction();\n    try {\n      await queryInterface.addColumn(\n        'Person',\n        'petName',\n        {\n          type: Sequelize.DataTypes.STRING,\n        },\n        { transaction }\n      );\n      await queryInterface.addIndex(\n        'Person',\n        'petName',\n        {\n          fields: 'petName',\n          unique: true,\n          transaction,\n        }\n      );\n      await transaction.commit();\n    } catch (err) {\n      await transaction.rollback();\n      throw err;\n    }\n  },\n  async down(queryInterface, Sequelize) {\n    const transaction = await queryInterface.sequelize.transaction();\n    try {\n      await queryInterface.removeColumn('Person', 'petName', { transaction });\n      await transaction.commit();\n    } catch (err) {\n      await transaction.rollback();\n      throw err;\n    }\n  }\n};\n```\n\nThe next example is of a migration that creates an unique index composed of multiple fields with a condition, which allows a relation to exist multiple times but only one can satisfy the condition:\n\n```js\nmodule.exports = {\n  up: (queryInterface, Sequelize) => {\n    queryInterface.createTable('Person', {\n      name: Sequelize.DataTypes.STRING,\n      bool: {\n        type: Sequelize.DataTypes.BOOLEAN,\n        defaultValue: false\n      }\n    }).then((queryInterface, Sequelize) => {\n      queryInterface.addIndex(\n        'Person',\n        ['name', 'bool'],\n        {\n          indicesType: 'UNIQUE',\n          where: { bool : 'true' },\n        }\n      );\n    });\n  },\n  down: (queryInterface, Sequelize) => {\n    return queryInterface.dropTable('Person');\n  }\n}\n```\n\n### The `.sequelizerc` file\n\nThis is a special configuration file. It lets you specify the following options that you would usually pass as arguments to CLI:\n\n- `env`: The environment to run the command in\n- `config`: The path to the config file\n- `options-path`: The path to a JSON file with additional options\n- `migrations-path`: The path to the migrations folder\n- `seeders-path`: The path to the seeders folder\n- `models-path`: The path to the models folder\n- `url`: The database connection string to use. Alternative to using --config files\n- `debug`: When available show various debug information\n\nSome scenarios where you can use it:\n\n- You want to override default path to `migrations`, `models`, `seeders` or `config` folder.\n- You want to rename `config.json` to something else like `database.json`\n\nAnd a whole lot more. Let's see how you can use this file for custom configuration.\n\nTo begin, let's create the `.sequelizerc` file in the root directory of your project, with the following content:\n\n```js\n// .sequelizerc\n\nconst path = require('path');\n\nmodule.exports = {\n  'config': path.resolve('config', 'database.json'),\n  'models-path': path.resolve('db', 'models'),\n  'seeders-path': path.resolve('db', 'seeders'),\n  'migrations-path': path.resolve('db', 'migrations')\n};\n```\n\nWith this config you are telling the CLI to:\n\n- Use `config/database.json` file for config settings;\n- Use `db/models` as models folder;\n- Use `db/seeders` as seeders folder;\n- Use `db/migrations` as migrations folder.\n\n### Dynamic configuration\n\nThe configuration file is by default a JSON file called `config.json`. But sometimes you need a dynamic configuration, for example to access environment variables or execute some other code to determine the configuration.\n\nThankfully, the Sequelize CLI can read from both `.json` and `.js` files. This can be setup with `.sequelizerc` file. You just have to provide the path to your `.js` file as the `config` option of your exported object:\n\n```js\nconst path = require('path');\n\nmodule.exports = {\n  'config': path.resolve('config', 'config.js')\n}\n```\n\nNow the Sequelize CLI will load `config/config.js` for getting configuration options.\n\nAn example of `config/config.js` file:\n\n```js\nconst fs = require('fs');\n\nmodule.exports = {\n  development: {\n    username: 'database_dev',\n    password: 'database_dev',\n    database: 'database_dev',\n    host: '127.0.0.1',\n    port: 3306,\n    dialect: 'mysql',\n    dialectOptions: {\n      bigNumberStrings: true\n    }\n  },\n  test: {\n    username: process.env.CI_DB_USERNAME,\n    password: process.env.CI_DB_PASSWORD,\n    database: process.env.CI_DB_NAME,\n    host: '127.0.0.1',\n    port: 3306,\n    dialect: 'mysql',\n    dialectOptions: {\n      bigNumberStrings: true\n    }\n  },\n  production: {\n    username: process.env.PROD_DB_USERNAME,\n    password: process.env.PROD_DB_PASSWORD,\n    database: process.env.PROD_DB_NAME,\n    host: process.env.PROD_DB_HOSTNAME,\n    port: process.env.PROD_DB_PORT,\n    dialect: 'mysql',\n    dialectOptions: {\n      bigNumberStrings: true,\n      ssl: {\n        ca: fs.readFileSync(__dirname + '/mysql-ca-main.crt')\n      }\n    }\n  }\n};\n```\n\nThe example above also shows how to add custom dialect options to the configuration.\n\n### Using Babel\n\nTo enable more modern constructions in your migrations and seeders, you can simply install `babel-register` and require it at the beginning of `.sequelizerc`:\n\n```sh\n# using npm\nnpm i --save-dev babel-register\n# using yarn\nyarn add babel-register --dev\n```\n\n```js\n// .sequelizerc\n\nrequire(\"babel-register\");\n\nconst path = require('path');\n\nmodule.exports = {\n  'config': path.resolve('config', 'config.json'),\n  'models-path': path.resolve('models'),\n  'seeders-path': path.resolve('seeders'),\n  'migrations-path': path.resolve('migrations')\n}\n```\n\nOf course, the outcome will depend upon your babel configuration (such as in a `.babelrc` file). Learn more at [babeljs.io](https://babeljs.io).\n\n### Security tip\n\nUse environment variables for config settings. This is because secrets such as passwords should never be part of the source code (and especially not committed to version control).\n\n### Storage\n\nThere are three types of storage that you can use: `sequelize`, `json`, and `none`.\n\n- `sequelize` : stores migrations and seeds in a table on the sequelize database\n- `json` : stores migrations and seeds on a json file\n- `none` : does not store any migration/seed\n\n#### Migration Storage\n\nBy default the CLI will create a table in your database called `SequelizeMeta` containing an entry for each executed migration. To change this behavior, there are three options you can add to the configuration file. Using `migrationStorage`, you can choose the type of storage to be used for migrations. If you choose `json`, you can specify the path of the file using `migrationStoragePath` or the CLI will write to the file `sequelize-meta.json`. If you want to keep the information in the database, using `sequelize`, but want to use a different table, you can change the table name using `migrationStorageTableName`. Also you can define a different schema for the `SequelizeMeta` table by providing the `migrationStorageTableSchema` property.\n\n```json\n{\n  \"development\": {\n    \"username\": \"root\",\n    \"password\": null,\n    \"database\": \"database_development\",\n    \"host\": \"127.0.0.1\",\n    \"dialect\": \"mysql\",\n\n    // Use a different storage type. Default: sequelize\n    \"migrationStorage\": \"json\",\n\n    // Use a different file name. Default: sequelize-meta.json\n    \"migrationStoragePath\": \"sequelizeMeta.json\",\n\n    // Use a different table name. Default: SequelizeMeta\n    \"migrationStorageTableName\": \"sequelize_meta\",\n\n    // Use a different schema for the SequelizeMeta table\n    \"migrationStorageTableSchema\": \"custom_schema\"\n  }\n}\n```\n\n**Note:** _The `none` storage is not recommended as a migration storage. If you decide to use it, be aware of the implications of having no record of what migrations did or didn't run._\n\n#### Seed Storage\n\nBy default the CLI will not save any seed that is executed. If you choose to change this behavior (!), you can use `seederStorage` in the configuration file to change the storage type. If you choose `json`, you can specify the path of the file using `seederStoragePath` or the CLI will write to the file `sequelize-data.json`. If you want to keep the information in the database, using `sequelize`, you can specify the table name using `seederStorageTableName`, or it will default to `SequelizeData`.\n\n```json\n{\n  \"development\": {\n    \"username\": \"root\",\n    \"password\": null,\n    \"database\": \"database_development\",\n    \"host\": \"127.0.0.1\",\n    \"dialect\": \"mysql\",\n    // Use a different storage. Default: none\n    \"seederStorage\": \"json\",\n    // Use a different file name. Default: sequelize-data.json\n    \"seederStoragePath\": \"sequelizeData.json\",\n    // Use a different table name. Default: SequelizeData\n    \"seederStorageTableName\": \"sequelize_data\"\n  }\n}\n```\n\n### Configuration Connection String\n\nAs an alternative to the `--config` option with configuration files defining your database, you can use the `--url` option to pass in a connection string. For example:\n\n```sh\n# using npm\nnpx sequelize-cli db:migrate --url 'mysql://root:password@mysql_host.com/database_name'\n# using yarn\nyarn sequelize-cli db:migrate --url 'mysql://root:password@mysql_host.com/database_name'\n```\n\n### Programmatic usage\n\nSequelize has a sister library called [umzug](https://github.com/sequelize/umzug) for programmatically handling execution and logging of migration tasks.\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/docs/manual/other-topics/typescript.md",
    "name": "docs/manual/other-topics/typescript.md",
    "content": "# TypeScript\n\nSequelize provides its own TypeScript definitions.\n\nPlease note that only **TypeScript >= 4.1** is supported.\nOur TypeScript support does not follow SemVer. We will support TypeScript releases for at least one year, after which they may be dropped in a SemVer MINOR release.\n\nAs Sequelize heavily relies on runtime property assignments, TypeScript won't be very useful out of the box.\nA decent amount of manual type declarations are needed to make models workable.\n\n## Installation\n\nIn order to avoid installation bloat for non TS users, you must install the following typing packages manually:\n\n- `@types/node` (this is universally required in node projects)\n- `@types/validator`\n\n## Usage\n\n**Important**: You must use `declare` on your class properties typings to ensure TypeScript does not emit those class properties.\nSee [Caveat with Public Class Fields](./model-basics.html#caveat-with-public-class-fields)\n\nSequelize Models accept two generic types to define what the model's Attributes & Creation Attributes are like:\n\n```typescript\nimport { Model, Optional } from 'sequelize';\n\n// We don't recommend doing this. Read on for the new way of declaring Model typings.\n\ntype UserAttributes = {\n  id: number,\n  name: string,\n  // other attributes...\n};\n\n// we're telling the Model that 'id' is optional\n// when creating an instance of the model (such as using Model.create()).\ntype UserCreationAttributes = Optional<UserAttributes, 'id'>;\n\nclass User extends Model<UserAttributes, UserCreationAttributes> {\n  declare id: number;\n  declare string: number;\n  // other attributes...\n}\n```\n\nThis solution is verbose. Sequelize >=6.14.0 provides new utility types that will drastically reduce the amount\nof boilerplate necessary: `InferAttributes`, and `InferCreationAttributes`. They will extract Attribute typings\ndirectly from the Model:\n\n```typescript\nimport { Model, InferAttributes, InferCreationAttributes, CreationOptional } from 'sequelize';\n\n// order of InferAttributes & InferCreationAttributes is important.\nclass User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n  // 'CreationOptional' is a special type that marks the field as optional\n  // when creating an instance of the model (such as using Model.create()).\n  declare id: CreationOptional<number>;\n  declare string: number;\n  // other attributes...\n}\n```\n\nImportant things to know about `InferAttributes` & `InferCreationAttributes` work: They will select all declared properties of the class except:\n\n- Static fields and methods.\n- Methods (anything whose type is a function).\n- Those whose type uses the branded type `NonAttribute`.\n- Those excluded by using AttributesOf like this: `InferAttributes<User, { omit: 'properties' | 'to' | 'omit' }>`.\n- Those declared by the Model superclass (but not intermediary classes!).\n  If one of your attributes shares the same name as one of the properties of `Model`, change its name.\n  Doing this is likely to cause issues anyway.\n- Getter & setters are not automatically excluded. Set their return / parameter type to `NonAttribute`,\n  or add them to `omit` to exclude them.\n\n`InferCreationAttributes` works the same way as `AttributesOf` with one exception: Properties typed using the `CreationOptional` type\nwill be marked as optional.\n\nYou only need to use `CreationOptional` & `NonAttribute` on class instance fields or getters.\n\nExample of a minimal TypeScript project with strict type-checking for attributes:\n\n[//]: # (NOTE for maintainers: Keep the following code in sync with `/types/test/typescriptDocs/ModelInit.ts` to ensure it typechecks correctly.)\n\n```typescript\nimport {\n  Association, DataTypes, HasManyAddAssociationMixin, HasManyCountAssociationsMixin,\n  HasManyCreateAssociationMixin, HasManyGetAssociationsMixin, HasManyHasAssociationMixin,\n  HasManySetAssociationsMixin, HasManyAddAssociationsMixin, HasManyHasAssociationsMixin,\n  HasManyRemoveAssociationMixin, HasManyRemoveAssociationsMixin, Model, ModelDefined, Optional,\n  Sequelize, InferAttributes, InferCreationAttributes, CreationOptional, NonAttribute\n} from 'sequelize';\n\nconst sequelize = new Sequelize('mysql://root:asd123@localhost:3306/mydb');\n\n// 'projects' is excluded as it's not an attribute, it's an association.\nclass User extends Model<InferAttributes<User, { omit: 'projects' }>, InferCreationAttributes<User, { omit: 'projects' }>> {\n  // id can be undefined during creation when using `autoIncrement`\n  declare id: CreationOptional<number>;\n  declare name: string;\n  declare preferredName: string | null; // for nullable fields\n\n  // timestamps!\n  // createdAt can be undefined during creation\n  declare createdAt: CreationOptional<Date>;\n  // updatedAt can be undefined during creation\n  declare updatedAt: CreationOptional<Date>;\n\n  // Since TS cannot determine model association at compile time\n  // we have to declare them here purely virtually\n  // these will not exist until `Model.init` was called.\n  declare getProjects: HasManyGetAssociationsMixin<Project>; // Note the null assertions!\n  declare addProject: HasManyAddAssociationMixin<Project, number>;\n  declare addProjects: HasManyAddAssociationsMixin<Project, number>;\n  declare setProjects: HasManySetAssociationsMixin<Project, number>;\n  declare removeProject: HasManyRemoveAssociationMixin<Project, number>;\n  declare removeProjects: HasManyRemoveAssociationsMixin<Project, number>;\n  declare hasProject: HasManyHasAssociationMixin<Project, number>;\n  declare hasProjects: HasManyHasAssociationsMixin<Project, number>;\n  declare countProjects: HasManyCountAssociationsMixin;\n  declare createProject: HasManyCreateAssociationMixin<Project, 'ownerId'>;\n\n  // You can also pre-declare possible inclusions, these will only be populated if you\n  // actively include a relation.\n  declare projects?: NonAttribute<Project[]>; // Note this is optional since it's only populated when explicitly requested in code\n\n  // getters that are not attributes should be tagged using NonAttribute\n  // to remove them from the model's Attribute Typings.\n  get fullName(): NonAttribute<string> {\n    return this.name;\n  }\n\n  declare static associations: {\n    projects: Association<User, Project>;\n  };\n}\n\nclass Project extends Model<\n  InferAttributes<Project>,\n  InferCreationAttributes<Project>\n> {\n  // id can be undefined during creation when using `autoIncrement`\n  declare id: CreationOptional<number>;\n  declare ownerId: number;\n  declare name: string;\n\n  // `owner` is an eagerly-loaded association.\n  // We tag it as `NonAttribute`\n  declare owner?: NonAttribute<User>;\n\n  // createdAt can be undefined during creation\n  declare createdAt: CreationOptional<Date>;\n  // updatedAt can be undefined during creation\n  declare updatedAt: CreationOptional<Date>;\n}\n\nclass Address extends Model<\n  InferAttributes<Address>,\n  InferCreationAttributes<Address>\n> {\n  declare userId: number;\n  declare address: string;\n\n  // createdAt can be undefined during creation\n  declare createdAt: CreationOptional<Date>;\n  // updatedAt can be undefined during creation\n  declare updatedAt: CreationOptional<Date>;\n}\n\nProject.init(\n  {\n    id: {\n      type: DataTypes.INTEGER.UNSIGNED,\n      autoIncrement: true,\n      primaryKey: true\n    },\n    ownerId: {\n      type: DataTypes.INTEGER.UNSIGNED,\n      allowNull: false\n    },\n    name: {\n      type: new DataTypes.STRING(128),\n      allowNull: false\n    },\n    createdAt: DataTypes.DATE,\n    updatedAt: DataTypes.DATE,\n  },\n  {\n    sequelize,\n    tableName: 'projects'\n  }\n);\n\nUser.init(\n  {\n    id: {\n      type: DataTypes.INTEGER.UNSIGNED,\n      autoIncrement: true,\n      primaryKey: true\n    },\n    name: {\n      type: new DataTypes.STRING(128),\n      allowNull: false\n    },\n    preferredName: {\n      type: new DataTypes.STRING(128),\n      allowNull: true\n    },\n    createdAt: DataTypes.DATE,\n    updatedAt: DataTypes.DATE,\n  },\n  {\n    tableName: 'users',\n    sequelize // passing the `sequelize` instance is required\n  }\n);\n\nAddress.init(\n  {\n    userId: {\n      type: DataTypes.INTEGER.UNSIGNED\n    },\n    address: {\n      type: new DataTypes.STRING(128),\n      allowNull: false\n    },\n    createdAt: DataTypes.DATE,\n    updatedAt: DataTypes.DATE,\n  },\n  {\n    tableName: 'address',\n    sequelize // passing the `sequelize` instance is required\n  }\n);\n\n// You can also define modules in a functional way\ninterface NoteAttributes {\n  id: number;\n  title: string;\n  content: string;\n}\n\n// You can also set multiple attributes optional at once\ntype NoteCreationAttributes = Optional<NoteAttributes, 'id' | 'title'>;\n\n// And with a functional approach defining a module looks like this\nconst Note: ModelDefined<\n  NoteAttributes,\n  NoteCreationAttributes\n> = sequelize.define(\n  'Note',\n  {\n    id: {\n      type: DataTypes.INTEGER.UNSIGNED,\n      autoIncrement: true,\n      primaryKey: true\n    },\n    title: {\n      type: new DataTypes.STRING(64),\n      defaultValue: 'Unnamed Note'\n    },\n    content: {\n      type: new DataTypes.STRING(4096),\n      allowNull: false\n    }\n  },\n  {\n    tableName: 'notes'\n  }\n);\n\n// Here we associate which actually populates out pre-declared `association` static and other methods.\nUser.hasMany(Project, {\n  sourceKey: 'id',\n  foreignKey: 'ownerId',\n  as: 'projects' // this determines the name in `associations`!\n});\n\nAddress.belongsTo(User, { targetKey: 'id' });\nUser.hasOne(Address, { sourceKey: 'id' });\n\nasync function doStuffWithUser() {\n  const newUser = await User.create({\n    name: 'Johnny',\n    preferredName: 'John',\n  });\n  console.log(newUser.id, newUser.name, newUser.preferredName);\n\n  const project = await newUser.createProject({\n    name: 'first!'\n  });\n\n  const ourUser = await User.findByPk(1, {\n    include: [User.associations.projects],\n    rejectOnEmpty: true // Specifying true here removes `null` from the return type!\n  });\n\n  // Note the `!` null assertion since TS can't know if we included\n  // the model or not\n  console.log(ourUser.projects![0].name);\n}\n\n(async () => {\n  await sequelize.sync();\n  await doStuffWithUser();\n})();\n```\n\n### Usage without strict types for attributes\n\nThe typings for Sequelize v5 allowed you to define models without specifying types for the attributes. This is still possible for backwards compatibility and for cases where you feel strict typing for attributes isn't worth it.\n\n[//]: # (NOTE for maintainers: Keep the following code in sync with `typescriptDocs/ModelInitNoAttributes.ts` to ensure it typechecks correctly.)\n\n```ts\nimport { Sequelize, Model, DataTypes } from \"sequelize\";\n\nconst sequelize = new Sequelize(\"mysql://root:asd123@localhost:3306/mydb\");\n\nclass User extends Model {\n  declare id: number;\n  declare name: string;\n  declare preferredName: string | null;\n}\n\nUser.init(\n  {\n    id: {\n      type: DataTypes.INTEGER.UNSIGNED,\n      autoIncrement: true,\n      primaryKey: true,\n    },\n    name: {\n      type: new DataTypes.STRING(128),\n      allowNull: false,\n    },\n    preferredName: {\n      type: new DataTypes.STRING(128),\n      allowNull: true,\n    },\n  },\n  {\n    tableName: \"users\",\n    sequelize, // passing the `sequelize` instance is required\n  }\n);\n\nasync function doStuffWithUserModel() {\n  const newUser = await User.create({\n    name: \"Johnny\",\n    preferredName: \"John\",\n  });\n  console.log(newUser.id, newUser.name, newUser.preferredName);\n\n  const foundUser = await User.findOne({ where: { name: \"Johnny\" } });\n  if (foundUser === null) return;\n  console.log(foundUser.name);\n}\n```\n\n## Usage of `sequelize.define`\n\nIn Sequelize versions before v5, the default way of defining a model involved using `sequelize.define`. It's still possible to define models with that, and you can also add typings to these models using interfaces.\n\n[//]: # (NOTE for maintainers: Keep the following code in sync with `typescriptDocs/Define.ts` to ensure it typechecks correctly.)\n\n```ts\nimport { Sequelize, Model, DataTypes, Optional } from \"sequelize\";\n\nconst sequelize = new Sequelize(\"mysql://root:asd123@localhost:3306/mydb\");\n\n// We recommend you declare an interface for the attributes, for stricter typechecking\ninterface UserAttributes {\n  id: number;\n  name: string;\n}\n\n// Some fields are optional when calling UserModel.create() or UserModel.build()\ninterface UserCreationAttributes extends Optional<UserAttributes, \"id\"> {}\n\n// We need to declare an interface for our model that is basically what our class would be\ninterface UserInstance\n  extends Model<UserAttributes, UserCreationAttributes>,\n    UserAttributes {}\n\nconst UserModel = sequelize.define<UserInstance>(\"User\", {\n  id: {\n    primaryKey: true,\n    type: DataTypes.INTEGER.UNSIGNED,\n  },\n  name: {\n    type: DataTypes.STRING,\n  },\n});\n\nasync function doStuff() {\n  const instance = await UserModel.findByPk(1, {\n    rejectOnEmpty: true,\n  });\n  console.log(instance.id);\n}\n```\n\nIf you're comfortable with somewhat less strict typing for the attributes on a model, you can save some code by defining the Instance to just extend `Model` without any attributes in the generic types.\n\n[//]: # (NOTE for maintainers: Keep the following code in sync with `typescriptDocs/DefineNoAttributes.ts` to ensure it typechecks correctly.)\n\n```ts\nimport { Sequelize, Model, DataTypes } from \"sequelize\";\n\nconst sequelize = new Sequelize(\"mysql://root:asd123@localhost:3306/mydb\");\n\n// We need to declare an interface for our model that is basically what our class would be\ninterface UserInstance extends Model {\n  id: number;\n  name: string;\n}\n\nconst UserModel = sequelize.define<UserInstance>(\"User\", {\n  id: {\n    primaryKey: true,\n    type: DataTypes.INTEGER.UNSIGNED,\n  },\n  name: {\n    type: DataTypes.STRING,\n  },\n});\n\nasync function doStuff() {\n  const instance = await UserModel.findByPk(1, {\n    rejectOnEmpty: true,\n  });\n  console.log(instance.id);\n}\n```\n\n## Utility Types\n\n### Requesting a Model Class\n\n`ModelStatic` is designed to be used to type a Model *class*.\n\nHere is an example of a utility method that requests a Model Class, and returns the list of primary keys defined in that class:\n\n```typescript\nimport { ModelStatic, ModelAttributeColumnOptions, Model, InferAttributes, InferCreationAttributes, CreationOptional } from 'sequelize';\n\n/**\n * Returns the list of attributes that are part of the model's primary key.\n */\nexport function getPrimaryKeyAttributes(model: ModelStatic<any>): ModelAttributeColumnOptions[] {\n  const attributes: ModelAttributeColumnOptions[] = [];\n\n  for (const attribute of Object.values(model.rawAttributes)) {\n    if (attribute.primaryKey) {\n      attributes.push(attribute);\n    }\n  }\n\n  return attributes;\n}\n\nclass User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n  id: CreationOptional<number>;\n}\n\nUser.init({\n  id: {\n    type: DataTypes.INTEGER.UNSIGNED,\n    autoIncrement: true,\n    primaryKey: true\n  },\n}, { sequelize });\n\nconst primaryAttributes = getPrimaryKeyAttributes(User);\n```\n\n### Getting a Model's attributes\n\nIf you need to access the list of attributes of a given model, `Attributes<Model>` and `CreationAttributes<Model>`\nare what you need to use.\n\nThey will return the Attributes (and Creation Attributes) of the Model passed as a parameter.\n\nDon't confuse them with `InferAttributes` and `InferCreationAttributes`. These two utility types should only every be used\nin the definition of a Model to automatically create the list of attributes from the model's public class fields. They only work\nwith class-based model definitions (When using `Model.init`).\n\n`Attributes<Model>` and `CreationAttributes<Model>` will return the list of attributes of any model, no matter how they were created (be it `Model.init` or `Sequelize#define`).\n\nHere is an example of a utility function that requests a Model Class, and the name of an attribute ; and returns the corresponding attribute metadata.\n\n```typescript\nimport {\n  ModelStatic,\n  ModelAttributeColumnOptions,\n  Model,\n  InferAttributes,\n  InferCreationAttributes,\n  CreationOptional,\n  Attributes\n} from 'sequelize';\n\nexport function getAttributeMetadata<M extends Model>(model: ModelStatic<M>, attributeName: keyof Attributes<M>): ModelAttributeColumnOptions {\n  const attribute = model.rawAttributes[attributeName];\n  if (attribute == null) {\n    throw new Error(`Attribute ${attributeName} does not exist on model ${model.name}`);\n  }\n\n  return attribute;\n}\n\nclass User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n  id: CreationOptional<number>;\n}\n\nUser.init({\n  id: {\n    type: DataTypes.INTEGER.UNSIGNED,\n    autoIncrement: true,\n    primaryKey: true\n  },\n}, { sequelize });\n\nconst idAttributeMeta = getAttributeMetadata(User, 'id'); // works!\n\n// @ts-expect-error\nconst nameAttributeMeta = getAttributeMetadata(User, 'name'); // fails because 'name' is not an attribute of User\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/docs/manual/other-topics/resources.md",
    "name": "docs/manual/other-topics/resources.md",
    "content": "# Resources\n\n## Addons & Plugins\n\n### ACL\n\n* [ssacl](https://github.com/pumpupapp/ssacl)\n* [ssacl-attribute-roles](https://github.com/mickhansen/ssacl-attribute-roles)\n* [SequelizeGuard](https://github.com/lotivo/sequelize-acl) - Role, Permission based Authorization for Sequelize.\n\n### Auto Code Generation & Scaffolding\n\n* [meteor modeler](https://www.datensen.com/) - Desktop tool for visual definition of Sequelize models and asssociations.\n* [sequelize-ui](https://github.com/tomjschuster/sequelize-ui) - Online tool for building models, relations and more.\n* [sequelizer](https://github.com/andyforever/sequelizer) - A GUI Desktop App for generating Sequelize models. Support for Mysql, Mariadb, Postgres, Sqlite, Mssql.\n* [sequelize-auto](https://github.com/sequelize/sequelize-auto) Generating models for SequelizeJS via the command line is another choice.\n* [pg-generator](http://www.pg-generator.com/builtin-templates/sequelize/) - Auto generate/scaffold Sequelize models for PostgreSQL database.\n* [sequelizejs-decorators](https://www.npmjs.com/package/sequelizejs-decorators) decorators for composing sequelize models\n\n### Autoloader\n\n* [sequelize-autoload](https://github.com/boxsnake-nodejs/sequelize-autoload) - An autoloader for Sequelize, inspired by [PSR-0](https://www.php-fig.org/psr/psr-0/) and [PSR-4](https://www.php-fig.org/psr/psr-4/).\n\n### Bcrypt\n\n* [sequelize-bcrypt](https://github.com/mattiamalonni/sequelize-bcrypt) - Utility to integrate bcrypt into sequelize models\n\n### Caching\n\n* [sequelize-transparent-cache](https://github.com/DanielHreben/sequelize-transparent-cache)\n\n### Filters\n\n* [sequelize-transforms](https://www.npmjs.com/package/sequelize-transforms) - Add configurable attribute transforms.\n\n### Fixtures / mock data\n\n* [Fixer](https://github.com/olalonde/fixer)\n* [Sequelize-fixtures](https://github.com/domasx2/sequelize-fixtures)\n* [Sequelize-fixture](https://github.com/xudejian/sequelize-fixture)\n\n### Hierarchies\n\n* [sequelize-hierarchy](https://www.npmjs.com/package/sequelize-hierarchy) - Nested hierarchies for Sequelize.\n\n### Historical records / Time travel\n\n* [sequelize-temporal](https://github.com/bonaval/sequelize-temporal) - Temporal tables (aka historical records)\n\n### Joi\n\n* [sequelize-joi](https://github.com/mattiamalonni/sequelize-joi) - Allows specifying [Joi](https://github.com/sideway/joi) validation schema for model attributes in Sequelize.\n\n### Migrations\n\n* [umzug](https://github.com/sequelize/umzug)\n\n### Slugification\n\n* [sequelize-slugify](https://www.npmjs.com/package/sequelize-slugify) - Add slugs to sequelize models\n\n### Tokens\n\n* [sequelize-tokenify](https://github.com/pipll/sequelize-tokenify) - Add unique tokens to sequelize models\n\n### Miscellaneous\n\n* [sequelize-deep-update](https://www.npmjs.com/package/sequelize-deep-update) - Update a sequelize instance and its included associated instances with new properties.\n* [sequelize-noupdate-attributes](https://www.npmjs.com/package/sequelize-noupdate-attributes) - Adds no update/readonly attributes support to models.\n* [sqlcommenter-sequelize](https://github.com/google/sqlcommenter/tree/master/nodejs/sqlcommenter-nodejs/packages/sqlcommenter-sequelize) A [sqlcommenter](https://google.github.io/sqlcommenter/) plugin with [support for Sequelize](https://google.github.io/sqlcommenter/node/sequelize/) to augment SQL statements with comments that can be used later to correlate application code with SQL statements.\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/docs/manual/other-topics/upgrade-to-v6.md",
    "name": "docs/manual/other-topics/upgrade-to-v6.md",
    "content": "# Upgrade to v6\n\nSequelize v6 is the next major release after v5. Below is a list of breaking changes to help you upgrade.\n\n## Breaking Changes\n\n### Support for Node 10 and up\n\nSequelize v6 will only support Node 10 and up [#10821](https://github.com/sequelize/sequelize/issues/10821).\n\n### CLS\n\nYou should now use [cls-hooked](https://github.com/Jeff-Lewis/cls-hooked) package for CLS support.\n\n```js\nconst cls = require(\"cls-hooked\");\nconst namespace = cls.createNamespace(\"....\");\nconst Sequelize = require(\"sequelize\");\n\nSequelize.useCLS(namespace);\n```\n\n### Database Engine Support\n\nWe have updated our minimum supported database engine versions. Using older database engine will show `SEQUELIZE0006` deprecation warning. Please check [ENGINE.md](https://github.com/sequelize/sequelize/blob/main/ENGINE.md) for version table.\n\n### Sequelize\n\n- Bluebird has been removed. Internally all methods are now using async/await. Public API now returns native promises. Thanks to [Andy Edwards](https://github.com/jedwards1211) for this refactor work.\n- `Sequelize.Promise` is no longer available.\n- `sequelize.import` method has been removed. CLI users should update to `sequelize-cli@6`.\n- All instances of QueryInterface and QueryGenerator have been renamed to their lowerCamelCase variants eg. queryInterface and queryGenerator when used as property names on Model and Dialect, the class names remain the same.\n\n### Model\n\n#### `options.returning`\n\nOption `returning: true` will no longer return attributes that are not defined in the model. Old behavior can be achieved by using `returning: ['*']` instead.\n\n#### `Model.changed()`\n\nThis method now tests for equality with [`_.isEqual`](https://lodash.com/docs/4.17.15#isEqual) and is now deep aware for JSON objects. Modifying a nested value for a JSON object won't mark it as changed (since it is still the same object).\n\n```js\nconst instance = await MyModel.findOne();\n\ninstance.myJsonField.someProperty = 12345; // Changed from something else to 12345\nconsole.log(instance.changed()); // false\n\nawait instance.save(); // this will not save anything\n\ninstance.changed(\"myJsonField\", true);\nconsole.log(instance.changed()); // ['myJsonField']\n\nawait instance.save(); // will save\n```\n\n#### `Model.bulkCreate()`\n\nThis method now throws `Sequelize.AggregateError` instead of `Bluebird.AggregateError`. All errors are now exposed as `errors` key.\n\n#### `Model.upsert()`\n\nNative upsert is now supported for all dialects.\n\n```js\nconst [instance, created] = await MyModel.upsert({});\n```\n\nSignature for this method has been changed to `Promise<Model,boolean | null>`. First index contains upserted `instance`, second index contains a boolean (or `null`) indicating if record was created or updated. For SQLite/Postgres, `created` value will always be `null`.\n\n- MySQL - Implemented with ON DUPLICATE KEY UPDATE\n- PostgreSQL - Implemented with ON CONFLICT DO UPDATE\n- SQLite - Implemented with ON CONFLICT DO UPDATE\n- MSSQL - Implemented with MERGE statement\n\n_<ins>Note for Postgres users:</ins>_ If upsert payload contains PK field, then PK will be used as the conflict target. Otherwise first unique constraint will be selected as the conflict key.\n\n### QueryInterface\n\n#### `addConstraint`\n\nThis method now only takes 2 parameters, `tableName` and `options`. Previously the second parameter could be a list of column names to apply the constraint to, this list must now be passed as `options.fields` property.\n\n## Changelog\n\n### 6.0.0-beta.7\n\n- docs(associations): belongs to many create with through table\n- docs(query-interface): fix broken links [#12272](https://github.com/sequelize/sequelize/pull/12272)\n- docs(sequelize): omitNull only works for CREATE/UPDATE queries\n- docs: asyncify [#12297](https://github.com/sequelize/sequelize/pull/12297)\n- docs: responsive [#12308](https://github.com/sequelize/sequelize/pull/12308)\n- docs: update feature request template\n- feat(postgres): native upsert [#12301](https://github.com/sequelize/sequelize/pull/12301)\n- feat(sequelize): allow passing dialectOptions.options from url [#12404](https://github.com/sequelize/sequelize/pull/12404)\n- fix(include): check if attributes specified for included through model [#12316](https://github.com/sequelize/sequelize/pull/12316)\n- fix(model.destroy): return 0 with truncate [#12281](https://github.com/sequelize/sequelize/pull/12281)\n- fix(mssql): empty order array generates invalid FETCH statement [#12261](https://github.com/sequelize/sequelize/pull/12261)\n- fix(postgres): parse enums correctly when describing a table [#12409](https://github.com/sequelize/sequelize/pull/12409)\n- fix(query): ensure correct return signature for QueryTypes.RAW [#12305](https://github.com/sequelize/sequelize/pull/12305)\n- fix(query): preserve cls context for logger [#12328](https://github.com/sequelize/sequelize/pull/12328)\n- fix(query-generator): do not generate GROUP BY clause if options.group is empty [#12343](https://github.com/sequelize/sequelize/pull/12343)\n- fix(reload): include default scope [#12399](https://github.com/sequelize/sequelize/pull/12399)\n- fix(types): add Association into OrderItem type [#12332](https://github.com/sequelize/sequelize/pull/12332)\n- fix(types): add clientMinMessages to Options interface [#12375](https://github.com/sequelize/sequelize/pull/12375)\n- fix(types): transactionType in Options [#12377](https://github.com/sequelize/sequelize/pull/12377)\n- fix(types): add support for optional values in \"where\" clauses [#12337](https://github.com/sequelize/sequelize/pull/12337)\n- fix(types): add missing fields to 'FindOrCreateType' [#12338](https://github.com/sequelize/sequelize/pull/12338)\n- fix: add missing sql and parameters properties to some query errors [#12299](https://github.com/sequelize/sequelize/pull/12299)\n- fix: remove custom inspect [#12262](https://github.com/sequelize/sequelize/pull/12262)\n- refactor: cleanup query generators [#12304](https://github.com/sequelize/sequelize/pull/12304)\n\n### 6.0.0-beta.6\n\n- docs(add-constraint): options.fields support\n- docs(association): document uniqueKey for belongs to many [#12166](https://github.com/sequelize/sequelize/pull/12166)\n- docs(association): options.through.where support\n- docs(association): use and instead of 'a nd' [#12191](https://github.com/sequelize/sequelize/pull/12191)\n- docs(association): use correct scope name [#12204](https://github.com/sequelize/sequelize/pull/12204)\n- docs(manuals): avoid duplicate header ids [#12201](https://github.com/sequelize/sequelize/pull/12201)\n- docs(model): correct syntax error in example code [#12137](https://github.com/sequelize/sequelize/pull/12137)\n- docs(query-interface): removeIndex indexNameOrAttributes [#11947](https://github.com/sequelize/sequelize/pull/11947)\n- docs(resources): add sequelize-guard library [#12235](https://github.com/sequelize/sequelize/pull/12235)\n- docs(typescript): fix confusing comments [#12226](https://github.com/sequelize/sequelize/pull/12226)\n- docs(v6-guide): bluebird removal API changes\n- docs: database version support info [#12168](https://github.com/sequelize/sequelize/pull/12168)\n- docs: remove remaining bluebird references [#12167](https://github.com/sequelize/sequelize/pull/12167)\n- feat(belongs-to-many): allow creation of paranoid join tables [#12088](https://github.com/sequelize/sequelize/pull/12088)\n- feat(belongs-to-many): get/has/count for paranoid join table [#12256](https://github.com/sequelize/sequelize/pull/12256)\n- feat(pool): expose maxUses pool config option [#12101](https://github.com/sequelize/sequelize/pull/12101)\n- feat(postgres): minify include aliases over limit [#11940](https://github.com/sequelize/sequelize/pull/11940)\n- feat(sequelize): handle query string host value [#12041](https://github.com/sequelize/sequelize/pull/12041)\n- fix(associations): ensure correct schema on all generated attributes [#12258](https://github.com/sequelize/sequelize/pull/12258)\n- fix(docs/instances): use correct variable for increment [#12087](https://github.com/sequelize/sequelize/pull/12087)\n- fix(include): separate queries are not sub-queries [#12144](https://github.com/sequelize/sequelize/pull/12144)\n- fix(model): fix unchained promise in association logic in bulkCreate [#12163](https://github.com/sequelize/sequelize/pull/12163)\n- fix(model): updateOnDuplicate handles composite keys [#11984](https://github.com/sequelize/sequelize/pull/11984)\n- fix(model.count): distinct without any column generates invalid SQL [#11946](https://github.com/sequelize/sequelize/pull/11946)\n- fix(model.reload): ignore options.where and always use this.where() [#12211](https://github.com/sequelize/sequelize/pull/12211)\n- fix(mssql) insert record failure because of BOOLEAN column type [#12090](https://github.com/sequelize/sequelize/pull/12090)\n- fix(mssql): cast sql_variant in query generator [#11994](https://github.com/sequelize/sequelize/pull/11994)\n- fix(mssql): dont use OUTPUT INSERTED for update without returning [#12260](https://github.com/sequelize/sequelize/pull/12260)\n- fix(mssql): duplicate order in FETCH/NEXT queries [#12257](https://github.com/sequelize/sequelize/pull/12257)\n- fix(mssql): set correct scale for float [#11962](https://github.com/sequelize/sequelize/pull/11962)\n- fix(mssql): tedious v9 requires connect call [#12182](https://github.com/sequelize/sequelize/pull/12182)\n- fix(mssql): use uppercase for engine table and columns [#12212](https://github.com/sequelize/sequelize/pull/12212)\n- fix(pool): show deprecation when engine is not supported [#12218](https://github.com/sequelize/sequelize/pull/12218)\n- fix(postgres): addColumn support ARRAY(ENUM) [#12259](https://github.com/sequelize/sequelize/pull/12259)\n- fix(query): do not bind \\$ used within a whole-word [#12250](https://github.com/sequelize/sequelize/pull/12250)\n- fix(query-generator): handle literal for substring based operators [#12210](https://github.com/sequelize/sequelize/pull/12210)\n- fix(query-interface): allow passing null for query interface insert [#11931](https://github.com/sequelize/sequelize/pull/11931)\n- fix(query-interface): allow sequelize.fn and sequelize.literal in fields of IndexesOptions [#12224](https://github.com/sequelize/sequelize/pull/12224)\n- fix(scope): don't modify original scope definition [#12207](https://github.com/sequelize/sequelize/pull/12207)\n- fix(sqlite): multiple primary keys results in syntax error [#12237](https://github.com/sequelize/sequelize/pull/12237)\n- fix(sync): pass options to all query methods [#12208](https://github.com/sequelize/sequelize/pull/12208)\n- fix(typings): add type_helpers to file list [#12000](https://github.com/sequelize/sequelize/pull/12000)\n- fix(typings): correct Model.init return type [#12148](https://github.com/sequelize/sequelize/pull/12148)\n- fix(typings): fn is assignable to where [#12040](https://github.com/sequelize/sequelize/pull/12040)\n- fix(typings): getForeignKeysForTables argument definition [#12084](https://github.com/sequelize/sequelize/pull/12084)\n- fix(typings): make between operator accept date ranges [#12162](https://github.com/sequelize/sequelize/pull/12162)\n- refactor(ci): improve database wait script [#12132](https://github.com/sequelize/sequelize/pull/12132)\n- refactor(tsd-test-setup): add & setup dtslint [#11879](https://github.com/sequelize/sequelize/pull/11879)\n- refactor: move all dialect conditional logic into subclass [#12217](https://github.com/sequelize/sequelize/pull/12217)\n- refactor: remove sequelize.import helper [#12175](https://github.com/sequelize/sequelize/pull/12175)\n- refactor: use native versions [#12159](https://github.com/sequelize/sequelize/pull/12159)\n- refactor: use object spread instead of Object.assign [#12213](https://github.com/sequelize/sequelize/pull/12213)\n\n### 6.0.0-beta.5\n\n- fix(find-all): throw on empty attributes [#11867](https://github.com/sequelize/sequelize/pull/11867)\n- fix(types): `queryInterface.addIndex` [#11844](https://github.com/sequelize/sequelize/pull/11844)\n- fix(types): `plain` option in `sequelize.query` [#11596](https://github.com/sequelize/sequelize/pull/11596)\n- fix(types): correct overloaded method order [#11727](https://github.com/sequelize/sequelize/pull/11727)\n- fix(types): `comparator` arg of `Sequelize.where` [#11843](https://github.com/sequelize/sequelize/pull/11843)\n- fix(types): fix BelongsToManyGetAssociationsMixinOptions [#11818](https://github.com/sequelize/sequelize/pull/11818)\n- fix(types): adds `hooks` to `CreateOptions` [#11736](https://github.com/sequelize/sequelize/pull/11736)\n- fix(increment): broken queries [#11852](https://github.com/sequelize/sequelize/pull/11852)\n- fix(associations): gets on many-to-many with non-primary target key [#11778](https://github.com/sequelize/sequelize11778/pull/)\n- fix: properly select SRID if present [#11763](https://github.com/sequelize/sequelize/pull/11763)\n- feat(sqlite): automatic path provision for `options.storage` [#11853](https://github.com/sequelize/sequelize/pull/11853)\n- feat(postgres): `idle_in_transaction_session_timeout` connection option [#11775](https://github.com/sequelize/sequelize11775/pull/)\n- feat(index): improve to support multiple fields with operator [#11934](https://github.com/sequelize/sequelize/pull/11934)\n- docs(transactions): fix addIndex example and grammar [#11759](https://github.com/sequelize/sequelize/pull/11759)\n- docs(raw-queries): remove outdated info [#11833](https://github.com/sequelize/sequelize/pull/11833)\n- docs(optimistic-locking): fix missing manual [#11850](https://github.com/sequelize/sequelize/pull/11850)\n- docs(model): findOne return value for empty result [#11762](https://github.com/sequelize/sequelize/pull/11762)\n- docs(model-querying-basics.md): add some commas [#11891](https://github.com/sequelize/sequelize/pull/11891)\n- docs(manuals): fix missing models-definition page [#11838](https://github.com/sequelize/sequelize/pull/11838)\n- docs(manuals): extensive rewrite [#11825](https://github.com/sequelize/sequelize/pull/11825)\n- docs(dialect-specific): add MSSQL domain auth example [#11799](https://github.com/sequelize/sequelize/pull/11799)\n- docs(associations): fix typos in assocs manual [#11888](https://github.com/sequelize/sequelize/pull/11888)\n- docs(associations): fix typo [#11869](https://github.com/sequelize/sequelize/pull/11869)\n\n### 6.0.0-beta.4\n\n- feat(sync): allow to bypass drop statements when sync with alter enabled [#11708](https://github.com/sequelize/sequelize/pull/11708)\n- fix(model): injectDependentVirtualAttrs on included models [#11713](https://github.com/sequelize/sequelize/pull/11713)\n- fix(model): generate ON CONFLICT ... DO UPDATE correctly [#11666](https://github.com/sequelize/sequelize/pull/11666)\n- fix(mssql): optimize formatError RegEx [#11725](https://github.com/sequelize/sequelize/pull/11725)\n- fix(types): add getForeignKeyReferencesForTable type [#11738](https://github.com/sequelize/sequelize/pull/11738)\n- fix(types): add 'restore' hooks to types [#11730](https://github.com/sequelize/sequelize/pull/11730)\n- fix(types): added 'fieldMaps' to QueryOptions typings [#11702](https://github.com/sequelize/sequelize/pull/11702)\n- fix(types): add isSoftDeleted to Model [#11628](https://github.com/sequelize/sequelize/pull/11628)\n- fix(types): fix upsert typing [#11674](https://github.com/sequelize/sequelize/pull/11674)\n- fix(types): specified 'this' for getters and setters in fields [#11648](https://github.com/sequelize/sequelize/pull/11648)\n- fix(types): add paranoid to UpdateOptions interface [#11647](https://github.com/sequelize/sequelize/pull/11647)\n- fix(types): include 'as' in IncludeThroughOptions definition [#11624](https://github.com/sequelize/sequelize/pull/11624)\n- fix(types): add Includeable to IncludeOptions.include type [#11622](https://github.com/sequelize/sequelize/pull/11622)\n- fix(types): transaction lock [#11620](https://github.com/sequelize/sequelize/pull/11620)\n- fix(sequelize.fn): escape dollarsign (#11533) [#11606](https://github.com/sequelize/sequelize/pull/11606)\n- fix(types): add nested to Includeable [#11354](https://github.com/sequelize/sequelize/pull/11354)\n- fix(types): add date to where [#11612](https://github.com/sequelize/sequelize/pull/11612)\n- fix(types): add getDatabaseName (#11431) [#11614](https://github.com/sequelize/sequelize/pull/11614)\n- fix(types): beforeDestroy [#11618](https://github.com/sequelize/sequelize/pull/11618)\n- fix(types): query-interface table schema [#11582](https://github.com/sequelize/sequelize/pull/11582)\n- docs: README.md [#11698](https://github.com/sequelize/sequelize/pull/11698)\n- docs(sequelize): detail options.retry usage [#11643](https://github.com/sequelize/sequelize/pull/11643)\n- docs: clarify logging option in Sequelize constructor [#11653](https://github.com/sequelize/sequelize/pull/11653)\n- docs(migrations): fix syntax error in example [#11626](https://github.com/sequelize/sequelize/pull/11626)\n- docs: describe logging option [#11654](https://github.com/sequelize/sequelize/pull/11654)\n- docs(transaction): fix typo [#11659](https://github.com/sequelize/sequelize/pull/11659)\n- docs(hooks): add info about belongs-to-many [#11601](https://github.com/sequelize/sequelize/pull/11601)\n- docs(associations): fix typo [#11592](https://github.com/sequelize/sequelize/pull/11592)\n\n### 6.0.0-beta.3\n\n- feat: support cls-hooked / tests [#11584](https://github.com/sequelize/sequelize/pull/11584)\n\n### 6.0.0-beta.2\n\n- feat(postgres): change returning option to only return model attributes [#11526](https://github.com/sequelize/sequelize/pull/11526)\n- fix(associations): allow binary key for belongs-to-many [#11578](https://github.com/sequelize/sequelize/pull/11578)\n- fix(postgres): always replace returning statement for upsertQuery\n- fix(model): make .changed() deep aware [#10851](https://github.com/sequelize/sequelize/pull/10851)\n- change: use node 10 [#11580](https://github.com/sequelize/sequelize/pull/11580)\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/docs/manual/other-topics/upgrade-to-v7.md",
    "name": "docs/manual/other-topics/upgrade-to-v7.md",
    "content": "# Upgrade to v7\n\nSequelize v7 is the next major release after v6. Below is a list of breaking changes to help you upgrade.\n\n## Breaking Changes\n\n### Support for Node 12 and up\n\nSequelize v7 will only support those versions of Node.js that are compatible with the ES module specification,\nnamingly version 12 and upwards [#5](https://github.com/sequelize/meetings/issues/5).\n\n### TypeScript conversion\n\nOne of the major foundational code changes of v7 is the migration to TypeScript.\nAs a result, the manual typings that were formerly best-effort guesses on top of the JavaScript code base,\nhave been removed and all typings are now directly retrieved from the actual TypeScript code.\nYou'll likely find many tiny differences which however should be easy to fix.\n\n### Changes to `ConnectionManager`\n\n*This only impacts you if you used `ConnectionManager` directly.*\n\n`ConnectionManager#getConnection`: The `type` option now accepts `'read' | 'write'` instead of `'SELECT' | any`.\nIt was already documented as such in v6, but the implementation did not match the documentation.\n\n```typescript\n// Instead of doing this:\nsequelize.connectionManager.getConnection({ type: 'SELECT' });\n\n// Do this:\nsequelize.connectionManager.getConnection({ type: 'read' });\n```\n\n### Microsoft SQL Server Support\n\nSequelize v7 fully supports MS SQL Server 2017 (version 14) onwards, up from 2012 (version 13) in\nSequelize v6, as this matches Microsoft's own [mainstream support](\nhttps://docs.microsoft.com/en-us/sql/sql-server/end-of-support/sql-server-end-of-life-overview?view=sql-server-ver15#lifecycle-dates).\n\n### Overridden Model methods won't be called internally\n\n`Model.findOne` and `Model.findAll` are used respectively by `Model.findByPk` and `Model.findOne`.\nThis is considered an implementation detail and as such, starting with Sequelize v7,\noverrides of either of these methods will not be called internally by `Model.findByPk` or `Model.findOne`.\n\nIn other words, doing this won't break:\n\n```typescript\nclass User extends Model {\n  static findOne() {\n    throw new Error('Do not call findOne');\n  }\n}\n\n// this would have thrown \"Do not call findOne\" in v6\n// but it works in v7\nUser.findByPk(1);\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/docs/manual/other-topics/whos-using.md",
    "name": "docs/manual/other-topics/whos-using.md",
    "content": "# Who's using sequelize?\n\n[![Walmart labs logo](asset/walmart-labs-logo.png)](http://www.walmartlabs.com/)\n\n> ... we are avid users of sequelize (and have been for the past 18 months) (Feb 2017)\n\n<hr />\n\n[![Snaplytics logo](asset/logo-snaplytics-green.png)](https://snaplytics.io)\n\n> We've been using sequelize since we started in the beginning of 2015. We use it for our graphql servers (in connection with [graphql-sequelize](http://github.com/mickhansen/graphql-sequelize)), and for all our background workers.\n\n<hr />\n\n[![Connected Cars logo](asset/connected-cars.png)](https://connectedcars.io/)\n\n<hr />\n\n[![Bitovi Logo](asset/bitovi-logo.png)](https://bitovi.com)\n\n> We have used Sequelize in enterprise projects for some of our Fortune 100 and Fortune 500 clients.  It is used in deployments that are depended on by hundreds of millions of devices every year.\n\n<hr />\n\n[![ErmesHotels Logo](asset/ermeshotels-logo.png)](https://www.ermeshotels.com)\n\n> Using Sequelize in production for two different apps with 30k+ daily users by 2 years. I doubt there is something better at this moment in terms of productivity and features.\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/docs/manual/other-topics/aws-lambda.md",
    "name": "docs/manual/other-topics/aws-lambda.md",
    "content": "# Using sequelize in AWS Lambda\n\n[AWS Lambda](https://aws.amazon.com/lambda/) is a serverless computing service that allows customers\nto run code without having to worry about the underlying servers. Using `sequelize` in AWS Lambda\ncan be tricky if certain concepts are not properly understood and an appropriate configuration is\nnot used. This guide seeks to clarify some of these concepts so users of the library can properly\nconfigure `sequelize` for AWS Lambda and troubleshoot issues.\n\n## TL;DR\n\nIf you just want to learn how to properly configure `sequelize`\n[connection pooling](./connection-pool.html) for AWS Lambda, all you need to know is that\n`sequelize` connection pooling does not get along well with AWS Lambda's Node.js runtime and it ends\nup causing more problems than it solves. Therefore, the most appropriate configuration is to **use\npooling within the same invocation** and **avoid pooling across invocations** (i.e. close all\nconnections at the end):\n\n```js\nconst { Sequelize } = require(\"sequelize\");\n\nlet sequelize = null;\n\nasync function loadSequelize() {\n  const sequelize = new Sequelize(/* (...) */, {\n    // (...)\n    pool: {\n      /*\n       * Lambda functions process one request at a time but your code may issue multiple queries\n       * concurrently. Be wary that `sequelize` has methods that issue 2 queries concurrently\n       * (e.g. `Model.findAndCountAll()`). Using a value higher than 1 allows concurrent queries to\n       * be executed in parallel rather than serialized. Careful with executing too many queries in\n       * parallel per Lambda function execution since that can bring down your database with an\n       * excessive number of connections.\n       *\n       * Ideally you want to choose a `max` number where this holds true:\n       * max * EXPECTED_MAX_CONCURRENT_LAMBDA_INVOCATIONS < MAX_ALLOWED_DATABASE_CONNECTIONS * 0.8\n       */\n      max: 2,\n      /*\n       * Set this value to 0 so connection pool eviction logic eventually cleans up all connections\n       * in the event of a Lambda function timeout.\n       */\n      min: 0,\n      /*\n       * Set this value to 0 so connections are eligible for cleanup immediately after they're\n       * returned to the pool.\n       */\n      idle: 0,\n      // Choose a small enough value that fails fast if a connection takes too long to be established.\n      acquire: 3000,\n      /*\n       * Ensures the connection pool attempts to be cleaned up automatically on the next Lambda\n       * function invocation, if the previous invocation timed out.\n       */\n      evict: CURRENT_LAMBDA_FUNCTION_TIMEOUT\n    }\n  });\n\n  // or `sequelize.sync()`\n  await sequelize.authenticate();\n\n  return sequelize;\n}\n\nmodule.exports.handler = async function (event, callback) {\n  // re-use the sequelize instance across invocations to improve performance\n  if (!sequelize) {\n    sequelize = await loadSequelize();\n  } else {\n    // restart connection pool to ensure connections are not re-used across invocations\n    sequelize.connectionManager.initPools();\n\n    // restore `getConnection()` if it has been overwritten by `close()`\n    if (sequelize.connectionManager.hasOwnProperty(\"getConnection\")) {\n      delete sequelize.connectionManager.getConnection;\n    }\n  }\n\n  try {\n    return await doSomethingWithSequelize(sequelize);\n  } finally {\n    // close any opened connections during the invocation\n    // this will wait for any in-progress queries to finish before closing the connections\n    await sequelize.connectionManager.close();\n  }\n};\n```\n\n### Using AWS RDS Proxy\n\nIf your are using [AWS RDS](https://aws.amazon.com/rds/) and you are using\n[Aurora](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/rds-proxy.html) or a\n[supported database engine](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-proxy.html),\nthen connect to your database using [AWS RDS Proxy](https://aws.amazon.com/rds/proxy/). This will\nmake sure that opening/closing connections on each invocation is not an expensive operation for\nyour underlying database server.\n\n---\n\nIf you want to understand why you must use sequelize this way in AWS Lambda, continue reading the\nrest of this document:\n\n## The Node.js event loop\n\nThe [Node.js event loop](https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/) is:\n\n> what allows Node.js to perform non-blocking I/O operations — despite the fact that JavaScript is\n> single-threaded —\n\nWhile the event loop implementation is in C++, here's a simplified JavaScript pseudo-implementation\nthat illustrates how Node.js would execute a script named `index.js`:\n\n```js\n// see: https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/\n// see: https://www.youtube.com/watch?v=P9csgxBgaZ8\n// see: https://www.youtube.com/watch?v=PNa9OMajw9w\nconst process = require('process');\n\n/*\n * counter of pending events\n *\n * reference counter is increased for every:\n *\n * 1. scheduled timer: `setTimeout()`, `setInterval()`, etc.\n * 2. scheduled immediate: `setImmediate()`.\n * 3. syscall of non-blocking IO: `require('net').Server.listen()`, etc.\n * 4. scheduled task to the thread pool: `require('fs').WriteStream.write()`, etc.\n *\n * reference counter is decreased for every:\n *\n * 1. elapsed timer\n * 2. executed immediate\n * 3. completed non-blocking IO\n * 4. completed thread pool task\n *\n * references can be explicitly decreased by invoking `.unref()` on some\n * objects like: `require('net').Socket.unref()`\n */\nlet refs = 0;\n\n/*\n * a heap of timers, sorted by next ocurrence\n *\n * whenever `setTimeout()` or `setInterval()` is invoked, a timer gets added here\n */\nconst timersHeap = /* (...) */;\n\n/*\n * a FIFO queue of immediates\n *\n * whenever `setImmediate()` is invoked, it gets added here\n */\nconst immediates = /* (...) */;\n\n/*\n * a FIFO queue of next tick callbacks\n *\n * whenever `require('process').nextTick()` is invoked, the callback gets added here\n */\nconst nextTickCallbacks = [];\n\n/*\n * a heap of Promise-related callbacks, sorted by promise constructors callbacks first,\n * and then resolved/rejected callbacks\n *\n * whenever a new Promise instance is created via `new Promise` or a promise resolves/rejects\n * the appropriate callback (if any) gets added here\n */\nconst promiseCallbacksHeap = /* ... */;\n\nfunction execTicksAndPromises() {\n  while (nextTickCallbacks.length || promiseCallbacksHeap.size()) {\n    // execute all callbacks scheduled with `process.nextTick()`\n    while (nextTickCallbacks.length) {\n      const callback = nextTickCallbacks.shift();\n      callback();\n    }\n\n    // execute all promise-related callbacks\n    while (promiseCallbacksHeap.size()) {\n      const callback = promiseCallbacksHeap.pop();\n      callback();\n    }\n  }\n}\n\ntry {\n  // execute index.js\n  require('./index');\n  execTicksAndPromises();\n\n  do {\n    // timers phase: executes all elapsed timers\n    getElapsedTimerCallbacks(timersHeap).forEach(callback => {\n      callback();\n      execTicksAndPromises();\n    });\n\n    // pending callbacks phase: executes some system operations (like `TCP errors`) that are not\n    //                          executed in the poll phase\n    getPendingCallbacks().forEach(callback => {\n      callback();\n      execTicksAndPromises();\n    })\n\n    // poll phase: gets completed non-blocking I/O events or thread pool tasks and invokes the\n    //             corresponding callbacks; if there are none and there's no pending immediates,\n    //             it blocks waiting for events/completed tasks for a maximum of `maxWait`\n    const maxWait = computeWhenNextTimerElapses(timersHeap);\n    pollForEventsFromKernelOrThreadPool(maxWait, immediates).forEach(callback => {\n      callback();\n      execTicksAndPromises();\n    });\n\n    // check phase: execute available immediates; if an immediate callback invokes `setImmediate()`\n    //              it will be invoked on the next event loop iteration\n    getImmediateCallbacks(immediates).forEach(callback => {\n      callback();\n      execTicksAndPromises();\n    });\n\n    // close callbacks phase: execute special `.on('close')` callbacks\n    getCloseCallbacks().forEach(callback => {\n      callback();\n      execTicksAndPromises();\n    });\n\n    if (refs === 0) {\n      // listeners of this event may execute code that increments `refs`\n      process.emit('beforeExit');\n    }\n  } while (refs > 0);\n} catch (err) {\n  if (!process.listenerCount('uncaughtException')) {\n    // default behavior: print stack and exit with status code 1\n    console.error(err.stack);\n    process.exit(1);\n  } else {\n    // there are listeners: emit the event and exit using `process.exitCode || 0`\n    process.emit('uncaughtException');\n    process.exit();\n  }\n}\n```\n\n## AWS Lambda function handler types in Node.js\n\nAWS Lambda handlers come in two flavors in Node.js:\n\n[Non-async handlers](https://docs.aws.amazon.com/lambda/latest/dg/nodejs-handler.html#nodejs-handler-sync)\n(i.e. `callback`):\n\n```js\nmodule.exports.handler = function (event, context, callback) {\n  try {\n    doSomething();\n    callback(null, \"Hello World!\"); // Lambda returns \"Hello World!\"\n  } catch (err) {\n    // try/catch is not required, uncaught exceptions invoke `callback(err)` implicitly\n    callback(err); // Lambda fails with `err`\n  }\n};\n```\n\n[Async handlers](https://docs.aws.amazon.com/lambda/latest/dg/nodejs-handler.html#nodejs-handler-async)\n(i.e. use `async`/`await` or `Promise`s):\n\n```js\n// async/await\nmodule.exports.handler = async function (event, context) {\n  try {\n    await doSomethingAsync();\n    return \"Hello World!\"; // equivalent of: callback(null, \"Hello World!\");\n  } catch (err) {\n    // try/cath is not required, async functions always return a Promise\n    throw err; // equivalent of: callback(err);\n  }\n};\n\n// Promise\nmodule.exports.handler = function (event, context) {\n  /*\n   * must return a `Promise` to be considered an async handler\n   *\n   * an uncaught exception that prevents a `Promise` to be returned\n   * by the handler will \"downgrade\" the handler to non-async\n   */\n  return Promise.resolve()\n    .then(() => doSomethingAsync())\n    .then(() => \"Hello World!\");\n};\n```\n\nWhile at first glance it seems like async VS non-async handlers are simply a code styling choice,\nthere is a fundamental difference between the two:\n\n- In async handlers, a Lambda function execution finishes when the `Promise` returned by the handler\n  resolves or rejects, regardless of whether the event loop is empty or not.\n- In non-async handlers, a Lambda function execution finishes when one of the following conditions\n  occur:\n  - The event loop is empty\n    ([process `'beforeExit'` event](https://nodejs.org/dist/latest-v12.x/docs/api/process.html#process_event_beforeexit)\n    is used to detect this).\n  - The `callback` argument is invoked and\n    [`context.callbackWaitsForEmptyEventLoop`](https://docs.aws.amazon.com/lambda/latest/dg/nodejs-context.html)\n    is set to `false`.\n\nThis fundamental difference is very important to understand in order to rationalize how `sequelize`\nmay be affected by it. Here are a few examples to illustrate the difference:\n\n```js\n// no callback invoked\nmodule.exports.handler = function () {\n  // Lambda finishes AFTER `doSomething()` is invoked\n  setTimeout(() => doSomething(), 1000);\n};\n\n// callback invoked\nmodule.exports.handler = function (event, context, callback) {\n  // Lambda finishes AFTER `doSomething()` is invoked\n  setTimeout(() => doSomething(), 1000);\n  callback(null, \"Hello World!\");\n};\n\n// callback invoked, context.callbackWaitsForEmptyEventLoop = false\nmodule.exports.handler = function (event, context, callback) {\n  // Lambda finishes BEFORE `doSomething()` is invoked\n  context.callbackWaitsForEmptyEventLoop = false;\n  setTimeout(() => doSomething(), 2000);\n  setTimeout(() => callback(null, \"Hello World!\"), 1000);\n};\n\n// async/await\nmodule.exports.handler = async function () {\n  // Lambda finishes BEFORE `doSomething()` is invoked\n  setTimeout(() => doSomething(), 1000);\n  return \"Hello World!\";\n};\n\n// Promise\nmodule.exports.handler = function () {\n  // Lambda finishes BEFORE `doSomething()` is invoked\n  setTimeout(() => doSomething(), 1000);\n  return Promise.resolve(\"Hello World!\");\n};\n```\n\n## AWS Lambda execution environments (i.e. containers)\n\nAWS Lambda function handlers are invoked by built-in or custom\n[runtimes](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html) which run in\nexecution environments (i.e. containers) that\n[may or may not be re-used](https://aws.amazon.com/blogs/compute/container-reuse-in-lambda/)\nacross invocations. Containers can only process\n[one request at a time](https://docs.aws.amazon.com/lambda/latest/dg/configuration-concurrency.html).\nConcurrent invocations of a Lambda function means that a container instance will be created for each\nconcurrent request.\n\nIn practice, this means that Lambda functions should be designed to be stateless but developers can\nuse state for caching purposes:\n\n```js\nlet sequelize = null;\n\nmodule.exports.handler = async function () {\n  /*\n   * sequelize will already be loaded if the container is re-used\n   *\n   * containers are never re-used when a Lambda function's code change\n   *\n   * while the time elapsed between Lambda invocations is used as a factor to determine whether\n   * a container is re-used, no assumptions should be made of when a container is actually re-used\n   *\n   * AWS does not publicly document the rules of container re-use \"by design\" since containers\n   * can be recycled in response to internal AWS Lambda events (e.g. a Lambda function container\n   * may be recycled even if the function is constanly invoked)\n   */\n  if (!sequelize) {\n    sequelize = await loadSequelize();\n  }\n\n  return await doSomethingWithSequelize(sequelize);\n};\n```\n\nWhen a Lambda function doesn't wait for the event loop to be empty and a container is re-used,\nthe event loop will be \"paused\" until the next invocation occurs. For example:\n\n```js\nlet counter = 0;\n\nmodule.exports.handler = function (event, context, callback) {\n  /*\n   * The first invocation (i.e. container initialized) will:\n   * - log:\n   *   - Fast timeout invoked. Request id: 00000000-0000-0000-0000-000000000000 | Elapsed ms: 5XX\n   * - return: 1\n   *\n   * Wait 3 seconds and invoke the Lambda again. The invocation (i.e. container re-used) will:\n   * - log:\n   *   - Slow timeout invoked. Request id: 00000000-0000-0000-0000-000000000000 | Elapsed ms: 3XXX\n   *   - Fast timeout invoked. Request id: 11111111-1111-1111-1111-111111111111 | Elapsed ms: 5XX\n   * - return: 3\n   */\n  const now = Date.now();\n\n  context.callbackWaitsForEmptyEventLoop = false;\n\n  setTimeout(() => {\n    console.log(\n      \"Slow timeout invoked. Request id:\",\n      context.awsRequestId,\n      \"| Elapsed ms:\",\n      Date.now() - now\n    );\n    counter++;\n  }, 1000);\n\n  setTimeout(() => {\n    console.log(\n      \"Fast timeout invoked. Request id:\",\n      context.awsRequestId,\n      \"| Elapsed ms:\",\n      Date.now() - now\n    );\n    counter++;\n    callback(null, counter);\n  }, 500);\n};\n```\n\n## Sequelize connection pooling in AWS Lambda\n\n`sequelize` uses connection pooling for optimizing usage of database connections. The connection\npool used by `sequelize` is implemented using `setTimeout()` callbacks (which are processed by the\nNode.js event loop).\n\nGiven the fact that AWS Lambda containers process one request at a time, one would be tempted to\nconfigure `sequelize` as follows:\n\n```js\nconst { Sequelize } = require('sequelize');\n\nconst sequelize = new Sequelize(/* (...) */, {\n  // (...)\n  pool: { min: 1, max: 1 }\n});\n```\n\nThis configuration prevents Lambda containers from overwhelming the database server with an\nexcessive number of connections (since each container takes at most 1 connection). It also makes\nsure that the container's connection is not garbage collected when idle so the connection does not\nneed to be re-established when the Lambda container is re-used. Unfortunately, this configuration\npresents a set of issues:\n\n1. Lambdas that wait for the event loop to be empty will always time out. `sequelize` connection\n   pools schedule a `setTimeout` every\n   [`options.pool.evict`](../class/lib/sequelize.js~Sequelize.html#instance-constructor-constructor)\n   ms until **all idle connections have been closed**. However, since `min` is set to `1`, there\n   will always be at least one idle connection in the pool, resulting in an infinite event loop.\n1. Some operations like\n   [`Model.findAndCountAll()`](../class/lib/model.js~Model.html#static-method-findAndCountAll)\n   execute multiple queries asynchronously (e.g.\n   [`Model.count()`](..class/lib/model.js~Model.html#static-method-count) and\n   [`Model.findAll()`](../class/lib/model.js~Model.html#static-method-findAll)). Using a maximum of\n   one connection forces the queries to be exectued serially (rather than in parallel using two\n   connections). While this may be an acceptable performance compromise in order to\n   maintain a manageable number of database connections, long running queries may result in\n   [`ConnectionAcquireTimeoutError`](../class/lib/errors/connection/connection-acquire-timeout-error.js~ConnectionAcquireTimeoutError.html)\n   if a query takes more than the default or configured\n   [`options.pool.acquire`](../class/lib/sequelize.js~Sequelize.html#instance-constructor-constructor)\n   timeout to complete. This is because the serialized query will be stuck waiting on the pool until\n   the connection used by the other query is released.\n1. If the AWS Lambda function times out (i.e. the configured AWS Lambda timeout is exceeded), the\n   Node.js event loop will be \"paused\" regardless of its state. This can cause race conditions that\n   result in connection errors. For example, you may encounter situations where a very expensive\n   query causes a Lambda function to time out, the event loop is \"paused\" before the expensive query\n   finishes and the connection is released back to the pool, and subsequent Lambda invocations fail\n   with a `ConnectionAcquireTimeoutError` if the container is re-used and the connection has not\n   been returned after `options.pool.acquire` ms.\n\nYou can attempt to mitigate issue **#2** by using `{ min: 1, max: 2 }`. However, this will still\nsuffer from issues **#1** and **#3** whilst introducing additional ones:\n\n1. Race conditions may occur where the even loop \"pauses\" before a connection pool eviction callback\n   executes or more than `options.pool.evict` time elapses between Lambda invocations. This can\n   result in timeout errors, handshake errors, and other connection-related errors.\n1. If you use an operation like `Model.findAndCountAll()` and either the underlying `Model.count()`\n   or `Model.findAll()` queries fail, you won't be able to ensure that the other query has finished\n   executing (and the connection is put back into the pool) before the Lambda function execution\n   finishes and the event loop is \"paused\". This can leave connections in a stale state which can\n   result in prematurely closed TCP connections and other connection-related errors.\n\nUsing `{ min: 2, max: 2 }` mitigates additional issue **#1**. However, the configuration still\nsuffers from all the other issues (original **#1**, **#3**, and additional **#2**).\n\n### Detailed race condition example\n\nIn order to make sense of the example, you'll need a bit more context of how certain parts of\nLambda and `sequelize` are implemented.\n\nThe built-in AWS Lambda runtime for `nodejs.12x` is implemented in Node.js. You can access the\nentire source code of the runtime by reading the contents of `/var/runtime/` inside a Node.js Lambda\nfunction. The relevant subset of the code is as follows:\n\n**runtime/Runtime.js**\n\n```js\nclass Runtime {\n  // (...)\n\n  // each iteration is executed in the event loop `check` phase\n  scheduleIteration() {\n    setImmediate(() => this.handleOnce().then(/* (...) */));\n  }\n\n  async handleOnce() {\n    // get next invocation. see: https://docs.aws.amazon.com/lambda/latest/dg/runtimes-api.html#runtimes-api-next\n    let { bodyJson, headers } = await this.client.nextInvocation();\n\n    // prepare `context` handler parameter\n    let invokeContext = new InvokeContext(headers);\n    invokeContext.updateLoggingContext();\n\n    // prepare `callback` handler parameter\n    let [callback, callbackContext] = CallbackContext.build(\n      this.client,\n      invokeContext.invokeId,\n      this.scheduleIteration.bind(this)\n    );\n\n    try {\n      // this listener is subscribed to process.on('beforeExit')\n      // so that when when `context.callbackWaitsForEmptyEventLoop === true`\n      // the Lambda execution finishes after the event loop is empty\n      this._setDefaultExitListener(invokeContext.invokeId);\n\n      // execute handler\n      const result = this.handler(\n        JSON.parse(bodyJson),\n        invokeContext.attachEnvironmentData(callbackContext),\n        callback\n      );\n\n      // finish the execution if the handler is async\n      if (_isPromise(result)) {\n        result\n          .then(callbackContext.succeed, callbackContext.fail)\n          .catch(callbackContext.fail);\n      }\n    } catch (err) {\n      callback(err);\n    }\n  }\n}\n```\n\nThe runtime schedules an iteration at the end of the initialization code:\n\n**runtime/index.js**\n\n```js\n// (...)\n\nnew Runtime(client, handler, errorCallbacks).scheduleIteration();\n```\n\nAll SQL queries invoked by a Lambda handler using `sequelize` are ultimately executed using\n[Sequelize.prototype.query()](../class/lib/sequelize.js~Sequelize.html#instance-method-query).\nThis method is responsible for obtaining a connection from the pool, executing the query, and\nreleasing the connection back to the pool when the query completes. The following snippet shows\na simplification of the method's logic for queries without transactions:\n\n**sequelize.js**\n\n```js\nclass Sequelize {\n  // (...)\n\n  query(sql, options) {\n    // (...)\n\n    const connection = await this.connectionManager.getConnection(options);\n    const query = new this.dialect.Query(connection, this, options);\n\n    try {\n      return await query.run(sql, bindParameters);\n    } finally {\n      await this.connectionManager.releaseConnection(connection);\n    }\n  }\n}\n```\n\nThe field `this.connectionManager` is an instance of a dialect-specific `ConnectionManager` class.\nAll dialect-specific managers inherit from an abstract `ConnectionManager` class which initializes\nthe connection pool and configures it to invoke the dialect-specific class' `connect()` method\neverytime a new connection needs to be created. The following snippet shows a simplification of the\n`mysql` dialect `connect()` method:\n\n**mysql/connection-manager.js**\n\n```js\nclass ConnectionManager {\n  // (...)\n\n  async connect(config) {\n    // (...)\n    return await new Promise((resolve, reject) => {\n      // uses mysql2's `new Connection()`\n      const connection = this.lib.createConnection(connectionConfig);\n\n      const errorHandler = (e) => {\n        connection.removeListener(\"connect\", connectHandler);\n        connection.removeListener(\"error\", connectHandler);\n        reject(e);\n      };\n\n      const connectHandler = () => {\n        connection.removeListener(\"error\", errorHandler);\n        resolve(connection);\n      };\n\n      connection.on(\"error\", errorHandler);\n      connection.once(\"connect\", connectHandler);\n    });\n  }\n}\n```\n\nThe field `this.lib` refers to [`mysql2`](https://www.npmjs.com/package/mysql2) and the function\n`createConnection()` creates a connection by creating an instance of a `Connection` class. The\nrelevant subset of this class is as follows:\n\n**mysql2/connection.js**\n\n```js\nclass Connection extends EventEmitter {\n  constructor(opts) {\n    // (...)\n\n    // create Socket\n    this.stream = /* (...) */;\n\n    // when data is received, clear timeout\n    this.stream.on('data', data => {\n      if (this.connectTimeout) {\n        Timers.clearTimeout(this.connectTimeout);\n        this.connectTimeout = null;\n      }\n      this.packetParser.execute(data);\n    });\n\n    // (...)\n\n    // when handshake is completed, emit the 'connect' event\n    handshakeCommand.on('end', () => {\n      this.emit('connect', handshakeCommand.handshake);\n    });\n\n    // set a timeout to trigger if no data is received on the socket\n    if (this.config.connectTimeout) {\n      const timeoutHandler = this._handleTimeoutError.bind(this);\n      this.connectTimeout = Timers.setTimeout(\n        timeoutHandler,\n        this.config.connectTimeout\n      );\n    }\n  }\n\n  // (...)\n\n  _handleTimeoutError() {\n    if (this.connectTimeout) {\n      Timers.clearTimeout(this.connectTimeout);\n      this.connectTimeout = null;\n    }\n    this.stream.destroy && this.stream.destroy();\n    const err = new Error('connect ETIMEDOUT');\n    err.errorno = 'ETIMEDOUT';\n    err.code = 'ETIMEDOUT';\n    err.syscall = 'connect';\n\n    // this will emit the 'error' event\n    this._handleNetworkError(err);\n  }\n}\n```\n\nBased on the previous code, the following sequence of events shows how a connection pooling\nrace condition with `{ min: 1, max: 1 }` can result with in a `ETIMEDOUT` error:\n\n1. A Lambda invocation is received (new container):\n   1. The event loop enters the `check` phase and `runtime/Runtime.js`'s `handleOnce()` method is\n      invoked.\n      1. The `handleOnce()` method invokes `await this.client.nextInvocation()` and waits.\n   1. The event loop skips the `timers` phase since there no pending timers.\n   1. The event loop enters the `poll` phase and the `handleOnce()` method continues.\n   1. The Lambda handler is invoked.\n   1. The Lambda handler invokes `Model.count()` which invokes `sequelize.js`'s `query()` which\n      invokes `connectionManager.getConnection()`.\n   1. The connection pool initializes a `setTimeout(..., config.pool.acquire)` for `Model.count()`\n      and invokes `mysql/connection-manager.js`'s `connect()` to create a new connection.\n   1. `mysql2/connection.js` creates the TCP socket and initializes a `setTimeout()` for failing\n      the connection with `ETIMEDOUT`.\n   1. The promise returned by the handler rejects (for reasons not detailed here) so the Lambda\n      function execution finishes and the Node.js event loop is \"paused\".\n1. Enough time elapses beween invocations so that:\n   1. `config.pool.acquire` timer elapses.\n   1. `mysql2` connection timer has not elapsed yet but has almost elapsed (i.e. race condition).\n1. A second Lambda invocation is received (container re-used):\n   1. The event loop is \"resumed\".\n   1. The event loop enters the `check` phase and `runtime/Runtime.js`'s `handleOnce()` method is\n      invoked.\n   1. The event loop enters the `timers` phase and the `config.pool.acquire` timer elapses, causing\n      the previous invocation's `Model.count()` promise to reject with\n      `ConnectionAcquireTimeoutError`.\n   1. The event loop enters the `poll` phase and the `handleOnce()` method continues.\n   1. The Lambda handler is invoked.\n   1. The Lambda handler invokes `Model.count()` which invokes `sequelize.js`'s `query()` which\n      invokes `connectionManager.getConnection()`.\n   1. The connection pool initializes a `setTimeout(..., config.pool.acquire)` for `Model.count()`\n      and since `{ max : 1 }` it waits for the pending `connect()` promise to complete.\n   1. The event loop skips the `check` phase since there are no pending immediates.\n   1. **Race condition:** The event loop enters the `timers` phase and the `mysql2` connection\n      timeout elapses, resulting in a `ETIMEDOUT` error that is emitted using\n      `connection.emit('error')`.\n   1. The emitted event rejects the promise in `mysql/connection-manager.js`'s `connect()` which\n      in turn forwards the rejected promise to the `Model.count()` query's promise.\n   1. The lambda function fails with an `ETIMEDOUT` error.\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/docs/manual/other-topics/legal.md",
    "name": "docs/manual/other-topics/legal.md",
    "content": "# Legal Notice\n\n## License\n\nSequelize library is distributed with MIT license. You can find original license [here.](https://github.com/sequelize/sequelize/blob/main/LICENSE)\n\n```text\nMIT License\n\nCopyright (c) 2014-present Sequelize contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n\n## AUTHOR(S)\n\n```text\nMain author:\n\nSascha Depold\nUhlandstr. 160\n10719 Berlin\nsascha [at] depold [dot] com\n[plus] 49 152 [slash] 03878582\n\n```\n\n## INHALTLICHE VERANTWORTUNG\n\n```text\nIch übernehme keine Haftung für ausgehende Links.\nDaher musst du dich bei Problemen an deren Betreiber wenden!\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/docs/manual/moved/associations.md",
    "name": "docs/manual/moved/associations.md",
    "content": "# \\[MOVED\\] Associations\r\n\r\nThe contents of this page were moved to other specialized guides.\r\n\r\nIf you're here, you might be looking for these topics:\r\n\r\n* **Core Concepts**\r\n  * [Associations](assocs.html)\r\n* **Advanced Association Concepts**\r\n  * [Eager Loading](eager-loading.html)\r\n  * [Creating with Associations](creating-with-associations.html)\r\n  * [Advanced M:N Associations](advanced-many-to-many.html)\r\n  * [Polymorphism & Scopes](polymorphism-and-scopes.html)\r\n* **Other Topics**\r\n  * [Naming Strategies](naming-strategies.html)\r\n  * [Constraints & Circularities](constraints-and-circularities.html)",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/docs/manual/moved/data-types.md",
    "name": "docs/manual/moved/data-types.md",
    "content": "# \\[MOVED\\] Data Types\r\n\r\nThe contents of this page were moved to other specialized guides.\r\n\r\nIf you're here, you might be looking for these topics:\r\n\r\n* **Core Concepts**\r\n  * [Model Basics: Data Types](model-basics.html#data-types)\r\n* **Other Topics**\r\n  * [Other Data Types](other-data-types.html)\r\n  * [Extending Data Types](extending-data-types.html)\r\n  * [Dialect-Specific Things](dialect-specific-things.html)",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/docs/manual/moved/models-definition.md",
    "name": "docs/manual/moved/models-definition.md",
    "content": "# \\[MOVED\\] Models Definition\r\n\r\nThe contents of this page were moved to [Model Basics](model-basics.html).\r\n\r\nThe only exception is the guide on `sequelize.import`, which is deprecated and was removed from the docs. However, if you really need it, it was kept here.\r\n\r\n----\r\n\r\n## Deprecated: `sequelize.import`\r\n\r\n> _**Note:** You should not use `sequelize.import`. Please just use [`import`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import), [`import()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#dynamic_imports), or [`require`](https://nodejs.org/api/modules.html#requireid) instead._\r\n>\r\n> _This documentation has been kept just in case you really need to maintain old code that uses it._\r\n\r\n`sequelize.import` can only load [CommonJS](https://nodejs.org/api/modules.html) files, and is not capable of loading [`ecmascript modules`](https://nodejs.org/api/esm.html). Use native `import` if you need to load ecmascript modules.\r\n\r\nYou can store your model definitions in a single file using the `sequelize.import` method. The returned object is exactly the same as defined in the imported file's function. The import is cached, just like `require`, so you won't run into trouble if importing a file more than once.\r\n\r\n```js\r\n// in your server file - e.g. app.js\r\nconst Project = sequelize.import(__dirname + \"/path/to/models/project\");\r\n\r\n// The model definition is done in /path/to/models/project.js\r\nmodule.exports = (sequelize, DataTypes) => {\r\n  return sequelize.define('project', {\r\n    name: DataTypes.STRING,\r\n    description: DataTypes.TEXT\r\n  });\r\n};\r\n```\r\n\r\nThe `import` method can also accept a callback as an argument.\r\n\r\n```js\r\nsequelize.import('project', (sequelize, DataTypes) => {\r\n  return sequelize.define('project', {\r\n    name: DataTypes.STRING,\r\n    description: DataTypes.TEXT\r\n  });\r\n});\r\n```\r\n\r\nThis extra capability is useful when, for example, `Error: Cannot find module` is thrown even though `/path/to/models/project` seems to be correct. Some frameworks, such as Meteor, overload `require`, and might raise an error such as:\r\n\r\n```text\r\nError: Cannot find module '/home/you/meteorApp/.meteor/local/build/programs/server/app/path/to/models/project.js'\r\n```\r\n\r\nThis can be worked around by passing in Meteor's version of `require`:\r\n\r\n```js\r\n// If this fails...\r\nconst AuthorModel = db.import('./path/to/models/project');\r\n\r\n// Try this instead!\r\nconst AuthorModel = db.import('project', require('./path/to/models/project'));\r\n```\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/docs/manual/moved/models-usage.md",
    "name": "docs/manual/moved/models-usage.md",
    "content": "# \\[MOVED\\] Models Usage\r\n\r\nThe contents of this page were moved to other specialized guides.\r\n\r\nIf you're here, you might be looking for these topics:\r\n\r\n* **Core Concepts**\r\n  * [Model Querying - Basics](model-querying-basics.html)\r\n  * [Model Querying - Finders](model-querying-finders.html)\r\n  * [Raw Queries](raw-queries.html)\r\n* **Advanced Association Concepts**\r\n  * [Eager Loading](eager-loading.html)",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/runner/work/sequelize.org/sequelize.org/sequelize/docs/manual/moved/querying.md",
    "name": "docs/manual/moved/querying.md",
    "content": "# \\[MOVED\\] Querying\r\n\r\nThe contents of this page were moved to other specialized guides.\r\n\r\nIf you're here, you might be looking for these topics:\r\n\r\n* **Core Concepts**\r\n  * [Model Querying - Basics](model-querying-basics.html)\r\n  * [Model Querying - Finders](model-querying-finders.html)\r\n  * [Raw Queries](raw-queries.html)\r\n  * [Associations](assocs.html)\r\n* **Other Topics**\r\n  * [Dialect-Specific Things](dialect-specific-things.html)",
    "static": true,
    "access": "public"
  }
]